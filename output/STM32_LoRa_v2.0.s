
output/STM32_LoRa_v2.0.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000190 l    d  .text	00000000 .text
0800aeac l    d  .rodata	00000000 .rodata
0800b3a0 l    d  .ARM	00000000 .ARM
0800b3a8 l    d  .init_array	00000000 .init_array
0800b3ac l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000850 l    d  .bss	00000000 .bss
20005334 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 build/Startup.o
080099f0 l       .text	00000000 Infinite_Loop
08009a08 l       .text	00000000 LoopCopyDataInit
08009a02 l       .text	00000000 CopyDataInit
08009a1a l       .text	00000000 LoopFillZerobss
08009a16 l       .text	00000000 FillZerobss
08009a26 l       .text	00000000 LoopForever
00000000 l    df *ABS*	00000000 x:/arm_none_eabi/10_2020-q4-major/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 crtstuff.c
0800aeac l     O .rodata	00000000 all_implied_fbits
0800ae90 l     O .text	00000000 __EH_FRAME_BEGIN__
08000190 l     F .text	00000000 __do_global_dtors_aux
20000850 l       .bss	00000001 completed.1
0800b3ac l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001b4 l     F .text	00000000 frame_dummy
20000854 l       .bss	00000018 object.0
0800b3a8 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 x:/arm_none_eabi/10_2020-q4-major/bin/../lib/gcc/arm-none-eabi/10.2.1/../../../../arm-none-eabi/lib/thumb/v7e-m+fp/hard/crt0.o
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
200007ec l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 System.c
0800024c l     F .text	00000054 __NVIC_SetPriority
080002a0 l     F .text	00000044 SysTick_Config
00000000 l    df *ABS*	00000000 cli.c
00000000 l    df *ABS*	00000000 gloabal_variables.c
00000000 l    df *ABS*	00000000 main.c
08000d80 l     F .text	0000003c __NVIC_EnableIRQ
08000dbc l     F .text	00000048 __NVIC_DisableIRQ
00000000 l    df *ABS*	00000000 periph_hendlers.c
00000000 l    df *ABS*	00000000 adc.c
080016e8 l     F .text	0000003c __NVIC_EnableIRQ
00000000 l    df *ABS*	00000000 gpio.c
08001d40 l     F .text	0000003c __NVIC_EnableIRQ
20003c08 l       .bss	00000008 temp.0
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 one_wire.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 rcc.c
00000000 l    df *ABS*	00000000 rtc.c
080036e0 l     F .text	0000003c __NVIC_EnableIRQ
0800371c l     F .text	0000003c __NVIC_ClearPendingIRQ
08003758 l     F .text	00000054 __NVIC_SetPriority
00000000 l    df *ABS*	00000000 sdio.c
00000000 l    df *ABS*	00000000 spi.c
00000000 l    df *ABS*	00000000 tim.c
0800580c l     F .text	0000003c __NVIC_EnableIRQ
00000000 l    df *ABS*	00000000 uart.c
0800595c l     F .text	0000003c __NVIC_EnableIRQ
00000000 l    df *ABS*	00000000 delay.c
20003c74 l       .bss	00000004 count
20003c78 l       .bss	00000004 delay_count
20003c7c l       .bss	00000008 flag.1
20003c84 l       .bss	00000020 counter.0
00000000 l    df *ABS*	00000000 dwt.c
20003ca4 l       .bss	00000004 trigger.0
00000000 l    df *ABS*	00000000 formating_output.c
08005e60 l     F .text	0000004e ITM_SendChar
00000000 l    df *ABS*	00000000 low_power.c
00000000 l    df *ABS*	00000000 fat32.c
00000000 l    df *ABS*	00000000 ds18b20.c
00000000 l    df *ABS*	00000000 gsm.c
00000000 l    df *ABS*	00000000 sx126x.c
00000000 l    df *ABS*	00000000 sx1278.c
00000000 l    df *ABS*	00000000 tmp1075.c
00000000 l    df *ABS*	00000000 _arm_muldf3.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfscanf.c
00000000 l    df *ABS*	00000000 nano-vfscanf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 strtol.c
0800a58c l     F .text	00000104 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 strtoul.c
0800a6bc l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800ab34 l     F .text	00000048 std
0800ab88 l     F .text	00000018 __fp_lock
0800aba0 l     F .text	00000018 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 read.c
00000000 l    df *ABS*	00000000 sbrk.c
20005330 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 crtstuff.c
0800b1f8 l     O .rodata	00000000 all_implied_fbits
0800ae90 l     O .text	00000000 __FRAME_END__
00000000 l    df *ABS*	00000000 x:/arm_none_eabi/10_2020-q4-major/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 
0800b3ac l       .init_array	00000000 __init_array_end
0800b3a8 l       .init_array	00000000 __preinit_array_end
0800b3a8 l       .init_array	00000000 __init_array_start
0800b3a8 l       .init_array	00000000 __preinit_array_start
0800168c g     F .text	0000005c RTC_Alarm_IRQHandler
0800ae30 g     F .text	00000010 _malloc_usable_size_r
080099f0  w    F .text	00000002 EXTI2_IRQHandler
08007d68 g     F .text	00000054 SX126x_GetRxBufferStatus
0800a188 g     F .text	000000b4 _scanf_chars
08005b6c g     F .text	0000003c UART_tx_string
080024b4 g     F .text	00000200 I2C_Read_word_u16_St_ReSt
0800a448 g     F .text	0000001a cleanup_glue
0800683c g     F .text	000000b8 GSM_InitGPRS
20000cb0 g     O .bss	000000c4 ow
08009da8 g     F .text	00000024 _lseek_r
080099f0  w    F .text	00000002 DebugMon_Handler
08005c34 g     F .text	00000018 GetMicro
08007d00 g     F .text	0000002e SX126x_SetOCP
080088b2 g     F .text	0000008c TMP1075_set_mode
080089cc g     F .text	00000090 TMP1075_one_shot_conversion_start
20003cc4 g     O .bss	00000004 fat_table_addr
08003056 g     F .text	000000a6 OneWire_SearchDevices
0800930c g     F .text	0000005a .hidden __floatdidf
08002fe6 g     F .text	00000070 OneWire_CRC8_ROM
20005326 g     O .bss	00000001 __lock___atexit_recursive_mutex
08007860 g     F .text	0000003c SX126x_SetTxParams
080099f0  w    F .text	00000002 TIM1_CC_IRQHandler
080099f0  w    F .text	00000002 TSC_IRQHandler
080026b4 g     F .text	0000020c I2C_Read_word_u24_St_ReSt
20003caa g     O .bss	00000001 BPB_SecPerClus
08009cf2 g     F .text	00000024 __sseek
0800ac20 g     F .text	00000070 __sinit
080099f0  w    F .text	00000002 HardFault_Handler
0800abb8 g     F .text	0000002c __sfmoreglue
08006ae0 g     F .text	00000070 GSM_CloseConnections
0800a970 g     F .text	00000010 ungetc
08009dd8 g     F .text	0000000c __malloc_unlock
080055d6 g     F .text	00000032 spi_xfer
080014e4 g     F .text	00000058 SEND_DATA_AND_SLEEP
08005ba8 g     F .text	0000002c SysTick_Handler
08006a40 g     F .text	00000084 GSM_SendTCP
20005324 g     O .bss	00000001 __lock___arc4random_mutex
20001178 g     O .bss	00000001 gs2_buf_ptr
08005764 g     F .text	0000004c spi_send16
080099f0  w    F .text	00000002 TAMP_STAMP_IRQHandler
08006c58 g     F .text	00000064 GSM_CheckGPRS
0800b3b0 g       *ABS*	00000000 _sidata
08006cd8 g     F .text	0000001c GSM_ActivateContext
0800abe4 g     F .text	0000000c _cleanup
080099f0  w    F .text	00000002 PendSV_Handler
080099f0  w    F .text	00000002 NMI_Handler
0800b3a8 g       .ARM	00000000 __exidx_end
20001074 g     O .bss	00000002 buffer_ptr
2000086e g     O .bss	00000001 SYSTEM_I2C_error_flag
08004858 g     F .text	0000011c SD_GetSCR
080099f0  w    F .text	00000002 EXTI3_IRQHandler
20005314 g     O .bss	00000004 DUMMY_PTR
20000940 g     O .bss	00000004 battary_voltage
08007f60 g     F .text	00000034 LoRa_reset
20000000 g       *ABS*	00000000 STARTRAM
0800a980 g     F .text	0000000c __errno
0800add0 g     F .text	00000002 __retarget_lock_close
08002020 g     F .text	00000034 gpio_read
08006820 g     F .text	0000001c GSM_PowerOFF
0800635c g     F .text	00000038 DS18B20_StartTempMeas
080099f0  w    F .text	00000002 LPTIM2_IRQHandler
0800869c g     F .text	0000002c TMP1075_read_id
08001be2 g     F .text	0000015e ADC_Handler
08001724 g     F .text	00000090 ADC_reset_registers
20005320 g     O .bss	00000004 errno
0800a23c g     F .text	000001e8 _scanf_i
08009cb6 g     F .text	00000004 __seofread
0800aeac g       .text	00000000 _etext
08007928 g     F .text	00000060 SX126x_SetPacketParams
080086f4 g     F .text	0000004a TMP1075_read_float_temperature
20000850 g       .bss	00000000 _sbss
08005240 g     F .text	000002b0 SD_WriteBlock
20003cb4 g     O .bss	00000004 BPB_RootClus
080099f0  w    F .text	00000002 I2C3_ER_IRQHandler
08005c4c g     F .text	00000018 GetMili
08004830 g     F .text	00000028 SD_SetBlockSize
2000093e g     O .bss	00000001 FIFO_flag
08004ce8 g     F .text	00000094 SD_SetBusWidth
20003c14 g     O .bss	00000004 global_freq
20003c18 g     O .bss	00000001 sd_last_result
200027b8 g     O .bss	00000008 current_time
08009a60 g     F .text	0000001c memcpy
08005696 g     F .text	00000092 spi_recieve8
08005ee6 g     F .text	00000038 print_arr
0800343e g     F .text	00000062 PWM_deinit
0800ab7c g     F .text	0000000c _cleanup_r
08009294 g     F .text	00000022 .hidden __floatsidf
080099f0  w    F .text	00000002 EXTI0_IRQHandler
080099f0  w    F .text	00000002 I2C2_EV_IRQHandler
08001d7c g     F .text	0000005c gpio_calculate
080099f0  w    F .text	00000002 CAN1_RX0_IRQHandler
08005660 g     F .text	00000036 spi_send8
080099f0  w    F .text	00000002 FPU_IRQHandler
08001fec g     F .text	00000034 gpio_toggle
08004da8 g     F .text	0000029c SD_GetCardInfo
08007988 g     F .text	0000006c SX126x_SetTx
080099f0  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
08000f8a g     F .text	000002ca SEND_TO_SERVER
08009a40 g     F .text	00000010 malloc
080054f0 g     F .text	000000c8 spi_init
08003ed8 g     F .text	00000088 write_single_bkp_reg
08008a5c g     F .text	00000050 TMP1075_disable_ALERT_pin
08006788 g     F .text	00000060 GSM_isAlive
080099f0  w    F .text	00000002 UsageFault_Handler
20003cbc g     O .bss	00000004 data_file_addr
0800330c g     F .text	00000020 PWM_stop_all
08008d2e g     F .text	0000002c TMP1075_get_low_limit
08008786 g     F .text	00000052 TMP1075_raw_to_float
080097dc g     F .text	00000040 .hidden __fixunsdfsi
080066e6 g     F .text	00000066 GSM_SetAPN
08009e5e g     F .text	0000003a __ssrefill_r
20000850 g       .bss	00000000 __bss_start__
0800a7b8 g     F .text	00000014 strtoul
20000000 g     O .data	00000000 .hidden __dso_handle
08007a94 g     F .text	00000030 SetRxTxFallbackMode
08009274 g     F .text	0000001e .hidden __aeabi_ui2d
08006c3c g     F .text	0000001c GSM_CheckGSM
20000000 g       .data	00000000 _sdata
080008c4 g     F .text	00000484 CMD_Parser
080099f0  w    F .text	00000002 SPI1_IRQHandler
08008ff0 g     F .text	00000000 .hidden __aeabi_drsub
08009bc8 g     F .text	00000020 _sbrk_r
080040ac g     F .text	00000144 RTC_get_time
08000e04 g     F .text	0000000e LED_BLINK
08002a74 g     F .text	0000016c I2C_Write_byte_St
080099f0  w    F .text	00000002 TIM6_DAC_IRQHandler
0800a424 g     F .text	00000024 _read_r
08003138 g     F .text	00000188 PWM_init
08006cf4 g     F .text	0000001c GSM_RequestIP
08003fd8 g     F .text	000000d4 RTC_EncodeDateTime
0800ab10 g     F .text	00000024 fflush
080041f0 g     F .text	000000a4 RTC_get_alarm
080092b8 g     F .text	00000042 .hidden __extendsfdf2
08009e98 g     F .text	000002f0 __ssvfscanf_r
080095bc g     F .text	000001d0 .hidden __aeabi_ddiv
08008ffc g     F .text	00000276 .hidden __adddf3
20003cae g     O .bss	00000001 BPB_NumFATs
080083e8 g     F .text	000000da LoRa_receive
0800b3a0 g       .ARM	00000000 __exidx_start
20005328 g     O .bss	00000001 __lock___env_recursive_mutex
08009368 g     F .text	00000254 .hidden __aeabi_dmul
2000532b g     O .bss	00000001 __lock___sinit_recursive_mutex
0800b21c g     O .rodata	00000004 _global_impure_ptr
0800ade4 g     F .text	0000004c _realloc_r
08009998 g     F .text	00000048 __libc_init_array
0800a694 g     F .text	00000014 strtol_l
08007ac4 g     F .text	00000030 SX126x_SetStandby
080099f0  w    F .text	00000002 DMA2_Channel2_IRQHandler
080099f0  w    F .text	00000002 DMA1_Channel4_IRQHandler
08002054 g     F .text	00000124 gpio_exti_init
080001d8 g     F .text	00000000 _mainCRTStartup
08005c04 g     F .text	00000030 Freeze_delay
08007582 g     F .text	000000ec SX126x_SendOpcode
08009274 g     F .text	0000001e .hidden __floatunsidf
08001624 g     F .text	0000000c ADC1_IRQHandler
0800ae70 g     F .text	0000001c _sbrk
2000c000 g       *ABS*	00000000 ENDRAM
0800ad1c g     F .text	0000001c __fp_lock_all
0800ae94 g     F .text	00000000 _init
080037ac g     F .text	00000100 RTC_auto_wakeup_enable
08007c50 g     F .text	00000080 SX126x_SetDioIrqParams
0800a6a8 g     F .text	00000014 strtol
080043a8 g     F .text	00000140 RTC_alarm_update
080064d8 g     F .text	00000060 DS18B20_ReadTemperature
0800981c g     F .text	0000009e .hidden __aeabi_d2f
080015f4 g     F .text	0000000c USART3_IRQHandler
08003ce8 g     F .text	00000150 RTC_Init
00000064 g       *ABS*	00000000 STACKSIZE
20005334 g       .bss	00000000 _ebss
08006c20 g     F .text	0000001c GSM_CheckSIM
080099f0  w    F .text	00000002 DMA1_Channel7_IRQHandler
08007830 g     F .text	00000030 SX126x_SetPacketType
20000008 g     O .data	00000060 gs1_ow_nums
080099f4  w    F .text	00000034 Reset_Handler
0800a464 g     F .text	000000b8 _reclaim_reent
0800789c g     F .text	0000003c SX126x_SetBufferBaseAddress
08007e10 g     F .text	00000040 SX126x_ClearIrqStatus
080079f4 g     F .text	000000a0 SX126x_SetRx
080099f0  w    F .text	00000002 CAN1_RX1_IRQHandler
0800978c g     F .text	0000004e .hidden __fixdfsi
08001324 g     F .text	000001c0 MakeMeasure
080028c0 g     F .text	000001b4 I2C_Write_word_u16_St
2000127c g     O .bss	00000001 gs3_buf_ptr
08002d0e g     F .text	00000044 OneWire_Read
20005329 g     O .bss	00000001 __lock___malloc_recursive_mutex
080083d0 g     F .text	00000018 LoRa_startReceiving
08002ea0 g     F .text	00000146 hasNextRom
08002cc6 g     F .text	00000048 OneWire_Reset
08008aac g     F .text	0000008e TMP1075_set_mode_ALERT_pin
08002be0 g     F .text	000000c2 OneWire_SendBit
08005df8 g     F .text	00000068 DWT_Delay_With_Action
08006be8 g     F .text	0000001c GSM_DisableEcho
08006408 g     F .text	00000092 DS18B20_Init
0800699c g     F .text	000000a4 GSM_OpenConnection
080081a4 g     F .text	0000006c LoRa_setFrequency
080067e8 g     F .text	00000038 GSM_TogglePower
08005728 g     F .text	0000003c spi_send_array
08008ffc g     F .text	00000276 .hidden __aeabi_dadd
08000000 g       *ABS*	00000000 STARTFLASH
0800766e g     F .text	0000003a SX126x_GetStatus
08006768 g     F .text	00000020 GSM_GetVBAT
080099f0  w    F .text	00000002 DMA2_Channel1_IRQHandler
20000874 g     O .bss	00000042 fifo
080092fc g     F .text	0000006a .hidden __aeabi_ul2d
08003f60 g     F .text	00000078 RTC_time_difference
08007b64 g     F .text	00000054 SX126x_GetDeviceErrors
08002d8e g     F .text	00000066 OneWire_Write
0800b340 g     O .rodata	00000020 __sf_fake_stderr
080099f0  w    F .text	00000002 QUADSPI_IRQHandler
08001ba2 g     F .text	0000002c ADC_Start
20005338 g       ._user_heap_stack	00000000 end
08007b20 g     F .text	00000044 SX126x_GetPacketType
080099f0  w    F .text	00000002 I2C1_EV_IRQHandler
20003ca8 g     O .bss	00000002 BPB_BytsPerSec
08009c40 g     F .text	00000054 _siscanf_r
0800ade2 g     F .text	00000002 __retarget_lock_release_recursive
0800887c g     F .text	00000036 TMP1075_write_config
20003cb0 g     O .bss	00000004 BPB_FATSz32
0800addc g     F .text	00000004 __retarget_lock_try_acquire_recursive
08006b9c g     F .text	0000004c GSM_WaitTCPServerConnection
0800721c g     F .text	00000128 GSM_RX_Handler
080044e8 g     F .text	000000a4 SDMMC_INIT
080099f0  w    F .text	00000002 DMA1_Channel6_IRQHandler
200000c8 g     O .data	00000060 gs3_ow_nums
080057de g     F .text	0000002e spi_request_read8
080099f0  w    F .text	00000002 DMA2_Channel4_IRQHandler
0800abf0 g     F .text	0000000c __sfp_lock_acquire
080098d0 g     F .text	00000000 memchr
08005d18 g     F .text	00000018 DWT_Get_Current_Tick
08004d7c g     F .text	0000002c SD_SetBusClock
080034a0 g     F .text	0000012c RCC_init_hse
08006394 g     F .text	00000074 DS18B20_ReadScratchpad
20005334 g       .bss	00000000 __bss_end__
080068f4 g     F .text	000000a8 GSM_SendSMS
08009a7c g     F .text	00000098 _free_r
080099f0  w    F .text	00000002 RCC_IRQHandler
080076ee g     F .text	00000032 SX126x_WriteRegisters
08005d30 g     F .text	00000034 DWT_Elapsed_Tick
0800674c g     F .text	0000001c GSM_CheckSignal
080099f0  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
080099f0  w    F .text	00000002 DMA1_Channel1_IRQHandler
08009de4 g     F .text	0000007a _sungetc_r
08008ff8 g     F .text	0000027a .hidden __aeabi_dsub
08004630 g     F .text	00000130 SD_GetError
080099f0 g       .text	00000002 Default_Handler
080001d8 g     F .text	00000000 _start
080099f0  w    F .text	00000002 DMA2_Channel7_IRQHandler
08009d38 g     F .text	0000002c strstr
0800add8 g     F .text	00000004 __retarget_lock_try_acquire
080092fc g     F .text	0000006a .hidden __floatundidf
08006538 g     F .text	00000114 GSM_Init
0800ae50 g     F .text	00000010 _lseek
080086c8 g     F .text	0000002c TMP1075_read_raw_temperature
08002d52 g     F .text	0000003c OneWire_ReadArray
080099f0  w    F .text	00000002 EXTI15_10_IRQHandler
08002234 g     F .text	0000004c I2C_HandleTransfer
080001d0  w    F .text	00000000 _stack_init
08007eb0 g     F .text	0000006c SX126x_RxHandler
08005fc0 g     F .text	00000270 FAT32_init
20000948 g     O .bss	00000080 sim7000g
08004974 g     F .text	00000374 SD_Init
08006d48 g     F .text	000004d4 GSM_AnswerParser
20000a84 g     O .bss	000000dc adc
080084c2 g     F .text	00000022 LoRa_getRSSI
080087d8 g     F .text	00000034 TMP1075_raw_to_int
08006cbc g     F .text	0000001c GSM_CheckIPstatus
080057b0 g     F .text	0000002e spi_waiting_read8
08007542 g     F .text	00000040 SX126x_CalculateMode
08007f1c g     F .text	00000044 newLoRa
08008346 g     F .text	0000008a LoRa_transmit
0800a7a0 g     F .text	00000004 _strtoul_r
08003920 g     F .text	000000b8 RTC_struct_brief_time_converter
080099f0  w    F .text	00000002 TIM7_IRQHandler
080099f0  w    F .text	00000002 SDMMC1_IRQHandler
08009d88 g     F .text	00000020 _close_r
08009294 g     F .text	00000022 .hidden __aeabi_i2d
08007f94 g     F .text	000000ba LoRa_gotoMode
200008b8 g     O .bss	00000042 long_cmd_fifo
08003e38 g     F .text	000000a0 rtc_writeToBkp
080077a0 g     F .text	00000090 SX126x_SetRfFrequency
2000128c g     O .bss	00000004 handler
0800add2 g     F .text	00000002 __retarget_lock_close_recursive
080099f0  w    F .text	00000002 I2C3_EV_IRQHandler
20001280 g     O .bss	00000007 current_rtc
08009be8 g     F .text	00000058 sscanf
08001600 g     F .text	00000024 EXTI9_5_IRQHandler
080095bc g     F .text	000001d0 .hidden __divdf3
0800ac90 g     F .text	0000008c __sfp
08001630 g     F .text	0000005c RTC_WKUP_IRQHandler
08006230 g     F .text	00000100 FAT32_get_file_start_cluster
0800ac14 g     F .text	0000000c __sinit_lock_release
08009368 g     F .text	00000254 .hidden __muldf3
08009c94 g     F .text	00000022 __sread
08006d2c g     F .text	0000001c GSM_CheckMode
08009dcc g     F .text	0000000c __malloc_lock
080099f0  w    F .text	00000002 PVD_PVM_IRQHandler
0800aa98 g     F .text	00000078 _fflush_r
08005848 g     F .text	00000114 TIM_init
0800458c g     F .text	000000a4 SD_Cmd
08001bce g     F .text	00000014 ADC_Disable
080099f0  w    F .text	00000002 SPI2_IRQHandler
0800b360 g     O .rodata	00000020 __sf_fake_stdin
08006c04 g     F .text	0000001c GSM_SaveSettings
080084e4 g     F .text	000001b8 LoRa_init
0800add6 g     F .text	00000002 __retarget_lock_acquire_recursive
080099e0 g     F .text	00000010 memset
080099f0  w    F .text	00000002 MemManage_Handler
0800153c g     F .text	000000b8 main
08007e50 g     F .text	00000060 SX126x_RxDataParse
0800adce g     F .text	00000002 __retarget_lock_init_recursive
08008310 g     F .text	00000036 LoRa_setTOMsb_setCRCon
20001288 g     O .bss	00000002 WAKEUP_PERIOD_SEC
200008fc g     O .bss	00000042 sensors_data_rx_fifo
0800045c g     F .text	00000468 System_Init
080099f0  w    F .text	00000002 CAN1_TX_IRQHandler
080099f0  w    F .text	00000002 SVC_Handler
08009d16 g     F .text	00000008 __sclose
080099f0  w    F .text	00000002 DMA2_Channel5_IRQHandler
08001fa0 g     F .text	0000004c gpio_state
080099f0  w    F .text	00000002 CRS_IRQHandler
08007720 g     F .text	00000034 SX126x_WriteBuffer
0800a690 g     F .text	00000004 _strtol_r
0800981c g     F .text	0000009e .hidden __truncdfsf2
20000945 g     O .bss	00000001 TIM7_finished
080019b4 g     F .text	000001ee ADC_InitRegChannel
08008b3a g     F .text	0000008e TMP1075_ALERT_active_level
08007754 g     F .text	0000004c SX126x_ReadBuffer
08009b14 g     F .text	000000b4 _malloc_r
0800930c g     F .text	0000005a .hidden __aeabi_l2d
0800a7cc g     F .text	00000074 __submore
0800ad54 g     F .text	0000003a _fwalk
0800893e g     F .text	0000008e TMP1075_set_time_conversion
080099f0  w    F .text	00000002 DMA1_Channel5_IRQHandler
080099f0  w    F .text	00000002 EXTI4_IRQHandler
08007d2e g     F .text	0000003a SX126x_SetSyncWord
08006694 g     F .text	00000052 GSM_SendCMD
08009be8 g     F .text	00000058 siscanf
08006d10 g     F .text	0000001c GSM_SetMode
0800adcc g     F .text	00000002 __retarget_lock_init
08008d5a g     F .text	0000002c TMP1075_get_high_limit
080099f0  w    F .text	00000002 RNG_IRQHandler
0800a7a4 g     F .text	00000014 strtoul_l
0800aea0 g     F .text	00000000 _fini
08008c56 g     F .text	0000006c TMP1075_set_low_limit
0800880c g     F .text	00000044 TMP1075_float_to_binary
080032ec g     F .text	00000020 PWM_start_all
0800804e g     F .text	00000068 LoRa_readRegister
20001078 g     O .bss	00000100 gs2_buffer
08005dd8 g     F .text	00000020 DWT_Delay_ms
20000870 g     O .bss	00000004 SYSTEM_I2C_error_counter
08009d64 g     F .text	00000024 _write_r
080078d8 g     F .text	00000050 SX126x_SetModulationParams
080099f0  w    F .text	00000002 DMA1_Channel3_IRQHandler
080099f0  w    F .text	00000002 COMP_IRQHandler
0800649a g     F .text	0000003e DS18B20_ReadROM
200007e8 g     O .data	00000004 _impure_ptr
0800a98c g     F .text	0000010c __sflush_r
080050b4 g     F .text	0000018c SD_ReadBlock
20003cc0 g     O .bss	00000004 file_addr
08005d64 g     F .text	00000040 DWT_Init
08005f20 g     F .text	000000a0 stop_cortex
200009c8 g     O .bss	000000bc SX1268
08005044 g     F .text	00000024 SD_StopTransfer
080099f0  w    F .text	00000002 WWDG_IRQHandler
08005068 g     F .text	0000004c SD_GetCardState
0800ad38 g     F .text	0000001c __fp_unlock_all
080099f0  w    F .text	00000002 LPUART1_IRQHandler
080099f0  w    F .text	00000002 DMA2_Channel6_IRQHandler
080039d8 g     F .text	000000c8 RTC_struct_brief_date_converter
08005bd4 g     F .text	00000030 Delay
08002ca2 g     F .text	00000024 OneWire_ReadBit
080099f0  w    F .text	00000002 TIM2_IRQHandler
080032c0 g     F .text	0000002c PWM_start_single
08004294 g     F .text	00000114 RTC_alarm_init
080097dc g     F .text	00000040 .hidden __aeabi_d2uiz
08007dbc g     F .text	00000054 SX126x_GetPacketStatus
080055b8 g     F .text	0000001e spi_write
08009e98 g     F .text	000002f0 __ssvfiscanf_r
08002178 g     F .text	000000bc I2C_init
080017b4 g     F .text	00000200 ADC_Init
080099f0  w    F .text	00000002 EXTI1_IRQHandler
0800664c g     F .text	00000048 GSM_wait_for_answer
0800873e g     F .text	00000048 TMP1075_read_int8_temperature
00040000 g       *ABS*	00000000 LENGTHFLASH
08009c40 g     F .text	00000054 _sscanf_r
08008294 g     F .text	0000007c LoRa_setOCP
08005cd4 g     F .text	00000020 DWT_GetDelta
08003410 g     F .text	0000002e PWM_stop_single
08008210 g     F .text	0000005e LoRa_setSpreadingFactor
08005eae g     F .text	00000038 _write
2000084c g       .data	00000000 _edata
08004760 g     F .text	000000d0 SD_Response
08006ac4 g     F .text	0000001c GSM_SetDNS
08001254 g     F .text	000000d0 TemperatureSensorsMeasure
20005325 g     O .bss	00000001 __lock___at_quick_exit_mutex
08007348 g     F .text	00000178 SX126x_Init
08008122 g     F .text	00000082 LoRa_writeRegisters
08002280 g     F .text	00000040 I2C_check_flag
08008cc2 g     F .text	0000006c TMP1075_set_high_limit
0800332c g     F .text	000000e4 PWM_change_fill
20003cac g     O .bss	00000002 BPB_RsvdSecCnt
080099f0  w    F .text	00000002 USART2_IRQHandler
08009cba g     F .text	00000038 __swrite
0800826e g     F .text	00000026 LoRa_setPower
2000086c g     O .bss	00000001 uart_receive_data
08009970 g     F .text	00000028 exit
0800ad8e g     F .text	0000003e _fwalk_reent
08005608 g     F .text	00000058 spi_txrx
0800978c g     F .text	0000004e .hidden __aeabi_d2iz
080099f0  w    F .text	00000002 I2C2_ER_IRQHandler
2000117c g     O .bss	00000100 gs3_buffer
080099f0  w    F .text	00000002 DMA1_Channel2_IRQHandler
0800abfc g     F .text	0000000c __sfp_lock_release
08005998 g     F .text	00000190 UART_init
2000086d g     O .bss	00000001 SYSTEM_init_status
0800b380 g     O .rodata	00000020 __sf_fake_stdout
0800a51c g     F .text	00000070 __sccl
0800b23f g     O .rodata	00000101 _ctype_
08007af4 g     F .text	0000002c SX126x_SetSleep
0800ae60 g     F .text	00000010 _read
080030fc g     F .text	0000003a OneWire_MatchRom
0800add4 g     F .text	00000002 __retarget_lock_acquire
0800ade0 g     F .text	00000002 __retarget_lock_release
080099f0  w    F .text	00000002 CAN1_SCE_IRQHandler
08005da4 g     F .text	00000034 DWT_Delay_us
08006b50 g     F .text	0000004c GSM_WaitTCPServerAcknowledge
080076a8 g     F .text	00000046 SX126x_ReadRegisters
0000c000 g       *ABS*	00000000 LENGTHRAM
080099f0  w    F .text	00000002 FLASH_IRQHandler
0800ae8c g     F .text	00000002 _exit
08005c64 g     F .text	00000070 delay_action
080099f0  w    F .text	00000002 BusFault_Handler
080099f0  w    F .text	00000002 USART1_IRQHandler
20005327 g     O .bss	00000001 __lock___dd_hash_mutex
2000532c g     O .bss	00000001 __lock___tz_mutex
080098bc g     F .text	00000010 strlen
080099f0  w    F .text	00000002 SPI3_IRQHandler
0800aeec g     O .rodata	00000018 day_offset
080074c0 g     F .text	00000082 SX126x_SendData
08002df4 g     F .text	0000003c OneWire_WriteArray
08007cd0 g     F .text	00000030 SX126x_SetDIO2AsRfSwitchCtr
2000531c g     O .bss	00000004 __malloc_sbrk_start
08008bc8 g     F .text	0000008e TMP1075_ALERT_sensitivity
20003cb8 g     O .bss	00000004 root_dir_addr
08006330 g     F .text	0000002c FAT32_check_file_next_cluster
080099f0  w    F .text	00000002 I2C1_ER_IRQHandler
08005cf4 g     F .text	00000024 DWT_GetMicro
08009d1e g     F .text	0000001a strchr
080092b8 g     F .text	00000042 .hidden __aeabi_f2d
08001dd8 g     F .text	000001c8 gpio_init
20005318 g     O .bss	00000004 __malloc_free_list
080099f0  w    F .text	00000002 SWPMI1_IRQHandler
0800233a g     F .text	0000017a I2C_Read_byte_St_ReSt
080099f0  w    F .text	00000002 LPTIM1_IRQHandler
08008ff8 g     F .text	0000027a .hidden __subdf3
080080b6 g     F .text	0000006c LoRa_writeRegister
080035cc g     F .text	00000114 RCC_init_hsi
20000d74 g     O .bss	00000300 data_buffer
20000b60 g     O .bss	00000150 sensors
08000000 g     O .isr_vector	00000000 g_ISR_Vectors
08005b28 g     F .text	00000044 UART_tx
0800a840 g     F .text	00000130 _ungetc_r
08003aa0 g     F .text	00000074 RTC_set_date
08007bb8 g     F .text	00000098 SX126x_GetIrqStatus
08003b14 g     F .text	000001d4 RTC_data_update
20000944 g     O .bss	00000001 TIM2_finished
08008850 g     F .text	0000002c TMP1075_read_config
080038ac g     F .text	00000074 RTC_set_time
20003cc8 g     O .bss	00000200 sd_read_buf
08000d48 g     F .text	00000038 init_global_variables
080099f0  w    F .text	00000002 SAI1_IRQHandler
2000532a g     O .bss	00000001 __lock___sfp_recursive_mutex
20000068 g     O .data	00000060 gs2_ow_nums
0800ae40 g     F .text	00000010 _close
20003c1c g     O .bss	00000054 SDCard
08009a50 g     F .text	00000010 free
080022c0 g     F .text	0000007a I2C_Clear_Error_Flags
0800ac08 g     F .text	0000000c __sinit_lock_acquire
08002e30 g     F .text	00000070 OneWire_InitStruct
080099f0  w    F .text	00000002 DMA2_Channel3_IRQHandler
00000000 g       *ABS*	00000000 HEAPSIZE
080002e4 g     F .text	00000178 ReverseBytes
080099f0  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler


Contents of .stab section:

Symnum n_type n_othr n_desc n_value  n_strx String

-1     HdrSym 0      6      000000a9 1     
0      WARNING 0      0      00000000 9      _close is not implemented and will always fail
1      1      0      0      00000000 56     _close
2      WARNING 0      0      00000000 63     _lseek is not implemented and will always fail
3      1      0      0      00000000 110    _lseek
4      WARNING 0      0      00000000 117    _read is not implemented and will always fail
5      1      0      0      00000000 163    _read


Disassembly of section .isr_vector:

08000000 <g_ISR_Vectors>:
 8000000:	c000      	stmia	r0!, {}
 8000002:	2000      	movs	r0, #0
 8000004:	99f5      	ldr	r1, [sp, #980]	; 0x3d4
 8000006:	0800      	lsrs	r0, r0, #32
 8000008:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800000a:	0800      	lsrs	r0, r0, #32
 800000c:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800000e:	0800      	lsrs	r0, r0, #32
 8000010:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000012:	0800      	lsrs	r0, r0, #32
 8000014:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000016:	0800      	lsrs	r0, r0, #32
 8000018:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800001a:	0800      	lsrs	r0, r0, #32
	...
 800002c:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800002e:	0800      	lsrs	r0, r0, #32
 8000030:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000032:	0800      	lsrs	r0, r0, #32
 8000034:	0000      	movs	r0, r0
 8000036:	0000      	movs	r0, r0
 8000038:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800003a:	0800      	lsrs	r0, r0, #32
 800003c:	5ba9      	ldrh	r1, [r5, r6]
 800003e:	0800      	lsrs	r0, r0, #32
 8000040:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000042:	0800      	lsrs	r0, r0, #32
 8000044:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000046:	0800      	lsrs	r0, r0, #32
 8000048:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800004a:	0800      	lsrs	r0, r0, #32
 800004c:	1631      	asrs	r1, r6, #24
 800004e:	0800      	lsrs	r0, r0, #32
 8000050:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000052:	0800      	lsrs	r0, r0, #32
 8000054:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000056:	0800      	lsrs	r0, r0, #32
 8000058:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800005a:	0800      	lsrs	r0, r0, #32
 800005c:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800005e:	0800      	lsrs	r0, r0, #32
 8000060:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000062:	0800      	lsrs	r0, r0, #32
 8000064:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000066:	0800      	lsrs	r0, r0, #32
 8000068:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800006a:	0800      	lsrs	r0, r0, #32
 800006c:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800006e:	0800      	lsrs	r0, r0, #32
 8000070:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000072:	0800      	lsrs	r0, r0, #32
 8000074:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000076:	0800      	lsrs	r0, r0, #32
 8000078:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800007a:	0800      	lsrs	r0, r0, #32
 800007c:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800007e:	0800      	lsrs	r0, r0, #32
 8000080:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000082:	0800      	lsrs	r0, r0, #32
 8000084:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000086:	0800      	lsrs	r0, r0, #32
 8000088:	1625      	asrs	r5, r4, #24
 800008a:	0800      	lsrs	r0, r0, #32
 800008c:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800008e:	0800      	lsrs	r0, r0, #32
 8000090:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000092:	0800      	lsrs	r0, r0, #32
 8000094:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000096:	0800      	lsrs	r0, r0, #32
 8000098:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800009a:	0800      	lsrs	r0, r0, #32
 800009c:	1601      	asrs	r1, r0, #24
 800009e:	0800      	lsrs	r0, r0, #32
 80000a0:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 80000a2:	0800      	lsrs	r0, r0, #32
 80000a4:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 80000a6:	0800      	lsrs	r0, r0, #32
 80000a8:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 80000aa:	0800      	lsrs	r0, r0, #32
 80000ac:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 80000ae:	0800      	lsrs	r0, r0, #32
 80000b0:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 80000b2:	0800      	lsrs	r0, r0, #32
	...
 80000bc:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 80000be:	0800      	lsrs	r0, r0, #32
 80000c0:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 80000c2:	0800      	lsrs	r0, r0, #32
 80000c4:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 80000c6:	0800      	lsrs	r0, r0, #32
 80000c8:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 80000ca:	0800      	lsrs	r0, r0, #32
 80000cc:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 80000ce:	0800      	lsrs	r0, r0, #32
 80000d0:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 80000d2:	0800      	lsrs	r0, r0, #32
 80000d4:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 80000d6:	0800      	lsrs	r0, r0, #32
 80000d8:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 80000da:	0800      	lsrs	r0, r0, #32
 80000dc:	15f5      	asrs	r5, r6, #23
 80000de:	0800      	lsrs	r0, r0, #32
 80000e0:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 80000e2:	0800      	lsrs	r0, r0, #32
 80000e4:	168d      	asrs	r5, r1, #26
 80000e6:	0800      	lsrs	r0, r0, #32
	...
 8000104:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000106:	0800      	lsrs	r0, r0, #32
 8000108:	0000      	movs	r0, r0
 800010a:	0000      	movs	r0, r0
 800010c:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800010e:	0800      	lsrs	r0, r0, #32
	...
 8000118:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800011a:	0800      	lsrs	r0, r0, #32
 800011c:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800011e:	0800      	lsrs	r0, r0, #32
 8000120:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000122:	0800      	lsrs	r0, r0, #32
 8000124:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000126:	0800      	lsrs	r0, r0, #32
 8000128:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800012a:	0800      	lsrs	r0, r0, #32
 800012c:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800012e:	0800      	lsrs	r0, r0, #32
 8000130:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000132:	0800      	lsrs	r0, r0, #32
	...
 8000140:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000142:	0800      	lsrs	r0, r0, #32
 8000144:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000146:	0800      	lsrs	r0, r0, #32
 8000148:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800014a:	0800      	lsrs	r0, r0, #32
 800014c:	0000      	movs	r0, r0
 800014e:	0000      	movs	r0, r0
 8000150:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000152:	0800      	lsrs	r0, r0, #32
 8000154:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000156:	0800      	lsrs	r0, r0, #32
 8000158:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800015a:	0800      	lsrs	r0, r0, #32
 800015c:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800015e:	0800      	lsrs	r0, r0, #32
 8000160:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000162:	0800      	lsrs	r0, r0, #32
 8000164:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000166:	0800      	lsrs	r0, r0, #32
 8000168:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800016a:	0800      	lsrs	r0, r0, #32
 800016c:	0000      	movs	r0, r0
 800016e:	0000      	movs	r0, r0
 8000170:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000172:	0800      	lsrs	r0, r0, #32
 8000174:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000176:	0800      	lsrs	r0, r0, #32
	...
 8000180:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000182:	0800      	lsrs	r0, r0, #32
 8000184:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 8000186:	0800      	lsrs	r0, r0, #32
 8000188:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
 800018a:	0800      	lsrs	r0, r0, #32

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	       b510      	push	{r4, lr}
 8000192:	       4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	       7823      	ldrb	r3, [r4, #0]
 8000196:	/----- b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	|      4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	|  /-- b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	|  |   4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	|  |   f3af 8000 	nop.w
 80001a2:	|  \-> 2301      	movs	r3, #1
 80001a4:	|      7023      	strb	r3, [r4, #0]
 80001a6:	\----> bd10      	pop	{r4, pc}
 80001a8:	       0850      	lsrs	r0, r2, #1
 80001aa:	       2000      	movs	r0, #0
 80001ac:	       0000      	movs	r0, r0
 80001ae:	       0000      	movs	r0, r0
 80001b0:	       ae90      	add	r6, sp, #576	; 0x240
 80001b2:	       0800      	lsrs	r0, r0, #32

080001b4 <frame_dummy>:
 80001b4:	    b508      	push	{r3, lr}
 80001b6:	    4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	/-- b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	|   4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	|   4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	|   f3af 8000 	nop.w
 80001c2:	\-> bd08      	pop	{r3, pc}
 80001c4:	    0000      	movs	r0, r0
 80001c6:	    0000      	movs	r0, r0
 80001c8:	    0854      	lsrs	r4, r2, #1
 80001ca:	    2000      	movs	r0, #0
 80001cc:	    ae90      	add	r6, sp, #576	; 0x240
 80001ce:	    0800      	lsrs	r0, r0, #32

080001d0 <_stack_init>:
 80001d0:	f5a3 3a80 	sub.w	r10, r3, #65536	; 0x10000
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop

080001d8 <_mainCRTStartup>:
 80001d8:	    4b17      	ldr	r3, [pc, #92]	; (8000238 <_mainCRTStartup+0x60>)
 80001da:	    2b00      	cmp	r3, #0
 80001dc:	    bf08      	it	eq
 80001de:	    4b13      	ldreq	r3, [pc, #76]	; (800022c <_mainCRTStartup+0x54>)
 80001e0:	    469d      	mov	sp, r3
 80001e2:	    f7ff fff5 	bl	80001d0 <_stack_init>
 80001e6:	    2100      	movs	r1, #0
 80001e8:	    468b      	mov	r11, r1
 80001ea:	    460f      	mov	r7, r1
 80001ec:	    4813      	ldr	r0, [pc, #76]	; (800023c <_mainCRTStartup+0x64>)
 80001ee:	    4a14      	ldr	r2, [pc, #80]	; (8000240 <_mainCRTStartup+0x68>)
 80001f0:	    1a12      	subs	r2, r2, r0
 80001f2:	    f009 fbf5 	bl	80099e0 <memset>
 80001f6:	    4b0e      	ldr	r3, [pc, #56]	; (8000230 <_mainCRTStartup+0x58>)
 80001f8:	    2b00      	cmp	r3, #0
 80001fa:	/-- d000      	beq.n	80001fe <_mainCRTStartup+0x26>
 80001fc:	|   4798      	blx	r3
 80001fe:	\-> 4b0d      	ldr	r3, [pc, #52]	; (8000234 <_mainCRTStartup+0x5c>)
 8000200:	    2b00      	cmp	r3, #0
 8000202:	/-- d000      	beq.n	8000206 <_mainCRTStartup+0x2e>
 8000204:	|   4798      	blx	r3
 8000206:	\-> 2000      	movs	r0, #0
 8000208:	    2100      	movs	r1, #0
 800020a:	    0004      	movs	r4, r0
 800020c:	    000d      	movs	r5, r1
 800020e:	    480d      	ldr	r0, [pc, #52]	; (8000244 <_mainCRTStartup+0x6c>)
 8000210:	    2800      	cmp	r0, #0
 8000212:	/-- d002      	beq.n	800021a <_mainCRTStartup+0x42>
 8000214:	|   480c      	ldr	r0, [pc, #48]	; (8000248 <_mainCRTStartup+0x70>)
 8000216:	|   f3af 8000 	nop.w
 800021a:	\-> f009 fbbd 	bl	8009998 <__libc_init_array>
 800021e:	    0020      	movs	r0, r4
 8000220:	    0029      	movs	r1, r5
 8000222:	    f001 f98b 	bl	800153c <main>
 8000226:	    f009 fba3 	bl	8009970 <exit>
 800022a:	    bf00      	nop
 800022c:	    0000      	movs	r0, r0
 800022e:	    0008      	movs	r0, r1
	...
 800023c:	    0850      	lsrs	r0, r2, #1
 800023e:	    2000      	movs	r0, #0
 8000240:	    5334      	strh	r4, [r6, r4]
 8000242:	    2000      	movs	r0, #0
	...

0800024c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800024c:	       b480      	push	{r7}
 800024e:	       b083      	sub	sp, #12
 8000250:	       af00      	add	r7, sp, #0
 8000252:	       4603      	mov	r3, r0
 8000254:	       6039      	str	r1, [r7, #0]
 8000256:	       71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000258:	       f997 3007 	ldrsb.w	r3, [r7, #7]
 800025c:	       2b00      	cmp	r3, #0
 800025e:	   /-- db0a      	blt.n	8000276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	   |   683b      	ldr	r3, [r7, #0]
 8000262:	   |   b2da      	uxtb	r2, r3
 8000264:	   |   490c      	ldr	r1, [pc, #48]	; (8000298 <__NVIC_SetPriority+0x4c>)
 8000266:	   |   f997 3007 	ldrsb.w	r3, [r7, #7]
 800026a:	   |   0112      	lsls	r2, r2, #4
 800026c:	   |   b2d2      	uxtb	r2, r2
 800026e:	   |   440b      	add	r3, r1
 8000270:	   |   f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000274:	/--|-- e00a      	b.n	800028c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	|  \-> 683b      	ldr	r3, [r7, #0]
 8000278:	|      b2da      	uxtb	r2, r3
 800027a:	|      4908      	ldr	r1, [pc, #32]	; (800029c <__NVIC_SetPriority+0x50>)
 800027c:	|      79fb      	ldrb	r3, [r7, #7]
 800027e:	|      f003 030f 	and.w	r3, r3, #15
 8000282:	|      3b04      	subs	r3, #4
 8000284:	|      0112      	lsls	r2, r2, #4
 8000286:	|      b2d2      	uxtb	r2, r2
 8000288:	|      440b      	add	r3, r1
 800028a:	|      761a      	strb	r2, [r3, #24]
}
 800028c:	\----> bf00      	nop
 800028e:	       370c      	adds	r7, #12
 8000290:	       46bd      	mov	sp, r7
 8000292:	       f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	       4770      	bx	lr
 8000298:	       e100      	b.n	800049c <System_Init+0x40>
 800029a:	   /-- e000      	b.n	800029e <__NVIC_SetPriority+0x52>
 800029c:	   |   ed00 e000 	stc	0, cr14, [r0, #-0]

080002a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80002a0:	       b580      	push	{r7, lr}
 80002a2:	       b082      	sub	sp, #8
 80002a4:	       af00      	add	r7, sp, #0
 80002a6:	       6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002a8:	       687b      	ldr	r3, [r7, #4]
 80002aa:	       3b01      	subs	r3, #1
 80002ac:	       f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80002b0:	   /-- d301      	bcc.n	80002b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80002b2:	   |   2301      	movs	r3, #1
 80002b4:	/--|-- e00f      	b.n	80002d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b6:	|  \-> 4a0a      	ldr	r2, [pc, #40]	; (80002e0 <SysTick_Config+0x40>)
 80002b8:	|      687b      	ldr	r3, [r7, #4]
 80002ba:	|      3b01      	subs	r3, #1
 80002bc:	|      6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80002be:	|      210f      	movs	r1, #15
 80002c0:	|      f04f 30ff 	mov.w	r0, #4294967295
 80002c4:	|      f7ff ffc2 	bl	800024c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c8:	|      4b05      	ldr	r3, [pc, #20]	; (80002e0 <SysTick_Config+0x40>)
 80002ca:	|      2200      	movs	r2, #0
 80002cc:	|      609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ce:	|      4b04      	ldr	r3, [pc, #16]	; (80002e0 <SysTick_Config+0x40>)
 80002d0:	|      2207      	movs	r2, #7
 80002d2:	|      601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002d4:	|      2300      	movs	r3, #0
}
 80002d6:	\----> 4618      	mov	r0, r3
 80002d8:	       3708      	adds	r7, #8
 80002da:	       46bd      	mov	sp, r7
 80002dc:	       bd80      	pop	{r7, pc}
 80002de:	       bf00      	nop
 80002e0:	       e010      	b.n	8000304 <ReverseBytes+0x20>
 80002e2:	       e000      	b.n	80002e6 <ReverseBytes+0x2>

080002e4 <ReverseBytes>:
6)  0x28ff6402f92f9af4 - 12

*/

uint64_t ReverseBytes(uint64_t value)
{
 80002e4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, r10, r11}
 80002e8:	b099      	sub	sp, #100	; 0x64
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
  return (value & 0x00000000000000FFUL) << 56 | (value & 0x000000000000FF00UL) << 40 |
 80002f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80002f4:	f04f 0800 	mov.w	r8, #0
 80002f8:	f04f 0900 	mov.w	r9, #0
 80002fc:	ea4f 6902 	mov.w	r9, r2, lsl #24
 8000300:	f04f 0800 	mov.w	r8, #0
 8000304:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000308:	f04f 0000 	mov.w	r0, #0
 800030c:	f04f 0100 	mov.w	r1, #0
 8000310:	0211      	lsls	r1, r2, #8
 8000312:	2000      	movs	r0, #0
 8000314:	2400      	movs	r4, #0
 8000316:	f401 057f 	and.w	r5, r1, #16711680	; 0xff0000
 800031a:	ea48 0304 	orr.w	r3, r8, r4
 800031e:	653b      	str	r3, [r7, #80]	; 0x50
 8000320:	ea49 0305 	orr.w	r3, r9, r5
 8000324:	657b      	str	r3, [r7, #84]	; 0x54
         (value & 0x0000000000FF0000UL) << 24 | (value & 0x00000000FF000000UL) << 8 |
 8000326:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800032a:	f04f 0000 	mov.w	r0, #0
 800032e:	f04f 0100 	mov.w	r1, #0
 8000332:	0619      	lsls	r1, r3, #24
 8000334:	ea41 2112 	orr.w	r1, r1, r2, lsr #8
 8000338:	0610      	lsls	r0, r2, #24
 800033a:	f04f 0a00 	mov.w	r10, #0
 800033e:	f401 4b7f 	and.w	r11, r1, #65280	; 0xff00
  return (value & 0x00000000000000FFUL) << 56 | (value & 0x000000000000FF00UL) << 40 |
 8000342:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8000346:	460b      	mov	r3, r1
 8000348:	ea43 030a 	orr.w	r3, r3, r10
 800034c:	64bb      	str	r3, [r7, #72]	; 0x48
 800034e:	4613      	mov	r3, r2
 8000350:	ea43 030b 	orr.w	r3, r3, r11
 8000354:	64fb      	str	r3, [r7, #76]	; 0x4c
         (value & 0x0000000000FF0000UL) << 24 | (value & 0x00000000FF000000UL) << 8 |
 8000356:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800035a:	f04f 0000 	mov.w	r0, #0
 800035e:	f04f 0100 	mov.w	r1, #0
 8000362:	0219      	lsls	r1, r3, #8
 8000364:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8000368:	0210      	lsls	r0, r2, #8
 800036a:	2300      	movs	r3, #0
 800036c:	643b      	str	r3, [r7, #64]	; 0x40
 800036e:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 8000372:	647b      	str	r3, [r7, #68]	; 0x44
 8000374:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8000378:	4623      	mov	r3, r4
 800037a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800037e:	4602      	mov	r2, r0
 8000380:	4313      	orrs	r3, r2
 8000382:	63bb      	str	r3, [r7, #56]	; 0x38
 8000384:	462b      	mov	r3, r5
 8000386:	460a      	mov	r2, r1
 8000388:	4313      	orrs	r3, r2
 800038a:	63fb      	str	r3, [r7, #60]	; 0x3c
         (value & 0x000000FF00000000UL) >> 8 | (value & 0x0000FF0000000000UL) >> 24 |
 800038c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000390:	f04f 0000 	mov.w	r0, #0
 8000394:	f04f 0100 	mov.w	r1, #0
 8000398:	0a10      	lsrs	r0, r2, #8
 800039a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800039e:	0a19      	lsrs	r1, r3, #8
 80003a0:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 80003a4:	633b      	str	r3, [r7, #48]	; 0x30
 80003a6:	2300      	movs	r3, #0
 80003a8:	637b      	str	r3, [r7, #52]	; 0x34
         (value & 0x0000000000FF0000UL) << 24 | (value & 0x00000000FF000000UL) << 8 |
 80003aa:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80003ae:	4623      	mov	r3, r4
 80003b0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80003b4:	4602      	mov	r2, r0
 80003b6:	4313      	orrs	r3, r2
 80003b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80003ba:	462b      	mov	r3, r5
 80003bc:	460a      	mov	r2, r1
 80003be:	4313      	orrs	r3, r2
 80003c0:	62fb      	str	r3, [r7, #44]	; 0x2c
         (value & 0x000000FF00000000UL) >> 8 | (value & 0x0000FF0000000000UL) >> 24 |
 80003c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80003c6:	f04f 0000 	mov.w	r0, #0
 80003ca:	f04f 0100 	mov.w	r1, #0
 80003ce:	0e10      	lsrs	r0, r2, #24
 80003d0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80003d4:	0e19      	lsrs	r1, r3, #24
 80003d6:	f400 037f 	and.w	r3, r0, #16711680	; 0xff0000
 80003da:	623b      	str	r3, [r7, #32]
 80003dc:	2300      	movs	r3, #0
 80003de:	627b      	str	r3, [r7, #36]	; 0x24
 80003e0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80003e4:	4623      	mov	r3, r4
 80003e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80003ea:	4602      	mov	r2, r0
 80003ec:	4313      	orrs	r3, r2
 80003ee:	61bb      	str	r3, [r7, #24]
 80003f0:	462b      	mov	r3, r5
 80003f2:	460a      	mov	r2, r1
 80003f4:	4313      	orrs	r3, r2
 80003f6:	61fb      	str	r3, [r7, #28]
         (value & 0x00FF000000000000UL) >> 40 | (value & 0xFF00000000000000UL) >> 56;
 80003f8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80003fc:	f04f 0200 	mov.w	r2, #0
 8000400:	f04f 0300 	mov.w	r3, #0
 8000404:	0a0a      	lsrs	r2, r1, #8
 8000406:	2300      	movs	r3, #0
 8000408:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 800040c:	613b      	str	r3, [r7, #16]
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
         (value & 0x000000FF00000000UL) >> 8 | (value & 0x0000FF0000000000UL) >> 24 |
 8000412:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000416:	4623      	mov	r3, r4
 8000418:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800041c:	4602      	mov	r2, r0
 800041e:	4313      	orrs	r3, r2
 8000420:	60bb      	str	r3, [r7, #8]
 8000422:	462b      	mov	r3, r5
 8000424:	460a      	mov	r2, r1
 8000426:	4313      	orrs	r3, r2
 8000428:	60fb      	str	r3, [r7, #12]
         (value & 0x00FF000000000000UL) >> 40 | (value & 0xFF00000000000000UL) >> 56;
 800042a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800042e:	f04f 0200 	mov.w	r2, #0
 8000432:	f04f 0300 	mov.w	r3, #0
 8000436:	0e0a      	lsrs	r2, r1, #24
 8000438:	2300      	movs	r3, #0
 800043a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800043e:	4621      	mov	r1, r4
 8000440:	4311      	orrs	r1, r2
 8000442:	6039      	str	r1, [r7, #0]
 8000444:	4629      	mov	r1, r5
 8000446:	4319      	orrs	r1, r3
 8000448:	6079      	str	r1, [r7, #4]
 800044a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800044e:	4610      	mov	r0, r2
 8000450:	4619      	mov	r1, r3
 8000452:	3764      	adds	r7, #100	; 0x64
 8000454:	46bd      	mov	sp, r7
 8000456:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, r10, r11}
 800045a:	4770      	bx	lr

0800045c <System_Init>:

void System_Init(){
 800045c:	          b580      	push	{r7, lr}
 800045e:	          f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 8000462:	          af02      	add	r7, sp, #8
    SysTick_Config(millisec);
 8000464:	          f640 709f 	movw	r0, #3999	; 0xf9f
 8000468:	          f7ff ff1a 	bl	80002a0 <SysTick_Config>
    gpio_init(LED, General_output, Push_pull, no_pull, Low_speed);
 800046c:	          2300      	movs	r3, #0
 800046e:	          9300      	str	r3, [sp, #0]
 8000470:	          2300      	movs	r3, #0
 8000472:	          2200      	movs	r2, #0
 8000474:	          2101      	movs	r1, #1
 8000476:	          200a      	movs	r0, #10
 8000478:	          f001 fcae 	bl	8001dd8 <gpio_init>
    gpio_init(SOIL_SENSOR_PWR_EN, General_output, Push_pull, no_pull, Low_speed);
 800047c:	          2300      	movs	r3, #0
 800047e:	          9300      	str	r3, [sp, #0]
 8000480:	          2300      	movs	r3, #0
 8000482:	          2200      	movs	r2, #0
 8000484:	          2101      	movs	r1, #1
 8000486:	          2009      	movs	r0, #9
 8000488:	          f001 fca6 	bl	8001dd8 <gpio_init>
    gpio_init(TEMP_SENSOR_PWR_EN, General_output, Push_pull, no_pull, Low_speed);
 800048c:	          2300      	movs	r3, #0
 800048e:	          9300      	str	r3, [sp, #0]
 8000490:	          2300      	movs	r3, #0
 8000492:	          2200      	movs	r2, #0
 8000494:	          2101      	movs	r1, #1
 8000496:	          2028      	movs	r0, #40	; 0x28
 8000498:	          f001 fc9e 	bl	8001dd8 <gpio_init>

    gpio_state(TEMP_SENSOR_PWR_EN, HIGH);
 800049c:	          2101      	movs	r1, #1
 800049e:	          2028      	movs	r0, #40	; 0x28
 80004a0:	          f001 fd7e 	bl	8001fa0 <gpio_state>
    gpio_state(SOIL_SENSOR_PWR_EN, HIGH);
 80004a4:	          2101      	movs	r1, #1
 80004a6:	          2009      	movs	r0, #9
 80004a8:	          f001 fd7a 	bl	8001fa0 <gpio_state>

    gpio_init(UART2_TX, PA2_USART2_TX, Push_pull, pull_up, High_speed);
 80004ac:	          2302      	movs	r3, #2
 80004ae:	          9300      	str	r3, [sp, #0]
 80004b0:	          2301      	movs	r3, #1
 80004b2:	          2200      	movs	r2, #0
 80004b4:	          210b      	movs	r1, #11
 80004b6:	          2003      	movs	r0, #3
 80004b8:	          f001 fc8e 	bl	8001dd8 <gpio_init>

    ow = (OneWire){.uart=USART2};
 80004bc:	          4bb0      	ldr	r3, [pc, #704]	; (8000780 <System_Init+0x324>)
 80004be:	          4618      	mov	r0, r3
 80004c0:	          23c4      	movs	r3, #196	; 0xc4
 80004c2:	          461a      	mov	r2, r3
 80004c4:	          2100      	movs	r1, #0
 80004c6:	          f009 fa8b 	bl	80099e0 <memset>
 80004ca:	          4bad      	ldr	r3, [pc, #692]	; (8000780 <System_Init+0x324>)
 80004cc:	          4aad      	ldr	r2, [pc, #692]	; (8000784 <System_Init+0x328>)
 80004ce:	          601a      	str	r2, [r3, #0]
    for(uint8_t i = 0; i < 12; i++){
 80004d0:	          2300      	movs	r3, #0
 80004d2:	          f887 32e7 	strb.w	r3, [r7, #743]	; 0x2e7
 80004d6:	      /-- e01f      	b.n	8000518 <System_Init+0xbc>
        sensors[i] = (DS18B20){0};
 80004d8:	   /--|-> f897 22e7 	ldrb.w	r2, [r7, #743]	; 0x2e7
 80004dc:	   |  |   49aa      	ldr	r1, [pc, #680]	; (8000788 <System_Init+0x32c>)
 80004de:	   |  |   4613      	mov	r3, r2
 80004e0:	   |  |   00db      	lsls	r3, r3, #3
 80004e2:	   |  |   1a9b      	subs	r3, r3, r2
 80004e4:	   |  |   009b      	lsls	r3, r3, #2
 80004e6:	   |  |   440b      	add	r3, r1
 80004e8:	   |  |   461a      	mov	r2, r3
 80004ea:	   |  |   2300      	movs	r3, #0
 80004ec:	   |  |   6013      	str	r3, [r2, #0]
 80004ee:	   |  |   6053      	str	r3, [r2, #4]
 80004f0:	   |  |   6093      	str	r3, [r2, #8]
 80004f2:	   |  |   60d3      	str	r3, [r2, #12]
 80004f4:	   |  |   6113      	str	r3, [r2, #16]
 80004f6:	   |  |   6153      	str	r3, [r2, #20]
 80004f8:	   |  |   6193      	str	r3, [r2, #24]
        sensors[i].ow = &ow;
 80004fa:	   |  |   f897 22e7 	ldrb.w	r2, [r7, #743]	; 0x2e7
 80004fe:	   |  |   49a2      	ldr	r1, [pc, #648]	; (8000788 <System_Init+0x32c>)
 8000500:	   |  |   4613      	mov	r3, r2
 8000502:	   |  |   00db      	lsls	r3, r3, #3
 8000504:	   |  |   1a9b      	subs	r3, r3, r2
 8000506:	   |  |   009b      	lsls	r3, r3, #2
 8000508:	   |  |   440b      	add	r3, r1
 800050a:	   |  |   4a9d      	ldr	r2, [pc, #628]	; (8000780 <System_Init+0x324>)
 800050c:	   |  |   601a      	str	r2, [r3, #0]
    for(uint8_t i = 0; i < 12; i++){
 800050e:	   |  |   f897 32e7 	ldrb.w	r3, [r7, #743]	; 0x2e7
 8000512:	   |  |   3301      	adds	r3, #1
 8000514:	   |  |   f887 32e7 	strb.w	r3, [r7, #743]	; 0x2e7
 8000518:	   |  \-> f897 32e7 	ldrb.w	r3, [r7, #743]	; 0x2e7
 800051c:	   |      2b0b      	cmp	r3, #11
 800051e:	   \----- d9db      	bls.n	80004d8 <System_Init+0x7c>
    }

    TemperatureSensorsMeasure();
 8000520:	          f000 fe98 	bl	8001254 <TemperatureSensorsMeasure>
    // GSM_SetPowerState(&sim7000g, LOW);
    // NVIC_SystemReset();
    // GSM_SendSMS(&sim7000g, "Test_GSM_module", "+79994643543");
    adc = (ADC){
 8000524:	          4b99      	ldr	r3, [pc, #612]	; (800078c <System_Init+0x330>)
 8000526:	          4618      	mov	r0, r3
 8000528:	          23dc      	movs	r3, #220	; 0xdc
 800052a:	          461a      	mov	r2, r3
 800052c:	          2100      	movs	r1, #0
 800052e:	          f009 fa57 	bl	80099e0 <memset>
 8000532:	          4b96      	ldr	r3, [pc, #600]	; (800078c <System_Init+0x330>)
 8000534:	          4a96      	ldr	r2, [pc, #600]	; (8000790 <System_Init+0x334>)
 8000536:	          601a      	str	r2, [r3, #0]
 8000538:	          4b94      	ldr	r3, [pc, #592]	; (800078c <System_Init+0x330>)
 800053a:	          2201      	movs	r2, #1
 800053c:	          f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8000540:	          4b92      	ldr	r3, [pc, #584]	; (800078c <System_Init+0x330>)
 8000542:	          2205      	movs	r2, #5
 8000544:	          f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
        .resolution = ADC_12bit,
        .mode = ADC_SINGLE_MODE,
        .trigger.polarity = ADC_Software_trigger,
        .ovrsmpl_ratio = OVRSMPL_32x
    };
    ADC_Init(&adc);
 8000548:	          4890      	ldr	r0, [pc, #576]	; (800078c <System_Init+0x330>)
 800054a:	          f001 f933 	bl	80017b4 <ADC_Init>
    ADC_InitRegChannel(&adc, CH12, PA7, SMP_92);
 800054e:	          2305      	movs	r3, #5
 8000550:	          2208      	movs	r2, #8
 8000552:	          210d      	movs	r1, #13
 8000554:	          488d      	ldr	r0, [pc, #564]	; (800078c <System_Init+0x330>)
 8000556:	          f001 fa2d 	bl	80019b4 <ADC_InitRegChannel>
    ADC_InitRegChannel(&adc, CH8, PA3, SMP_92);
 800055a:	          2305      	movs	r3, #5
 800055c:	          2204      	movs	r2, #4
 800055e:	          2109      	movs	r1, #9
 8000560:	          488a      	ldr	r0, [pc, #552]	; (800078c <System_Init+0x330>)
 8000562:	          f001 fa27 	bl	80019b4 <ADC_InitRegChannel>
    ADC_InitRegChannel(&adc, CH13, PC4, SMP_92);
 8000566:	          2305      	movs	r3, #5
 8000568:	          2225      	movs	r2, #37	; 0x25
 800056a:	          210e      	movs	r1, #14
 800056c:	          4887      	ldr	r0, [pc, #540]	; (800078c <System_Init+0x330>)
 800056e:	          f001 fa21 	bl	80019b4 <ADC_InitRegChannel>
    ADC_InitRegChannel(&adc, CH15, PB0, SMP_92);
 8000572:	          2305      	movs	r3, #5
 8000574:	          2211      	movs	r2, #17
 8000576:	          2110      	movs	r1, #16
 8000578:	          4884      	ldr	r0, [pc, #528]	; (800078c <System_Init+0x330>)
 800057a:	          f001 fa1b 	bl	80019b4 <ADC_InitRegChannel>
    ADC_InitRegChannel(&adc, CH14, PC5, SMP_92);
 800057e:	          2305      	movs	r3, #5
 8000580:	          2226      	movs	r2, #38	; 0x26
 8000582:	          210f      	movs	r1, #15
 8000584:	          4881      	ldr	r0, [pc, #516]	; (800078c <System_Init+0x330>)
 8000586:	          f001 fa15 	bl	80019b4 <ADC_InitRegChannel>
    ADC_InitRegChannel(&adc, CH9, PA4, SMP_92);
 800058a:	          2305      	movs	r3, #5
 800058c:	          2205      	movs	r2, #5
 800058e:	          210a      	movs	r1, #10
 8000590:	          487e      	ldr	r0, [pc, #504]	; (800078c <System_Init+0x330>)
 8000592:	          f001 fa0f 	bl	80019b4 <ADC_InitRegChannel>
    ADC_InitRegChannel(&adc, CH10, PA5, SMP_92);
 8000596:	          2305      	movs	r3, #5
 8000598:	          2206      	movs	r2, #6
 800059a:	          210b      	movs	r1, #11
 800059c:	          487b      	ldr	r0, [pc, #492]	; (800078c <System_Init+0x330>)
 800059e:	          f001 fa09 	bl	80019b4 <ADC_InitRegChannel>
    ADC_InitRegChannel(&adc, CH6, PA1, SMP_92);
 80005a2:	          2305      	movs	r3, #5
 80005a4:	          2202      	movs	r2, #2
 80005a6:	          2107      	movs	r1, #7
 80005a8:	          4878      	ldr	r0, [pc, #480]	; (800078c <System_Init+0x330>)
 80005aa:	          f001 fa03 	bl	80019b4 <ADC_InitRegChannel>
    ADC_InitRegChannel(&adc, CH4, PC3, SMP_92);
 80005ae:	          2305      	movs	r3, #5
 80005b0:	          2224      	movs	r2, #36	; 0x24
 80005b2:	          2105      	movs	r1, #5
 80005b4:	          4875      	ldr	r0, [pc, #468]	; (800078c <System_Init+0x330>)
 80005b6:	          f001 f9fd 	bl	80019b4 <ADC_InitRegChannel>
    ADC_InitRegChannel(&adc, CH2, PC1, SMP_92);
 80005ba:	          2305      	movs	r3, #5
 80005bc:	          2222      	movs	r2, #34	; 0x22
 80005be:	          2103      	movs	r1, #3
 80005c0:	          4872      	ldr	r0, [pc, #456]	; (800078c <System_Init+0x330>)
 80005c2:	          f001 f9f7 	bl	80019b4 <ADC_InitRegChannel>
    ADC_InitRegChannel(&adc, CH5, PA0, SMP_92);
 80005c6:	          2305      	movs	r3, #5
 80005c8:	          2201      	movs	r2, #1
 80005ca:	          2106      	movs	r1, #6
 80005cc:	          486f      	ldr	r0, [pc, #444]	; (800078c <System_Init+0x330>)
 80005ce:	          f001 f9f1 	bl	80019b4 <ADC_InitRegChannel>
    ADC_InitRegChannel(&adc, VREF, uninitialized, SMP_92);
 80005d2:	          2305      	movs	r3, #5
 80005d4:	          2200      	movs	r2, #0
 80005d6:	          2101      	movs	r1, #1
 80005d8:	          486c      	ldr	r0, [pc, #432]	; (800078c <System_Init+0x330>)
 80005da:	          f001 f9eb 	bl	80019b4 <ADC_InitRegChannel>
    adc.ADCx->CR |= ADC_CR_ADEN;
 80005de:	          4b6b      	ldr	r3, [pc, #428]	; (800078c <System_Init+0x330>)
 80005e0:	          681b      	ldr	r3, [r3, #0]
 80005e2:	          689a      	ldr	r2, [r3, #8]
 80005e4:	          4b69      	ldr	r3, [pc, #420]	; (800078c <System_Init+0x330>)
 80005e6:	          681b      	ldr	r3, [r3, #0]
 80005e8:	          f042 0201 	orr.w	r2, r2, #1
 80005ec:	          609a      	str	r2, [r3, #8]
    while(!(ADC1->ISR & ADC_ISR_ADRDY));
 80005ee:	          bf00      	nop
 80005f0:	      /-> 4b67      	ldr	r3, [pc, #412]	; (8000790 <System_Init+0x334>)
 80005f2:	      |   681b      	ldr	r3, [r3, #0]
 80005f4:	      |   f003 0301 	and.w	r3, r3, #1
 80005f8:	      |   2b00      	cmp	r3, #0
 80005fa:	      \-- d0f9      	beq.n	80005f0 <System_Init+0x194>
    adc.ADCx->ISR |= ADC_ISR_ADRDY;
 80005fc:	          4b63      	ldr	r3, [pc, #396]	; (800078c <System_Init+0x330>)
 80005fe:	          681b      	ldr	r3, [r3, #0]
 8000600:	          681a      	ldr	r2, [r3, #0]
 8000602:	          4b62      	ldr	r3, [pc, #392]	; (800078c <System_Init+0x330>)
 8000604:	          681b      	ldr	r3, [r3, #0]
 8000606:	          f042 0201 	orr.w	r2, r2, #1
 800060a:	          601a      	str	r2, [r3, #0]
    ADC_Start(&adc);
 800060c:	          485f      	ldr	r0, [pc, #380]	; (800078c <System_Init+0x330>)
 800060e:	          f001 fac8 	bl	8001ba2 <ADC_Start>
    while(adc.measure_process);
 8000612:	          bf00      	nop
 8000614:	      /-> 4b5d      	ldr	r3, [pc, #372]	; (800078c <System_Init+0x330>)
 8000616:	      |   f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 800061a:	      |   2b00      	cmp	r3, #0
 800061c:	      \-- d1fa      	bne.n	8000614 <System_Init+0x1b8>
    gpio_state(TEMP_SENSOR_PWR_EN, LOW);
 800061e:	          2100      	movs	r1, #0
 8000620:	          2028      	movs	r0, #40	; 0x28
 8000622:	          f001 fcbd 	bl	8001fa0 <gpio_state>
    gpio_state(SOIL_SENSOR_PWR_EN, LOW);
 8000626:	          2100      	movs	r1, #0
 8000628:	          2009      	movs	r0, #9
 800062a:	          f001 fcb9 	bl	8001fa0 <gpio_state>


    SX1268 = (SX126x){
 800062e:	          4b59      	ldr	r3, [pc, #356]	; (8000794 <System_Init+0x338>)
 8000630:	          4618      	mov	r0, r3
 8000632:	          23bc      	movs	r3, #188	; 0xbc
 8000634:	          461a      	mov	r2, r3
 8000636:	          2100      	movs	r1, #0
 8000638:	          f009 f9d2 	bl	80099e0 <memset>
 800063c:	          4b55      	ldr	r3, [pc, #340]	; (8000794 <System_Init+0x338>)
 800063e:	          2220      	movs	r2, #32
 8000640:	          701a      	strb	r2, [r3, #0]
 8000642:	          4b54      	ldr	r3, [pc, #336]	; (8000794 <System_Init+0x338>)
 8000644:	          221f      	movs	r2, #31
 8000646:	          705a      	strb	r2, [r3, #1]
 8000648:	          4b52      	ldr	r3, [pc, #328]	; (8000794 <System_Init+0x338>)
 800064a:	          221e      	movs	r2, #30
 800064c:	          709a      	strb	r2, [r3, #2]
 800064e:	          4b51      	ldr	r3, [pc, #324]	; (8000794 <System_Init+0x338>)
 8000650:	          2227      	movs	r2, #39	; 0x27
 8000652:	          70da      	strb	r2, [r3, #3]
 8000654:	          4b4f      	ldr	r3, [pc, #316]	; (8000794 <System_Init+0x338>)
 8000656:	          2210      	movs	r2, #16
 8000658:	          711a      	strb	r2, [r3, #4]
 800065a:	          4b4e      	ldr	r3, [pc, #312]	; (8000794 <System_Init+0x338>)
 800065c:	          221d      	movs	r2, #29
 800065e:	          715a      	strb	r2, [r3, #5]
 8000660:	          4b4c      	ldr	r3, [pc, #304]	; (8000794 <System_Init+0x338>)
 8000662:	          2217      	movs	r2, #23
 8000664:	          719a      	strb	r2, [r3, #6]
 8000666:	          4b4b      	ldr	r3, [pc, #300]	; (8000794 <System_Init+0x338>)
 8000668:	          2209      	movs	r2, #9
 800066a:	          71da      	strb	r2, [r3, #7]
 800066c:	          4b49      	ldr	r3, [pc, #292]	; (8000794 <System_Init+0x338>)
 800066e:	          2209      	movs	r2, #9
 8000670:	          721a      	strb	r2, [r3, #8]
 8000672:	          4b48      	ldr	r3, [pc, #288]	; (8000794 <System_Init+0x338>)
 8000674:	          2209      	movs	r2, #9
 8000676:	          725a      	strb	r2, [r3, #9]
 8000678:	          4b46      	ldr	r3, [pc, #280]	; (8000794 <System_Init+0x338>)
 800067a:	          4a47      	ldr	r2, [pc, #284]	; (8000798 <System_Init+0x33c>)
 800067c:	          60da      	str	r2, [r3, #12]
 800067e:	          4b45      	ldr	r3, [pc, #276]	; (8000794 <System_Init+0x338>)
 8000680:	          2201      	movs	r2, #1
 8000682:	          745a      	strb	r2, [r3, #17]
 8000684:	          4b43      	ldr	r3, [pc, #268]	; (8000794 <System_Init+0x338>)
 8000686:	          2201      	movs	r2, #1
 8000688:	          749a      	strb	r2, [r3, #18]
 800068a:	          4b42      	ldr	r3, [pc, #264]	; (8000794 <System_Init+0x338>)
 800068c:	          4a43      	ldr	r2, [pc, #268]	; (800079c <System_Init+0x340>)
 800068e:	          615a      	str	r2, [r3, #20]
 8000690:	          4b40      	ldr	r3, [pc, #256]	; (8000794 <System_Init+0x338>)
 8000692:	          2201      	movs	r2, #1
 8000694:	          765a      	strb	r2, [r3, #25]
 8000696:	          4b3f      	ldr	r3, [pc, #252]	; (8000794 <System_Init+0x338>)
 8000698:	          2208      	movs	r2, #8
 800069a:	          769a      	strb	r2, [r3, #26]
 800069c:	          4b3d      	ldr	r3, [pc, #244]	; (8000794 <System_Init+0x338>)
 800069e:	          2204      	movs	r2, #4
 80006a0:	          76da      	strb	r2, [r3, #27]
 80006a2:	          4b3c      	ldr	r3, [pc, #240]	; (8000794 <System_Init+0x338>)
 80006a4:	          2201      	movs	r2, #1
 80006a6:	          771a      	strb	r2, [r3, #28]
 80006a8:	          4b3a      	ldr	r3, [pc, #232]	; (8000794 <System_Init+0x338>)
 80006aa:	          2208      	movs	r2, #8
 80006ac:	          83da      	strh	r2, [r3, #30]
 80006ae:	          4b39      	ldr	r3, [pc, #228]	; (8000794 <System_Init+0x338>)
 80006b0:	          220e      	movs	r2, #14
 80006b2:	          f883 2020 	strb.w	r2, [r3, #32]
 80006b6:	          4b37      	ldr	r3, [pc, #220]	; (8000794 <System_Init+0x338>)
 80006b8:	          2203      	movs	r2, #3
 80006ba:	          f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80006be:	          4b35      	ldr	r3, [pc, #212]	; (8000794 <System_Init+0x338>)
 80006c0:	          2238      	movs	r2, #56	; 0x38
 80006c2:	          f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80006c6:	          4b33      	ldr	r3, [pc, #204]	; (8000794 <System_Init+0x338>)
 80006c8:	          f241 4224 	movw	r2, #5156	; 0x1424
 80006cc:	          84da      	strh	r2, [r3, #38]	; 0x26
        .crc_on_off = SX126X_CRC_ON,
        .iq_polarity = SX126X_STANDARD_IQ,
        .overCurrentProtection = 0x38,
        .sync_word = 0x1424 //0x1424
    };
    SX126x_Init(&SX1268);
 80006ce:	          4831      	ldr	r0, [pc, #196]	; (8000794 <System_Init+0x338>)
 80006d0:	          f006 fe3a 	bl	8007348 <SX126x_Init>
    uint8_t init_status = RTC_Init();
 80006d4:	          f003 fb08 	bl	8003ce8 <RTC_Init>
 80006d8:	          4603      	mov	r3, r0
 80006da:	          f887 32e5 	strb.w	r3, [r7, #741]	; 0x2e5
    WAKEUP_PERIOD_SEC = 600;
 80006de:	          4b30      	ldr	r3, [pc, #192]	; (80007a0 <System_Init+0x344>)
 80006e0:	          f44f 7216 	mov.w	r2, #600	; 0x258
 80006e4:	          801a      	strh	r2, [r3, #0]

    if(init_status) {  // ship mode
 80006e6:	          f897 32e5 	ldrb.w	r3, [r7, #741]	; 0x2e5
 80006ea:	          2b00      	cmp	r3, #0
 80006ec:	      /-- d00a      	beq.n	8000704 <System_Init+0x2a8>
        SX126x_SendData(&SX1268, (uint8_t*)"Start", 5);
 80006ee:	      |   2205      	movs	r2, #5
 80006f0:	      |   492c      	ldr	r1, [pc, #176]	; (80007a4 <System_Init+0x348>)
 80006f2:	      |   4828      	ldr	r0, [pc, #160]	; (8000794 <System_Init+0x338>)
 80006f4:	      |   f006 fee4 	bl	80074c0 <SX126x_SendData>
        write_single_bkp_reg(10, WAKEUP_PERIOD_SEC);
 80006f8:	      |   4b29      	ldr	r3, [pc, #164]	; (80007a0 <System_Init+0x344>)
 80006fa:	      |   881b      	ldrh	r3, [r3, #0]
 80006fc:	      |   4619      	mov	r1, r3
 80006fe:	      |   200a      	movs	r0, #10
 8000700:	      |   f003 fbea 	bl	8003ed8 <write_single_bkp_reg>
    }

    if(SX1268.self_addr != 1){
 8000704:	      \-> 4b23      	ldr	r3, [pc, #140]	; (8000794 <System_Init+0x338>)
 8000706:	          7c5b      	ldrb	r3, [r3, #17]
 8000708:	          2b01      	cmp	r3, #1
 800070a:	/-------- f000 80c7 	beq.w	800089c <System_Init+0x440>
        uint16_t measured_data[24] = {0};
 800070e:	|         f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8000712:	|         f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8000716:	|         4618      	mov	r0, r3
 8000718:	|         2330      	movs	r3, #48	; 0x30
 800071a:	|         461a      	mov	r2, r3
 800071c:	|         2100      	movs	r1, #0
 800071e:	|         f009 f95f 	bl	80099e0 <memset>
        uint8_t gs_packet[53] = {0};
 8000722:	|         f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8000726:	|         f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800072a:	|         2200      	movs	r2, #0
 800072c:	|         601a      	str	r2, [r3, #0]
 800072e:	|         3304      	adds	r3, #4
 8000730:	|         2231      	movs	r2, #49	; 0x31
 8000732:	|         2100      	movs	r1, #0
 8000734:	|         4618      	mov	r0, r3
 8000736:	|         f009 f953 	bl	80099e0 <memset>
        gs_packet[0] = 0x55;
 800073a:	|         f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800073e:	|         f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8000742:	|         2255      	movs	r2, #85	; 0x55
 8000744:	|         701a      	strb	r2, [r3, #0]
        gs_packet[1] = SX1268.self_addr;
 8000746:	|         4b13      	ldr	r3, [pc, #76]	; (8000794 <System_Init+0x338>)
 8000748:	|         7c5a      	ldrb	r2, [r3, #17]
 800074a:	|         f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800074e:	|         f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8000752:	|         705a      	strb	r2, [r3, #1]
        gs_packet[2] = 0x01;
 8000754:	|         f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8000758:	|         f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800075c:	|         2201      	movs	r2, #1
 800075e:	|         709a      	strb	r2, [r3, #2]
        gs_packet[3] = MY_PERIODIC_DATA;
 8000760:	|         f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8000764:	|         f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8000768:	|         2211      	movs	r2, #17
 800076a:	|         70da      	strb	r2, [r3, #3]
        gs_packet[4] = sizeof(measured_data);
 800076c:	|         f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8000770:	|         f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8000774:	|         2230      	movs	r2, #48	; 0x30
 8000776:	|         711a      	strb	r2, [r3, #4]
        // [control_word, self_id, target_id, cmd, [datetime[], adc_data[], temp_data[], vbat, gsm_vbat],]
        //       1          1         1       1       7           11*2         12*2      1*2     1*2
        for(uint8_t i = 0; i < 12; i++){
 8000778:	|         2300      	movs	r3, #0
 800077a:	|         f887 32e6 	strb.w	r3, [r7, #742]	; 0x2e6
 800077e:	|  /----- e03e      	b.n	80007fe <System_Init+0x3a2>
 8000780:	|  |      0cb0      	lsrs	r0, r6, #18
 8000782:	|  |      2000      	movs	r0, #0
 8000784:	|  |      4400      	add	r0, r0
 8000786:	|  |      4000      	ands	r0, r0
 8000788:	|  |      0b60      	lsrs	r0, r4, #13
 800078a:	|  |      2000      	movs	r0, #0
 800078c:	|  |      0a84      	lsrs	r4, r0, #10
 800078e:	|  |      2000      	movs	r0, #0
 8000790:	|  |      0000      	movs	r0, r0
 8000792:	|  |      5004      	str	r4, [r0, r0]
 8000794:	|  |      09c8      	lsrs	r0, r1, #7
 8000796:	|  |      2000      	movs	r0, #0
 8000798:	|  |      3800      	subs	r0, #0
 800079a:	|  |      4000      	ands	r0, r0
 800079c:	|  |      4780      	blx	r0
 800079e:	|  |      19a1      	adds	r1, r4, r6
 80007a0:	|  |      1288      	asrs	r0, r1, #10
 80007a2:	|  |      2000      	movs	r0, #0
 80007a4:	|  |      aed0      	add	r6, sp, #832	; 0x340
 80007a6:	|  |      0800      	lsrs	r0, r0, #32
            measured_data[i] = adc.reg_channel_queue[i].result;
 80007a8:	|  |  /-> f897 22e6 	ldrb.w	r2, [r7, #742]	; 0x2e6
 80007ac:	|  |  |   f897 12e6 	ldrb.w	r1, [r7, #742]	; 0x2e6
 80007b0:	|  |  |   483f      	ldr	r0, [pc, #252]	; (80008b0 <System_Init+0x454>)
 80007b2:	|  |  |   4613      	mov	r3, r2
 80007b4:	|  |  |   005b      	lsls	r3, r3, #1
 80007b6:	|  |  |   4413      	add	r3, r2
 80007b8:	|  |  |   009b      	lsls	r3, r3, #2
 80007ba:	|  |  |   4403      	add	r3, r0
 80007bc:	|  |  |   330c      	adds	r3, #12
 80007be:	|  |  |   881a      	ldrh	r2, [r3, #0]
 80007c0:	|  |  |   f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80007c4:	|  |  |   f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80007c8:	|  |  |   f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            measured_data[i + 12] = sensors[i].scratchpad.temperature;
 80007cc:	|  |  |   f897 22e6 	ldrb.w	r2, [r7, #742]	; 0x2e6
 80007d0:	|  |  |   f897 32e6 	ldrb.w	r3, [r7, #742]	; 0x2e6
 80007d4:	|  |  |   f103 010c 	add.w	r1, r3, #12
 80007d8:	|  |  |   4836      	ldr	r0, [pc, #216]	; (80008b4 <System_Init+0x458>)
 80007da:	|  |  |   4613      	mov	r3, r2
 80007dc:	|  |  |   00db      	lsls	r3, r3, #3
 80007de:	|  |  |   1a9b      	subs	r3, r3, r2
 80007e0:	|  |  |   009b      	lsls	r3, r3, #2
 80007e2:	|  |  |   4403      	add	r3, r0
 80007e4:	|  |  |   330c      	adds	r3, #12
 80007e6:	|  |  |   881a      	ldrh	r2, [r3, #0]
 80007e8:	|  |  |   f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80007ec:	|  |  |   f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80007f0:	|  |  |   f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        for(uint8_t i = 0; i < 12; i++){
 80007f4:	|  |  |   f897 32e6 	ldrb.w	r3, [r7, #742]	; 0x2e6
 80007f8:	|  |  |   3301      	adds	r3, #1
 80007fa:	|  |  |   f887 32e6 	strb.w	r3, [r7, #742]	; 0x2e6
 80007fe:	|  \--|-> f897 32e6 	ldrb.w	r3, [r7, #742]	; 0x2e6
 8000802:	|     |   2b0b      	cmp	r3, #11
 8000804:	|     \-- d9d0      	bls.n	80007a8 <System_Init+0x34c>
        }
        measured_data[11] = adc.vdda_mvolt;
 8000806:	|         4b2a      	ldr	r3, [pc, #168]	; (80008b0 <System_Init+0x454>)
 8000808:	|         f8b3 20d6 	ldrh.w	r2, [r3, #214]	; 0xd6
 800080c:	|         f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8000810:	|         f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8000814:	|         82da      	strh	r2, [r3, #22]
        memcpy(gs_packet + 5, measured_data, sizeof(measured_data));
 8000816:	|         f107 0334 	add.w	r3, r7, #52	; 0x34
 800081a:	|         3305      	adds	r3, #5
 800081c:	|         1d39      	adds	r1, r7, #4
 800081e:	|         2230      	movs	r2, #48	; 0x30
 8000820:	|         4618      	mov	r0, r3
 8000822:	|         f009 f91d 	bl	8009a60 <memcpy>
        gpio_state(TEMP_SENSOR_PWR_EN, LOW);
 8000826:	|         2100      	movs	r1, #0
 8000828:	|         2028      	movs	r0, #40	; 0x28
 800082a:	|         f001 fbb9 	bl	8001fa0 <gpio_state>
        gpio_state(SOIL_SENSOR_PWR_EN, LOW);
 800082e:	|         2100      	movs	r1, #0
 8000830:	|         2009      	movs	r0, #9
 8000832:	|         f001 fbb5 	bl	8001fa0 <gpio_state>
        gpio_init(SOIL_SENSOR_PWR_EN, Input_mode, Open_drain, pull_down, Input);
 8000836:	|         2304      	movs	r3, #4
 8000838:	|         9300      	str	r3, [sp, #0]
 800083a:	|         2302      	movs	r3, #2
 800083c:	|         2201      	movs	r2, #1
 800083e:	|         2100      	movs	r1, #0
 8000840:	|         2009      	movs	r0, #9
 8000842:	|         f001 fac9 	bl	8001dd8 <gpio_init>
        gpio_init(TEMP_SENSOR_PWR_EN, Input_mode, Open_drain, pull_down, Input);
 8000846:	|         2304      	movs	r3, #4
 8000848:	|         9300      	str	r3, [sp, #0]
 800084a:	|         2302      	movs	r3, #2
 800084c:	|         2201      	movs	r2, #1
 800084e:	|         2100      	movs	r1, #0
 8000850:	|         2028      	movs	r0, #40	; 0x28
 8000852:	|         f001 fac1 	bl	8001dd8 <gpio_init>
        gpio_init(UART2_TX, Input_mode, Open_drain, pull_down, Input);
 8000856:	|         2304      	movs	r3, #4
 8000858:	|         9300      	str	r3, [sp, #0]
 800085a:	|         2302      	movs	r3, #2
 800085c:	|         2201      	movs	r2, #1
 800085e:	|         2100      	movs	r1, #0
 8000860:	|         2003      	movs	r0, #3
 8000862:	|         f001 fab9 	bl	8001dd8 <gpio_init>
        SX126x_SendData(&SX1268, gs_packet, sizeof(gs_packet));
 8000866:	|         f107 0334 	add.w	r3, r7, #52	; 0x34
 800086a:	|         2235      	movs	r2, #53	; 0x35
 800086c:	|         4619      	mov	r1, r3
 800086e:	|         4812      	ldr	r0, [pc, #72]	; (80008b8 <System_Init+0x45c>)
 8000870:	|         f006 fe26 	bl	80074c0 <SX126x_SendData>

        WAKEUP_PERIOD_SEC = RTC->BKP10R;
 8000874:	|         4b11      	ldr	r3, [pc, #68]	; (80008bc <System_Init+0x460>)
 8000876:	|         6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000878:	|         b29a      	uxth	r2, r3
 800087a:	|         4b11      	ldr	r3, [pc, #68]	; (80008c0 <System_Init+0x464>)
 800087c:	|         801a      	strh	r2, [r3, #0]
        RTC_auto_wakeup_enable(WAKEUP_PERIOD_SEC);
 800087e:	|         4b10      	ldr	r3, [pc, #64]	; (80008c0 <System_Init+0x464>)
 8000880:	|         881b      	ldrh	r3, [r3, #0]
 8000882:	|         4618      	mov	r0, r3
 8000884:	|         f002 ff92 	bl	80037ac <RTC_auto_wakeup_enable>
        Delay(2000);
 8000888:	|         f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800088c:	|         f005 f9a2 	bl	8005bd4 <Delay>
        SX126x_SetSleep(&SX1268);
 8000890:	|         4809      	ldr	r0, [pc, #36]	; (80008b8 <System_Init+0x45c>)
 8000892:	|         f007 f92f 	bl	8007af4 <SX126x_SetSleep>
        stop_cortex();
 8000896:	|         f005 fb43 	bl	8005f20 <stop_cortex>
    } else {
        SX126x_SetRx(&SX1268, 0);
    }

}
 800089a:	|     /-- e003      	b.n	80008a4 <System_Init+0x448>
        SX126x_SetRx(&SX1268, 0);
 800089c:	\-----|-> 2100      	movs	r1, #0
 800089e:	      |   4806      	ldr	r0, [pc, #24]	; (80008b8 <System_Init+0x45c>)
 80008a0:	      |   f007 f8a8 	bl	80079f4 <SX126x_SetRx>
}
 80008a4:	      \-> bf00      	nop
 80008a6:	          f507 773a 	add.w	r7, r7, #744	; 0x2e8
 80008aa:	          46bd      	mov	sp, r7
 80008ac:	          bd80      	pop	{r7, pc}
 80008ae:	          bf00      	nop
 80008b0:	          0a84      	lsrs	r4, r0, #10
 80008b2:	          2000      	movs	r0, #0
 80008b4:	          0b60      	lsrs	r0, r4, #13
 80008b6:	          2000      	movs	r0, #0
 80008b8:	          09c8      	lsrs	r0, r1, #7
 80008ba:	          2000      	movs	r0, #0
 80008bc:	          2800      	cmp	r0, #0
 80008be:	          4000      	ands	r0, r0
 80008c0:	          1288      	asrs	r0, r1, #10
 80008c2:	          2000      	movs	r0, #0

080008c4 <CMD_Parser>:
#include "cli.h"
#include "rtc.h"
#include "string.h"
#include "low_power.h"

void CMD_Parser(SX126x *driver, CommandStruct *pkt){
 80008c4:	                      b580      	push	{r7, lr}
 80008c6:	                      b096      	sub	sp, #88	; 0x58
 80008c8:	                      af00      	add	r7, sp, #0
 80008ca:	                      6078      	str	r0, [r7, #4]
 80008cc:	                      6039      	str	r1, [r7, #0]
    RTC_struct_brief rtc_data;
    uint16_t measured_data[24] = {0};
 80008ce:	                      f107 030c 	add.w	r3, r7, #12
 80008d2:	                      2230      	movs	r2, #48	; 0x30
 80008d4:	                      2100      	movs	r1, #0
 80008d6:	                      4618      	mov	r0, r3
 80008d8:	                      f009 f882 	bl	80099e0 <memset>
    switch (pkt->cmd){
 80008dc:	                      683b      	ldr	r3, [r7, #0]
 80008de:	                      78db      	ldrb	r3, [r3, #3]
 80008e0:	                      3b01      	subs	r3, #1
 80008e2:	                      2b12      	cmp	r3, #18
 80008e4:	/-------------------- f200 820f 	bhi.w	8000d06 <CMD_Parser+0x442>
 80008e8:	|                     a201      	add	r2, pc, #4	; (adr r2, 80008f0 <CMD_Parser+0x2c>)
 80008ea:	|                     f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ee:	|                     bf00      	nop
 80008f0:	|                     093d      	lsrs	r5, r7, #4
 80008f2:	|                     0800      	lsrs	r0, r0, #32
 80008f4:	|                     0a23      	lsrs	r3, r4, #8
 80008f6:	|                     0800      	lsrs	r0, r0, #32
 80008f8:	|                     09c1      	lsrs	r1, r0, #7
 80008fa:	|                     0800      	lsrs	r0, r0, #32
 80008fc:	|                     09e7      	lsrs	r7, r4, #7
 80008fe:	|                     0800      	lsrs	r0, r0, #32
 8000900:	|                     0a03      	lsrs	r3, r0, #8
 8000902:	|                     0800      	lsrs	r0, r0, #32
 8000904:	|                     09a7      	lsrs	r7, r4, #6
 8000906:	|                     0800      	lsrs	r0, r0, #32
 8000908:	|                     0b1d      	lsrs	r5, r3, #12
 800090a:	|                     0800      	lsrs	r0, r0, #32
 800090c:	|                     0979      	lsrs	r1, r7, #5
 800090e:	|                     0800      	lsrs	r0, r0, #32
 8000910:	|                     0d07      	lsrs	r7, r0, #20
 8000912:	|                     0800      	lsrs	r0, r0, #32
 8000914:	|                     0d07      	lsrs	r7, r0, #20
 8000916:	|                     0800      	lsrs	r0, r0, #32
 8000918:	|                     0d07      	lsrs	r7, r0, #20
 800091a:	|                     0800      	lsrs	r0, r0, #32
 800091c:	|                     0d07      	lsrs	r7, r0, #20
 800091e:	|                     0800      	lsrs	r0, r0, #32
 8000920:	|                     0d07      	lsrs	r7, r0, #20
 8000922:	|                     0800      	lsrs	r0, r0, #32
 8000924:	|                     0d07      	lsrs	r7, r0, #20
 8000926:	|                     0800      	lsrs	r0, r0, #32
 8000928:	|                     0969      	lsrs	r1, r5, #5
 800092a:	|                     0800      	lsrs	r0, r0, #32
 800092c:	|                     0b9b      	lsrs	r3, r3, #14
 800092e:	|                     0800      	lsrs	r0, r0, #32
 8000930:	|                     0c1d      	lsrs	r5, r3, #16
 8000932:	|                     0800      	lsrs	r0, r0, #32
 8000934:	|                     0ba7      	lsrs	r7, r4, #14
 8000936:	|                     0800      	lsrs	r0, r0, #32
 8000938:	|                     0987      	lsrs	r7, r0, #6
 800093a:	|                     0800      	lsrs	r0, r0, #32
        case ECHO:{
            uint8_t target_id = pkt->target_id;
 800093c:	|                     683b      	ldr	r3, [r7, #0]
 800093e:	|                     789b      	ldrb	r3, [r3, #2]
 8000940:	|                     f887 3043 	strb.w	r3, [r7, #67]	; 0x43
            pkt->target_id = pkt->sender_id;
 8000944:	|                     683b      	ldr	r3, [r7, #0]
 8000946:	|                     785a      	ldrb	r2, [r3, #1]
 8000948:	|                     683b      	ldr	r3, [r7, #0]
 800094a:	|                     709a      	strb	r2, [r3, #2]
            pkt->sender_id = target_id;
 800094c:	|                     683b      	ldr	r3, [r7, #0]
 800094e:	|                     f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8000952:	|                     705a      	strb	r2, [r3, #1]
            SX126x_SendData(driver, (uint8_t *)(pkt), pkt->arg_len + 5);
 8000954:	|                     683b      	ldr	r3, [r7, #0]
 8000956:	|                     791b      	ldrb	r3, [r3, #4]
 8000958:	|                     3305      	adds	r3, #5
 800095a:	|                     b2db      	uxtb	r3, r3
 800095c:	|                     461a      	mov	r2, r3
 800095e:	|                     6839      	ldr	r1, [r7, #0]
 8000960:	|                     6878      	ldr	r0, [r7, #4]
 8000962:	|                     f006 fdad 	bl	80074c0 <SX126x_SendData>
            break;
 8000966:	|  /----------------- e1d5      	b.n	8000d14 <CMD_Parser+0x450>
        }
        case GET_RADIO_QUALITY:
            SX126x_SendData(driver, &driver->rssi, 1);
 8000968:	|  |                  687b      	ldr	r3, [r7, #4]
 800096a:	|  |                  3329      	adds	r3, #41	; 0x29
 800096c:	|  |                  2201      	movs	r2, #1
 800096e:	|  |                  4619      	mov	r1, r3
 8000970:	|  |                  6878      	ldr	r0, [r7, #4]
 8000972:	|  |                  f006 fda5 	bl	80074c0 <SX126x_SendData>
            break;
 8000976:	|  +----------------- e1cd      	b.n	8000d14 <CMD_Parser+0x450>
        case SET_PIN_STATE:
            gpio_state(LED, pkt->args[1]);
 8000978:	|  |                  683b      	ldr	r3, [r7, #0]
 800097a:	|  |                  799b      	ldrb	r3, [r3, #6]
 800097c:	|  |                  4619      	mov	r1, r3
 800097e:	|  |                  200a      	movs	r0, #10
 8000980:	|  |                  f001 fb0e 	bl	8001fa0 <gpio_state>
            break;
 8000984:	|  +----------------- e1c6      	b.n	8000d14 <CMD_Parser+0x450>
        case SET_WAKEUP_PERIOD:
            if(pkt->arg_len == 2){
 8000986:	|  |                  683b      	ldr	r3, [r7, #0]
 8000988:	|  |                  791b      	ldrb	r3, [r3, #4]
 800098a:	|  |                  2b02      	cmp	r3, #2
 800098c:	|  |  /-------------- f040 81bd 	bne.w	8000d0a <CMD_Parser+0x446>
                write_single_bkp_reg(10, (pkt->args[0] << 8) | pkt->args[1]);
 8000990:	|  |  |               683b      	ldr	r3, [r7, #0]
 8000992:	|  |  |               795b      	ldrb	r3, [r3, #5]
 8000994:	|  |  |               021b      	lsls	r3, r3, #8
 8000996:	|  |  |               683a      	ldr	r2, [r7, #0]
 8000998:	|  |  |               7992      	ldrb	r2, [r2, #6]
 800099a:	|  |  |               4313      	orrs	r3, r2
 800099c:	|  |  |               4619      	mov	r1, r3
 800099e:	|  |  |               200a      	movs	r0, #10
 80009a0:	|  |  |               f003 fa9a 	bl	8003ed8 <write_single_bkp_reg>
            }
            break;
 80009a4:	|  |  +-------------- e1b1      	b.n	8000d0a <CMD_Parser+0x446>
        case GET_RTC:  // year, weak_day, month, day, hour, min, sec
            RTC_get_time(&rtc_data);
 80009a6:	|  |  |               f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009aa:	|  |  |               4618      	mov	r0, r3
 80009ac:	|  |  |               f003 fb7e 	bl	80040ac <RTC_get_time>
            SX126x_SendData(driver, (uint8_t*)(&rtc_data), 7);
 80009b0:	|  |  |               f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009b4:	|  |  |               2207      	movs	r2, #7
 80009b6:	|  |  |               4619      	mov	r1, r3
 80009b8:	|  |  |               6878      	ldr	r0, [r7, #4]
 80009ba:	|  |  |               f006 fd81 	bl	80074c0 <SX126x_SendData>
            break;
 80009be:	|  +--|-------------- e1a9      	b.n	8000d14 <CMD_Parser+0x450>
        case SET_TIME:  // hour, min, sec
            memcpy((uint8_t*)(&rtc_data) + 4, pkt->args, 3);
 80009c0:	|  |  |               f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009c4:	|  |  |               3304      	adds	r3, #4
 80009c6:	|  |  |               683a      	ldr	r2, [r7, #0]
 80009c8:	|  |  |               1d51      	adds	r1, r2, #5
 80009ca:	|  |  |               2203      	movs	r2, #3
 80009cc:	|  |  |               4618      	mov	r0, r3
 80009ce:	|  |  |               f009 f847 	bl	8009a60 <memcpy>
            RTC_set_time(RTC_struct_brief_time_converter(&rtc_data));
 80009d2:	|  |  |               f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009d6:	|  |  |               4618      	mov	r0, r3
 80009d8:	|  |  |               f002 ffa2 	bl	8003920 <RTC_struct_brief_time_converter>
 80009dc:	|  |  |               4603      	mov	r3, r0
 80009de:	|  |  |               4618      	mov	r0, r3
 80009e0:	|  |  |               f002 ff64 	bl	80038ac <RTC_set_time>
            break;
 80009e4:	|  +--|-------------- e196      	b.n	8000d14 <CMD_Parser+0x450>
        case SET_DATE:  // year, weak_day, month, day
            memcpy((uint8_t*)(&rtc_data), pkt->args, 4);
 80009e6:	|  |  |               683b      	ldr	r3, [r7, #0]
 80009e8:	|  |  |               3305      	adds	r3, #5
 80009ea:	|  |  |               681b      	ldr	r3, [r3, #0]
 80009ec:	|  |  |               63fb      	str	r3, [r7, #60]	; 0x3c
            RTC_set_date(RTC_struct_brief_date_converter(&rtc_data));
 80009ee:	|  |  |               f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009f2:	|  |  |               4618      	mov	r0, r3
 80009f4:	|  |  |               f002 fff0 	bl	80039d8 <RTC_struct_brief_date_converter>
 80009f8:	|  |  |               4603      	mov	r3, r0
 80009fa:	|  |  |               4618      	mov	r0, r3
 80009fc:	|  |  |               f003 f850 	bl	8003aa0 <RTC_set_date>
            break;
 8000a00:	|  +--|-------------- e188      	b.n	8000d14 <CMD_Parser+0x450>
        case SET_RTC:  // year, weak_day, month, day, hour, min, sec
            memcpy((uint8_t*)(&rtc_data), pkt->args, 7);
 8000a02:	|  |  |               683b      	ldr	r3, [r7, #0]
 8000a04:	|  |  |               1d5a      	adds	r2, r3, #5
 8000a06:	|  |  |               f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a0a:	|  |  |               6810      	ldr	r0, [r2, #0]
 8000a0c:	|  |  |               6018      	str	r0, [r3, #0]
 8000a0e:	|  |  |               8891      	ldrh	r1, [r2, #4]
 8000a10:	|  |  |               7992      	ldrb	r2, [r2, #6]
 8000a12:	|  |  |               8099      	strh	r1, [r3, #4]
 8000a14:	|  |  |               719a      	strb	r2, [r3, #6]
            RTC_data_update(&rtc_data);
 8000a16:	|  |  |               f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a1a:	|  |  |               4618      	mov	r0, r3
 8000a1c:	|  |  |               f003 f87a 	bl	8003b14 <RTC_data_update>
            break;
 8000a20:	|  +--|-------------- e178      	b.n	8000d14 <CMD_Parser+0x450>
        case SINGLE_MEASURE:
            gpio_state(TEMP_SENSOR_PWR_EN, HIGH);
 8000a22:	|  |  |               2101      	movs	r1, #1
 8000a24:	|  |  |               2028      	movs	r0, #40	; 0x28
 8000a26:	|  |  |               f001 fabb 	bl	8001fa0 <gpio_state>
            gpio_state(SOIL_SENSOR_PWR_EN, HIGH);
 8000a2a:	|  |  |               2101      	movs	r1, #1
 8000a2c:	|  |  |               2009      	movs	r0, #9
 8000a2e:	|  |  |               f001 fab7 	bl	8001fa0 <gpio_state>
            uint8_t status = DS18B20_StartTempMeas(&ow);
 8000a32:	|  |  |               48ba      	ldr	r0, [pc, #744]	; (8000d1c <CMD_Parser+0x458>)
 8000a34:	|  |  |               f005 fc92 	bl	800635c <DS18B20_StartTempMeas>
 8000a38:	|  |  |               4603      	mov	r3, r0
 8000a3a:	|  |  |               f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            for(uint8_t i = 0; i < 12; i++)
 8000a3e:	|  |  |               2300      	movs	r3, #0
 8000a40:	|  |  |               f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8000a44:	|  |  |           /-- e016      	b.n	8000a74 <CMD_Parser+0x1b0>
                status += DS18B20_ReadScratchpad(&sensors[i]);
 8000a46:	|  |  |        /--|-> f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000a4a:	|  |  |        |  |   4613      	mov	r3, r2
 8000a4c:	|  |  |        |  |   00db      	lsls	r3, r3, #3
 8000a4e:	|  |  |        |  |   1a9b      	subs	r3, r3, r2
 8000a50:	|  |  |        |  |   009b      	lsls	r3, r3, #2
 8000a52:	|  |  |        |  |   4ab3      	ldr	r2, [pc, #716]	; (8000d20 <CMD_Parser+0x45c>)
 8000a54:	|  |  |        |  |   4413      	add	r3, r2
 8000a56:	|  |  |        |  |   4618      	mov	r0, r3
 8000a58:	|  |  |        |  |   f005 fc9c 	bl	8006394 <DS18B20_ReadScratchpad>
 8000a5c:	|  |  |        |  |   4603      	mov	r3, r0
 8000a5e:	|  |  |        |  |   461a      	mov	r2, r3
 8000a60:	|  |  |        |  |   f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000a64:	|  |  |        |  |   4413      	add	r3, r2
 8000a66:	|  |  |        |  |   f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            for(uint8_t i = 0; i < 12; i++)
 8000a6a:	|  |  |        |  |   f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000a6e:	|  |  |        |  |   3301      	adds	r3, #1
 8000a70:	|  |  |        |  |   f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8000a74:	|  |  |        |  \-> f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000a78:	|  |  |        |      2b0b      	cmp	r3, #11
 8000a7a:	|  |  |        \----- d9e4      	bls.n	8000a46 <CMD_Parser+0x182>
            ADC_Start(&adc);
 8000a7c:	|  |  |               48a9      	ldr	r0, [pc, #676]	; (8000d24 <CMD_Parser+0x460>)
 8000a7e:	|  |  |               f001 f890 	bl	8001ba2 <ADC_Start>
            while(adc.measure_process);
 8000a82:	|  |  |               bf00      	nop
 8000a84:	|  |  |           /-> 4ba7      	ldr	r3, [pc, #668]	; (8000d24 <CMD_Parser+0x460>)
 8000a86:	|  |  |           |   f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8000a8a:	|  |  |           |   2b00      	cmp	r3, #0
 8000a8c:	|  |  |           \-- d1fa      	bne.n	8000a84 <CMD_Parser+0x1c0>
            for(uint8_t i = 0; i < 12; i++){
 8000a8e:	|  |  |               2300      	movs	r3, #0
 8000a90:	|  |  |               f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8000a94:	|  |  |           /-- e02a      	b.n	8000aec <CMD_Parser+0x228>
                measured_data[i] = adc.reg_channel_queue[i].result;
 8000a96:	|  |  |        /--|-> f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8000a9a:	|  |  |        |  |   f897 1055 	ldrb.w	r1, [r7, #85]	; 0x55
 8000a9e:	|  |  |        |  |   48a1      	ldr	r0, [pc, #644]	; (8000d24 <CMD_Parser+0x460>)
 8000aa0:	|  |  |        |  |   4613      	mov	r3, r2
 8000aa2:	|  |  |        |  |   005b      	lsls	r3, r3, #1
 8000aa4:	|  |  |        |  |   4413      	add	r3, r2
 8000aa6:	|  |  |        |  |   009b      	lsls	r3, r3, #2
 8000aa8:	|  |  |        |  |   4403      	add	r3, r0
 8000aaa:	|  |  |        |  |   330c      	adds	r3, #12
 8000aac:	|  |  |        |  |   881a      	ldrh	r2, [r3, #0]
 8000aae:	|  |  |        |  |   004b      	lsls	r3, r1, #1
 8000ab0:	|  |  |        |  |   f107 0158 	add.w	r1, r7, #88	; 0x58
 8000ab4:	|  |  |        |  |   440b      	add	r3, r1
 8000ab6:	|  |  |        |  |   f823 2c4c 	strh.w	r2, [r3, #-76]
                measured_data[i + 12] = sensors[i].scratchpad.temperature;
 8000aba:	|  |  |        |  |   f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8000abe:	|  |  |        |  |   f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000ac2:	|  |  |        |  |   f103 010c 	add.w	r1, r3, #12
 8000ac6:	|  |  |        |  |   4896      	ldr	r0, [pc, #600]	; (8000d20 <CMD_Parser+0x45c>)
 8000ac8:	|  |  |        |  |   4613      	mov	r3, r2
 8000aca:	|  |  |        |  |   00db      	lsls	r3, r3, #3
 8000acc:	|  |  |        |  |   1a9b      	subs	r3, r3, r2
 8000ace:	|  |  |        |  |   009b      	lsls	r3, r3, #2
 8000ad0:	|  |  |        |  |   4403      	add	r3, r0
 8000ad2:	|  |  |        |  |   330c      	adds	r3, #12
 8000ad4:	|  |  |        |  |   881a      	ldrh	r2, [r3, #0]
 8000ad6:	|  |  |        |  |   004b      	lsls	r3, r1, #1
 8000ad8:	|  |  |        |  |   f107 0158 	add.w	r1, r7, #88	; 0x58
 8000adc:	|  |  |        |  |   440b      	add	r3, r1
 8000ade:	|  |  |        |  |   f823 2c4c 	strh.w	r2, [r3, #-76]
            for(uint8_t i = 0; i < 12; i++){
 8000ae2:	|  |  |        |  |   f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000ae6:	|  |  |        |  |   3301      	adds	r3, #1
 8000ae8:	|  |  |        |  |   f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8000aec:	|  |  |        |  \-> f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000af0:	|  |  |        |      2b0b      	cmp	r3, #11
 8000af2:	|  |  |        \----- d9d0      	bls.n	8000a96 <CMD_Parser+0x1d2>
            }
            measured_data[11] = adc.vdda_mvolt;
 8000af4:	|  |  |               4b8b      	ldr	r3, [pc, #556]	; (8000d24 <CMD_Parser+0x460>)
 8000af6:	|  |  |               f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 8000afa:	|  |  |               847b      	strh	r3, [r7, #34]	; 0x22
            gpio_state(TEMP_SENSOR_PWR_EN, LOW);
 8000afc:	|  |  |               2100      	movs	r1, #0
 8000afe:	|  |  |               2028      	movs	r0, #40	; 0x28
 8000b00:	|  |  |               f001 fa4e 	bl	8001fa0 <gpio_state>
            gpio_state(SOIL_SENSOR_PWR_EN, LOW);
 8000b04:	|  |  |               2100      	movs	r1, #0
 8000b06:	|  |  |               2009      	movs	r0, #9
 8000b08:	|  |  |               f001 fa4a 	bl	8001fa0 <gpio_state>
            SX126x_SendData(driver, (uint8_t*)(&measured_data), 48);
 8000b0c:	|  |  |               f107 030c 	add.w	r3, r7, #12
 8000b10:	|  |  |               2230      	movs	r2, #48	; 0x30
 8000b12:	|  |  |               4619      	mov	r1, r3
 8000b14:	|  |  |               6878      	ldr	r0, [r7, #4]
 8000b16:	|  |  |               f006 fcd3 	bl	80074c0 <SX126x_SendData>
            break;
 8000b1a:	|  +--|-------------- e0fb      	b.n	8000d14 <CMD_Parser+0x450>
        case GET_MEASURED_DATA:
            for(uint8_t i = 0; i < 12; i++){
 8000b1c:	|  |  |               2300      	movs	r3, #0
 8000b1e:	|  |  |               f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8000b22:	|  |  |           /-- e02a      	b.n	8000b7a <CMD_Parser+0x2b6>
                measured_data[i] = adc.reg_channel_queue[i].result;
 8000b24:	|  |  |        /--|-> f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8000b28:	|  |  |        |  |   f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 8000b2c:	|  |  |        |  |   487d      	ldr	r0, [pc, #500]	; (8000d24 <CMD_Parser+0x460>)
 8000b2e:	|  |  |        |  |   4613      	mov	r3, r2
 8000b30:	|  |  |        |  |   005b      	lsls	r3, r3, #1
 8000b32:	|  |  |        |  |   4413      	add	r3, r2
 8000b34:	|  |  |        |  |   009b      	lsls	r3, r3, #2
 8000b36:	|  |  |        |  |   4403      	add	r3, r0
 8000b38:	|  |  |        |  |   330c      	adds	r3, #12
 8000b3a:	|  |  |        |  |   881a      	ldrh	r2, [r3, #0]
 8000b3c:	|  |  |        |  |   004b      	lsls	r3, r1, #1
 8000b3e:	|  |  |        |  |   f107 0158 	add.w	r1, r7, #88	; 0x58
 8000b42:	|  |  |        |  |   440b      	add	r3, r1
 8000b44:	|  |  |        |  |   f823 2c4c 	strh.w	r2, [r3, #-76]
                measured_data[i + 12] = sensors[i].scratchpad.temperature;
 8000b48:	|  |  |        |  |   f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8000b4c:	|  |  |        |  |   f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000b50:	|  |  |        |  |   f103 010c 	add.w	r1, r3, #12
 8000b54:	|  |  |        |  |   4872      	ldr	r0, [pc, #456]	; (8000d20 <CMD_Parser+0x45c>)
 8000b56:	|  |  |        |  |   4613      	mov	r3, r2
 8000b58:	|  |  |        |  |   00db      	lsls	r3, r3, #3
 8000b5a:	|  |  |        |  |   1a9b      	subs	r3, r3, r2
 8000b5c:	|  |  |        |  |   009b      	lsls	r3, r3, #2
 8000b5e:	|  |  |        |  |   4403      	add	r3, r0
 8000b60:	|  |  |        |  |   330c      	adds	r3, #12
 8000b62:	|  |  |        |  |   881a      	ldrh	r2, [r3, #0]
 8000b64:	|  |  |        |  |   004b      	lsls	r3, r1, #1
 8000b66:	|  |  |        |  |   f107 0158 	add.w	r1, r7, #88	; 0x58
 8000b6a:	|  |  |        |  |   440b      	add	r3, r1
 8000b6c:	|  |  |        |  |   f823 2c4c 	strh.w	r2, [r3, #-76]
            for(uint8_t i = 0; i < 12; i++){
 8000b70:	|  |  |        |  |   f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000b74:	|  |  |        |  |   3301      	adds	r3, #1
 8000b76:	|  |  |        |  |   f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8000b7a:	|  |  |        |  \-> f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000b7e:	|  |  |        |      2b0b      	cmp	r3, #11
 8000b80:	|  |  |        \----- d9d0      	bls.n	8000b24 <CMD_Parser+0x260>
            }
            measured_data[12] = adc.vdda_mvolt;
 8000b82:	|  |  |               4b68      	ldr	r3, [pc, #416]	; (8000d24 <CMD_Parser+0x460>)
 8000b84:	|  |  |               f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 8000b88:	|  |  |               84bb      	strh	r3, [r7, #36]	; 0x24
            SX126x_SendData(driver, (uint8_t*)(&measured_data), 48);
 8000b8a:	|  |  |               f107 030c 	add.w	r3, r7, #12
 8000b8e:	|  |  |               2230      	movs	r2, #48	; 0x30
 8000b90:	|  |  |               4619      	mov	r1, r3
 8000b92:	|  |  |               6878      	ldr	r0, [r7, #4]
 8000b94:	|  |  |               f006 fc94 	bl	80074c0 <SX126x_SendData>
            break;
 8000b98:	|  +--|-------------- e0bc      	b.n	8000d14 <CMD_Parser+0x450>
        case GET_BATTERY:
            SX126x_SendData(driver, (uint8_t*)(&adc.vdda_mvolt), 2);
 8000b9a:	|  |  |               2202      	movs	r2, #2
 8000b9c:	|  |  |               4962      	ldr	r1, [pc, #392]	; (8000d28 <CMD_Parser+0x464>)
 8000b9e:	|  |  |               6878      	ldr	r0, [r7, #4]
 8000ba0:	|  |  |               f006 fc8e 	bl	80074c0 <SX126x_SendData>
            break;
 8000ba4:	|  +--|-------------- e0b6      	b.n	8000d14 <CMD_Parser+0x450>
        case GO_SLEEP:
            if(pkt->arg_len == 3){
 8000ba6:	|  |  |               683b      	ldr	r3, [r7, #0]
 8000ba8:	|  |  |               791b      	ldrb	r3, [r3, #4]
 8000baa:	|  |  |               2b03      	cmp	r3, #3
 8000bac:	|  |  |  /----------- f040 80af 	bne.w	8000d0e <CMD_Parser+0x44a>
                uint8_t waiting_time_sec = pkt->args[0];
 8000bb0:	|  |  |  |            683b      	ldr	r3, [r7, #0]
 8000bb2:	|  |  |  |            795b      	ldrb	r3, [r3, #5]
 8000bb4:	|  |  |  |            f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                uint16_t sleep_time_sec = (pkt->args[1] << 8) | pkt->args[2];
 8000bb8:	|  |  |  |            683b      	ldr	r3, [r7, #0]
 8000bba:	|  |  |  |            799b      	ldrb	r3, [r3, #6]
 8000bbc:	|  |  |  |            021b      	lsls	r3, r3, #8
 8000bbe:	|  |  |  |            b21a      	sxth	r2, r3
 8000bc0:	|  |  |  |            683b      	ldr	r3, [r7, #0]
 8000bc2:	|  |  |  |            79db      	ldrb	r3, [r3, #7]
 8000bc4:	|  |  |  |            b21b      	sxth	r3, r3
 8000bc6:	|  |  |  |            4313      	orrs	r3, r2
 8000bc8:	|  |  |  |            b21b      	sxth	r3, r3
 8000bca:	|  |  |  |            f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                if(sim7000g.status.gprs_connected){
 8000bce:	|  |  |  |            4b57      	ldr	r3, [pc, #348]	; (8000d2c <CMD_Parser+0x468>)
 8000bd0:	|  |  |  |            f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8000bd4:	|  |  |  |            f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000bd8:	|  |  |  |            b2db      	uxtb	r3, r3
 8000bda:	|  |  |  |            2b00      	cmp	r3, #0
 8000bdc:	|  |  |  |        /-- d005      	beq.n	8000bea <CMD_Parser+0x326>
                    GSM_CloseConnections(&sim7000g);
 8000bde:	|  |  |  |        |   4853      	ldr	r0, [pc, #332]	; (8000d2c <CMD_Parser+0x468>)
 8000be0:	|  |  |  |        |   f005 ff7e 	bl	8006ae0 <GSM_CloseConnections>
                    GSM_PowerOFF(&sim7000g);
 8000be4:	|  |  |  |        |   4851      	ldr	r0, [pc, #324]	; (8000d2c <CMD_Parser+0x468>)
 8000be6:	|  |  |  |        |   f005 fe1b 	bl	8006820 <GSM_PowerOFF>
                }
                SX126x_SetSleep(&SX1268);
 8000bea:	|  |  |  |        \-> 4851      	ldr	r0, [pc, #324]	; (8000d30 <CMD_Parser+0x46c>)
 8000bec:	|  |  |  |            f006 ff82 	bl	8007af4 <SX126x_SetSleep>
                Delay(waiting_time_sec * 1000);
 8000bf0:	|  |  |  |            f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000bf4:	|  |  |  |            f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bf8:	|  |  |  |            fb02 f303 	mul.w	r3, r2, r3
 8000bfc:	|  |  |  |            4618      	mov	r0, r3
 8000bfe:	|  |  |  |            f004 ffe9 	bl	8005bd4 <Delay>
                if(sleep_time_sec > 0){
 8000c02:	|  |  |  |            f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000c06:	|  |  |  |            2b00      	cmp	r3, #0
 8000c08:	|  |  |  +----------- f000 8081 	beq.w	8000d0e <CMD_Parser+0x44a>
                    RTC_auto_wakeup_enable(sleep_time_sec);
 8000c0c:	|  |  |  |            f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000c10:	|  |  |  |            4618      	mov	r0, r3
 8000c12:	|  |  |  |            f002 fdcb 	bl	80037ac <RTC_auto_wakeup_enable>
                    stop_cortex();
 8000c16:	|  |  |  |            f005 f983 	bl	8005f20 <stop_cortex>
                }
            }
            break;
 8000c1a:	|  |  |  +----------- e078      	b.n	8000d0e <CMD_Parser+0x44a>
        case MY_PERIODIC_DATA:  // rtc[7], measured_data[48], signal_params[3]
            RTC_get_time(&current_rtc);
 8000c1c:	|  |  |  |            4845      	ldr	r0, [pc, #276]	; (8000d34 <CMD_Parser+0x470>)
 8000c1e:	|  |  |  |            f003 fa45 	bl	80040ac <RTC_get_time>
            uint8_t *gs_buffer_ptr;
            uint16_t *buffer_counter_ptr;
            if(pkt->sender_id == 2) {
 8000c22:	|  |  |  |            683b      	ldr	r3, [r7, #0]
 8000c24:	|  |  |  |            785b      	ldrb	r3, [r3, #1]
 8000c26:	|  |  |  |            2b02      	cmp	r3, #2
 8000c28:	|  |  |  |        /-- d104      	bne.n	8000c34 <CMD_Parser+0x370>
                gs_buffer_ptr = gs2_buffer;
 8000c2a:	|  |  |  |        |   4b43      	ldr	r3, [pc, #268]	; (8000d38 <CMD_Parser+0x474>)
 8000c2c:	|  |  |  |        |   653b      	str	r3, [r7, #80]	; 0x50
                buffer_counter_ptr = (uint16_t*)(&gs2_buf_ptr);
 8000c2e:	|  |  |  |        |   4b43      	ldr	r3, [pc, #268]	; (8000d3c <CMD_Parser+0x478>)
 8000c30:	|  |  |  |        |   64fb      	str	r3, [r7, #76]	; 0x4c
 8000c32:	|  |  |  |     /--|-- e007      	b.n	8000c44 <CMD_Parser+0x380>
            } else if(pkt->sender_id == 3) {
 8000c34:	|  |  |  |     |  \-> 683b      	ldr	r3, [r7, #0]
 8000c36:	|  |  |  |     |      785b      	ldrb	r3, [r3, #1]
 8000c38:	|  |  |  |     |      2b03      	cmp	r3, #3
 8000c3a:	|  |  |  |  /--|----- d16a      	bne.n	8000d12 <CMD_Parser+0x44e>
                gs_buffer_ptr = gs3_buffer;
 8000c3c:	|  |  |  |  |  |      4b40      	ldr	r3, [pc, #256]	; (8000d40 <CMD_Parser+0x47c>)
 8000c3e:	|  |  |  |  |  |      653b      	str	r3, [r7, #80]	; 0x50
                buffer_counter_ptr = (uint16_t*)(&gs3_buf_ptr);
 8000c40:	|  |  |  |  |  |      4b40      	ldr	r3, [pc, #256]	; (8000d44 <CMD_Parser+0x480>)
 8000c42:	|  |  |  |  |  |      64fb      	str	r3, [r7, #76]	; 0x4c
            } else break;
            if((*buffer_counter_ptr) + sizeof(current_rtc) + pkt->arg_len + 3 < sizeof(data_buffer)){
 8000c44:	|  |  |  |  |  \----> 6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c46:	|  |  |  |  |         881b      	ldrh	r3, [r3, #0]
 8000c48:	|  |  |  |  |         461a      	mov	r2, r3
 8000c4a:	|  |  |  |  |         683b      	ldr	r3, [r7, #0]
 8000c4c:	|  |  |  |  |         791b      	ldrb	r3, [r3, #4]
 8000c4e:	|  |  |  |  |         4413      	add	r3, r2
 8000c50:	|  |  |  |  |         330a      	adds	r3, #10
 8000c52:	|  |  |  |  |         f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000c56:	|  |  |  |  |     /-- d244      	bcs.n	8000ce2 <CMD_Parser+0x41e>
                memcpy(gs_buffer_ptr + (*buffer_counter_ptr), &current_rtc, sizeof(current_rtc));
 8000c58:	|  |  |  |  |     |   6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c5a:	|  |  |  |  |     |   881b      	ldrh	r3, [r3, #0]
 8000c5c:	|  |  |  |  |     |   461a      	mov	r2, r3
 8000c5e:	|  |  |  |  |     |   6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c60:	|  |  |  |  |     |   4413      	add	r3, r2
 8000c62:	|  |  |  |  |     |   4a34      	ldr	r2, [pc, #208]	; (8000d34 <CMD_Parser+0x470>)
 8000c64:	|  |  |  |  |     |   6810      	ldr	r0, [r2, #0]
 8000c66:	|  |  |  |  |     |   6018      	str	r0, [r3, #0]
 8000c68:	|  |  |  |  |     |   8891      	ldrh	r1, [r2, #4]
 8000c6a:	|  |  |  |  |     |   7992      	ldrb	r2, [r2, #6]
 8000c6c:	|  |  |  |  |     |   8099      	strh	r1, [r3, #4]
 8000c6e:	|  |  |  |  |     |   719a      	strb	r2, [r3, #6]
                (*buffer_counter_ptr) += sizeof(current_rtc);
 8000c70:	|  |  |  |  |     |   6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c72:	|  |  |  |  |     |   881b      	ldrh	r3, [r3, #0]
 8000c74:	|  |  |  |  |     |   3307      	adds	r3, #7
 8000c76:	|  |  |  |  |     |   b29a      	uxth	r2, r3
 8000c78:	|  |  |  |  |     |   6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c7a:	|  |  |  |  |     |   801a      	strh	r2, [r3, #0]
                memcpy(gs_buffer_ptr + (*buffer_counter_ptr), pkt->args, pkt->arg_len);
 8000c7c:	|  |  |  |  |     |   6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c7e:	|  |  |  |  |     |   881b      	ldrh	r3, [r3, #0]
 8000c80:	|  |  |  |  |     |   461a      	mov	r2, r3
 8000c82:	|  |  |  |  |     |   6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c84:	|  |  |  |  |     |   1898      	adds	r0, r3, r2
 8000c86:	|  |  |  |  |     |   683b      	ldr	r3, [r7, #0]
 8000c88:	|  |  |  |  |     |   1d59      	adds	r1, r3, #5
 8000c8a:	|  |  |  |  |     |   683b      	ldr	r3, [r7, #0]
 8000c8c:	|  |  |  |  |     |   791b      	ldrb	r3, [r3, #4]
 8000c8e:	|  |  |  |  |     |   461a      	mov	r2, r3
 8000c90:	|  |  |  |  |     |   f008 fee6 	bl	8009a60 <memcpy>
                (*buffer_counter_ptr) += pkt->arg_len;
 8000c94:	|  |  |  |  |     |   6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c96:	|  |  |  |  |     |   881a      	ldrh	r2, [r3, #0]
 8000c98:	|  |  |  |  |     |   683b      	ldr	r3, [r7, #0]
 8000c9a:	|  |  |  |  |     |   791b      	ldrb	r3, [r3, #4]
 8000c9c:	|  |  |  |  |     |   b29b      	uxth	r3, r3
 8000c9e:	|  |  |  |  |     |   4413      	add	r3, r2
 8000ca0:	|  |  |  |  |     |   b29a      	uxth	r2, r3
 8000ca2:	|  |  |  |  |     |   6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ca4:	|  |  |  |  |     |   801a      	strh	r2, [r3, #0]
                uint8_t signal[3] = {SX1268.signal_rssi, SX1268.snr, SX1268.rssi};
 8000ca6:	|  |  |  |  |     |   4b22      	ldr	r3, [pc, #136]	; (8000d30 <CMD_Parser+0x46c>)
 8000ca8:	|  |  |  |  |     |   f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000cac:	|  |  |  |  |     |   723b      	strb	r3, [r7, #8]
 8000cae:	|  |  |  |  |     |   4b20      	ldr	r3, [pc, #128]	; (8000d30 <CMD_Parser+0x46c>)
 8000cb0:	|  |  |  |  |     |   f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000cb4:	|  |  |  |  |     |   727b      	strb	r3, [r7, #9]
 8000cb6:	|  |  |  |  |     |   4b1e      	ldr	r3, [pc, #120]	; (8000d30 <CMD_Parser+0x46c>)
 8000cb8:	|  |  |  |  |     |   f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000cbc:	|  |  |  |  |     |   72bb      	strb	r3, [r7, #10]
                memcpy(gs_buffer_ptr + (*buffer_counter_ptr), signal, 3);
 8000cbe:	|  |  |  |  |     |   6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cc0:	|  |  |  |  |     |   881b      	ldrh	r3, [r3, #0]
 8000cc2:	|  |  |  |  |     |   461a      	mov	r2, r3
 8000cc4:	|  |  |  |  |     |   6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cc6:	|  |  |  |  |     |   4413      	add	r3, r2
 8000cc8:	|  |  |  |  |     |   461a      	mov	r2, r3
 8000cca:	|  |  |  |  |     |   f107 0308 	add.w	r3, r7, #8
 8000cce:	|  |  |  |  |     |   8819      	ldrh	r1, [r3, #0]
 8000cd0:	|  |  |  |  |     |   789b      	ldrb	r3, [r3, #2]
 8000cd2:	|  |  |  |  |     |   8011      	strh	r1, [r2, #0]
 8000cd4:	|  |  |  |  |     |   7093      	strb	r3, [r2, #2]
                (*buffer_counter_ptr) += 3;
 8000cd6:	|  |  |  |  |     |   6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cd8:	|  |  |  |  |     |   881b      	ldrh	r3, [r3, #0]
 8000cda:	|  |  |  |  |     |   3303      	adds	r3, #3
 8000cdc:	|  |  |  |  |     |   b29a      	uxth	r2, r3
 8000cde:	|  |  |  |  |     |   6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce0:	|  |  |  |  |     |   801a      	strh	r2, [r3, #0]
            }
            uint32_t time_stamp = (current_rtc.hours << 16) | (current_rtc.minutes << 8 ) | current_rtc.seconds;
 8000ce2:	|  |  |  |  |     \-> 4b14      	ldr	r3, [pc, #80]	; (8000d34 <CMD_Parser+0x470>)
 8000ce4:	|  |  |  |  |         791b      	ldrb	r3, [r3, #4]
 8000ce6:	|  |  |  |  |         041a      	lsls	r2, r3, #16
 8000ce8:	|  |  |  |  |         4b12      	ldr	r3, [pc, #72]	; (8000d34 <CMD_Parser+0x470>)
 8000cea:	|  |  |  |  |         795b      	ldrb	r3, [r3, #5]
 8000cec:	|  |  |  |  |         021b      	lsls	r3, r3, #8
 8000cee:	|  |  |  |  |         4313      	orrs	r3, r2
 8000cf0:	|  |  |  |  |         4a10      	ldr	r2, [pc, #64]	; (8000d34 <CMD_Parser+0x470>)
 8000cf2:	|  |  |  |  |         7992      	ldrb	r2, [r2, #6]
 8000cf4:	|  |  |  |  |         4313      	orrs	r3, r2
 8000cf6:	|  |  |  |  |         647b      	str	r3, [r7, #68]	; 0x44
            write_single_bkp_reg(pkt->sender_id, time_stamp);
 8000cf8:	|  |  |  |  |         683b      	ldr	r3, [r7, #0]
 8000cfa:	|  |  |  |  |         785b      	ldrb	r3, [r3, #1]
 8000cfc:	|  |  |  |  |         6c79      	ldr	r1, [r7, #68]	; 0x44
 8000cfe:	|  |  |  |  |         4618      	mov	r0, r3
 8000d00:	|  |  |  |  |         f003 f8ea 	bl	8003ed8 <write_single_bkp_reg>
            // write_single_bkp_reg()
            break;
 8000d04:	|  +--|--|--|-------- e006      	b.n	8000d14 <CMD_Parser+0x450>
        default:
            break;
 8000d06:	\--|--|--|--|-------> bf00      	nop
 8000d08:	   +--|--|--|-------- e004      	b.n	8000d14 <CMD_Parser+0x450>
            break;
 8000d0a:	   |  \--|--|-------> bf00      	nop
 8000d0c:	   +-----|--|-------- e002      	b.n	8000d14 <CMD_Parser+0x450>
            break;
 8000d0e:	   |     \--|-------> bf00      	nop
 8000d10:	   +--------|-------- e000      	b.n	8000d14 <CMD_Parser+0x450>
            } else break;
 8000d12:	   |        \-------> bf00      	nop
    }
 8000d14:	   \----------------> bf00      	nop
 8000d16:	                      3758      	adds	r7, #88	; 0x58
 8000d18:	                      46bd      	mov	sp, r7
 8000d1a:	                      bd80      	pop	{r7, pc}
 8000d1c:	                      0cb0      	lsrs	r0, r6, #18
 8000d1e:	                      2000      	movs	r0, #0
 8000d20:	                      0b60      	lsrs	r0, r4, #13
 8000d22:	                      2000      	movs	r0, #0
 8000d24:	                      0a84      	lsrs	r4, r0, #10
 8000d26:	                      2000      	movs	r0, #0
 8000d28:	                      0b5a      	lsrs	r2, r3, #13
 8000d2a:	                      2000      	movs	r0, #0
 8000d2c:	                      0948      	lsrs	r0, r1, #5
 8000d2e:	                      2000      	movs	r0, #0
 8000d30:	                      09c8      	lsrs	r0, r1, #7
 8000d32:	                      2000      	movs	r0, #0
 8000d34:	                      1280      	asrs	r0, r0, #10
 8000d36:	                      2000      	movs	r0, #0
 8000d38:	                      1078      	asrs	r0, r7, #1
 8000d3a:	                      2000      	movs	r0, #0
 8000d3c:	                      1178      	asrs	r0, r7, #5
 8000d3e:	                      2000      	movs	r0, #0
 8000d40:	                      117c      	asrs	r4, r7, #5
 8000d42:	                      2000      	movs	r0, #0
 8000d44:	                      127c      	asrs	r4, r7, #9
 8000d46:	                      2000      	movs	r0, #0

08000d48 <init_global_variables>:
#include "global_variables.h"


void init_global_variables(){
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
	// --------- System condition -----------//
	SYSTEM_init_status = SUCCESS;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <init_global_variables+0x28>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
	SYSTEM_I2C_error_flag = SUCCESS;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <init_global_variables+0x2c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
	SYSTEM_I2C_error_counter = 0;
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <init_global_variables+0x30>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]

	// ===================================== //

	// --------- ADC -----------//
	battary_voltage = 0;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <init_global_variables+0x34>)
 8000d60:	f04f 0200 	mov.w	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
	//===========================//

	// RTC_struct rtc = {20, 2, 1, 3, 18, 23, 0};


}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	086d      	lsrs	r5, r5, #1
 8000d72:	2000      	movs	r0, #0
 8000d74:	086e      	lsrs	r6, r5, #1
 8000d76:	2000      	movs	r0, #0
 8000d78:	0870      	lsrs	r0, r6, #1
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	0940      	lsrs	r0, r0, #5
 8000d7e:	2000      	movs	r0, #0

08000d80 <__NVIC_EnableIRQ>:
{
 8000d80:	    b480      	push	{r7}
 8000d82:	    b083      	sub	sp, #12
 8000d84:	    af00      	add	r7, sp, #0
 8000d86:	    4603      	mov	r3, r0
 8000d88:	    71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	    f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	    2b00      	cmp	r3, #0
 8000d90:	/-- db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	|   79fb      	ldrb	r3, [r7, #7]
 8000d94:	|   f003 021f 	and.w	r2, r3, #31
 8000d98:	|   4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	|   f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	|   095b      	lsrs	r3, r3, #5
 8000da0:	|   2001      	movs	r0, #1
 8000da2:	|   fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	|   f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000daa:	\-> bf00      	nop
 8000dac:	    370c      	adds	r7, #12
 8000dae:	    46bd      	mov	sp, r7
 8000db0:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	    4770      	bx	lr
 8000db6:	    bf00      	nop
 8000db8:	    e100      	b.n	8000fbc <SEND_TO_SERVER+0x32>
 8000dba:	    e000      	b.n	8000dbe <__NVIC_DisableIRQ+0x2>

08000dbc <__NVIC_DisableIRQ>:
{
 8000dbc:	    b480      	push	{r7}
 8000dbe:	    b083      	sub	sp, #12
 8000dc0:	    af00      	add	r7, sp, #0
 8000dc2:	    4603      	mov	r3, r0
 8000dc4:	    71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	    f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	    2b00      	cmp	r3, #0
 8000dcc:	/-- db12      	blt.n	8000df4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	|   79fb      	ldrb	r3, [r7, #7]
 8000dd0:	|   f003 021f 	and.w	r2, r3, #31
 8000dd4:	|   490a      	ldr	r1, [pc, #40]	; (8000e00 <__NVIC_DisableIRQ+0x44>)
 8000dd6:	|   f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	|   095b      	lsrs	r3, r3, #5
 8000ddc:	|   2001      	movs	r0, #1
 8000dde:	|   fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	|   3320      	adds	r3, #32
 8000de4:	|   f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000de8:	|   f3bf 8f4f 	dsb	sy
}
 8000dec:	|   bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dee:	|   f3bf 8f6f 	isb	sy
}
 8000df2:	|   bf00      	nop
}
 8000df4:	\-> bf00      	nop
 8000df6:	    370c      	adds	r7, #12
 8000df8:	    46bd      	mov	sp, r7
 8000dfa:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	    4770      	bx	lr
 8000e00:	    e100      	b.n	8001004 <SEND_TO_SERVER+0x7a>
 8000e02:	    e000      	b.n	8000e06 <LED_BLINK+0x2>

08000e04 <LED_BLINK>:
#include "string.h"
#include "System.h"


volatile time_t current_time;
void LED_BLINK(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	gpio_toggle(LED);
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f001 f8ef 	bl	8001fec <gpio_toggle>
	// Delay(1000);
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}

uint64_t ReverseBytes(uint64_t value)
{
 8000e12:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, r10, r11}
 8000e16:	b099      	sub	sp, #100	; 0x64
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
  return (value & 0x00000000000000FFUL) << 56 | (value & 0x000000000000FF00UL) << 40 |
 8000e1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000e22:	f04f 0800 	mov.w	r8, #0
 8000e26:	f04f 0900 	mov.w	r9, #0
 8000e2a:	ea4f 6902 	mov.w	r9, r2, lsl #24
 8000e2e:	f04f 0800 	mov.w	r8, #0
 8000e32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000e36:	f04f 0000 	mov.w	r0, #0
 8000e3a:	f04f 0100 	mov.w	r1, #0
 8000e3e:	0211      	lsls	r1, r2, #8
 8000e40:	2000      	movs	r0, #0
 8000e42:	2400      	movs	r4, #0
 8000e44:	f401 057f 	and.w	r5, r1, #16711680	; 0xff0000
 8000e48:	ea48 0304 	orr.w	r3, r8, r4
 8000e4c:	653b      	str	r3, [r7, #80]	; 0x50
 8000e4e:	ea49 0305 	orr.w	r3, r9, r5
 8000e52:	657b      	str	r3, [r7, #84]	; 0x54
         (value & 0x0000000000FF0000UL) << 24 | (value & 0x00000000FF000000UL) << 8 |
 8000e54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000e58:	f04f 0000 	mov.w	r0, #0
 8000e5c:	f04f 0100 	mov.w	r1, #0
 8000e60:	0619      	lsls	r1, r3, #24
 8000e62:	ea41 2112 	orr.w	r1, r1, r2, lsr #8
 8000e66:	0610      	lsls	r0, r2, #24
 8000e68:	f04f 0a00 	mov.w	r10, #0
 8000e6c:	f401 4b7f 	and.w	r11, r1, #65280	; 0xff00
  return (value & 0x00000000000000FFUL) << 56 | (value & 0x000000000000FF00UL) << 40 |
 8000e70:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8000e74:	460b      	mov	r3, r1
 8000e76:	ea43 030a 	orr.w	r3, r3, r10
 8000e7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	ea43 030b 	orr.w	r3, r3, r11
 8000e82:	64fb      	str	r3, [r7, #76]	; 0x4c
         (value & 0x0000000000FF0000UL) << 24 | (value & 0x00000000FF000000UL) << 8 |
 8000e84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000e88:	f04f 0000 	mov.w	r0, #0
 8000e8c:	f04f 0100 	mov.w	r1, #0
 8000e90:	0219      	lsls	r1, r3, #8
 8000e92:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8000e96:	0210      	lsls	r0, r2, #8
 8000e98:	2300      	movs	r3, #0
 8000e9a:	643b      	str	r3, [r7, #64]	; 0x40
 8000e9c:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 8000ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8000ea2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000eac:	4602      	mov	r2, r0
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000eb2:	462b      	mov	r3, r5
 8000eb4:	460a      	mov	r2, r1
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         (value & 0x000000FF00000000UL) >> 8 | (value & 0x0000FF0000000000UL) >> 24 |
 8000eba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000ebe:	f04f 0000 	mov.w	r0, #0
 8000ec2:	f04f 0100 	mov.w	r1, #0
 8000ec6:	0a10      	lsrs	r0, r2, #8
 8000ec8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ecc:	0a19      	lsrs	r1, r3, #8
 8000ece:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 8000ed2:	633b      	str	r3, [r7, #48]	; 0x30
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	637b      	str	r3, [r7, #52]	; 0x34
         (value & 0x0000000000FF0000UL) << 24 | (value & 0x00000000FF000000UL) << 8 |
 8000ed8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8000edc:	4623      	mov	r3, r4
 8000ede:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ee8:	462b      	mov	r3, r5
 8000eea:	460a      	mov	r2, r1
 8000eec:	4313      	orrs	r3, r2
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
         (value & 0x000000FF00000000UL) >> 8 | (value & 0x0000FF0000000000UL) >> 24 |
 8000ef0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000ef4:	f04f 0000 	mov.w	r0, #0
 8000ef8:	f04f 0100 	mov.w	r1, #0
 8000efc:	0e10      	lsrs	r0, r2, #24
 8000efe:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8000f02:	0e19      	lsrs	r1, r3, #24
 8000f04:	f400 037f 	and.w	r3, r0, #16711680	; 0xff0000
 8000f08:	623b      	str	r3, [r7, #32]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f0e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8000f12:	4623      	mov	r3, r4
 8000f14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f18:	4602      	mov	r2, r0
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	462b      	mov	r3, r5
 8000f20:	460a      	mov	r2, r1
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61fb      	str	r3, [r7, #28]
         (value & 0x00FF000000000000UL) >> 40 | (value & 0xFF00000000000000UL) >> 56;
 8000f26:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	0a0a      	lsrs	r2, r1, #8
 8000f34:	2300      	movs	r3, #0
 8000f36:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
         (value & 0x000000FF00000000UL) >> 8 | (value & 0x0000FF0000000000UL) >> 24 |
 8000f40:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000f44:	4623      	mov	r3, r4
 8000f46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	462b      	mov	r3, r5
 8000f52:	460a      	mov	r2, r1
 8000f54:	4313      	orrs	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]
         (value & 0x00FF000000000000UL) >> 40 | (value & 0xFF00000000000000UL) >> 56;
 8000f58:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	0e0a      	lsrs	r2, r1, #24
 8000f66:	2300      	movs	r3, #0
 8000f68:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	4311      	orrs	r1, r2
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	4629      	mov	r1, r5
 8000f74:	4319      	orrs	r1, r3
 8000f76:	6079      	str	r1, [r7, #4]
 8000f78:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	3764      	adds	r7, #100	; 0x64
 8000f82:	46bd      	mov	sp, r7
 8000f84:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, r10, r11}
 8000f88:	4770      	bx	lr

08000f8a <SEND_TO_SERVER>:

void SEND_TO_SERVER(){
 8000f8a:	             b580      	push	{r7, lr}
 8000f8c:	             b0a4      	sub	sp, #144	; 0x90
 8000f8e:	             af00      	add	r7, sp, #0
    //
    if(SX1268.self_addr == 1){
 8000f90:	             4ba3      	ldr	r3, [pc, #652]	; (8001220 <SEND_TO_SERVER+0x296>)
 8000f92:	             7c5b      	ldrb	r3, [r3, #17]
 8000f94:	             2b01      	cmp	r3, #1
 8000f96:	/----------- f040 813f 	bne.w	8001218 <SEND_TO_SERVER+0x28e>
        sim7000g = (GSM){
 8000f9a:	|            4ba2      	ldr	r3, [pc, #648]	; (8001224 <SEND_TO_SERVER+0x29a>)
 8000f9c:	|            4618      	mov	r0, r3
 8000f9e:	|            2380      	movs	r3, #128	; 0x80
 8000fa0:	|            461a      	mov	r2, r3
 8000fa2:	|            2100      	movs	r1, #0
 8000fa4:	|            f008 fd1c 	bl	80099e0 <memset>
 8000fa8:	|            4b9e      	ldr	r3, [pc, #632]	; (8001224 <SEND_TO_SERVER+0x29a>)
 8000faa:	|            221c      	movs	r2, #28
 8000fac:	|            701a      	strb	r2, [r3, #0]
 8000fae:	|            4b9d      	ldr	r3, [pc, #628]	; (8001224 <SEND_TO_SERVER+0x29a>)
 8000fb0:	|            221b      	movs	r2, #27
 8000fb2:	|            705a      	strb	r2, [r3, #1]
 8000fb4:	|            4b9b      	ldr	r3, [pc, #620]	; (8001224 <SEND_TO_SERVER+0x29a>)
 8000fb6:	|            220c      	movs	r2, #12
 8000fb8:	|            711a      	strb	r2, [r3, #4]
 8000fba:	|            4b9a      	ldr	r3, [pc, #616]	; (8001224 <SEND_TO_SERVER+0x29a>)
 8000fbc:	|            220d      	movs	r2, #13
 8000fbe:	|            715a      	strb	r2, [r3, #5]
 8000fc0:	|            4b98      	ldr	r3, [pc, #608]	; (8001224 <SEND_TO_SERVER+0x29a>)
 8000fc2:	|            220b      	movs	r2, #11
 8000fc4:	|            719a      	strb	r2, [r3, #6]
 8000fc6:	|            4b97      	ldr	r3, [pc, #604]	; (8001224 <SEND_TO_SERVER+0x29a>)
 8000fc8:	|            222e      	movs	r2, #46	; 0x2e
 8000fca:	|            71da      	strb	r2, [r3, #7]
 8000fcc:	|            4b95      	ldr	r3, [pc, #596]	; (8001224 <SEND_TO_SERVER+0x29a>)
 8000fce:	|            220b      	movs	r2, #11
 8000fd0:	|            725a      	strb	r2, [r3, #9]
 8000fd2:	|            4b94      	ldr	r3, [pc, #592]	; (8001224 <SEND_TO_SERVER+0x29a>)
 8000fd4:	|            220b      	movs	r2, #11
 8000fd6:	|            729a      	strb	r2, [r3, #10]
 8000fd8:	|            4b92      	ldr	r3, [pc, #584]	; (8001224 <SEND_TO_SERVER+0x29a>)
 8000fda:	|            4a93      	ldr	r2, [pc, #588]	; (8001228 <SEND_TO_SERVER+0x29e>)
 8000fdc:	|            611a      	str	r2, [r3, #16]
                .__cts_af_pin = uninitialized,
                .__rts_af_pin = uninitialized
            },
            .uart = USART3
        };
        NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000fde:	|            2017      	movs	r0, #23
 8000fe0:	|            f7ff feec 	bl	8000dbc <__NVIC_DisableIRQ>
        uint8_t gsm_init_flag = GSM_Init(&sim7000g);
 8000fe4:	|            488f      	ldr	r0, [pc, #572]	; (8001224 <SEND_TO_SERVER+0x29a>)
 8000fe6:	|            f005 faa7 	bl	8006538 <GSM_Init>
 8000fea:	|            4603      	mov	r3, r0
 8000fec:	|            f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        uint16_t gs1_buf_counter = buffer_ptr;
 8000ff0:	|            4b8e      	ldr	r3, [pc, #568]	; (800122c <SEND_TO_SERVER+0x2a2>)
 8000ff2:	|            881b      	ldrh	r3, [r3, #0]
 8000ff4:	|            f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
        if(buffer_ptr + gs2_buf_ptr < sizeof(data_buffer)){
 8000ff8:	|            4b8c      	ldr	r3, [pc, #560]	; (800122c <SEND_TO_SERVER+0x2a2>)
 8000ffa:	|            881b      	ldrh	r3, [r3, #0]
 8000ffc:	|            461a      	mov	r2, r3
 8000ffe:	|            4b8c      	ldr	r3, [pc, #560]	; (8001230 <SEND_TO_SERVER+0x2a6>)
 8001000:	|            781b      	ldrb	r3, [r3, #0]
 8001002:	|            4413      	add	r3, r2
 8001004:	|            f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001008:	|        /-- d232      	bcs.n	8001070 <SEND_TO_SERVER+0xe6>
            uint8_t data[3] = {0x02, gs2_buf_ptr >> 8, gs2_buf_ptr & 0xFF};
 800100a:	|        |   2302      	movs	r3, #2
 800100c:	|        |   f887 3088 	strb.w	r3, [r7, #136]	; 0x88
 8001010:	|        |   4b87      	ldr	r3, [pc, #540]	; (8001230 <SEND_TO_SERVER+0x2a6>)
 8001012:	|        |   781b      	ldrb	r3, [r3, #0]
 8001014:	|        |   121b      	asrs	r3, r3, #8
 8001016:	|        |   b2db      	uxtb	r3, r3
 8001018:	|        |   f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800101c:	|        |   4b84      	ldr	r3, [pc, #528]	; (8001230 <SEND_TO_SERVER+0x2a6>)
 800101e:	|        |   781b      	ldrb	r3, [r3, #0]
 8001020:	|        |   f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
            memcpy(data_buffer + buffer_ptr, (uint8_t *)(&data), sizeof(data));
 8001024:	|        |   4b81      	ldr	r3, [pc, #516]	; (800122c <SEND_TO_SERVER+0x2a2>)
 8001026:	|        |   881b      	ldrh	r3, [r3, #0]
 8001028:	|        |   461a      	mov	r2, r3
 800102a:	|        |   4b82      	ldr	r3, [pc, #520]	; (8001234 <SEND_TO_SERVER+0x2aa>)
 800102c:	|        |   4413      	add	r3, r2
 800102e:	|        |   461a      	mov	r2, r3
 8001030:	|        |   f107 0388 	add.w	r3, r7, #136	; 0x88
 8001034:	|        |   8819      	ldrh	r1, [r3, #0]
 8001036:	|        |   789b      	ldrb	r3, [r3, #2]
 8001038:	|        |   8011      	strh	r1, [r2, #0]
 800103a:	|        |   7093      	strb	r3, [r2, #2]
            buffer_ptr += sizeof(data);
 800103c:	|        |   4b7b      	ldr	r3, [pc, #492]	; (800122c <SEND_TO_SERVER+0x2a2>)
 800103e:	|        |   881b      	ldrh	r3, [r3, #0]
 8001040:	|        |   3303      	adds	r3, #3
 8001042:	|        |   b29a      	uxth	r2, r3
 8001044:	|        |   4b79      	ldr	r3, [pc, #484]	; (800122c <SEND_TO_SERVER+0x2a2>)
 8001046:	|        |   801a      	strh	r2, [r3, #0]
            memcpy(data_buffer + buffer_ptr, (uint8_t *)(&gs2_buffer), gs2_buf_ptr);
 8001048:	|        |   4b78      	ldr	r3, [pc, #480]	; (800122c <SEND_TO_SERVER+0x2a2>)
 800104a:	|        |   881b      	ldrh	r3, [r3, #0]
 800104c:	|        |   461a      	mov	r2, r3
 800104e:	|        |   4b79      	ldr	r3, [pc, #484]	; (8001234 <SEND_TO_SERVER+0x2aa>)
 8001050:	|        |   4413      	add	r3, r2
 8001052:	|        |   4a77      	ldr	r2, [pc, #476]	; (8001230 <SEND_TO_SERVER+0x2a6>)
 8001054:	|        |   7812      	ldrb	r2, [r2, #0]
 8001056:	|        |   4978      	ldr	r1, [pc, #480]	; (8001238 <SEND_TO_SERVER+0x2ae>)
 8001058:	|        |   4618      	mov	r0, r3
 800105a:	|        |   f008 fd01 	bl	8009a60 <memcpy>
            buffer_ptr += gs2_buf_ptr;
 800105e:	|        |   4b74      	ldr	r3, [pc, #464]	; (8001230 <SEND_TO_SERVER+0x2a6>)
 8001060:	|        |   781b      	ldrb	r3, [r3, #0]
 8001062:	|        |   b29a      	uxth	r2, r3
 8001064:	|        |   4b71      	ldr	r3, [pc, #452]	; (800122c <SEND_TO_SERVER+0x2a2>)
 8001066:	|        |   881b      	ldrh	r3, [r3, #0]
 8001068:	|        |   4413      	add	r3, r2
 800106a:	|        |   b29a      	uxth	r2, r3
 800106c:	|        |   4b6f      	ldr	r3, [pc, #444]	; (800122c <SEND_TO_SERVER+0x2a2>)
 800106e:	|        |   801a      	strh	r2, [r3, #0]
        }

        if(buffer_ptr + gs3_buf_ptr < sizeof(data_buffer)){
 8001070:	|        \-> 4b6e      	ldr	r3, [pc, #440]	; (800122c <SEND_TO_SERVER+0x2a2>)
 8001072:	|            881b      	ldrh	r3, [r3, #0]
 8001074:	|            461a      	mov	r2, r3
 8001076:	|            4b71      	ldr	r3, [pc, #452]	; (800123c <SEND_TO_SERVER+0x2b2>)
 8001078:	|            781b      	ldrb	r3, [r3, #0]
 800107a:	|            4413      	add	r3, r2
 800107c:	|            f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001080:	|        /-- d232      	bcs.n	80010e8 <SEND_TO_SERVER+0x15e>
            uint8_t data[3] = {0x03, gs3_buf_ptr >> 8, gs3_buf_ptr & 0xFF};
 8001082:	|        |   2303      	movs	r3, #3
 8001084:	|        |   f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8001088:	|        |   4b6c      	ldr	r3, [pc, #432]	; (800123c <SEND_TO_SERVER+0x2b2>)
 800108a:	|        |   781b      	ldrb	r3, [r3, #0]
 800108c:	|        |   121b      	asrs	r3, r3, #8
 800108e:	|        |   b2db      	uxtb	r3, r3
 8001090:	|        |   f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8001094:	|        |   4b69      	ldr	r3, [pc, #420]	; (800123c <SEND_TO_SERVER+0x2b2>)
 8001096:	|        |   781b      	ldrb	r3, [r3, #0]
 8001098:	|        |   f887 3086 	strb.w	r3, [r7, #134]	; 0x86
            memcpy(data_buffer + buffer_ptr, (uint8_t *)(&data), sizeof(data));
 800109c:	|        |   4b63      	ldr	r3, [pc, #396]	; (800122c <SEND_TO_SERVER+0x2a2>)
 800109e:	|        |   881b      	ldrh	r3, [r3, #0]
 80010a0:	|        |   461a      	mov	r2, r3
 80010a2:	|        |   4b64      	ldr	r3, [pc, #400]	; (8001234 <SEND_TO_SERVER+0x2aa>)
 80010a4:	|        |   4413      	add	r3, r2
 80010a6:	|        |   461a      	mov	r2, r3
 80010a8:	|        |   f107 0384 	add.w	r3, r7, #132	; 0x84
 80010ac:	|        |   8819      	ldrh	r1, [r3, #0]
 80010ae:	|        |   789b      	ldrb	r3, [r3, #2]
 80010b0:	|        |   8011      	strh	r1, [r2, #0]
 80010b2:	|        |   7093      	strb	r3, [r2, #2]
            buffer_ptr += sizeof(data);
 80010b4:	|        |   4b5d      	ldr	r3, [pc, #372]	; (800122c <SEND_TO_SERVER+0x2a2>)
 80010b6:	|        |   881b      	ldrh	r3, [r3, #0]
 80010b8:	|        |   3303      	adds	r3, #3
 80010ba:	|        |   b29a      	uxth	r2, r3
 80010bc:	|        |   4b5b      	ldr	r3, [pc, #364]	; (800122c <SEND_TO_SERVER+0x2a2>)
 80010be:	|        |   801a      	strh	r2, [r3, #0]
            memcpy(data_buffer + buffer_ptr, (uint8_t *)(&gs3_buffer), gs3_buf_ptr);
 80010c0:	|        |   4b5a      	ldr	r3, [pc, #360]	; (800122c <SEND_TO_SERVER+0x2a2>)
 80010c2:	|        |   881b      	ldrh	r3, [r3, #0]
 80010c4:	|        |   461a      	mov	r2, r3
 80010c6:	|        |   4b5b      	ldr	r3, [pc, #364]	; (8001234 <SEND_TO_SERVER+0x2aa>)
 80010c8:	|        |   4413      	add	r3, r2
 80010ca:	|        |   4a5c      	ldr	r2, [pc, #368]	; (800123c <SEND_TO_SERVER+0x2b2>)
 80010cc:	|        |   7812      	ldrb	r2, [r2, #0]
 80010ce:	|        |   495c      	ldr	r1, [pc, #368]	; (8001240 <SEND_TO_SERVER+0x2b6>)
 80010d0:	|        |   4618      	mov	r0, r3
 80010d2:	|        |   f008 fcc5 	bl	8009a60 <memcpy>
            buffer_ptr += gs3_buf_ptr;
 80010d6:	|        |   4b59      	ldr	r3, [pc, #356]	; (800123c <SEND_TO_SERVER+0x2b2>)
 80010d8:	|        |   781b      	ldrb	r3, [r3, #0]
 80010da:	|        |   b29a      	uxth	r2, r3
 80010dc:	|        |   4b53      	ldr	r3, [pc, #332]	; (800122c <SEND_TO_SERVER+0x2a2>)
 80010de:	|        |   881b      	ldrh	r3, [r3, #0]
 80010e0:	|        |   4413      	add	r3, r2
 80010e2:	|        |   b29a      	uxth	r2, r3
 80010e4:	|        |   4b51      	ldr	r3, [pc, #324]	; (800122c <SEND_TO_SERVER+0x2a2>)
 80010e6:	|        |   801a      	strh	r2, [r3, #0]
        }

        GSM_CheckSignal(&sim7000g);
 80010e8:	|        \-> 484e      	ldr	r0, [pc, #312]	; (8001224 <SEND_TO_SERVER+0x29a>)
 80010ea:	|            f005 fb2f 	bl	800674c <GSM_CheckSignal>
        GSM_GetVBAT(&sim7000g);
 80010ee:	|            484d      	ldr	r0, [pc, #308]	; (8001224 <SEND_TO_SERVER+0x29a>)
 80010f0:	|            f005 fb3a 	bl	8006768 <GSM_GetVBAT>
        if(buffer_ptr + 3 < sizeof(data_buffer)){
 80010f4:	|            4b4d      	ldr	r3, [pc, #308]	; (800122c <SEND_TO_SERVER+0x2a2>)
 80010f6:	|            881b      	ldrh	r3, [r3, #0]
 80010f8:	|            3303      	adds	r3, #3
 80010fa:	|            f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80010fe:	|        /-- d216      	bcs.n	800112e <SEND_TO_SERVER+0x1a4>
            memcpy(data_buffer + buffer_ptr, (uint8_t *)(&sim7000g.vbat), 2);
 8001100:	|        |   4b4a      	ldr	r3, [pc, #296]	; (800122c <SEND_TO_SERVER+0x2a2>)
 8001102:	|        |   881b      	ldrh	r3, [r3, #0]
 8001104:	|        |   461a      	mov	r2, r3
 8001106:	|        |   4b4b      	ldr	r3, [pc, #300]	; (8001234 <SEND_TO_SERVER+0x2aa>)
 8001108:	|        |   4413      	add	r3, r2
 800110a:	|        |   4a46      	ldr	r2, [pc, #280]	; (8001224 <SEND_TO_SERVER+0x29a>)
 800110c:	|        |   8bd2      	ldrh	r2, [r2, #30]
 800110e:	|        |   801a      	strh	r2, [r3, #0]
            memcpy(data_buffer + buffer_ptr + 2, &sim7000g.signal_level, 1);
 8001110:	|        |   4b46      	ldr	r3, [pc, #280]	; (800122c <SEND_TO_SERVER+0x2a2>)
 8001112:	|        |   881b      	ldrh	r3, [r3, #0]
 8001114:	|        |   3302      	adds	r3, #2
 8001116:	|        |   4a47      	ldr	r2, [pc, #284]	; (8001234 <SEND_TO_SERVER+0x2aa>)
 8001118:	|        |   4413      	add	r3, r2
 800111a:	|        |   4a42      	ldr	r2, [pc, #264]	; (8001224 <SEND_TO_SERVER+0x29a>)
 800111c:	|        |   f892 2020 	ldrb.w	r2, [r2, #32]
 8001120:	|        |   701a      	strb	r2, [r3, #0]
            buffer_ptr += 3;
 8001122:	|        |   4b42      	ldr	r3, [pc, #264]	; (800122c <SEND_TO_SERVER+0x2a2>)
 8001124:	|        |   881b      	ldrh	r3, [r3, #0]
 8001126:	|        |   3303      	adds	r3, #3
 8001128:	|        |   b29a      	uxth	r2, r3
 800112a:	|        |   4b40      	ldr	r3, [pc, #256]	; (800122c <SEND_TO_SERVER+0x2a2>)
 800112c:	|        |   801a      	strh	r2, [r3, #0]
        }
        memcpy(data_buffer + 4, (uint8_t *)(&buffer_ptr), 2);
 800112e:	|        \-> 4a45      	ldr	r2, [pc, #276]	; (8001244 <SEND_TO_SERVER+0x2ba>)
 8001130:	|            4b3e      	ldr	r3, [pc, #248]	; (800122c <SEND_TO_SERVER+0x2a2>)
 8001132:	|            881b      	ldrh	r3, [r3, #0]
 8001134:	|            8013      	strh	r3, [r2, #0]
        memcpy(data_buffer + 6, (uint8_t *)(&gs1_buf_counter), 2);
 8001136:	|            4a44      	ldr	r2, [pc, #272]	; (8001248 <SEND_TO_SERVER+0x2be>)
 8001138:	|            f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800113c:	|            8013      	strh	r3, [r2, #0]
        Delay(1700);
 800113e:	|            f240 60a4 	movw	r0, #1700	; 0x6a4
 8001142:	|            f004 fd47 	bl	8005bd4 <Delay>
        uint8_t gprs_init_flag = GSM_InitGPRS(&sim7000g);
 8001146:	|            4837      	ldr	r0, [pc, #220]	; (8001224 <SEND_TO_SERVER+0x29a>)
 8001148:	|            f005 fb78 	bl	800683c <GSM_InitGPRS>
 800114c:	|            4603      	mov	r3, r0
 800114e:	|            f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
        Delay(700);
 8001152:	|            f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001156:	|            f004 fd3d 	bl	8005bd4 <Delay>
        if(gprs_init_flag == 0){
 800115a:	|            f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800115e:	|            2b00      	cmp	r3, #0
 8001160:	|  /-------- d14b      	bne.n	80011fa <SEND_TO_SERVER+0x270>
            GSM_OpenConnection(&sim7000g, "hirundo.ru", "8083");
 8001162:	|  |         4a3a      	ldr	r2, [pc, #232]	; (800124c <SEND_TO_SERVER+0x2c2>)
 8001164:	|  |         493a      	ldr	r1, [pc, #232]	; (8001250 <SEND_TO_SERVER+0x2c6>)
 8001166:	|  |         482f      	ldr	r0, [pc, #188]	; (8001224 <SEND_TO_SERVER+0x29a>)
 8001168:	|  |         f005 fc18 	bl	800699c <GSM_OpenConnection>
            if(sim7000g.ip_status==GPRS_CONNECT_OK){
 800116c:	|  |         4b2d      	ldr	r3, [pc, #180]	; (8001224 <SEND_TO_SERVER+0x29a>)
 800116e:	|  |         f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001172:	|  |         2b05      	cmp	r3, #5
 8001174:	|  |  /----- d13e      	bne.n	80011f4 <SEND_TO_SERVER+0x26a>
                // GSM_SendTCP(&sim7000g, "hello", 5);
                GSM_WaitTCPServerConnection(&sim7000g, 4500);
 8001176:	|  |  |      f241 1194 	movw	r1, #4500	; 0x1194
 800117a:	|  |  |      482a      	ldr	r0, [pc, #168]	; (8001224 <SEND_TO_SERVER+0x29a>)
 800117c:	|  |  |      f005 fd0e 	bl	8006b9c <GSM_WaitTCPServerConnection>
                GSM_SendTCP(&sim7000g, (char*)data_buffer, buffer_ptr);
 8001180:	|  |  |      4b2a      	ldr	r3, [pc, #168]	; (800122c <SEND_TO_SERVER+0x2a2>)
 8001182:	|  |  |      881b      	ldrh	r3, [r3, #0]
 8001184:	|  |  |      461a      	mov	r2, r3
 8001186:	|  |  |      492b      	ldr	r1, [pc, #172]	; (8001234 <SEND_TO_SERVER+0x2aa>)
 8001188:	|  |  |      4826      	ldr	r0, [pc, #152]	; (8001224 <SEND_TO_SERVER+0x29a>)
 800118a:	|  |  |      f005 fc59 	bl	8006a40 <GSM_SendTCP>
                if(GSM_WaitTCPServerAcknowledge(&sim7000g, 4500)){
 800118e:	|  |  |      f241 1194 	movw	r1, #4500	; 0x1194
 8001192:	|  |  |      4824      	ldr	r0, [pc, #144]	; (8001224 <SEND_TO_SERVER+0x29a>)
 8001194:	|  |  |      f005 fcdc 	bl	8006b50 <GSM_WaitTCPServerAcknowledge>
 8001198:	|  |  |      4603      	mov	r3, r0
 800119a:	|  |  |      2b00      	cmp	r3, #0
 800119c:	|  |  |  /-- d026      	beq.n	80011ec <SEND_TO_SERVER+0x262>
                    GSM_CloseConnections(&sim7000g);
 800119e:	|  |  |  |   4821      	ldr	r0, [pc, #132]	; (8001224 <SEND_TO_SERVER+0x29a>)
 80011a0:	|  |  |  |   f005 fc9e 	bl	8006ae0 <GSM_CloseConnections>
                    Delay(500);
 80011a4:	|  |  |  |   f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a8:	|  |  |  |   f004 fd14 	bl	8005bd4 <Delay>
                    gprs_init_flag = GSM_InitGPRS(&sim7000g);
 80011ac:	|  |  |  |   481d      	ldr	r0, [pc, #116]	; (8001224 <SEND_TO_SERVER+0x29a>)
 80011ae:	|  |  |  |   f005 fb45 	bl	800683c <GSM_InitGPRS>
 80011b2:	|  |  |  |   4603      	mov	r3, r0
 80011b4:	|  |  |  |   f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                    Delay(500);
 80011b8:	|  |  |  |   f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011bc:	|  |  |  |   f004 fd0a 	bl	8005bd4 <Delay>
                    GSM_OpenConnection(&sim7000g, "hirundo.ru", "8083");
 80011c0:	|  |  |  |   4a22      	ldr	r2, [pc, #136]	; (800124c <SEND_TO_SERVER+0x2c2>)
 80011c2:	|  |  |  |   4923      	ldr	r1, [pc, #140]	; (8001250 <SEND_TO_SERVER+0x2c6>)
 80011c4:	|  |  |  |   4817      	ldr	r0, [pc, #92]	; (8001224 <SEND_TO_SERVER+0x29a>)
 80011c6:	|  |  |  |   f005 fbe9 	bl	800699c <GSM_OpenConnection>
                    GSM_WaitTCPServerConnection(&sim7000g, 4500);
 80011ca:	|  |  |  |   f241 1194 	movw	r1, #4500	; 0x1194
 80011ce:	|  |  |  |   4815      	ldr	r0, [pc, #84]	; (8001224 <SEND_TO_SERVER+0x29a>)
 80011d0:	|  |  |  |   f005 fce4 	bl	8006b9c <GSM_WaitTCPServerConnection>
                    GSM_SendTCP(&sim7000g, (char*)data_buffer, buffer_ptr);
 80011d4:	|  |  |  |   4b15      	ldr	r3, [pc, #84]	; (800122c <SEND_TO_SERVER+0x2a2>)
 80011d6:	|  |  |  |   881b      	ldrh	r3, [r3, #0]
 80011d8:	|  |  |  |   461a      	mov	r2, r3
 80011da:	|  |  |  |   4916      	ldr	r1, [pc, #88]	; (8001234 <SEND_TO_SERVER+0x2aa>)
 80011dc:	|  |  |  |   4811      	ldr	r0, [pc, #68]	; (8001224 <SEND_TO_SERVER+0x29a>)
 80011de:	|  |  |  |   f005 fc2f 	bl	8006a40 <GSM_SendTCP>
                    GSM_WaitTCPServerAcknowledge(&sim7000g, 4500);
 80011e2:	|  |  |  |   f241 1194 	movw	r1, #4500	; 0x1194
 80011e6:	|  |  |  |   480f      	ldr	r0, [pc, #60]	; (8001224 <SEND_TO_SERVER+0x29a>)
 80011e8:	|  |  |  |   f005 fcb2 	bl	8006b50 <GSM_WaitTCPServerAcknowledge>
                }
                GSM_CloseConnections(&sim7000g);
 80011ec:	|  |  |  \-> 480d      	ldr	r0, [pc, #52]	; (8001224 <SEND_TO_SERVER+0x29a>)
 80011ee:	|  |  |      f005 fc77 	bl	8006ae0 <GSM_CloseConnections>
 80011f2:	|  +--|----- e002      	b.n	80011fa <SEND_TO_SERVER+0x270>
            }
            else GSM_CloseConnections(&sim7000g);
 80011f4:	|  |  \----> 480b      	ldr	r0, [pc, #44]	; (8001224 <SEND_TO_SERVER+0x29a>)
 80011f6:	|  |         f005 fc73 	bl	8006ae0 <GSM_CloseConnections>
        }
        GSM_PowerOFF(&sim7000g);
 80011fa:	|  \-------> 480a      	ldr	r0, [pc, #40]	; (8001224 <SEND_TO_SERVER+0x29a>)
 80011fc:	|            f005 fb10 	bl	8006820 <GSM_PowerOFF>
        buffer_ptr = 0;
 8001200:	|            4b0a      	ldr	r3, [pc, #40]	; (800122c <SEND_TO_SERVER+0x2a2>)
 8001202:	|            2200      	movs	r2, #0
 8001204:	|            801a      	strh	r2, [r3, #0]
        gs2_buf_ptr = 0;
 8001206:	|            4b0a      	ldr	r3, [pc, #40]	; (8001230 <SEND_TO_SERVER+0x2a6>)
 8001208:	|            2200      	movs	r2, #0
 800120a:	|            701a      	strb	r2, [r3, #0]
        gs3_buf_ptr = 0;
 800120c:	|            4b0b      	ldr	r3, [pc, #44]	; (800123c <SEND_TO_SERVER+0x2b2>)
 800120e:	|            2200      	movs	r2, #0
 8001210:	|            701a      	strb	r2, [r3, #0]
        // EXTI->PR1 |= EXTI_PR1_PIF6;
        NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001212:	|            2017      	movs	r0, #23
 8001214:	|            f7ff fdb4 	bl	8000d80 <__NVIC_EnableIRQ>
    }
}
 8001218:	\----------> bf00      	nop
 800121a:	             3790      	adds	r7, #144	; 0x90
 800121c:	             46bd      	mov	sp, r7
 800121e:	             bd80      	pop	{r7, pc}
 8001220:	             09c8      	lsrs	r0, r1, #7
 8001222:	             2000      	movs	r0, #0
 8001224:	             0948      	lsrs	r0, r1, #5
 8001226:	             2000      	movs	r0, #0
 8001228:	             4800      	ldr	r0, [pc, #0]	; (800122c <SEND_TO_SERVER+0x2a2>)
 800122a:	             4000      	ands	r0, r0
 800122c:	             1074      	asrs	r4, r6, #1
 800122e:	             2000      	movs	r0, #0
 8001230:	             1178      	asrs	r0, r7, #5
 8001232:	             2000      	movs	r0, #0
 8001234:	             0d74      	lsrs	r4, r6, #21
 8001236:	             2000      	movs	r0, #0
 8001238:	             1078      	asrs	r0, r7, #1
 800123a:	             2000      	movs	r0, #0
 800123c:	             127c      	asrs	r4, r7, #9
 800123e:	             2000      	movs	r0, #0
 8001240:	             117c      	asrs	r4, r7, #5
 8001242:	             2000      	movs	r0, #0
 8001244:	             0d78      	lsrs	r0, r7, #21
 8001246:	             2000      	movs	r0, #0
 8001248:	             0d7a      	lsrs	r2, r7, #21
 800124a:	             2000      	movs	r0, #0
 800124c:	             aed8      	add	r6, sp, #864	; 0x360
 800124e:	             0800      	lsrs	r0, r0, #32
 8001250:	             aee0      	add	r6, sp, #896	; 0x380
 8001252:	             0800      	lsrs	r0, r0, #32

08001254 <TemperatureSensorsMeasure>:
void TemperatureSensorsMeasure(){
 8001254:	          b590      	push	{r4, r7, lr}
 8001256:	          b089      	sub	sp, #36	; 0x24
 8001258:	          af00      	add	r7, sp, #0
    OneWireStatus status;
    DS18B20_StartTempMeas(&ow);
 800125a:	          482e      	ldr	r0, [pc, #184]	; (8001314 <TemperatureSensorsMeasure+0xc0>)
 800125c:	          f005 f87e 	bl	800635c <DS18B20_StartTempMeas>
    for(uint8_t i = 0; i < 12; i++){
 8001260:	          2300      	movs	r3, #0
 8001262:	          77fb      	strb	r3, [r7, #31]
 8001264:	   /----- e04e      	b.n	8001304 <TemperatureSensorsMeasure+0xb0>
        if(SELF_ID == 1){
            uint64_t data = ReverseBytes(gs1_ow_nums[i]);
 8001266:	/--|----> 7ffb      	ldrb	r3, [r7, #31]
 8001268:	|  |      4a2b      	ldr	r2, [pc, #172]	; (8001318 <TemperatureSensorsMeasure+0xc4>)
 800126a:	|  |      00db      	lsls	r3, r3, #3
 800126c:	|  |      4413      	add	r3, r2
 800126e:	|  |      e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	|  |      4610      	mov	r0, r2
 8001274:	|  |      4619      	mov	r1, r3
 8001276:	|  |      f7ff f835 	bl	80002e4 <ReverseBytes>
 800127a:	|  |      4602      	mov	r2, r0
 800127c:	|  |      460b      	mov	r3, r1
 800127e:	|  |      e9c7 2304 	strd	r2, r3, [r7, #16]
            status = OneWire_MatchRom(&ow, (RomCode*)(&data));
 8001282:	|  |      f107 0310 	add.w	r3, r7, #16
 8001286:	|  |      4619      	mov	r1, r3
 8001288:	|  |      4822      	ldr	r0, [pc, #136]	; (8001314 <TemperatureSensorsMeasure+0xc0>)
 800128a:	|  |      f001 ff37 	bl	80030fc <OneWire_MatchRom>
 800128e:	|  |      4603      	mov	r3, r0
 8001290:	|  |      77bb      	strb	r3, [r7, #30]
            status = OneWire_MatchRom(&ow, (RomCode*)(&data));
        } else if(SELF_ID == 3){
            uint64_t data = ReverseBytes(gs3_ow_nums[i]);
            status = OneWire_MatchRom(&ow, (RomCode*)(&data));
        }
        if(status == ONE_WIRE_OK){
 8001292:	|  |      7fbb      	ldrb	r3, [r7, #30]
 8001294:	|  |      2b00      	cmp	r3, #0
 8001296:	|  |  /-- d132      	bne.n	80012fe <TemperatureSensorsMeasure+0xaa>
            OneWire_Write(&ow, DS18B20_READ_SCRATCHPAD);
 8001298:	|  |  |   21be      	movs	r1, #190	; 0xbe
 800129a:	|  |  |   481e      	ldr	r0, [pc, #120]	; (8001314 <TemperatureSensorsMeasure+0xc0>)
 800129c:	|  |  |   f001 fd77 	bl	8002d8e <OneWire_Write>
            OneWire_ReadArray(&ow, (uint8_t *)(&(sensors[i].scratchpad)), 9);
 80012a0:	|  |  |   7ffa      	ldrb	r2, [r7, #31]
 80012a2:	|  |  |   4613      	mov	r3, r2
 80012a4:	|  |  |   00db      	lsls	r3, r3, #3
 80012a6:	|  |  |   1a9b      	subs	r3, r3, r2
 80012a8:	|  |  |   009b      	lsls	r3, r3, #2
 80012aa:	|  |  |   3308      	adds	r3, #8
 80012ac:	|  |  |   4a1b      	ldr	r2, [pc, #108]	; (800131c <TemperatureSensorsMeasure+0xc8>)
 80012ae:	|  |  |   4413      	add	r3, r2
 80012b0:	|  |  |   3304      	adds	r3, #4
 80012b2:	|  |  |   2209      	movs	r2, #9
 80012b4:	|  |  |   4619      	mov	r1, r3
 80012b6:	|  |  |   4817      	ldr	r0, [pc, #92]	; (8001314 <TemperatureSensorsMeasure+0xc0>)
 80012b8:	|  |  |   f001 fd4b 	bl	8002d52 <OneWire_ReadArray>
            sensors[i].temperature = (uint32_t)(sensors[i].scratchpad.temperature) * 0.0625;
 80012bc:	|  |  |   7ffa      	ldrb	r2, [r7, #31]
 80012be:	|  |  |   4917      	ldr	r1, [pc, #92]	; (800131c <TemperatureSensorsMeasure+0xc8>)
 80012c0:	|  |  |   4613      	mov	r3, r2
 80012c2:	|  |  |   00db      	lsls	r3, r3, #3
 80012c4:	|  |  |   1a9b      	subs	r3, r3, r2
 80012c6:	|  |  |   009b      	lsls	r3, r3, #2
 80012c8:	|  |  |   440b      	add	r3, r1
 80012ca:	|  |  |   330c      	adds	r3, #12
 80012cc:	|  |  |   881b      	ldrh	r3, [r3, #0]
 80012ce:	|  |  |   4618      	mov	r0, r3
 80012d0:	|  |  |   f007 ffd0 	bl	8009274 <__aeabi_ui2d>
 80012d4:	|  |  |   f04f 0200 	mov.w	r2, #0
 80012d8:	|  |  |   4b11      	ldr	r3, [pc, #68]	; (8001320 <TemperatureSensorsMeasure+0xcc>)
 80012da:	|  |  |   f008 f845 	bl	8009368 <__aeabi_dmul>
 80012de:	|  |  |   4602      	mov	r2, r0
 80012e0:	|  |  |   460b      	mov	r3, r1
 80012e2:	|  |  |   7ffc      	ldrb	r4, [r7, #31]
 80012e4:	|  |  |   4610      	mov	r0, r2
 80012e6:	|  |  |   4619      	mov	r1, r3
 80012e8:	|  |  |   f008 fa98 	bl	800981c <__aeabi_d2f>
 80012ec:	|  |  |   4602      	mov	r2, r0
 80012ee:	|  |  |   490b      	ldr	r1, [pc, #44]	; (800131c <TemperatureSensorsMeasure+0xc8>)
 80012f0:	|  |  |   4623      	mov	r3, r4
 80012f2:	|  |  |   00db      	lsls	r3, r3, #3
 80012f4:	|  |  |   1b1b      	subs	r3, r3, r4
 80012f6:	|  |  |   009b      	lsls	r3, r3, #2
 80012f8:	|  |  |   440b      	add	r3, r1
 80012fa:	|  |  |   3318      	adds	r3, #24
 80012fc:	|  |  |   601a      	str	r2, [r3, #0]
    for(uint8_t i = 0; i < 12; i++){
 80012fe:	|  |  \-> 7ffb      	ldrb	r3, [r7, #31]
 8001300:	|  |      3301      	adds	r3, #1
 8001302:	|  |      77fb      	strb	r3, [r7, #31]
 8001304:	|  \----> 7ffb      	ldrb	r3, [r7, #31]
 8001306:	|         2b0b      	cmp	r3, #11
 8001308:	\-------- d9ad      	bls.n	8001266 <TemperatureSensorsMeasure+0x12>
        }
    }
}
 800130a:	          bf00      	nop
 800130c:	          bf00      	nop
 800130e:	          3724      	adds	r7, #36	; 0x24
 8001310:	          46bd      	mov	sp, r7
 8001312:	          bd90      	pop	{r4, r7, pc}
 8001314:	          0cb0      	lsrs	r0, r6, #18
 8001316:	          2000      	movs	r0, #0
 8001318:	          0008      	movs	r0, r1
 800131a:	          2000      	movs	r0, #0
 800131c:	          0b60      	lsrs	r0, r4, #13
 800131e:	          2000      	movs	r0, #0
 8001320:	          0000      	movs	r0, r0
 8001322:	          3fb0      	subs	r7, #176	; 0xb0

08001324 <MakeMeasure>:
void MakeMeasure(){
 8001324:	       b580      	push	{r7, lr}
 8001326:	       b090      	sub	sp, #64	; 0x40
 8001328:	       af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < 11; i++){
 800132a:	       2300      	movs	r3, #0
 800132c:	       f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001330:	   /-- e01a      	b.n	8001368 <MakeMeasure+0x44>
        adc.reg_channel_queue[i].result = 0;
 8001332:	/--|-> f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001336:	|  |   4966      	ldr	r1, [pc, #408]	; (80014d0 <MakeMeasure+0x1ac>)
 8001338:	|  |   4613      	mov	r3, r2
 800133a:	|  |   005b      	lsls	r3, r3, #1
 800133c:	|  |   4413      	add	r3, r2
 800133e:	|  |   009b      	lsls	r3, r3, #2
 8001340:	|  |   440b      	add	r3, r1
 8001342:	|  |   330c      	adds	r3, #12
 8001344:	|  |   2200      	movs	r2, #0
 8001346:	|  |   801a      	strh	r2, [r3, #0]
        sensors[i].scratchpad.temperature = 0;
 8001348:	|  |   f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800134c:	|  |   4961      	ldr	r1, [pc, #388]	; (80014d4 <MakeMeasure+0x1b0>)
 800134e:	|  |   4613      	mov	r3, r2
 8001350:	|  |   00db      	lsls	r3, r3, #3
 8001352:	|  |   1a9b      	subs	r3, r3, r2
 8001354:	|  |   009b      	lsls	r3, r3, #2
 8001356:	|  |   440b      	add	r3, r1
 8001358:	|  |   330c      	adds	r3, #12
 800135a:	|  |   2200      	movs	r2, #0
 800135c:	|  |   801a      	strh	r2, [r3, #0]
    for(uint8_t i = 0; i < 11; i++){
 800135e:	|  |   f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001362:	|  |   3301      	adds	r3, #1
 8001364:	|  |   f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001368:	|  \-> f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800136c:	|      2b0a      	cmp	r3, #10
 800136e:	\----- d9e0      	bls.n	8001332 <MakeMeasure+0xe>
    }
    sensors[11].scratchpad.temperature = 0;
 8001370:	       4b58      	ldr	r3, [pc, #352]	; (80014d4 <MakeMeasure+0x1b0>)
 8001372:	       2200      	movs	r2, #0
 8001374:	       f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140

    gpio_state(TEMP_SENSOR_PWR_EN, HIGH);
 8001378:	       2101      	movs	r1, #1
 800137a:	       2028      	movs	r0, #40	; 0x28
 800137c:	       f000 fe10 	bl	8001fa0 <gpio_state>
    gpio_state(SOIL_SENSOR_PWR_EN, HIGH);
 8001380:	       2101      	movs	r1, #1
 8001382:	       2009      	movs	r0, #9
 8001384:	       f000 fe0c 	bl	8001fa0 <gpio_state>
    Delay(100);
 8001388:	       2064      	movs	r0, #100	; 0x64
 800138a:	       f004 fc23 	bl	8005bd4 <Delay>
    ADC_Start(&adc);
 800138e:	       4850      	ldr	r0, [pc, #320]	; (80014d0 <MakeMeasure+0x1ac>)
 8001390:	       f000 fc07 	bl	8001ba2 <ADC_Start>

    TemperatureSensorsMeasure();
 8001394:	       f7ff ff5e 	bl	8001254 <TemperatureSensorsMeasure>
    while(adc.measure_process);
 8001398:	       bf00      	nop
 800139a:	   /-> 4b4d      	ldr	r3, [pc, #308]	; (80014d0 <MakeMeasure+0x1ac>)
 800139c:	   |   f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 80013a0:	   |   2b00      	cmp	r3, #0
 80013a2:	   \-- d1fa      	bne.n	800139a <MakeMeasure+0x76>
    gpio_state(TEMP_SENSOR_PWR_EN, LOW);
 80013a4:	       2100      	movs	r1, #0
 80013a6:	       2028      	movs	r0, #40	; 0x28
 80013a8:	       f000 fdfa 	bl	8001fa0 <gpio_state>
    gpio_state(SOIL_SENSOR_PWR_EN, LOW);
 80013ac:	       2100      	movs	r1, #0
 80013ae:	       2009      	movs	r0, #9
 80013b0:	       f000 fdf6 	bl	8001fa0 <gpio_state>
    uint16_t measured_data[24] = {0};
 80013b4:	       f107 030c 	add.w	r3, r7, #12
 80013b8:	       2230      	movs	r2, #48	; 0x30
 80013ba:	       2100      	movs	r1, #0
 80013bc:	       4618      	mov	r0, r3
 80013be:	       f008 fb0f 	bl	80099e0 <memset>
    // [control_word, self_id, target_id, cmd, [datetime[], adc_data[], temp_data[], vbat, gsm_vbat],]
    //       1          1         1       1       7           11*2         12*2      1*2     1*2
    for(uint8_t i = 0; i < 12; i++){
 80013c2:	       2300      	movs	r3, #0
 80013c4:	       f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80013c8:	   /-- e02a      	b.n	8001420 <MakeMeasure+0xfc>
        measured_data[i] = adc.reg_channel_queue[i].result;
 80013ca:	/--|-> f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80013ce:	|  |   f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 80013d2:	|  |   483f      	ldr	r0, [pc, #252]	; (80014d0 <MakeMeasure+0x1ac>)
 80013d4:	|  |   4613      	mov	r3, r2
 80013d6:	|  |   005b      	lsls	r3, r3, #1
 80013d8:	|  |   4413      	add	r3, r2
 80013da:	|  |   009b      	lsls	r3, r3, #2
 80013dc:	|  |   4403      	add	r3, r0
 80013de:	|  |   330c      	adds	r3, #12
 80013e0:	|  |   881a      	ldrh	r2, [r3, #0]
 80013e2:	|  |   004b      	lsls	r3, r1, #1
 80013e4:	|  |   f107 0140 	add.w	r1, r7, #64	; 0x40
 80013e8:	|  |   440b      	add	r3, r1
 80013ea:	|  |   f823 2c34 	strh.w	r2, [r3, #-52]
        measured_data[i + 12] = sensors[i].scratchpad.temperature;
 80013ee:	|  |   f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80013f2:	|  |   f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80013f6:	|  |   f103 010c 	add.w	r1, r3, #12
 80013fa:	|  |   4836      	ldr	r0, [pc, #216]	; (80014d4 <MakeMeasure+0x1b0>)
 80013fc:	|  |   4613      	mov	r3, r2
 80013fe:	|  |   00db      	lsls	r3, r3, #3
 8001400:	|  |   1a9b      	subs	r3, r3, r2
 8001402:	|  |   009b      	lsls	r3, r3, #2
 8001404:	|  |   4403      	add	r3, r0
 8001406:	|  |   330c      	adds	r3, #12
 8001408:	|  |   881a      	ldrh	r2, [r3, #0]
 800140a:	|  |   004b      	lsls	r3, r1, #1
 800140c:	|  |   f107 0140 	add.w	r1, r7, #64	; 0x40
 8001410:	|  |   440b      	add	r3, r1
 8001412:	|  |   f823 2c34 	strh.w	r2, [r3, #-52]
    for(uint8_t i = 0; i < 12; i++){
 8001416:	|  |   f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800141a:	|  |   3301      	adds	r3, #1
 800141c:	|  |   f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001420:	|  \-> f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001424:	|      2b0b      	cmp	r3, #11
 8001426:	\----- d9d0      	bls.n	80013ca <MakeMeasure+0xa6>
    }
    measured_data[11] = adc.vdda_mvolt;
 8001428:	       4b29      	ldr	r3, [pc, #164]	; (80014d0 <MakeMeasure+0x1ac>)
 800142a:	       f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800142e:	       847b      	strh	r3, [r7, #34]	; 0x22
    if(buffer_ptr == 0){
 8001430:	       4b29      	ldr	r3, [pc, #164]	; (80014d8 <MakeMeasure+0x1b4>)
 8001432:	       881b      	ldrh	r3, [r3, #0]
 8001434:	       2b00      	cmp	r3, #0
 8001436:	   /-- d11a      	bne.n	800146e <MakeMeasure+0x14a>
        uint16_t initial_data[4] = {0xDEAD, 0xBEAF, buffer_ptr, 0x00};
 8001438:	   |   f64d 63ad 	movw	r3, #57005	; 0xdead
 800143c:	   |   80bb      	strh	r3, [r7, #4]
 800143e:	   |   f64b 63af 	movw	r3, #48815	; 0xbeaf
 8001442:	   |   80fb      	strh	r3, [r7, #6]
 8001444:	   |   4b24      	ldr	r3, [pc, #144]	; (80014d8 <MakeMeasure+0x1b4>)
 8001446:	   |   881b      	ldrh	r3, [r3, #0]
 8001448:	   |   813b      	strh	r3, [r7, #8]
 800144a:	   |   2300      	movs	r3, #0
 800144c:	   |   817b      	strh	r3, [r7, #10]
        memcpy(data_buffer + buffer_ptr, (uint8_t *)(&initial_data), sizeof(initial_data));
 800144e:	   |   4b22      	ldr	r3, [pc, #136]	; (80014d8 <MakeMeasure+0x1b4>)
 8001450:	   |   881b      	ldrh	r3, [r3, #0]
 8001452:	   |   461a      	mov	r2, r3
 8001454:	   |   4b21      	ldr	r3, [pc, #132]	; (80014dc <MakeMeasure+0x1b8>)
 8001456:	   |   4413      	add	r3, r2
 8001458:	   |   1d39      	adds	r1, r7, #4
 800145a:	   |   2208      	movs	r2, #8
 800145c:	   |   4618      	mov	r0, r3
 800145e:	   |   f008 faff 	bl	8009a60 <memcpy>
        buffer_ptr += sizeof(initial_data);
 8001462:	   |   4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MakeMeasure+0x1b4>)
 8001464:	   |   881b      	ldrh	r3, [r3, #0]
 8001466:	   |   3308      	adds	r3, #8
 8001468:	   |   b29a      	uxth	r2, r3
 800146a:	   |   4b1b      	ldr	r3, [pc, #108]	; (80014d8 <MakeMeasure+0x1b4>)
 800146c:	   |   801a      	strh	r2, [r3, #0]
    }
    if(buffer_ptr + sizeof(current_rtc) + sizeof(measured_data) < sizeof(data_buffer)){
 800146e:	   \-> 4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MakeMeasure+0x1b4>)
 8001470:	       881b      	ldrh	r3, [r3, #0]
 8001472:	       3337      	adds	r3, #55	; 0x37
 8001474:	       f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001478:	   /-- d225      	bcs.n	80014c6 <MakeMeasure+0x1a2>
        RTC_get_time(&current_rtc);
 800147a:	   |   4819      	ldr	r0, [pc, #100]	; (80014e0 <MakeMeasure+0x1bc>)
 800147c:	   |   f002 fe16 	bl	80040ac <RTC_get_time>
        memcpy(data_buffer + buffer_ptr, (uint8_t *)(&current_rtc), sizeof(current_rtc));
 8001480:	   |   4b15      	ldr	r3, [pc, #84]	; (80014d8 <MakeMeasure+0x1b4>)
 8001482:	   |   881b      	ldrh	r3, [r3, #0]
 8001484:	   |   461a      	mov	r2, r3
 8001486:	   |   4b15      	ldr	r3, [pc, #84]	; (80014dc <MakeMeasure+0x1b8>)
 8001488:	   |   4413      	add	r3, r2
 800148a:	   |   4a15      	ldr	r2, [pc, #84]	; (80014e0 <MakeMeasure+0x1bc>)
 800148c:	   |   6810      	ldr	r0, [r2, #0]
 800148e:	   |   6018      	str	r0, [r3, #0]
 8001490:	   |   8891      	ldrh	r1, [r2, #4]
 8001492:	   |   7992      	ldrb	r2, [r2, #6]
 8001494:	   |   8099      	strh	r1, [r3, #4]
 8001496:	   |   719a      	strb	r2, [r3, #6]
        buffer_ptr += sizeof(current_rtc);
 8001498:	   |   4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MakeMeasure+0x1b4>)
 800149a:	   |   881b      	ldrh	r3, [r3, #0]
 800149c:	   |   3307      	adds	r3, #7
 800149e:	   |   b29a      	uxth	r2, r3
 80014a0:	   |   4b0d      	ldr	r3, [pc, #52]	; (80014d8 <MakeMeasure+0x1b4>)
 80014a2:	   |   801a      	strh	r2, [r3, #0]
        memcpy(data_buffer + buffer_ptr, (uint8_t *)(&measured_data), sizeof(measured_data));
 80014a4:	   |   4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MakeMeasure+0x1b4>)
 80014a6:	   |   881b      	ldrh	r3, [r3, #0]
 80014a8:	   |   461a      	mov	r2, r3
 80014aa:	   |   4b0c      	ldr	r3, [pc, #48]	; (80014dc <MakeMeasure+0x1b8>)
 80014ac:	   |   4413      	add	r3, r2
 80014ae:	   |   f107 010c 	add.w	r1, r7, #12
 80014b2:	   |   2230      	movs	r2, #48	; 0x30
 80014b4:	   |   4618      	mov	r0, r3
 80014b6:	   |   f008 fad3 	bl	8009a60 <memcpy>
        buffer_ptr += sizeof(measured_data);
 80014ba:	   |   4b07      	ldr	r3, [pc, #28]	; (80014d8 <MakeMeasure+0x1b4>)
 80014bc:	   |   881b      	ldrh	r3, [r3, #0]
 80014be:	   |   3330      	adds	r3, #48	; 0x30
 80014c0:	   |   b29a      	uxth	r2, r3
 80014c2:	   |   4b05      	ldr	r3, [pc, #20]	; (80014d8 <MakeMeasure+0x1b4>)
 80014c4:	   |   801a      	strh	r2, [r3, #0]
    }
}
 80014c6:	   \-> bf00      	nop
 80014c8:	       3740      	adds	r7, #64	; 0x40
 80014ca:	       46bd      	mov	sp, r7
 80014cc:	       bd80      	pop	{r7, pc}
 80014ce:	       bf00      	nop
 80014d0:	       0a84      	lsrs	r4, r0, #10
 80014d2:	       2000      	movs	r0, #0
 80014d4:	       0b60      	lsrs	r0, r4, #13
 80014d6:	       2000      	movs	r0, #0
 80014d8:	       1074      	asrs	r4, r6, #1
 80014da:	       2000      	movs	r0, #0
 80014dc:	       0d74      	lsrs	r4, r6, #21
 80014de:	       2000      	movs	r0, #0
 80014e0:	       1280      	asrs	r0, r0, #10
 80014e2:	       2000      	movs	r0, #0

080014e4 <SEND_DATA_AND_SLEEP>:
void SEND_DATA_AND_SLEEP(){
 80014e4:	    b580      	push	{r7, lr}
 80014e6:	    af00      	add	r7, sp, #0
    SEND_TO_SERVER();
 80014e8:	    f7ff fd4f 	bl	8000f8a <SEND_TO_SERVER>
    WAKEUP_PERIOD_SEC = RTC->BKP10R;
 80014ec:	    4b10      	ldr	r3, [pc, #64]	; (8001530 <SEND_DATA_AND_SLEEP+0x4c>)
 80014ee:	    6f9b      	ldr	r3, [r3, #120]	; 0x78
 80014f0:	    b29a      	uxth	r2, r3
 80014f2:	    4b10      	ldr	r3, [pc, #64]	; (8001534 <SEND_DATA_AND_SLEEP+0x50>)
 80014f4:	    801a      	strh	r2, [r3, #0]
    if(WAKEUP_PERIOD_SEC > 0 && WAKEUP_PERIOD_SEC < 50000)
 80014f6:	    4b0f      	ldr	r3, [pc, #60]	; (8001534 <SEND_DATA_AND_SLEEP+0x50>)
 80014f8:	    881b      	ldrh	r3, [r3, #0]
 80014fa:	    2b00      	cmp	r3, #0
 80014fc:	/-- d00c      	beq.n	8001518 <SEND_DATA_AND_SLEEP+0x34>
 80014fe:	|   4b0d      	ldr	r3, [pc, #52]	; (8001534 <SEND_DATA_AND_SLEEP+0x50>)
 8001500:	|   881b      	ldrh	r3, [r3, #0]
 8001502:	|   f24c 324f 	movw	r2, #49999	; 0xc34f
 8001506:	|   4293      	cmp	r3, r2
 8001508:	+-- d806      	bhi.n	8001518 <SEND_DATA_AND_SLEEP+0x34>
        RTC_auto_wakeup_enable(WAKEUP_PERIOD_SEC-160);
 800150a:	|   4b0a      	ldr	r3, [pc, #40]	; (8001534 <SEND_DATA_AND_SLEEP+0x50>)
 800150c:	|   881b      	ldrh	r3, [r3, #0]
 800150e:	|   3ba0      	subs	r3, #160	; 0xa0
 8001510:	|   b29b      	uxth	r3, r3
 8001512:	|   4618      	mov	r0, r3
 8001514:	|   f002 f94a 	bl	80037ac <RTC_auto_wakeup_enable>
    Delay(2000);
 8001518:	\-> f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800151c:	    f004 fb5a 	bl	8005bd4 <Delay>
    SX126x_SetSleep(&SX1268);
 8001520:	    4805      	ldr	r0, [pc, #20]	; (8001538 <SEND_DATA_AND_SLEEP+0x54>)
 8001522:	    f006 fae7 	bl	8007af4 <SX126x_SetSleep>
    stop_cortex();
 8001526:	    f004 fcfb 	bl	8005f20 <stop_cortex>
}
 800152a:	    bf00      	nop
 800152c:	    bd80      	pop	{r7, pc}
 800152e:	    bf00      	nop
 8001530:	    2800      	cmp	r0, #0
 8001532:	    4000      	ands	r0, r0
 8001534:	    1288      	asrs	r0, r1, #10
 8001536:	    2000      	movs	r0, #0
 8001538:	    09c8      	lsrs	r0, r1, #7
 800153a:	    2000      	movs	r0, #0

0800153c <main>:
int main(){
 800153c:	          b580      	push	{r7, lr}
 800153e:	          af00      	add	r7, sp, #0
	// init_global_variables();
    SCB->CPACR |= 0x0F << 20;
 8001540:	          4b23      	ldr	r3, [pc, #140]	; (80015d0 <main+0x94>)
 8001542:	          f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001546:	          4a22      	ldr	r2, [pc, #136]	; (80015d0 <main+0x94>)
 8001548:	          f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800154c:	          f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    System_Init();
 8001550:	          f7fe ff84 	bl	800045c <System_Init>
    buffer_ptr = 0;
 8001554:	          4b1f      	ldr	r3, [pc, #124]	; (80015d4 <main+0x98>)
 8001556:	          2200      	movs	r2, #0
 8001558:	          801a      	strh	r2, [r3, #0]
    memset(data_buffer, 0, 256);
 800155a:	          f44f 7280 	mov.w	r2, #256	; 0x100
 800155e:	          2100      	movs	r1, #0
 8001560:	          481d      	ldr	r0, [pc, #116]	; (80015d8 <main+0x9c>)
 8001562:	          f008 fa3d 	bl	80099e0 <memset>
    MakeMeasure();
 8001566:	          f7ff fedd 	bl	8001324 <MakeMeasure>
    while(1){
	// delay_action(5000, 0, LED_BLINK);
        if(SX1268.new_rx_data_flag){
 800156a:	/-------> 4b1c      	ldr	r3, [pc, #112]	; (80015dc <main+0xa0>)
 800156c:	|         f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001570:	|         2b00      	cmp	r3, #0
 8001572:	|     /-- d002      	beq.n	800157a <main+0x3e>
            SX126x_RxDataParse(&SX1268);
 8001574:	|     |   4819      	ldr	r0, [pc, #100]	; (80015dc <main+0xa0>)
 8001576:	|     |   f006 fc6b 	bl	8007e50 <SX126x_RxDataParse>
        }
        if(gs2_buf_ptr > 15){
 800157a:	|     \-> 4b19      	ldr	r3, [pc, #100]	; (80015e0 <main+0xa4>)
 800157c:	|         781b      	ldrb	r3, [r3, #0]
 800157e:	|         2b0f      	cmp	r3, #15
 8001580:	|  /----- d920      	bls.n	80015c4 <main+0x88>
            SEND_TO_SERVER();
 8001582:	|  |      f7ff fd02 	bl	8000f8a <SEND_TO_SERVER>
            WAKEUP_PERIOD_SEC = RTC->BKP10R;
 8001586:	|  |      4b17      	ldr	r3, [pc, #92]	; (80015e4 <main+0xa8>)
 8001588:	|  |      6f9b      	ldr	r3, [r3, #120]	; 0x78
 800158a:	|  |      b29a      	uxth	r2, r3
 800158c:	|  |      4b16      	ldr	r3, [pc, #88]	; (80015e8 <main+0xac>)
 800158e:	|  |      801a      	strh	r2, [r3, #0]
            if(WAKEUP_PERIOD_SEC > 0 && WAKEUP_PERIOD_SEC < 50000)
 8001590:	|  |      4b15      	ldr	r3, [pc, #84]	; (80015e8 <main+0xac>)
 8001592:	|  |      881b      	ldrh	r3, [r3, #0]
 8001594:	|  |      2b00      	cmp	r3, #0
 8001596:	|  |  /-- d00c      	beq.n	80015b2 <main+0x76>
 8001598:	|  |  |   4b13      	ldr	r3, [pc, #76]	; (80015e8 <main+0xac>)
 800159a:	|  |  |   881b      	ldrh	r3, [r3, #0]
 800159c:	|  |  |   f24c 324f 	movw	r2, #49999	; 0xc34f
 80015a0:	|  |  |   4293      	cmp	r3, r2
 80015a2:	|  |  +-- d806      	bhi.n	80015b2 <main+0x76>
                RTC_auto_wakeup_enable(WAKEUP_PERIOD_SEC-60);
 80015a4:	|  |  |   4b10      	ldr	r3, [pc, #64]	; (80015e8 <main+0xac>)
 80015a6:	|  |  |   881b      	ldrh	r3, [r3, #0]
 80015a8:	|  |  |   3b3c      	subs	r3, #60	; 0x3c
 80015aa:	|  |  |   b29b      	uxth	r3, r3
 80015ac:	|  |  |   4618      	mov	r0, r3
 80015ae:	|  |  |   f002 f8fd 	bl	80037ac <RTC_auto_wakeup_enable>
            Delay(2000);
 80015b2:	|  |  \-> f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015b6:	|  |      f004 fb0d 	bl	8005bd4 <Delay>
            SX126x_SetSleep(&SX1268);
 80015ba:	|  |      4808      	ldr	r0, [pc, #32]	; (80015dc <main+0xa0>)
 80015bc:	|  |      f006 fa9a 	bl	8007af4 <SX126x_SetSleep>
            stop_cortex();
 80015c0:	|  |      f004 fcae 	bl	8005f20 <stop_cortex>
        }
        delay_action(720000, 1, SEND_DATA_AND_SLEEP);
 80015c4:	|  \----> 4a09      	ldr	r2, [pc, #36]	; (80015ec <main+0xb0>)
 80015c6:	|         2101      	movs	r1, #1
 80015c8:	|         4809      	ldr	r0, [pc, #36]	; (80015f0 <main+0xb4>)
 80015ca:	|         f004 fb4b 	bl	8005c64 <delay_action>
        if(SX1268.new_rx_data_flag){
 80015ce:	\-------- e7cc      	b.n	800156a <main+0x2e>
 80015d0:	          ed00 e000 	stc	0, cr14, [r0, #-0]
 80015d4:	          1074      	asrs	r4, r6, #1
 80015d6:	          2000      	movs	r0, #0
 80015d8:	          0d74      	lsrs	r4, r6, #21
 80015da:	          2000      	movs	r0, #0
 80015dc:	          09c8      	lsrs	r0, r1, #7
 80015de:	          2000      	movs	r0, #0
 80015e0:	          1178      	asrs	r0, r7, #5
 80015e2:	          2000      	movs	r0, #0
 80015e4:	          2800      	cmp	r0, #0
 80015e6:	          4000      	ands	r0, r0
 80015e8:	          1288      	asrs	r0, r1, #10
 80015ea:	          2000      	movs	r0, #0
 80015ec:	          14e5      	asrs	r5, r4, #19
 80015ee:	          0800      	lsrs	r0, r0, #32
 80015f0:	          fc80 000a 	stc2	0, cr0, [r0], {10}

080015f4 <USART3_IRQHandler>:
// #include "sim7000.h"
// #include "fifo.h"



void USART3_IRQHandler(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
    GSM_RX_Handler();
 80015f8:	f005 fe10 	bl	800721c <GSM_RX_Handler>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
    EXTI->PR1 |= EXTI_PR1_PIF6;
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <EXTI9_5_IRQHandler+0x1c>)
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <EXTI9_5_IRQHandler+0x1c>)
 800160a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800160e:	6153      	str	r3, [r2, #20]
    SX126x_RxHandler(&SX1268);
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <EXTI9_5_IRQHandler+0x20>)
 8001612:	f006 fc4d 	bl	8007eb0 <SX126x_RxHandler>

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	0400      	lsls	r0, r0, #16
 800161e:	4001      	ands	r1, r0
 8001620:	09c8      	lsrs	r0, r1, #7
 8001622:	2000      	movs	r0, #0

08001624 <ADC1_IRQHandler>:
void ADC1_IRQHandler(void){
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
    ADC_Handler();
 8001628:	f000 fadb 	bl	8001be2 <ADC_Handler>
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(){
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
    EXTI->PR1 |= EXTI_PR1_PIF20;	// clear pending flag (WAKEUP)
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <RTC_WKUP_IRQHandler+0x50>)
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	4a11      	ldr	r2, [pc, #68]	; (8001680 <RTC_WKUP_IRQHandler+0x50>)
 800163a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800163e:	6153      	str	r3, [r2, #20]
    PWR->CR1 |= PWR_CR1_DBP;
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <RTC_WKUP_IRQHandler+0x54>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <RTC_WKUP_IRQHandler+0x54>)
 8001646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164a:	6013      	str	r3, [r2, #0]
	RTC->WPR = 0xCA;
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <RTC_WKUP_IRQHandler+0x58>)
 800164e:	22ca      	movs	r2, #202	; 0xca
 8001650:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <RTC_WKUP_IRQHandler+0x58>)
 8001654:	2253      	movs	r2, #83	; 0x53
 8001656:	625a      	str	r2, [r3, #36]	; 0x24

    RTC->ISR &= ~RTC_ISR_WUTF;
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <RTC_WKUP_IRQHandler+0x58>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <RTC_WKUP_IRQHandler+0x58>)
 800165e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001662:	60d3      	str	r3, [r2, #12]
    RTC->WPR = 0xFF;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <RTC_WKUP_IRQHandler+0x58>)
 8001666:	22ff      	movs	r2, #255	; 0xff
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
	PWR->CR1 &= ~PWR_CR1_DBP;
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <RTC_WKUP_IRQHandler+0x54>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <RTC_WKUP_IRQHandler+0x54>)
 8001670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001674:	6013      	str	r3, [r2, #0]
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	0400      	lsls	r0, r0, #16
 8001682:	4001      	ands	r1, r0
 8001684:	7000      	strb	r0, [r0, #0]
 8001686:	4000      	ands	r0, r0
 8001688:	2800      	cmp	r0, #0
 800168a:	4000      	ands	r0, r0

0800168c <RTC_Alarm_IRQHandler>:

void RTC_Alarm_IRQHandler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
	EXTI->PR1 |= EXTI_PR1_PIF18;	// clear pending flag (ALARM)
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <RTC_Alarm_IRQHandler+0x50>)
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	4a11      	ldr	r2, [pc, #68]	; (80016dc <RTC_Alarm_IRQHandler+0x50>)
 8001696:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169a:	6153      	str	r3, [r2, #20]

	// // unlock write protection
	PWR->CR1 |= PWR_CR1_DBP;
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <RTC_Alarm_IRQHandler+0x54>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <RTC_Alarm_IRQHandler+0x54>)
 80016a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a6:	6013      	str	r3, [r2, #0]
	RTC->WPR = 0xCA;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <RTC_Alarm_IRQHandler+0x58>)
 80016aa:	22ca      	movs	r2, #202	; 0xca
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <RTC_Alarm_IRQHandler+0x58>)
 80016b0:	2253      	movs	r2, #83	; 0x53
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24
	// RTC->ALRMAR &= (RTC_ALRMAR_HU ^ RTC_ALRMAR_HU);		// Bits 19:16 HU[3:0]: Hour units in BCD format.
	// RTC->ALRMAR &= (RTC_ALRMAR_MNT ^ RTC_ALRMAR_MNT);	// Bits 14:12 MNT[2:0]: Minute tens in BCD format.
	// RTC->ALRMAR &= (RTC_ALRMAR_MNU ^ RTC_ALRMAR_MNU);	// Bits 11:8 MNU[3:0]: Minute units in BCD format.

	// // lock write protection - writing a wrong key reactivates the write protection
	RTC->ISR &= ~RTC_ISR_ALRAF;	//  flag is cleared by software by writing 0
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <RTC_Alarm_IRQHandler+0x58>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <RTC_Alarm_IRQHandler+0x58>)
 80016ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016be:	60d3      	str	r3, [r2, #12]

    RTC->WPR = 0xFF;
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <RTC_Alarm_IRQHandler+0x58>)
 80016c2:	22ff      	movs	r2, #255	; 0xff
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24
	PWR->CR1 &= ~PWR_CR1_DBP;
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <RTC_Alarm_IRQHandler+0x54>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <RTC_Alarm_IRQHandler+0x54>)
 80016cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016d0:	6013      	str	r3, [r2, #0]


	// UART_tx_array(USART1, "RTC handler\r\n");
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	0400      	lsls	r0, r0, #16
 80016de:	4001      	ands	r1, r0
 80016e0:	7000      	strb	r0, [r0, #0]
 80016e2:	4000      	ands	r0, r0
 80016e4:	2800      	cmp	r0, #0
 80016e6:	4000      	ands	r0, r0

080016e8 <__NVIC_EnableIRQ>:
{
 80016e8:	    b480      	push	{r7}
 80016ea:	    b083      	sub	sp, #12
 80016ec:	    af00      	add	r7, sp, #0
 80016ee:	    4603      	mov	r3, r0
 80016f0:	    71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	    f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	    2b00      	cmp	r3, #0
 80016f8:	/-- db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	|   79fb      	ldrb	r3, [r7, #7]
 80016fc:	|   f003 021f 	and.w	r2, r3, #31
 8001700:	|   4907      	ldr	r1, [pc, #28]	; (8001720 <__NVIC_EnableIRQ+0x38>)
 8001702:	|   f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	|   095b      	lsrs	r3, r3, #5
 8001708:	|   2001      	movs	r0, #1
 800170a:	|   fa00 f202 	lsl.w	r2, r0, r2
 800170e:	|   f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001712:	\-> bf00      	nop
 8001714:	    370c      	adds	r7, #12
 8001716:	    46bd      	mov	sp, r7
 8001718:	    f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	    4770      	bx	lr
 800171e:	    bf00      	nop
 8001720:	    e100      	b.n	8001924 <ADC_Init+0x170>
 8001722:	    e000      	b.n	8001726 <ADC_reset_registers+0x2>

08001724 <ADC_reset_registers>:
#include "main.h"
#include "adc.h"
#include "delay.h"

void ADC_reset_registers(ADC_TypeDef* ADCx){
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
    ADCx->CR = 0x20000000;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001732:	609a      	str	r2, [r3, #8]
    ADCx->CFGR = 0x80000000;  // reset value
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800173a:	60da      	str	r2, [r3, #12]
    ADCx->IER = 0;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	605a      	str	r2, [r3, #4]
    ADCx->ISR = 0;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
    ADCx->CFGR2 = 0;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
    ADCx->SMPR1 = 0;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	615a      	str	r2, [r3, #20]
    ADCx->SMPR2 = 0;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
    ADCx->TR1 = 0xFF0000;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8001760:	621a      	str	r2, [r3, #32]
    ADCx->TR2 = 0xFF0000;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
    ADCx->TR3 = 0xFF0000;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8001770:	629a      	str	r2, [r3, #40]	; 0x28
    ADCx->SQR1 = 0;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	631a      	str	r2, [r3, #48]	; 0x30
    ADCx->SQR2 = 0;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	635a      	str	r2, [r3, #52]	; 0x34
    ADCx->SQR3 = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	639a      	str	r2, [r3, #56]	; 0x38
    ADCx->SQR4 = 0;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	63da      	str	r2, [r3, #60]	; 0x3c
    ADCx->JSQR = 0;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	64da      	str	r2, [r3, #76]	; 0x4c
    ADCx->OFR1 = 0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	661a      	str	r2, [r3, #96]	; 0x60
    ADCx->OFR2 = 0;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	665a      	str	r2, [r3, #100]	; 0x64
    ADCx->OFR3 = 0;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	669a      	str	r2, [r3, #104]	; 0x68
    ADCx->OFR4 = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <ADC_Init>:

void ADC_Init(ADC *ADC_struct){
 80017b4:	    b580      	push	{r7, lr}
 80017b6:	    b082      	sub	sp, #8
 80017b8:	    af00      	add	r7, sp, #0
 80017ba:	    6078      	str	r0, [r7, #4]
    ADC_reset_registers(ADC_struct->ADCx);
 80017bc:	    687b      	ldr	r3, [r7, #4]
 80017be:	    681b      	ldr	r3, [r3, #0]
 80017c0:	    4618      	mov	r0, r3
 80017c2:	    f7ff ffaf 	bl	8001724 <ADC_reset_registers>
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;  // или придется настраивать делитель PLLADC1CLK
 80017c6:	    4b78      	ldr	r3, [pc, #480]	; (80019a8 <ADC_Init+0x1f4>)
 80017c8:	    6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	    4a77      	ldr	r2, [pc, #476]	; (80019a8 <ADC_Init+0x1f4>)
 80017cc:	    f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017d0:	    64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->CCIPR &= ~RCC_CCIPR_ADCSEL;
 80017d2:	    4b75      	ldr	r3, [pc, #468]	; (80019a8 <ADC_Init+0x1f4>)
 80017d4:	    f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d8:	    4a73      	ldr	r2, [pc, #460]	; (80019a8 <ADC_Init+0x1f4>)
 80017da:	    f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80017de:	    f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |= 3 << RCC_CCIPR_ADCSEL_Pos;  // set clock source from system clock
 80017e2:	    4b71      	ldr	r3, [pc, #452]	; (80019a8 <ADC_Init+0x1f4>)
 80017e4:	    f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e8:	    4a6f      	ldr	r2, [pc, #444]	; (80019a8 <ADC_Init+0x1f4>)
 80017ea:	    f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80017ee:	    f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	ADC_struct->ADCx->CR &= ~ADC_CR_DEEPPWD;  // Bring the ADC out of 'deep power-down' mode.
 80017f2:	    687b      	ldr	r3, [r7, #4]
 80017f4:	    681b      	ldr	r3, [r3, #0]
 80017f6:	    689a      	ldr	r2, [r3, #8]
 80017f8:	    687b      	ldr	r3, [r7, #4]
 80017fa:	    681b      	ldr	r3, [r3, #0]
 80017fc:	    f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001800:	    609a      	str	r2, [r3, #8]
	ADC_struct->ADCx->CR |= ADC_CR_ADVREGEN;  // Enable the ADC voltage regulator.
 8001802:	    687b      	ldr	r3, [r7, #4]
 8001804:	    681b      	ldr	r3, [r3, #0]
 8001806:	    689a      	ldr	r2, [r3, #8]
 8001808:	    687b      	ldr	r3, [r7, #4]
 800180a:	    681b      	ldr	r3, [r3, #0]
 800180c:	    f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001810:	    609a      	str	r2, [r3, #8]
	Delay(30);  // Delay for a handful of microseconds.
 8001812:	    201e      	movs	r0, #30
 8001814:	    f004 f9de 	bl	8005bd4 <Delay>
	ADC_struct->ADCx->CR |= ADC_CR_ADCAL;  // Calibrate the ADC.
 8001818:	    687b      	ldr	r3, [r7, #4]
 800181a:	    681b      	ldr	r3, [r3, #0]
 800181c:	    689a      	ldr	r2, [r3, #8]
 800181e:	    687b      	ldr	r3, [r7, #4]
 8001820:	    681b      	ldr	r3, [r3, #0]
 8001822:	    f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001826:	    609a      	str	r2, [r3, #8]
	while (ADC_struct->ADCx->CR & ADC_CR_ADCAL);
 8001828:	    bf00      	nop
 800182a:	/-> 687b      	ldr	r3, [r7, #4]
 800182c:	|   681b      	ldr	r3, [r3, #0]
 800182e:	|   689b      	ldr	r3, [r3, #8]
 8001830:	|   2b00      	cmp	r3, #0
 8001832:	\-- dbfa      	blt.n	800182a <ADC_Init+0x76>

    ADC_struct->ADCx->CFGR |= ADC_struct->mode << ADC_CFGR_CONT_Pos;  // continuous or single mode
 8001834:	    687b      	ldr	r3, [r7, #4]
 8001836:	    681b      	ldr	r3, [r3, #0]
 8001838:	    68da      	ldr	r2, [r3, #12]
 800183a:	    687b      	ldr	r3, [r7, #4]
 800183c:	    f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 8001840:	    035b      	lsls	r3, r3, #13
 8001842:	    4619      	mov	r1, r3
 8001844:	    687b      	ldr	r3, [r7, #4]
 8001846:	    681b      	ldr	r3, [r3, #0]
 8001848:	    430a      	orrs	r2, r1
 800184a:	    60da      	str	r2, [r3, #12]
    ADC_struct->ADCx->CFGR |= ADC_CFGR_OVRMOD;  // data will be always actual
 800184c:	    687b      	ldr	r3, [r7, #4]
 800184e:	    681b      	ldr	r3, [r3, #0]
 8001850:	    68da      	ldr	r2, [r3, #12]
 8001852:	    687b      	ldr	r3, [r7, #4]
 8001854:	    681b      	ldr	r3, [r3, #0]
 8001856:	    f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800185a:	    60da      	str	r2, [r3, #12]
    ADC_struct->ADCx->CFGR |= ADC_CFGR_JQDIS;  // Injected Queue disabled
 800185c:	    687b      	ldr	r3, [r7, #4]
 800185e:	    681b      	ldr	r3, [r3, #0]
 8001860:	    68da      	ldr	r2, [r3, #12]
 8001862:	    687b      	ldr	r3, [r7, #4]
 8001864:	    681b      	ldr	r3, [r3, #0]
 8001866:	    f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800186a:	    60da      	str	r2, [r3, #12]
    ADC_struct->ADCx->CFGR |= ADC_CFGR_AUTDLY;
 800186c:	    687b      	ldr	r3, [r7, #4]
 800186e:	    681b      	ldr	r3, [r3, #0]
 8001870:	    68da      	ldr	r2, [r3, #12]
 8001872:	    687b      	ldr	r3, [r7, #4]
 8001874:	    681b      	ldr	r3, [r3, #0]
 8001876:	    f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800187a:	    60da      	str	r2, [r3, #12]
    ADC_struct->ADCx->CFGR |= ADC_struct->trigger.polarity << ADC_CFGR_EXTEN_Pos;
 800187c:	    687b      	ldr	r3, [r7, #4]
 800187e:	    681b      	ldr	r3, [r3, #0]
 8001880:	    68da      	ldr	r2, [r3, #12]
 8001882:	    687b      	ldr	r3, [r7, #4]
 8001884:	    f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8001888:	    029b      	lsls	r3, r3, #10
 800188a:	    4619      	mov	r1, r3
 800188c:	    687b      	ldr	r3, [r7, #4]
 800188e:	    681b      	ldr	r3, [r3, #0]
 8001890:	    430a      	orrs	r2, r1
 8001892:	    60da      	str	r2, [r3, #12]
    ADC_struct->ADCx->CFGR |= ADC_struct->trigger.exti_channel << ADC_CFGR_EXTSEL_Pos;
 8001894:	    687b      	ldr	r3, [r7, #4]
 8001896:	    681b      	ldr	r3, [r3, #0]
 8001898:	    68da      	ldr	r2, [r3, #12]
 800189a:	    687b      	ldr	r3, [r7, #4]
 800189c:	    f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80018a0:	    019b      	lsls	r3, r3, #6
 80018a2:	    4619      	mov	r1, r3
 80018a4:	    687b      	ldr	r3, [r7, #4]
 80018a6:	    681b      	ldr	r3, [r3, #0]
 80018a8:	    430a      	orrs	r2, r1
 80018aa:	    60da      	str	r2, [r3, #12]
    ADC_struct->ADCx->CFGR |= ADC_struct->resolution << ADC_CFGR_RES_Pos;
 80018ac:	    687b      	ldr	r3, [r7, #4]
 80018ae:	    681b      	ldr	r3, [r3, #0]
 80018b0:	    68da      	ldr	r2, [r3, #12]
 80018b2:	    687b      	ldr	r3, [r7, #4]
 80018b4:	    f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80018b8:	    00db      	lsls	r3, r3, #3
 80018ba:	    4619      	mov	r1, r3
 80018bc:	    687b      	ldr	r3, [r7, #4]
 80018be:	    681b      	ldr	r3, [r3, #0]
 80018c0:	    430a      	orrs	r2, r1
 80018c2:	    60da      	str	r2, [r3, #12]

    // enable internal channels
    if(ADC_struct->internal_channels.vref) ADC1_COMMON->CCR |= ADC_CCR_VREFEN;  // CH0
 80018c4:	    687b      	ldr	r3, [r7, #4]
 80018c6:	    f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80018ca:	    2b00      	cmp	r3, #0
 80018cc:	/-- d005      	beq.n	80018da <ADC_Init+0x126>
 80018ce:	|   4b37      	ldr	r3, [pc, #220]	; (80019ac <ADC_Init+0x1f8>)
 80018d0:	|   689b      	ldr	r3, [r3, #8]
 80018d2:	|   4a36      	ldr	r2, [pc, #216]	; (80019ac <ADC_Init+0x1f8>)
 80018d4:	|   f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018d8:	|   6093      	str	r3, [r2, #8]
    if(ADC_struct->internal_channels.vbat) ADC1_COMMON->CCR |= ADC_CCR_VBATEN;  // CH18
 80018da:	\-> 687b      	ldr	r3, [r7, #4]
 80018dc:	    f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80018e0:	    2b00      	cmp	r3, #0
 80018e2:	/-- d005      	beq.n	80018f0 <ADC_Init+0x13c>
 80018e4:	|   4b31      	ldr	r3, [pc, #196]	; (80019ac <ADC_Init+0x1f8>)
 80018e6:	|   689b      	ldr	r3, [r3, #8]
 80018e8:	|   4a30      	ldr	r2, [pc, #192]	; (80019ac <ADC_Init+0x1f8>)
 80018ea:	|   f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ee:	|   6093      	str	r3, [r2, #8]
    if(ADC_struct->internal_channels.temp) ADC1_COMMON->CCR |= ADC_CCR_TSEN;    // CH17
 80018f0:	\-> 687b      	ldr	r3, [r7, #4]
 80018f2:	    f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 80018f6:	    2b00      	cmp	r3, #0
 80018f8:	/-- d005      	beq.n	8001906 <ADC_Init+0x152>
 80018fa:	|   4b2c      	ldr	r3, [pc, #176]	; (80019ac <ADC_Init+0x1f8>)
 80018fc:	|   689b      	ldr	r3, [r3, #8]
 80018fe:	|   4a2b      	ldr	r2, [pc, #172]	; (80019ac <ADC_Init+0x1f8>)
 8001900:	|   f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001904:	|   6093      	str	r3, [r2, #8]

    // enable oversampling
    if(ADC_struct->ovrsmpl_ratio != OVRSMPL_Disable){
 8001906:	\-> 687b      	ldr	r3, [r7, #4]
 8001908:	    f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 800190c:	    2b00      	cmp	r3, #0
 800190e:	/-- d020      	beq.n	8001952 <ADC_Init+0x19e>
        // ADC_struct->ADCx->CFGR2 |= ADC_CFGR2_JOVSE;
        ADC_struct->ADCx->CFGR2 |= ADC_CFGR2_ROVSE;  // Regular channels Oversampling Enable
 8001910:	|   687b      	ldr	r3, [r7, #4]
 8001912:	|   681b      	ldr	r3, [r3, #0]
 8001914:	|   691a      	ldr	r2, [r3, #16]
 8001916:	|   687b      	ldr	r3, [r7, #4]
 8001918:	|   681b      	ldr	r3, [r3, #0]
 800191a:	|   f042 0201 	orr.w	r2, r2, #1
 800191e:	|   611a      	str	r2, [r3, #16]
        ADC_struct->ADCx->CFGR2 |= (ADC_struct->ovrsmpl_ratio - 1) << ADC_CFGR2_OVSR_Pos;
 8001920:	|   687b      	ldr	r3, [r7, #4]
 8001922:	|   681b      	ldr	r3, [r3, #0]
 8001924:	|   691a      	ldr	r2, [r3, #16]
 8001926:	|   687b      	ldr	r3, [r7, #4]
 8001928:	|   f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 800192c:	|   3b01      	subs	r3, #1
 800192e:	|   009b      	lsls	r3, r3, #2
 8001930:	|   4619      	mov	r1, r3
 8001932:	|   687b      	ldr	r3, [r7, #4]
 8001934:	|   681b      	ldr	r3, [r3, #0]
 8001936:	|   430a      	orrs	r2, r1
 8001938:	|   611a      	str	r2, [r3, #16]
        ADC_struct->ADCx->CFGR2 |= (ADC_struct->ovrsmpl_ratio) << ADC_CFGR2_OVSS_Pos;
 800193a:	|   687b      	ldr	r3, [r7, #4]
 800193c:	|   681b      	ldr	r3, [r3, #0]
 800193e:	|   691a      	ldr	r2, [r3, #16]
 8001940:	|   687b      	ldr	r3, [r7, #4]
 8001942:	|   f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001946:	|   015b      	lsls	r3, r3, #5
 8001948:	|   4619      	mov	r1, r3
 800194a:	|   687b      	ldr	r3, [r7, #4]
 800194c:	|   681b      	ldr	r3, [r3, #0]
 800194e:	|   430a      	orrs	r2, r1
 8001950:	|   611a      	str	r2, [r3, #16]
    }

    ADC_struct->vrefinternal_cal = 3000 * (*(uint16_t*)0x1FFF75AA);
 8001952:	\-> 4b17      	ldr	r3, [pc, #92]	; (80019b0 <ADC_Init+0x1fc>)
 8001954:	    881b      	ldrh	r3, [r3, #0]
 8001956:	    461a      	mov	r2, r3
 8001958:	    f640 33b8 	movw	r3, #3000	; 0xbb8
 800195c:	    fb02 f303 	mul.w	r3, r2, r3
 8001960:	    461a      	mov	r2, r3
 8001962:	    687b      	ldr	r3, [r7, #4]
 8001964:	    f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    ADC_struct->reg_ch_queue_pointer = 0;
 8001968:	    687b      	ldr	r3, [r7, #4]
 800196a:	    2200      	movs	r2, #0
 800196c:	    f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
    ADC_struct->reg_ch_amount = 0;
 8001970:	    687b      	ldr	r3, [r7, #4]
 8001972:	    2200      	movs	r2, #0
 8001974:	    f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    // enable interrupts
    ADC_struct->ADCx->IER |= ADC_IER_EOCIE | ADC_IER_EOSIE;
 8001978:	    687b      	ldr	r3, [r7, #4]
 800197a:	    681b      	ldr	r3, [r3, #0]
 800197c:	    685a      	ldr	r2, [r3, #4]
 800197e:	    687b      	ldr	r3, [r7, #4]
 8001980:	    681b      	ldr	r3, [r3, #0]
 8001982:	    f042 020c 	orr.w	r2, r2, #12
 8001986:	    605a      	str	r2, [r3, #4]
    ADC_struct->ADCx->IER |= ADC_IER_JEOSIE; // | ADC_IER_JEOCIE;
 8001988:	    687b      	ldr	r3, [r7, #4]
 800198a:	    681b      	ldr	r3, [r3, #0]
 800198c:	    685a      	ldr	r2, [r3, #4]
 800198e:	    687b      	ldr	r3, [r7, #4]
 8001990:	    681b      	ldr	r3, [r3, #0]
 8001992:	    f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001996:	    605a      	str	r2, [r3, #4]
    NVIC_EnableIRQ(ADC1_2_IRQn);
 8001998:	    2012      	movs	r0, #18
 800199a:	    f7ff fea5 	bl	80016e8 <__NVIC_EnableIRQ>

}
 800199e:	    bf00      	nop
 80019a0:	    3708      	adds	r7, #8
 80019a2:	    46bd      	mov	sp, r7
 80019a4:	    bd80      	pop	{r7, pc}
 80019a6:	    bf00      	nop
 80019a8:	    1000      	asrs	r0, r0, #32
 80019aa:	    4002      	ands	r2, r0
 80019ac:	    0300      	lsls	r0, r0, #12
 80019ae:	    5004      	str	r4, [r0, r0]
 80019b0:	    75aa      	strb	r2, [r5, #22]
 80019b2:	    1fff      	subs	r7, r7, #7

080019b4 <ADC_InitRegChannel>:

void ADC_InitRegChannel(ADC *ADC_struct, ADC_ChannelNum ch_num, GPIO_Pin gpio, ADC_CH_SMP_Time smp_time){
 80019b4:	       b580      	push	{r7, lr}
 80019b6:	       b084      	sub	sp, #16
 80019b8:	       af02      	add	r7, sp, #8
 80019ba:	       6078      	str	r0, [r7, #4]
 80019bc:	       4608      	mov	r0, r1
 80019be:	       4611      	mov	r1, r2
 80019c0:	       461a      	mov	r2, r3
 80019c2:	       4603      	mov	r3, r0
 80019c4:	       70fb      	strb	r3, [r7, #3]
 80019c6:	       460b      	mov	r3, r1
 80019c8:	       70bb      	strb	r3, [r7, #2]
 80019ca:	       4613      	mov	r3, r2
 80019cc:	       707b      	strb	r3, [r7, #1]
	if(gpio != uninitialized)
 80019ce:	       78bb      	ldrb	r3, [r7, #2]
 80019d0:	       2b00      	cmp	r3, #0
 80019d2:	   /-- d007      	beq.n	80019e4 <ADC_InitRegChannel+0x30>
        gpio_init(gpio, Analog_mode, Open_drain, no_pull, Input);
 80019d4:	   |   78b8      	ldrb	r0, [r7, #2]
 80019d6:	   |   2304      	movs	r3, #4
 80019d8:	   |   9300      	str	r3, [sp, #0]
 80019da:	   |   2300      	movs	r3, #0
 80019dc:	   |   2201      	movs	r2, #1
 80019de:	   |   2103      	movs	r1, #3
 80019e0:	   |   f000 f9fa 	bl	8001dd8 <gpio_init>
    ADC_struct->reg_channel_queue[ADC_struct->reg_ch_amount].ch_num = ch_num;
 80019e4:	   \-> 687b      	ldr	r3, [r7, #4]
 80019e6:	       f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 80019ea:	       4619      	mov	r1, r3
 80019ec:	       687a      	ldr	r2, [r7, #4]
 80019ee:	       460b      	mov	r3, r1
 80019f0:	       005b      	lsls	r3, r3, #1
 80019f2:	       440b      	add	r3, r1
 80019f4:	       009b      	lsls	r3, r3, #2
 80019f6:	       4413      	add	r3, r2
 80019f8:	       3304      	adds	r3, #4
 80019fa:	       78fa      	ldrb	r2, [r7, #3]
 80019fc:	       701a      	strb	r2, [r3, #0]
    ADC_struct->reg_channel_queue[ADC_struct->reg_ch_amount].pin = gpio;
 80019fe:	       687b      	ldr	r3, [r7, #4]
 8001a00:	       f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8001a04:	       4619      	mov	r1, r3
 8001a06:	       687a      	ldr	r2, [r7, #4]
 8001a08:	       460b      	mov	r3, r1
 8001a0a:	       005b      	lsls	r3, r3, #1
 8001a0c:	       440b      	add	r3, r1
 8001a0e:	       009b      	lsls	r3, r3, #2
 8001a10:	       4413      	add	r3, r2
 8001a12:	       3305      	adds	r3, #5
 8001a14:	       78ba      	ldrb	r2, [r7, #2]
 8001a16:	       701a      	strb	r2, [r3, #0]
    ADC_struct->reg_channel_queue[ADC_struct->reg_ch_amount].group = ADC_CH_Regular;
 8001a18:	       687b      	ldr	r3, [r7, #4]
 8001a1a:	       f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8001a1e:	       4619      	mov	r1, r3
 8001a20:	       687a      	ldr	r2, [r7, #4]
 8001a22:	       460b      	mov	r3, r1
 8001a24:	       005b      	lsls	r3, r3, #1
 8001a26:	       440b      	add	r3, r1
 8001a28:	       009b      	lsls	r3, r3, #2
 8001a2a:	       4413      	add	r3, r2
 8001a2c:	       3306      	adds	r3, #6
 8001a2e:	       2201      	movs	r2, #1
 8001a30:	       701a      	strb	r2, [r3, #0]
    ADC_struct->reg_channel_queue[ADC_struct->reg_ch_amount].smp_time = smp_time;
 8001a32:	       687b      	ldr	r3, [r7, #4]
 8001a34:	       f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8001a38:	       4619      	mov	r1, r3
 8001a3a:	       687a      	ldr	r2, [r7, #4]
 8001a3c:	       460b      	mov	r3, r1
 8001a3e:	       005b      	lsls	r3, r3, #1
 8001a40:	       440b      	add	r3, r1
 8001a42:	       009b      	lsls	r3, r3, #2
 8001a44:	       4413      	add	r3, r2
 8001a46:	       3307      	adds	r3, #7
 8001a48:	       787a      	ldrb	r2, [r7, #1]
 8001a4a:	       701a      	strb	r2, [r3, #0]
    ch_num--;
 8001a4c:	       78fb      	ldrb	r3, [r7, #3]
 8001a4e:	       3b01      	subs	r3, #1
 8001a50:	       70fb      	strb	r3, [r7, #3]
    if (ch_num <= 9) {
 8001a52:	       78fb      	ldrb	r3, [r7, #3]
 8001a54:	       2b09      	cmp	r3, #9
 8001a56:	   /-- d80f      	bhi.n	8001a78 <ADC_InitRegChannel+0xc4>
		ADC_struct->ADCx->SMPR1 |= (smp_time << (ch_num * 3));
 8001a58:	   |   687b      	ldr	r3, [r7, #4]
 8001a5a:	   |   681b      	ldr	r3, [r3, #0]
 8001a5c:	   |   6959      	ldr	r1, [r3, #20]
 8001a5e:	   |   7878      	ldrb	r0, [r7, #1]
 8001a60:	   |   78fa      	ldrb	r2, [r7, #3]
 8001a62:	   |   4613      	mov	r3, r2
 8001a64:	   |   005b      	lsls	r3, r3, #1
 8001a66:	   |   4413      	add	r3, r2
 8001a68:	   |   fa00 f303 	lsl.w	r3, r0, r3
 8001a6c:	   |   461a      	mov	r2, r3
 8001a6e:	   |   687b      	ldr	r3, [r7, #4]
 8001a70:	   |   681b      	ldr	r3, [r3, #0]
 8001a72:	   |   430a      	orrs	r2, r1
 8001a74:	   |   615a      	str	r2, [r3, #20]
 8001a76:	/--|-- e00f      	b.n	8001a98 <ADC_InitRegChannel+0xe4>
	} else {
		ADC_struct->ADCx->SMPR2 |= (smp_time << ((ch_num * 3) - 30));
 8001a78:	|  \-> 687b      	ldr	r3, [r7, #4]
 8001a7a:	|      681b      	ldr	r3, [r3, #0]
 8001a7c:	|      6999      	ldr	r1, [r3, #24]
 8001a7e:	|      7878      	ldrb	r0, [r7, #1]
 8001a80:	|      78fa      	ldrb	r2, [r7, #3]
 8001a82:	|      4613      	mov	r3, r2
 8001a84:	|      005b      	lsls	r3, r3, #1
 8001a86:	|      4413      	add	r3, r2
 8001a88:	|      3b1e      	subs	r3, #30
 8001a8a:	|      fa00 f303 	lsl.w	r3, r0, r3
 8001a8e:	|      461a      	mov	r2, r3
 8001a90:	|      687b      	ldr	r3, [r7, #4]
 8001a92:	|      681b      	ldr	r3, [r3, #0]
 8001a94:	|      430a      	orrs	r2, r1
 8001a96:	|      619a      	str	r2, [r3, #24]
	}
    ADC_struct->reg_ch_amount++;
 8001a98:	\----> 687b      	ldr	r3, [r7, #4]
 8001a9a:	       f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8001a9e:	       3301      	adds	r3, #1
 8001aa0:	       b2da      	uxtb	r2, r3
 8001aa2:	       687b      	ldr	r3, [r7, #4]
 8001aa4:	       f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    ADC_struct->ADCx->SQR1 &= ~0x0F;
 8001aa8:	       687b      	ldr	r3, [r7, #4]
 8001aaa:	       681b      	ldr	r3, [r3, #0]
 8001aac:	       6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aae:	       687b      	ldr	r3, [r7, #4]
 8001ab0:	       681b      	ldr	r3, [r3, #0]
 8001ab2:	       f022 020f 	bic.w	r2, r2, #15
 8001ab6:	       631a      	str	r2, [r3, #48]	; 0x30
    ADC_struct->ADCx->SQR1 |= (ADC_struct->reg_ch_amount) << ADC_SQR1_L_Pos;
 8001ab8:	       687b      	ldr	r3, [r7, #4]
 8001aba:	       681b      	ldr	r3, [r3, #0]
 8001abc:	       6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001abe:	       687b      	ldr	r3, [r7, #4]
 8001ac0:	       f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8001ac4:	       4619      	mov	r1, r3
 8001ac6:	       687b      	ldr	r3, [r7, #4]
 8001ac8:	       681b      	ldr	r3, [r3, #0]
 8001aca:	       430a      	orrs	r2, r1
 8001acc:	       631a      	str	r2, [r3, #48]	; 0x30
    if(ADC_struct->reg_ch_amount <= 4)
 8001ace:	       687b      	ldr	r3, [r7, #4]
 8001ad0:	       f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8001ad4:	       2b04      	cmp	r3, #4
 8001ad6:	   /-- d813      	bhi.n	8001b00 <ADC_InitRegChannel+0x14c>
        ADC_struct->ADCx->SQR1 |= ch_num << (ADC_struct->reg_ch_amount * 6);
 8001ad8:	   |   687b      	ldr	r3, [r7, #4]
 8001ada:	   |   681b      	ldr	r3, [r3, #0]
 8001adc:	   |   6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ade:	   |   78f9      	ldrb	r1, [r7, #3]
 8001ae0:	   |   687b      	ldr	r3, [r7, #4]
 8001ae2:	   |   f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8001ae6:	   |   4618      	mov	r0, r3
 8001ae8:	   |   4603      	mov	r3, r0
 8001aea:	   |   005b      	lsls	r3, r3, #1
 8001aec:	   |   4403      	add	r3, r0
 8001aee:	   |   005b      	lsls	r3, r3, #1
 8001af0:	   |   fa01 f303 	lsl.w	r3, r1, r3
 8001af4:	   |   4619      	mov	r1, r3
 8001af6:	   |   687b      	ldr	r3, [r7, #4]
 8001af8:	   |   681b      	ldr	r3, [r3, #0]
 8001afa:	   |   430a      	orrs	r2, r1
 8001afc:	   |   631a      	str	r2, [r3, #48]	; 0x30
        ADC_struct->ADCx->SQR2 |= ch_num << ((ADC_struct->reg_ch_amount * 6) - 30);
    else if(ADC_struct->reg_ch_amount <= 14)
        ADC_struct->ADCx->SQR3 |= ch_num << ((ADC_struct->reg_ch_amount * 6) - 60);
    else if(ADC_struct->reg_ch_amount <= 16)
        ADC_struct->ADCx->SQR4 |= ch_num << ((ADC_struct->reg_ch_amount * 6) - 90);
}
 8001afe:	/--|-- e04c      	b.n	8001b9a <ADC_InitRegChannel+0x1e6>
    else if(ADC_struct->reg_ch_amount <= 9)
 8001b00:	|  \-> 687b      	ldr	r3, [r7, #4]
 8001b02:	|      f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8001b06:	|      2b09      	cmp	r3, #9
 8001b08:	|  /-- d814      	bhi.n	8001b34 <ADC_InitRegChannel+0x180>
        ADC_struct->ADCx->SQR2 |= ch_num << ((ADC_struct->reg_ch_amount * 6) - 30);
 8001b0a:	|  |   687b      	ldr	r3, [r7, #4]
 8001b0c:	|  |   681b      	ldr	r3, [r3, #0]
 8001b0e:	|  |   6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b10:	|  |   78f9      	ldrb	r1, [r7, #3]
 8001b12:	|  |   687b      	ldr	r3, [r7, #4]
 8001b14:	|  |   f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8001b18:	|  |   4618      	mov	r0, r3
 8001b1a:	|  |   4603      	mov	r3, r0
 8001b1c:	|  |   005b      	lsls	r3, r3, #1
 8001b1e:	|  |   4403      	add	r3, r0
 8001b20:	|  |   005b      	lsls	r3, r3, #1
 8001b22:	|  |   3b1e      	subs	r3, #30
 8001b24:	|  |   fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	|  |   4619      	mov	r1, r3
 8001b2a:	|  |   687b      	ldr	r3, [r7, #4]
 8001b2c:	|  |   681b      	ldr	r3, [r3, #0]
 8001b2e:	|  |   430a      	orrs	r2, r1
 8001b30:	|  |   635a      	str	r2, [r3, #52]	; 0x34
}
 8001b32:	+--|-- e032      	b.n	8001b9a <ADC_InitRegChannel+0x1e6>
    else if(ADC_struct->reg_ch_amount <= 14)
 8001b34:	|  \-> 687b      	ldr	r3, [r7, #4]
 8001b36:	|      f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8001b3a:	|      2b0e      	cmp	r3, #14
 8001b3c:	|  /-- d814      	bhi.n	8001b68 <ADC_InitRegChannel+0x1b4>
        ADC_struct->ADCx->SQR3 |= ch_num << ((ADC_struct->reg_ch_amount * 6) - 60);
 8001b3e:	|  |   687b      	ldr	r3, [r7, #4]
 8001b40:	|  |   681b      	ldr	r3, [r3, #0]
 8001b42:	|  |   6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b44:	|  |   78f9      	ldrb	r1, [r7, #3]
 8001b46:	|  |   687b      	ldr	r3, [r7, #4]
 8001b48:	|  |   f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8001b4c:	|  |   4618      	mov	r0, r3
 8001b4e:	|  |   4603      	mov	r3, r0
 8001b50:	|  |   005b      	lsls	r3, r3, #1
 8001b52:	|  |   4403      	add	r3, r0
 8001b54:	|  |   005b      	lsls	r3, r3, #1
 8001b56:	|  |   3b3c      	subs	r3, #60	; 0x3c
 8001b58:	|  |   fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	|  |   4619      	mov	r1, r3
 8001b5e:	|  |   687b      	ldr	r3, [r7, #4]
 8001b60:	|  |   681b      	ldr	r3, [r3, #0]
 8001b62:	|  |   430a      	orrs	r2, r1
 8001b64:	|  |   639a      	str	r2, [r3, #56]	; 0x38
}
 8001b66:	+--|-- e018      	b.n	8001b9a <ADC_InitRegChannel+0x1e6>
    else if(ADC_struct->reg_ch_amount <= 16)
 8001b68:	|  \-> 687b      	ldr	r3, [r7, #4]
 8001b6a:	|      f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8001b6e:	|      2b10      	cmp	r3, #16
 8001b70:	+----- d813      	bhi.n	8001b9a <ADC_InitRegChannel+0x1e6>
        ADC_struct->ADCx->SQR4 |= ch_num << ((ADC_struct->reg_ch_amount * 6) - 90);
 8001b72:	|      687b      	ldr	r3, [r7, #4]
 8001b74:	|      681b      	ldr	r3, [r3, #0]
 8001b76:	|      6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b78:	|      78f9      	ldrb	r1, [r7, #3]
 8001b7a:	|      687b      	ldr	r3, [r7, #4]
 8001b7c:	|      f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8001b80:	|      4618      	mov	r0, r3
 8001b82:	|      4603      	mov	r3, r0
 8001b84:	|      005b      	lsls	r3, r3, #1
 8001b86:	|      4403      	add	r3, r0
 8001b88:	|      005b      	lsls	r3, r3, #1
 8001b8a:	|      3b5a      	subs	r3, #90	; 0x5a
 8001b8c:	|      fa01 f303 	lsl.w	r3, r1, r3
 8001b90:	|      4619      	mov	r1, r3
 8001b92:	|      687b      	ldr	r3, [r7, #4]
 8001b94:	|      681b      	ldr	r3, [r3, #0]
 8001b96:	|      430a      	orrs	r2, r1
 8001b98:	|      63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b9a:	\----> bf00      	nop
 8001b9c:	       3708      	adds	r7, #8
 8001b9e:	       46bd      	mov	sp, r7
 8001ba0:	       bd80      	pop	{r7, pc}

08001ba2 <ADC_Start>:

void ADC_Start(ADC *ADC_struct){
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
    ADC_struct->ADCx->CR |= ADC_CR_ADSTART;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 0204 	orr.w	r2, r2, #4
 8001bb8:	609a      	str	r2, [r3, #8]
    ADC_struct->measure_process = 1;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <ADC_Disable>:

void ADC_Disable(ADC *ADC_struct){
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]

}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <ADC_Handler>:
// void ADC_StartConversion(ADC *ADC_struct){
//     ADC_struct->ADCx->CR |= ADC_CR_ADSTART;
// }

void ADC_Handler(){
 8001be2:	             b480      	push	{r7}
 8001be4:	             b083      	sub	sp, #12
 8001be6:	             af00      	add	r7, sp, #0
    if(adc.ADCx->ISR & ADC_ISR_ADRDY){
 8001be8:	             4b54      	ldr	r3, [pc, #336]	; (8001d3c <ADC_Handler+0x15a>)
 8001bea:	             681b      	ldr	r3, [r3, #0]
 8001bec:	             681b      	ldr	r3, [r3, #0]
 8001bee:	             f003 0301 	and.w	r3, r3, #1
 8001bf2:	             2b00      	cmp	r3, #0
 8001bf4:	         /-- d007      	beq.n	8001c06 <ADC_Handler+0x24>
        adc.ADCx->ISR |= ADC_ISR_ADRDY;
 8001bf6:	         |   4b51      	ldr	r3, [pc, #324]	; (8001d3c <ADC_Handler+0x15a>)
 8001bf8:	         |   681b      	ldr	r3, [r3, #0]
 8001bfa:	         |   681a      	ldr	r2, [r3, #0]
 8001bfc:	         |   4b4f      	ldr	r3, [pc, #316]	; (8001d3c <ADC_Handler+0x15a>)
 8001bfe:	         |   681b      	ldr	r3, [r3, #0]
 8001c00:	         |   f042 0201 	orr.w	r2, r2, #1
 8001c04:	         |   601a      	str	r2, [r3, #0]
    }
    if(adc.ADCx->ISR & ADC_ISR_EOC){  // Inside the regular sequence, after each conversion is complete
 8001c06:	         \-> 4b4d      	ldr	r3, [pc, #308]	; (8001d3c <ADC_Handler+0x15a>)
 8001c08:	             681b      	ldr	r3, [r3, #0]
 8001c0a:	             681b      	ldr	r3, [r3, #0]
 8001c0c:	             f003 0304 	and.w	r3, r3, #4
 8001c10:	             2b00      	cmp	r3, #0
 8001c12:	         /-- d018      	beq.n	8001c46 <ADC_Handler+0x64>
        uint16_t result = adc.ADCx->DR;
 8001c14:	         |   4b49      	ldr	r3, [pc, #292]	; (8001d3c <ADC_Handler+0x15a>)
 8001c16:	         |   681b      	ldr	r3, [r3, #0]
 8001c18:	         |   6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	         |   80bb      	strh	r3, [r7, #4]
        adc.reg_channel_queue[adc.reg_ch_queue_pointer].result = result;
 8001c1c:	         |   4b47      	ldr	r3, [pc, #284]	; (8001d3c <ADC_Handler+0x15a>)
 8001c1e:	         |   f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8001c22:	         |   4619      	mov	r1, r3
 8001c24:	         |   4a45      	ldr	r2, [pc, #276]	; (8001d3c <ADC_Handler+0x15a>)
 8001c26:	         |   460b      	mov	r3, r1
 8001c28:	         |   005b      	lsls	r3, r3, #1
 8001c2a:	         |   440b      	add	r3, r1
 8001c2c:	         |   009b      	lsls	r3, r3, #2
 8001c2e:	         |   4413      	add	r3, r2
 8001c30:	         |   330c      	adds	r3, #12
 8001c32:	         |   88ba      	ldrh	r2, [r7, #4]
 8001c34:	         |   801a      	strh	r2, [r3, #0]
        adc.reg_ch_queue_pointer++;
 8001c36:	         |   4b41      	ldr	r3, [pc, #260]	; (8001d3c <ADC_Handler+0x15a>)
 8001c38:	         |   f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8001c3c:	         |   3301      	adds	r3, #1
 8001c3e:	         |   b2da      	uxtb	r2, r3
 8001c40:	         |   4b3e      	ldr	r3, [pc, #248]	; (8001d3c <ADC_Handler+0x15a>)
 8001c42:	         |   f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
    }
    if(adc.ADCx->ISR & ADC_ISR_EOS){  // After the regular sequence is complete
 8001c46:	         \-> 4b3d      	ldr	r3, [pc, #244]	; (8001d3c <ADC_Handler+0x15a>)
 8001c48:	             681b      	ldr	r3, [r3, #0]
 8001c4a:	             681b      	ldr	r3, [r3, #0]
 8001c4c:	             f003 0308 	and.w	r3, r3, #8
 8001c50:	             2b00      	cmp	r3, #0
 8001c52:	/----------- d04f      	beq.n	8001cf4 <ADC_Handler+0x112>
        adc.reg_ch_queue_pointer = 0;
 8001c54:	|            4b39      	ldr	r3, [pc, #228]	; (8001d3c <ADC_Handler+0x15a>)
 8001c56:	|            2200      	movs	r2, #0
 8001c58:	|            f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
        adc.vdda_mvolt = adc.vrefinternal_cal / (float)(adc.reg_channel_queue[11].result);
 8001c5c:	|            4b37      	ldr	r3, [pc, #220]	; (8001d3c <ADC_Handler+0x15a>)
 8001c5e:	|            f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001c62:	|            ee07 3a90 	vmov	s15, r3
 8001c66:	|            eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c6a:	|            4b34      	ldr	r3, [pc, #208]	; (8001d3c <ADC_Handler+0x15a>)
 8001c6c:	|            f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8001c70:	|            ee07 3a90 	vmov	s15, r3
 8001c74:	|            eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c78:	|            eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c7c:	|            eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c80:	|            ee17 3a90 	vmov	r3, s15
 8001c84:	|            b29a      	uxth	r2, r3
 8001c86:	|            4b2d      	ldr	r3, [pc, #180]	; (8001d3c <ADC_Handler+0x15a>)
 8001c88:	|            f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
        for(uint8_t i = 0; i < 11; i++){
 8001c8c:	|            2300      	movs	r3, #0
 8001c8e:	|            71fb      	strb	r3, [r7, #7]
 8001c90:	|     /----- e021      	b.n	8001cd6 <ADC_Handler+0xf4>
            adc.reg_channel_queue[i].result_mv = adc.reg_channel_queue[i].result * adc.vdda_mvolt / 4096;
 8001c92:	|  /--|----> 79fa      	ldrb	r2, [r7, #7]
 8001c94:	|  |  |      4929      	ldr	r1, [pc, #164]	; (8001d3c <ADC_Handler+0x15a>)
 8001c96:	|  |  |      4613      	mov	r3, r2
 8001c98:	|  |  |      005b      	lsls	r3, r3, #1
 8001c9a:	|  |  |      4413      	add	r3, r2
 8001c9c:	|  |  |      009b      	lsls	r3, r3, #2
 8001c9e:	|  |  |      440b      	add	r3, r1
 8001ca0:	|  |  |      330c      	adds	r3, #12
 8001ca2:	|  |  |      881b      	ldrh	r3, [r3, #0]
 8001ca4:	|  |  |      461a      	mov	r2, r3
 8001ca6:	|  |  |      4b25      	ldr	r3, [pc, #148]	; (8001d3c <ADC_Handler+0x15a>)
 8001ca8:	|  |  |      f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 8001cac:	|  |  |      fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	|  |  |      2b00      	cmp	r3, #0
 8001cb2:	|  |  |  /-- da01      	bge.n	8001cb8 <ADC_Handler+0xd6>
 8001cb4:	|  |  |  |   f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001cb8:	|  |  |  \-> 131b      	asrs	r3, r3, #12
 8001cba:	|  |  |      79fa      	ldrb	r2, [r7, #7]
 8001cbc:	|  |  |      b298      	uxth	r0, r3
 8001cbe:	|  |  |      491f      	ldr	r1, [pc, #124]	; (8001d3c <ADC_Handler+0x15a>)
 8001cc0:	|  |  |      4613      	mov	r3, r2
 8001cc2:	|  |  |      005b      	lsls	r3, r3, #1
 8001cc4:	|  |  |      4413      	add	r3, r2
 8001cc6:	|  |  |      009b      	lsls	r3, r3, #2
 8001cc8:	|  |  |      440b      	add	r3, r1
 8001cca:	|  |  |      330e      	adds	r3, #14
 8001ccc:	|  |  |      4602      	mov	r2, r0
 8001cce:	|  |  |      801a      	strh	r2, [r3, #0]
        for(uint8_t i = 0; i < 11; i++){
 8001cd0:	|  |  |      79fb      	ldrb	r3, [r7, #7]
 8001cd2:	|  |  |      3301      	adds	r3, #1
 8001cd4:	|  |  |      71fb      	strb	r3, [r7, #7]
 8001cd6:	|  |  \----> 79fb      	ldrb	r3, [r7, #7]
 8001cd8:	|  |         2b0a      	cmp	r3, #10
 8001cda:	|  \-------- d9da      	bls.n	8001c92 <ADC_Handler+0xb0>
        }
        adc.ADCx->ISR |= ADC_ISR_EOS;
 8001cdc:	|            4b17      	ldr	r3, [pc, #92]	; (8001d3c <ADC_Handler+0x15a>)
 8001cde:	|            681b      	ldr	r3, [r3, #0]
 8001ce0:	|            681a      	ldr	r2, [r3, #0]
 8001ce2:	|            4b16      	ldr	r3, [pc, #88]	; (8001d3c <ADC_Handler+0x15a>)
 8001ce4:	|            681b      	ldr	r3, [r3, #0]
 8001ce6:	|            f042 0208 	orr.w	r2, r2, #8
 8001cea:	|            601a      	str	r2, [r3, #0]
        adc.measure_process = 0;
 8001cec:	|            4b13      	ldr	r3, [pc, #76]	; (8001d3c <ADC_Handler+0x15a>)
 8001cee:	|            2200      	movs	r2, #0
 8001cf0:	|            f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
    }
    if(adc.ADCx->ISR & ADC_ISR_JEOC){  // Inside the injected sequence, after each conversion is complete:
 8001cf4:	\----------> 4b11      	ldr	r3, [pc, #68]	; (8001d3c <ADC_Handler+0x15a>)
 8001cf6:	             681b      	ldr	r3, [r3, #0]
 8001cf8:	             681b      	ldr	r3, [r3, #0]
 8001cfa:	             f003 0320 	and.w	r3, r3, #32
 8001cfe:	             2b00      	cmp	r3, #0
 8001d00:	         /-- d007      	beq.n	8001d12 <ADC_Handler+0x130>
        adc.ADCx->ISR |= ADC_ISR_JEOC;
 8001d02:	         |   4b0e      	ldr	r3, [pc, #56]	; (8001d3c <ADC_Handler+0x15a>)
 8001d04:	         |   681b      	ldr	r3, [r3, #0]
 8001d06:	         |   681a      	ldr	r2, [r3, #0]
 8001d08:	         |   4b0c      	ldr	r3, [pc, #48]	; (8001d3c <ADC_Handler+0x15a>)
 8001d0a:	         |   681b      	ldr	r3, [r3, #0]
 8001d0c:	         |   f042 0220 	orr.w	r2, r2, #32
 8001d10:	         |   601a      	str	r2, [r3, #0]
    }
    if(adc.ADCx->ISR & ADC_ISR_JEOS){  // After the injected sequence is complete
 8001d12:	         \-> 4b0a      	ldr	r3, [pc, #40]	; (8001d3c <ADC_Handler+0x15a>)
 8001d14:	             681b      	ldr	r3, [r3, #0]
 8001d16:	             681b      	ldr	r3, [r3, #0]
 8001d18:	             f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1c:	             2b00      	cmp	r3, #0
 8001d1e:	         /-- d007      	beq.n	8001d30 <ADC_Handler+0x14e>
        adc.ADCx->ISR |= ADC_ISR_JEOS;
 8001d20:	         |   4b06      	ldr	r3, [pc, #24]	; (8001d3c <ADC_Handler+0x15a>)
 8001d22:	         |   681b      	ldr	r3, [r3, #0]
 8001d24:	         |   681a      	ldr	r2, [r3, #0]
 8001d26:	         |   4b05      	ldr	r3, [pc, #20]	; (8001d3c <ADC_Handler+0x15a>)
 8001d28:	         |   681b      	ldr	r3, [r3, #0]
 8001d2a:	         |   f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d2e:	         |   601a      	str	r2, [r3, #0]
    }
}
 8001d30:	         \-> bf00      	nop
 8001d32:	             370c      	adds	r7, #12
 8001d34:	             46bd      	mov	sp, r7
 8001d36:	             f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	             4770      	bx	lr
 8001d3c:	             0a84      	lsrs	r4, r0, #10
 8001d3e:	             2000      	movs	r0, #0

08001d40 <__NVIC_EnableIRQ>:
{
 8001d40:	    b480      	push	{r7}
 8001d42:	    b083      	sub	sp, #12
 8001d44:	    af00      	add	r7, sp, #0
 8001d46:	    4603      	mov	r3, r0
 8001d48:	    71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4a:	    f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	    2b00      	cmp	r3, #0
 8001d50:	/-- db0b      	blt.n	8001d6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d52:	|   79fb      	ldrb	r3, [r7, #7]
 8001d54:	|   f003 021f 	and.w	r2, r3, #31
 8001d58:	|   4907      	ldr	r1, [pc, #28]	; (8001d78 <__NVIC_EnableIRQ+0x38>)
 8001d5a:	|   f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	|   095b      	lsrs	r3, r3, #5
 8001d60:	|   2001      	movs	r0, #1
 8001d62:	|   fa00 f202 	lsl.w	r2, r0, r2
 8001d66:	|   f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d6a:	\-> bf00      	nop
 8001d6c:	    370c      	adds	r7, #12
 8001d6e:	    46bd      	mov	sp, r7
 8001d70:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	    4770      	bx	lr
 8001d76:	    bf00      	nop
 8001d78:	    e100      	b.n	8001f7c <gpio_init+0x1a4>
 8001d7a:	    e000      	b.n	8001d7e <gpio_calculate+0x2>

08001d7c <gpio_calculate>:
    GPIO_TypeDef *port;
    uint8_t pin;
    uint8_t port_num;
} GPIO_Struct;

GPIO_Struct gpio_calculate(GPIO_Pin gpio){
 8001d7c:	       b480      	push	{r7}
 8001d7e:	       b083      	sub	sp, #12
 8001d80:	       af00      	add	r7, sp, #0
 8001d82:	       6078      	str	r0, [r7, #4]
 8001d84:	       460b      	mov	r3, r1
 8001d86:	       70fb      	strb	r3, [r7, #3]
    if(gpio == uninitialized){
 8001d88:	       78fb      	ldrb	r3, [r7, #3]
 8001d8a:	       2b00      	cmp	r3, #0
 8001d8c:	/----- d100      	bne.n	8001d90 <gpio_calculate+0x14>
        // while(1) NVIC_SystemReset();
        while(1);
 8001d8e:	|  /-- e7fe      	b.n	8001d8e <gpio_calculate+0x12>
    }
    gpio--;
 8001d90:	\----> 78fb      	ldrb	r3, [r7, #3]
 8001d92:	       3b01      	subs	r3, #1
 8001d94:	       70fb      	strb	r3, [r7, #3]
    static GPIO_Struct temp = {0};
	temp.port_num = gpio / NUMBER_OF_PINS_ON_EACH_PORT;  // GPIOA = 1, GPIOB = 2, ..., GPIOE = 5
 8001d96:	       78fb      	ldrb	r3, [r7, #3]
 8001d98:	       091b      	lsrs	r3, r3, #4
 8001d9a:	       b2da      	uxtb	r2, r3
 8001d9c:	       4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <gpio_calculate+0x58>)
 8001d9e:	       715a      	strb	r2, [r3, #5]
	temp.pin = gpio % NUMBER_OF_PINS_ON_EACH_PORT;  // PB0 = 0, PA1 = 1, PD4 = 4
 8001da0:	       78fb      	ldrb	r3, [r7, #3]
 8001da2:	       f003 030f 	and.w	r3, r3, #15
 8001da6:	       b2da      	uxtb	r2, r3
 8001da8:	       4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <gpio_calculate+0x58>)
 8001daa:	       711a      	strb	r2, [r3, #4]
    temp.port = (GPIO_TypeDef *)(AHB2PERIPH_BASE + (0x0400UL * temp.port_num) );
 8001dac:	       4b09      	ldr	r3, [pc, #36]	; (8001dd4 <gpio_calculate+0x58>)
 8001dae:	       795b      	ldrb	r3, [r3, #5]
 8001db0:	       f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 8001db4:	       029b      	lsls	r3, r3, #10
 8001db6:	       461a      	mov	r2, r3
 8001db8:	       4b06      	ldr	r3, [pc, #24]	; (8001dd4 <gpio_calculate+0x58>)
 8001dba:	       601a      	str	r2, [r3, #0]
    return temp;
 8001dbc:	       687b      	ldr	r3, [r7, #4]
 8001dbe:	       4a05      	ldr	r2, [pc, #20]	; (8001dd4 <gpio_calculate+0x58>)
 8001dc0:	       e892 0003 	ldmia.w	r2, {r0, r1}
 8001dc4:	       e883 0003 	stmia.w	r3, {r0, r1}
}
 8001dc8:	       6878      	ldr	r0, [r7, #4]
 8001dca:	       370c      	adds	r7, #12
 8001dcc:	       46bd      	mov	sp, r7
 8001dce:	       f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	       4770      	bx	lr
 8001dd4:	       3c08      	subs	r4, #8
 8001dd6:	       2000      	movs	r0, #0

08001dd8 <gpio_init>:
/// @param gpio номер пина (PA1, PB12, PC0, ...)
/// @param mode режим работы (Input_mode, General_output, Analog_mode, or Alternatuve functions like AF0, AF1, ...)
/// @param config конфигурация выхода (Push_pull, Open_drain)
/// @param pull_up_down подтяжка (no_pull, pull_up, pull_down)
/// @param speed скорость работы (Low_speed, Medium_speed, High_speed, Very_high_speed, Input)
void gpio_init(GPIO_Pin gpio, GPIO_Mode mode, GPIO_Config config, GPIO_Pull pull_up_down, GPIO_Speed speed){
 8001dd8:	          b590      	push	{r4, r7, lr}
 8001dda:	          b085      	sub	sp, #20
 8001ddc:	          af00      	add	r7, sp, #0
 8001dde:	          4604      	mov	r4, r0
 8001de0:	          4608      	mov	r0, r1
 8001de2:	          4611      	mov	r1, r2
 8001de4:	          461a      	mov	r2, r3
 8001de6:	          4623      	mov	r3, r4
 8001de8:	          71fb      	strb	r3, [r7, #7]
 8001dea:	          4603      	mov	r3, r0
 8001dec:	          71bb      	strb	r3, [r7, #6]
 8001dee:	          460b      	mov	r3, r1
 8001df0:	          717b      	strb	r3, [r7, #5]
 8001df2:	          4613      	mov	r3, r2
 8001df4:	          713b      	strb	r3, [r7, #4]
	GPIO_Struct gpio_struct = gpio_calculate(gpio);
 8001df6:	          f107 0308 	add.w	r3, r7, #8
 8001dfa:	          79fa      	ldrb	r2, [r7, #7]
 8001dfc:	          4611      	mov	r1, r2
 8001dfe:	          4618      	mov	r0, r3
 8001e00:	          f7ff ffbc 	bl	8001d7c <gpio_calculate>
    RCC->AHB2ENR |= 1 << gpio_struct.port_num;
 8001e04:	          4b65      	ldr	r3, [pc, #404]	; (8001f9c <gpio_init+0x1c4>)
 8001e06:	          6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e08:	          7b7a      	ldrb	r2, [r7, #13]
 8001e0a:	          4611      	mov	r1, r2
 8001e0c:	          2201      	movs	r2, #1
 8001e0e:	          408a      	lsls	r2, r1
 8001e10:	          4611      	mov	r1, r2
 8001e12:	          4a62      	ldr	r2, [pc, #392]	; (8001f9c <gpio_init+0x1c4>)
 8001e14:	          430b      	orrs	r3, r1
 8001e16:	          64d3      	str	r3, [r2, #76]	; 0x4c
	gpio_struct.port->PUPDR &= ~(3 << (gpio_struct.pin * 2));  // pull up / pull down register
 8001e18:	          68bb      	ldr	r3, [r7, #8]
 8001e1a:	          68da      	ldr	r2, [r3, #12]
 8001e1c:	          7b3b      	ldrb	r3, [r7, #12]
 8001e1e:	          005b      	lsls	r3, r3, #1
 8001e20:	          2103      	movs	r1, #3
 8001e22:	          fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	          43db      	mvns	r3, r3
 8001e28:	          4619      	mov	r1, r3
 8001e2a:	          68bb      	ldr	r3, [r7, #8]
 8001e2c:	          400a      	ands	r2, r1
 8001e2e:	          60da      	str	r2, [r3, #12]
	gpio_struct.port->PUPDR |= pull_up_down << (gpio_struct.pin * 2);
 8001e30:	          68bb      	ldr	r3, [r7, #8]
 8001e32:	          68da      	ldr	r2, [r3, #12]
 8001e34:	          7939      	ldrb	r1, [r7, #4]
 8001e36:	          7b3b      	ldrb	r3, [r7, #12]
 8001e38:	          005b      	lsls	r3, r3, #1
 8001e3a:	          fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	          4619      	mov	r1, r3
 8001e40:	          68bb      	ldr	r3, [r7, #8]
 8001e42:	          430a      	orrs	r2, r1
 8001e44:	          60da      	str	r2, [r3, #12]

	gpio_struct.port->OTYPER &= ~(1 << gpio_struct.pin);
 8001e46:	          68bb      	ldr	r3, [r7, #8]
 8001e48:	          685a      	ldr	r2, [r3, #4]
 8001e4a:	          7b3b      	ldrb	r3, [r7, #12]
 8001e4c:	          4619      	mov	r1, r3
 8001e4e:	          2301      	movs	r3, #1
 8001e50:	          408b      	lsls	r3, r1
 8001e52:	          43db      	mvns	r3, r3
 8001e54:	          4619      	mov	r1, r3
 8001e56:	          68bb      	ldr	r3, [r7, #8]
 8001e58:	          400a      	ands	r2, r1
 8001e5a:	          605a      	str	r2, [r3, #4]
	gpio_struct.port->OTYPER |= (config << gpio_struct.pin);
 8001e5c:	          68bb      	ldr	r3, [r7, #8]
 8001e5e:	          685a      	ldr	r2, [r3, #4]
 8001e60:	          797b      	ldrb	r3, [r7, #5]
 8001e62:	          7b39      	ldrb	r1, [r7, #12]
 8001e64:	          408b      	lsls	r3, r1
 8001e66:	          4619      	mov	r1, r3
 8001e68:	          68bb      	ldr	r3, [r7, #8]
 8001e6a:	          430a      	orrs	r2, r1
 8001e6c:	          605a      	str	r2, [r3, #4]

	gpio_struct.port->OSPEEDR &= ~(3 << (gpio_struct.pin * 2));
 8001e6e:	          68bb      	ldr	r3, [r7, #8]
 8001e70:	          689a      	ldr	r2, [r3, #8]
 8001e72:	          7b3b      	ldrb	r3, [r7, #12]
 8001e74:	          005b      	lsls	r3, r3, #1
 8001e76:	          2103      	movs	r1, #3
 8001e78:	          fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	          43db      	mvns	r3, r3
 8001e7e:	          4619      	mov	r1, r3
 8001e80:	          68bb      	ldr	r3, [r7, #8]
 8001e82:	          400a      	ands	r2, r1
 8001e84:	          609a      	str	r2, [r3, #8]
	if(speed != Input) gpio_struct.port->OSPEEDR |= speed << (gpio_struct.pin * 2);
 8001e86:	          f897 3020 	ldrb.w	r3, [r7, #32]
 8001e8a:	          2b04      	cmp	r3, #4
 8001e8c:	      /-- d00b      	beq.n	8001ea6 <gpio_init+0xce>
 8001e8e:	      |   68bb      	ldr	r3, [r7, #8]
 8001e90:	      |   689a      	ldr	r2, [r3, #8]
 8001e92:	      |   f897 1020 	ldrb.w	r1, [r7, #32]
 8001e96:	      |   7b3b      	ldrb	r3, [r7, #12]
 8001e98:	      |   005b      	lsls	r3, r3, #1
 8001e9a:	      |   fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	      |   4619      	mov	r1, r3
 8001ea0:	      |   68bb      	ldr	r3, [r7, #8]
 8001ea2:	      |   430a      	orrs	r2, r1
 8001ea4:	      |   609a      	str	r2, [r3, #8]

	if(mode > 3){
 8001ea6:	      \-> 79bb      	ldrb	r3, [r7, #6]
 8001ea8:	          2b03      	cmp	r3, #3
 8001eaa:	/-------- d95b      	bls.n	8001f64 <gpio_init+0x18c>
		gpio_struct.port->MODER &= ~(3 << (gpio_struct.pin * 2));
 8001eac:	|         68bb      	ldr	r3, [r7, #8]
 8001eae:	|         681a      	ldr	r2, [r3, #0]
 8001eb0:	|         7b3b      	ldrb	r3, [r7, #12]
 8001eb2:	|         005b      	lsls	r3, r3, #1
 8001eb4:	|         2103      	movs	r1, #3
 8001eb6:	|         fa01 f303 	lsl.w	r3, r1, r3
 8001eba:	|         43db      	mvns	r3, r3
 8001ebc:	|         4619      	mov	r1, r3
 8001ebe:	|         68bb      	ldr	r3, [r7, #8]
 8001ec0:	|         400a      	ands	r2, r1
 8001ec2:	|         601a      	str	r2, [r3, #0]
		gpio_struct.port->MODER |= 2 << (gpio_struct.pin * 2);
 8001ec4:	|         68bb      	ldr	r3, [r7, #8]
 8001ec6:	|         681a      	ldr	r2, [r3, #0]
 8001ec8:	|         7b3b      	ldrb	r3, [r7, #12]
 8001eca:	|         005b      	lsls	r3, r3, #1
 8001ecc:	|         2102      	movs	r1, #2
 8001ece:	|         fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	|         4619      	mov	r1, r3
 8001ed4:	|         68bb      	ldr	r3, [r7, #8]
 8001ed6:	|         430a      	orrs	r2, r1
 8001ed8:	|         601a      	str	r2, [r3, #0]

		gpio_struct.port->AFR[gpio_struct.pin/8] &= ~(0x0F << (gpio_struct.pin * 4));
 8001eda:	|         68bb      	ldr	r3, [r7, #8]
 8001edc:	|         7b3a      	ldrb	r2, [r7, #12]
 8001ede:	|         08d2      	lsrs	r2, r2, #3
 8001ee0:	|         b2d0      	uxtb	r0, r2
 8001ee2:	|         4602      	mov	r2, r0
 8001ee4:	|         3208      	adds	r2, #8
 8001ee6:	|         f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001eea:	|         7b3b      	ldrb	r3, [r7, #12]
 8001eec:	|         009b      	lsls	r3, r3, #2
 8001eee:	|         210f      	movs	r1, #15
 8001ef0:	|         fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	|         43db      	mvns	r3, r3
 8001ef6:	|         4619      	mov	r1, r3
 8001ef8:	|         68bb      	ldr	r3, [r7, #8]
 8001efa:	|         4011      	ands	r1, r2
 8001efc:	|         f100 0208 	add.w	r2, r0, #8
 8001f00:	|         f843 1022 	str.w	r1, [r3, r2, lsl #2]
		gpio_struct.pin/8 == 0 ? (gpio_struct.port->AFR[gpio_struct.pin/8] |= ((mode-4) << (gpio_struct.pin * 4))) : (gpio_struct.port->AFR[gpio_struct.pin/8] |= ((mode-4) << ((gpio_struct.pin-8) * 4)));
 8001f04:	|         7b3b      	ldrb	r3, [r7, #12]
 8001f06:	|         2b07      	cmp	r3, #7
 8001f08:	|     /-- d815      	bhi.n	8001f36 <gpio_init+0x15e>
 8001f0a:	|     |   68bb      	ldr	r3, [r7, #8]
 8001f0c:	|     |   7b3a      	ldrb	r2, [r7, #12]
 8001f0e:	|     |   08d2      	lsrs	r2, r2, #3
 8001f10:	|     |   b2d0      	uxtb	r0, r2
 8001f12:	|     |   4602      	mov	r2, r0
 8001f14:	|     |   3208      	adds	r2, #8
 8001f16:	|     |   f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f1a:	|     |   79bb      	ldrb	r3, [r7, #6]
 8001f1c:	|     |   1f19      	subs	r1, r3, #4
 8001f1e:	|     |   7b3b      	ldrb	r3, [r7, #12]
 8001f20:	|     |   009b      	lsls	r3, r3, #2
 8001f22:	|     |   fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	|     |   4619      	mov	r1, r3
 8001f28:	|     |   68bb      	ldr	r3, [r7, #8]
 8001f2a:	|     |   4311      	orrs	r1, r2
 8001f2c:	|     |   f100 0208 	add.w	r2, r0, #8
 8001f30:	|     |   f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
	else{
		gpio_struct.port->MODER &= ~(3 << (gpio_struct.pin * 2));
		gpio_struct.port->MODER |= mode << (gpio_struct.pin * 2);
	}
}
 8001f34:	|  /--|-- e02d      	b.n	8001f92 <gpio_init+0x1ba>
		gpio_struct.pin/8 == 0 ? (gpio_struct.port->AFR[gpio_struct.pin/8] |= ((mode-4) << (gpio_struct.pin * 4))) : (gpio_struct.port->AFR[gpio_struct.pin/8] |= ((mode-4) << ((gpio_struct.pin-8) * 4)));
 8001f36:	|  |  \-> 68bb      	ldr	r3, [r7, #8]
 8001f38:	|  |      7b3a      	ldrb	r2, [r7, #12]
 8001f3a:	|  |      08d2      	lsrs	r2, r2, #3
 8001f3c:	|  |      b2d0      	uxtb	r0, r2
 8001f3e:	|  |      4602      	mov	r2, r0
 8001f40:	|  |      3208      	adds	r2, #8
 8001f42:	|  |      f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f46:	|  |      79bb      	ldrb	r3, [r7, #6]
 8001f48:	|  |      1f19      	subs	r1, r3, #4
 8001f4a:	|  |      7b3b      	ldrb	r3, [r7, #12]
 8001f4c:	|  |      3b08      	subs	r3, #8
 8001f4e:	|  |      009b      	lsls	r3, r3, #2
 8001f50:	|  |      fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	|  |      4619      	mov	r1, r3
 8001f56:	|  |      68bb      	ldr	r3, [r7, #8]
 8001f58:	|  |      4311      	orrs	r1, r2
 8001f5a:	|  |      f100 0208 	add.w	r2, r0, #8
 8001f5e:	|  |      f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001f62:	|  +----- e016      	b.n	8001f92 <gpio_init+0x1ba>
		gpio_struct.port->MODER &= ~(3 << (gpio_struct.pin * 2));
 8001f64:	\--|----> 68bb      	ldr	r3, [r7, #8]
 8001f66:	   |      681a      	ldr	r2, [r3, #0]
 8001f68:	   |      7b3b      	ldrb	r3, [r7, #12]
 8001f6a:	   |      005b      	lsls	r3, r3, #1
 8001f6c:	   |      2103      	movs	r1, #3
 8001f6e:	   |      fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	   |      43db      	mvns	r3, r3
 8001f74:	   |      4619      	mov	r1, r3
 8001f76:	   |      68bb      	ldr	r3, [r7, #8]
 8001f78:	   |      400a      	ands	r2, r1
 8001f7a:	   |      601a      	str	r2, [r3, #0]
		gpio_struct.port->MODER |= mode << (gpio_struct.pin * 2);
 8001f7c:	   |      68bb      	ldr	r3, [r7, #8]
 8001f7e:	   |      681a      	ldr	r2, [r3, #0]
 8001f80:	   |      79b9      	ldrb	r1, [r7, #6]
 8001f82:	   |      7b3b      	ldrb	r3, [r7, #12]
 8001f84:	   |      005b      	lsls	r3, r3, #1
 8001f86:	   |      fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	   |      4619      	mov	r1, r3
 8001f8c:	   |      68bb      	ldr	r3, [r7, #8]
 8001f8e:	   |      430a      	orrs	r2, r1
 8001f90:	   |      601a      	str	r2, [r3, #0]
}
 8001f92:	   \----> bf00      	nop
 8001f94:	          3714      	adds	r7, #20
 8001f96:	          46bd      	mov	sp, r7
 8001f98:	          bd90      	pop	{r4, r7, pc}
 8001f9a:	          bf00      	nop
 8001f9c:	          1000      	asrs	r0, r0, #32
 8001f9e:	          4002      	ands	r2, r0

08001fa0 <gpio_state>:

/// @brief Устанавливает выбранный пин в состояние state (LOW or HIGH)
/// @param gpio номер вывода (PA0, PA1, ...)
/// @param state LOW or HIGH
void gpio_state(GPIO_Pin gpio, GPIO_State state){
 8001fa0:	          b580      	push	{r7, lr}
 8001fa2:	          b084      	sub	sp, #16
 8001fa4:	          af00      	add	r7, sp, #0
 8001fa6:	          4603      	mov	r3, r0
 8001fa8:	          460a      	mov	r2, r1
 8001faa:	          71fb      	strb	r3, [r7, #7]
 8001fac:	          4613      	mov	r3, r2
 8001fae:	          71bb      	strb	r3, [r7, #6]
    if(state == LOW || state == HIGH){
 8001fb0:	          79bb      	ldrb	r3, [r7, #6]
 8001fb2:	          2b00      	cmp	r3, #0
 8001fb4:	      /-- d002      	beq.n	8001fbc <gpio_state+0x1c>
 8001fb6:	      |   79bb      	ldrb	r3, [r7, #6]
 8001fb8:	      |   2b01      	cmp	r3, #1
 8001fba:	/-----|-- d113      	bne.n	8001fe4 <gpio_state+0x44>
        GPIO_Struct gpio_struct = gpio_calculate(gpio);
 8001fbc:	|     \-> f107 0308 	add.w	r3, r7, #8
 8001fc0:	|         79fa      	ldrb	r2, [r7, #7]
 8001fc2:	|         4611      	mov	r1, r2
 8001fc4:	|         4618      	mov	r0, r3
 8001fc6:	|         f7ff fed9 	bl	8001d7c <gpio_calculate>
        gpio_struct.port->BSRR = 0x01 << (gpio_struct.pin + (!state) * 16);
 8001fca:	|         7b3b      	ldrb	r3, [r7, #12]
 8001fcc:	|         461a      	mov	r2, r3
 8001fce:	|         79bb      	ldrb	r3, [r7, #6]
 8001fd0:	|         2b00      	cmp	r3, #0
 8001fd2:	|  /----- d101      	bne.n	8001fd8 <gpio_state+0x38>
 8001fd4:	|  |      2310      	movs	r3, #16
 8001fd6:	|  |  /-- e000      	b.n	8001fda <gpio_state+0x3a>
 8001fd8:	|  \--|-> 2300      	movs	r3, #0
 8001fda:	|     \-> 4413      	add	r3, r2
 8001fdc:	|         2201      	movs	r2, #1
 8001fde:	|         409a      	lsls	r2, r3
 8001fe0:	|         68bb      	ldr	r3, [r7, #8]
 8001fe2:	|         619a      	str	r2, [r3, #24]
    }
}
 8001fe4:	\-------> bf00      	nop
 8001fe6:	          3710      	adds	r7, #16
 8001fe8:	          46bd      	mov	sp, r7
 8001fea:	          bd80      	pop	{r7, pc}

08001fec <gpio_toggle>:

/// @brief Инвертирует состояние пина
/// @param gpio номер вывода (PA0, PA1, ...)
void gpio_toggle(GPIO_Pin gpio){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
    GPIO_Struct gpio_struct = gpio_calculate(gpio);
 8001ff6:	f107 0308 	add.w	r3, r7, #8
 8001ffa:	79fa      	ldrb	r2, [r7, #7]
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff febc 	bl	8001d7c <gpio_calculate>
	gpio_struct.port->ODR ^= 0x01 << gpio_struct.pin;
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	7b3b      	ldrb	r3, [r7, #12]
 800200a:	4619      	mov	r1, r3
 800200c:	2301      	movs	r3, #1
 800200e:	408b      	lsls	r3, r1
 8002010:	4619      	mov	r1, r3
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	404a      	eors	r2, r1
 8002016:	615a      	str	r2, [r3, #20]
}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <gpio_read>:

/// @brief Возвращает логический уровень указанного пина
/// @param gpio номер вывода (PA0, PA1, ...)
/// @return LOW or HIGH
GPIO_State gpio_read(GPIO_Pin gpio){
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
    GPIO_Struct gpio_struct = gpio_calculate(gpio);
 800202a:	f107 0308 	add.w	r3, r7, #8
 800202e:	79fa      	ldrb	r2, [r7, #7]
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fea2 	bl	8001d7c <gpio_calculate>
    return (gpio_struct.port->IDR & (0x01 << gpio_struct.pin)) >> gpio_struct.pin;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	7b3a      	ldrb	r2, [r7, #12]
 800203e:	4611      	mov	r1, r2
 8002040:	2201      	movs	r2, #1
 8002042:	408a      	lsls	r2, r1
 8002044:	4013      	ands	r3, r2
 8002046:	7b3a      	ldrb	r2, [r7, #12]
 8002048:	40d3      	lsrs	r3, r2
 800204a:	b2db      	uxtb	r3, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <gpio_exti_init>:

void gpio_exti_init(GPIO_Pin gpio, uint8_t mode){
 8002054:	          b580      	push	{r7, lr}
 8002056:	          b086      	sub	sp, #24
 8002058:	          af02      	add	r7, sp, #8
 800205a:	          4603      	mov	r3, r0
 800205c:	          460a      	mov	r2, r1
 800205e:	          71fb      	strb	r3, [r7, #7]
 8002060:	          4613      	mov	r3, r2
 8002062:	          71bb      	strb	r3, [r7, #6]
    if(gpio != uninitialized){
 8002064:	          79fb      	ldrb	r3, [r7, #7]
 8002066:	          2b00      	cmp	r3, #0
 8002068:	/-------- d07c      	beq.n	8002164 <gpio_exti_init+0x110>
        RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800206a:	|         4b40      	ldr	r3, [pc, #256]	; (800216c <gpio_exti_init+0x118>)
 800206c:	|         6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206e:	|         4a3f      	ldr	r2, [pc, #252]	; (800216c <gpio_exti_init+0x118>)
 8002070:	|         f043 0301 	orr.w	r3, r3, #1
 8002074:	|         6613      	str	r3, [r2, #96]	; 0x60
        gpio_init(gpio, Input_mode, Open_drain, no_pull, Input);
 8002076:	|         79f8      	ldrb	r0, [r7, #7]
 8002078:	|         2304      	movs	r3, #4
 800207a:	|         9300      	str	r3, [sp, #0]
 800207c:	|         2300      	movs	r3, #0
 800207e:	|         2201      	movs	r2, #1
 8002080:	|         2100      	movs	r1, #0
 8002082:	|         f7ff fea9 	bl	8001dd8 <gpio_init>
        gpio--;
 8002086:	|         79fb      	ldrb	r3, [r7, #7]
 8002088:	|         3b01      	subs	r3, #1
 800208a:	|         71fb      	strb	r3, [r7, #7]
        uint8_t port_num = (gpio / 16);  // GPIOA = 0, GPIOB = 1, ..., GPIOE = 4
 800208c:	|         79fb      	ldrb	r3, [r7, #7]
 800208e:	|         091b      	lsrs	r3, r3, #4
 8002090:	|         73fb      	strb	r3, [r7, #15]
        uint8_t pin = gpio % 16;  // PB0 = 0, PA1 = 1, PD4 = 4
 8002092:	|         79fb      	ldrb	r3, [r7, #7]
 8002094:	|         f003 030f 	and.w	r3, r3, #15
 8002098:	|         73bb      	strb	r3, [r7, #14]
        // EXTI->IMR1 |= EXTI_IMR1_IM4;
        EXTI->IMR1 |= 1 << pin;   // generate interrupt
 800209a:	|         4b35      	ldr	r3, [pc, #212]	; (8002170 <gpio_exti_init+0x11c>)
 800209c:	|         681b      	ldr	r3, [r3, #0]
 800209e:	|         7bba      	ldrb	r2, [r7, #14]
 80020a0:	|         2101      	movs	r1, #1
 80020a2:	|         fa01 f202 	lsl.w	r2, r1, r2
 80020a6:	|         4611      	mov	r1, r2
 80020a8:	|         4a31      	ldr	r2, [pc, #196]	; (8002170 <gpio_exti_init+0x11c>)
 80020aa:	|         430b      	orrs	r3, r1
 80020ac:	|         6013      	str	r3, [r2, #0]
        // EXTI->EMR1 |= pin;   // generate event
        if(mode == 0) EXTI->RTSR1 |= 1 << pin;
 80020ae:	|         79bb      	ldrb	r3, [r7, #6]
 80020b0:	|         2b00      	cmp	r3, #0
 80020b2:	|     /-- d10a      	bne.n	80020ca <gpio_exti_init+0x76>
 80020b4:	|     |   4b2e      	ldr	r3, [pc, #184]	; (8002170 <gpio_exti_init+0x11c>)
 80020b6:	|     |   689b      	ldr	r3, [r3, #8]
 80020b8:	|     |   7bba      	ldrb	r2, [r7, #14]
 80020ba:	|     |   2101      	movs	r1, #1
 80020bc:	|     |   fa01 f202 	lsl.w	r2, r1, r2
 80020c0:	|     |   4611      	mov	r1, r2
 80020c2:	|     |   4a2b      	ldr	r2, [pc, #172]	; (8002170 <gpio_exti_init+0x11c>)
 80020c4:	|     |   430b      	orrs	r3, r1
 80020c6:	|     |   6093      	str	r3, [r2, #8]
 80020c8:	|  /--|-- e024      	b.n	8002114 <gpio_exti_init+0xc0>
        else if(mode == 1) EXTI->FTSR1 |= 1 << pin;
 80020ca:	|  |  \-> 79bb      	ldrb	r3, [r7, #6]
 80020cc:	|  |      2b01      	cmp	r3, #1
 80020ce:	|  |  /-- d10a      	bne.n	80020e6 <gpio_exti_init+0x92>
 80020d0:	|  |  |   4b27      	ldr	r3, [pc, #156]	; (8002170 <gpio_exti_init+0x11c>)
 80020d2:	|  |  |   68db      	ldr	r3, [r3, #12]
 80020d4:	|  |  |   7bba      	ldrb	r2, [r7, #14]
 80020d6:	|  |  |   2101      	movs	r1, #1
 80020d8:	|  |  |   fa01 f202 	lsl.w	r2, r1, r2
 80020dc:	|  |  |   4611      	mov	r1, r2
 80020de:	|  |  |   4a24      	ldr	r2, [pc, #144]	; (8002170 <gpio_exti_init+0x11c>)
 80020e0:	|  |  |   430b      	orrs	r3, r1
 80020e2:	|  |  |   60d3      	str	r3, [r2, #12]
 80020e4:	|  +--|-- e016      	b.n	8002114 <gpio_exti_init+0xc0>
        else if(mode == 2){
 80020e6:	|  |  \-> 79bb      	ldrb	r3, [r7, #6]
 80020e8:	|  |      2b02      	cmp	r3, #2
 80020ea:	|  +----- d113      	bne.n	8002114 <gpio_exti_init+0xc0>
            EXTI->RTSR1 |= 1 << pin;
 80020ec:	|  |      4b20      	ldr	r3, [pc, #128]	; (8002170 <gpio_exti_init+0x11c>)
 80020ee:	|  |      689b      	ldr	r3, [r3, #8]
 80020f0:	|  |      7bba      	ldrb	r2, [r7, #14]
 80020f2:	|  |      2101      	movs	r1, #1
 80020f4:	|  |      fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	|  |      4611      	mov	r1, r2
 80020fa:	|  |      4a1d      	ldr	r2, [pc, #116]	; (8002170 <gpio_exti_init+0x11c>)
 80020fc:	|  |      430b      	orrs	r3, r1
 80020fe:	|  |      6093      	str	r3, [r2, #8]
            EXTI->FTSR1 |= 1 << pin;
 8002100:	|  |      4b1b      	ldr	r3, [pc, #108]	; (8002170 <gpio_exti_init+0x11c>)
 8002102:	|  |      68db      	ldr	r3, [r3, #12]
 8002104:	|  |      7bba      	ldrb	r2, [r7, #14]
 8002106:	|  |      2101      	movs	r1, #1
 8002108:	|  |      fa01 f202 	lsl.w	r2, r1, r2
 800210c:	|  |      4611      	mov	r1, r2
 800210e:	|  |      4a18      	ldr	r2, [pc, #96]	; (8002170 <gpio_exti_init+0x11c>)
 8002110:	|  |      430b      	orrs	r3, r1
 8002112:	|  |      60d3      	str	r3, [r2, #12]
        }
        SYSCFG->EXTICR[pin / 4] |= port_num << (4 * (pin % 4));
 8002114:	|  \----> 4a17      	ldr	r2, [pc, #92]	; (8002174 <gpio_exti_init+0x120>)
 8002116:	|         7bbb      	ldrb	r3, [r7, #14]
 8002118:	|         089b      	lsrs	r3, r3, #2
 800211a:	|         b2d8      	uxtb	r0, r3
 800211c:	|         4603      	mov	r3, r0
 800211e:	|         3302      	adds	r3, #2
 8002120:	|         f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002124:	|         7bf9      	ldrb	r1, [r7, #15]
 8002126:	|         7bba      	ldrb	r2, [r7, #14]
 8002128:	|         f002 0203 	and.w	r2, r2, #3
 800212c:	|         0092      	lsls	r2, r2, #2
 800212e:	|         fa01 f202 	lsl.w	r2, r1, r2
 8002132:	|         4910      	ldr	r1, [pc, #64]	; (8002174 <gpio_exti_init+0x120>)
 8002134:	|         431a      	orrs	r2, r3
 8002136:	|         1c83      	adds	r3, r0, #2
 8002138:	|         f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if(pin < 5) NVIC_EnableIRQ(EXTI4_IRQn);
 800213c:	|         7bbb      	ldrb	r3, [r7, #14]
 800213e:	|         2b04      	cmp	r3, #4
 8002140:	|     /-- d803      	bhi.n	800214a <gpio_exti_init+0xf6>
 8002142:	|     |   200a      	movs	r0, #10
 8002144:	|     |   f7ff fdfc 	bl	8001d40 <__NVIC_EnableIRQ>
        else if(pin < 10) NVIC_EnableIRQ(EXTI9_5_IRQn);
        else if(pin < 16) NVIC_EnableIRQ(EXTI15_10_IRQn);
    }
 8002148:	+-----|-- e00c      	b.n	8002164 <gpio_exti_init+0x110>
        else if(pin < 10) NVIC_EnableIRQ(EXTI9_5_IRQn);
 800214a:	|     \-> 7bbb      	ldrb	r3, [r7, #14]
 800214c:	|         2b09      	cmp	r3, #9
 800214e:	|     /-- d803      	bhi.n	8002158 <gpio_exti_init+0x104>
 8002150:	|     |   2017      	movs	r0, #23
 8002152:	|     |   f7ff fdf5 	bl	8001d40 <__NVIC_EnableIRQ>
 8002156:	+-----|-- e005      	b.n	8002164 <gpio_exti_init+0x110>
        else if(pin < 16) NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002158:	|     \-> 7bbb      	ldrb	r3, [r7, #14]
 800215a:	|         2b0f      	cmp	r3, #15
 800215c:	+-------- d802      	bhi.n	8002164 <gpio_exti_init+0x110>
 800215e:	|         2028      	movs	r0, #40	; 0x28
 8002160:	|         f7ff fdee 	bl	8001d40 <__NVIC_EnableIRQ>
 8002164:	\-------> bf00      	nop
 8002166:	          3710      	adds	r7, #16
 8002168:	          46bd      	mov	sp, r7
 800216a:	          bd80      	pop	{r7, pc}
 800216c:	          1000      	asrs	r0, r0, #32
 800216e:	          4002      	ands	r2, r0
 8002170:	          0400      	lsls	r0, r0, #16
 8002172:	          4001      	ands	r1, r0
 8002174:	          0000      	movs	r0, r0
 8002176:	          4001      	ands	r1, r0

08002178 <I2C_init>:
#include "i2c.h"
#include "stm32l4xx.h"


void I2C_init(I2C_TypeDef *I2Cx){
 8002178:	          b480      	push	{r7}
 800217a:	          b083      	sub	sp, #12
 800217c:	          af00      	add	r7, sp, #0
 800217e:	          6078      	str	r0, [r7, #4]
	if(I2Cx == I2C1){
 8002180:	          687b      	ldr	r3, [r7, #4]
 8002182:	          4a28      	ldr	r2, [pc, #160]	; (8002224 <I2C_init+0xac>)
 8002184:	          4293      	cmp	r3, r2
 8002186:	      /-- d106      	bne.n	8002196 <I2C_init+0x1e>
		RCC->APB1ENR1 |= RCC_APB1ENR1_I2C1EN;
 8002188:	      |   4b27      	ldr	r3, [pc, #156]	; (8002228 <I2C_init+0xb0>)
 800218a:	      |   6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	      |   4a26      	ldr	r2, [pc, #152]	; (8002228 <I2C_init+0xb0>)
 800218e:	      |   f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002192:	      |   6593      	str	r3, [r2, #88]	; 0x58
 8002194:	   /--|-- e014      	b.n	80021c0 <I2C_init+0x48>
	}
	else if(I2Cx == I2C2){
 8002196:	   |  \-> 687b      	ldr	r3, [r7, #4]
 8002198:	   |      4a24      	ldr	r2, [pc, #144]	; (800222c <I2C_init+0xb4>)
 800219a:	   |      4293      	cmp	r3, r2
 800219c:	   |  /-- d106      	bne.n	80021ac <I2C_init+0x34>
		RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 800219e:	   |  |   4b22      	ldr	r3, [pc, #136]	; (8002228 <I2C_init+0xb0>)
 80021a0:	   |  |   6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	   |  |   4a21      	ldr	r2, [pc, #132]	; (8002228 <I2C_init+0xb0>)
 80021a4:	   |  |   f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021a8:	   |  |   6593      	str	r3, [r2, #88]	; 0x58
 80021aa:	   +--|-- e009      	b.n	80021c0 <I2C_init+0x48>
	}
	else if(I2Cx == I2C3){
 80021ac:	   |  \-> 687b      	ldr	r3, [r7, #4]
 80021ae:	   |      4a20      	ldr	r2, [pc, #128]	; (8002230 <I2C_init+0xb8>)
 80021b0:	   |      4293      	cmp	r3, r2
 80021b2:	/--|----- d130      	bne.n	8002216 <I2C_init+0x9e>
		RCC->APB1ENR1 |= RCC_APB1ENR1_I2C3EN;
 80021b4:	|  |      4b1c      	ldr	r3, [pc, #112]	; (8002228 <I2C_init+0xb0>)
 80021b6:	|  |      6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	|  |      4a1b      	ldr	r2, [pc, #108]	; (8002228 <I2C_init+0xb0>)
 80021ba:	|  |      f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021be:	|  |      6593      	str	r3, [r2, #88]	; 0x58
	}
	else{
		return;
	}

	I2Cx->CR2 |= I2C_CR2_AUTOEND;
 80021c0:	|  \----> 687b      	ldr	r3, [r7, #4]
 80021c2:	|         685b      	ldr	r3, [r3, #4]
 80021c4:	|         f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80021c8:	|         687b      	ldr	r3, [r7, #4]
 80021ca:	|         605a      	str	r2, [r3, #4]
	I2Cx->OAR2 &= ~I2C_OAR2_OA2EN;
 80021cc:	|         687b      	ldr	r3, [r7, #4]
 80021ce:	|         68db      	ldr	r3, [r3, #12]
 80021d0:	|         f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80021d4:	|         687b      	ldr	r3, [r7, #4]
 80021d6:	|         60da      	str	r2, [r3, #12]
	I2Cx->CR1 &= ~I2C_CR1_GCEN;
 80021d8:	|         687b      	ldr	r3, [r7, #4]
 80021da:	|         681b      	ldr	r3, [r3, #0]
 80021dc:	|         f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80021e0:	|         687b      	ldr	r3, [r7, #4]
 80021e2:	|         601a      	str	r2, [r3, #0]
	I2Cx->CR1 &= ~I2C_CR1_NOSTRETCH;
 80021e4:	|         687b      	ldr	r3, [r7, #4]
 80021e6:	|         681b      	ldr	r3, [r3, #0]
 80021e8:	|         f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021ec:	|         687b      	ldr	r3, [r7, #4]
 80021ee:	|         601a      	str	r2, [r3, #0]
	// I2Cx->TIMINGR = 0x00702991; //Sysclk = 80 MHz I2Cmode = fast (400kHz)
	// I2Cx->TIMINGR = 0x00000004; //Sysclk = 4 MHz  I2Cmode = fast (400kHz)
	I2Cx->TIMINGR = 0x00000E14; //Sysclk = 4 MHz  I2Cmode = standart (100kHz)
 80021f0:	|         687b      	ldr	r3, [r7, #4]
 80021f2:	|         f640 6214 	movw	r2, #3604	; 0xe14
 80021f6:	|         611a      	str	r2, [r3, #16]


	(((I2Cx->OAR2)) = ((((((I2Cx->OAR2))) & (~((0x7FUL << (1U)) | (0x7UL << (8U))))) | (0 | 0))));
 80021f8:	|         687b      	ldr	r3, [r7, #4]
 80021fa:	|         68db      	ldr	r3, [r3, #12]
 80021fc:	|         f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002200:	|         f023 0306 	bic.w	r3, r3, #6
 8002204:	|         687a      	ldr	r2, [r7, #4]
 8002206:	|         60d3      	str	r3, [r2, #12]
	I2Cx->CR1 |= I2C_CR1_PE;
 8002208:	|         687b      	ldr	r3, [r7, #4]
 800220a:	|         681b      	ldr	r3, [r3, #0]
 800220c:	|         f043 0201 	orr.w	r2, r3, #1
 8002210:	|         687b      	ldr	r3, [r7, #4]
 8002212:	|         601a      	str	r2, [r3, #0]
 8002214:	|     /-- e000      	b.n	8002218 <I2C_init+0xa0>
		return;
 8002216:	\-----|-> bf00      	nop
}
 8002218:	      \-> 370c      	adds	r7, #12
 800221a:	          46bd      	mov	sp, r7
 800221c:	          f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	          4770      	bx	lr
 8002222:	          bf00      	nop
 8002224:	          5400      	strb	r0, [r0, r0]
 8002226:	          4000      	ands	r0, r0
 8002228:	          1000      	asrs	r0, r0, #32
 800222a:	          4002      	ands	r2, r0
 800222c:	          5800      	ldr	r0, [r0, r0]
 800222e:	          4000      	ands	r0, r0
 8002230:	          5c00      	ldrb	r0, [r0, r0]
 8002232:	          4000      	ands	r0, r0

08002234 <I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
void I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	0d5b      	lsrs	r3, r3, #21
 800224a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <I2C_HandleTransfer+0x48>)
 8002250:	430b      	orrs	r3, r1
 8002252:	43db      	mvns	r3, r3
 8002254:	401a      	ands	r2, r3
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4319      	orrs	r1, r3
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	041b      	lsls	r3, r3, #16
 8002260:	4319      	orrs	r1, r3
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4319      	orrs	r1, r3
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	430b      	orrs	r3, r1
 800226a:	431a      	orrs	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	7bff      	ldrb	r7, [r7, #15]
 800227e:	03ff      	lsls	r7, r7, #15

08002280 <I2C_check_flag>:

ErrorStatus I2C_check_flag(uint8_t checked_flag, uint8_t flag_state){
 8002280:	       b480      	push	{r7}
 8002282:	       b085      	sub	sp, #20
 8002284:	       af00      	add	r7, sp, #0
 8002286:	       4603      	mov	r3, r0
 8002288:	       460a      	mov	r2, r1
 800228a:	       71fb      	strb	r3, [r7, #7]
 800228c:	       4613      	mov	r3, r2
 800228e:	       71bb      	strb	r3, [r7, #6]
	volatile int32_t counter = I2C_TIMEOUT;
 8002290:	       f241 3388 	movw	r3, #5000	; 0x1388
 8002294:	       60fb      	str	r3, [r7, #12]
	while(checked_flag == flag_state && (counter--) >= 0);
 8002296:	/----> 79fa      	ldrb	r2, [r7, #7]
 8002298:	|      79bb      	ldrb	r3, [r7, #6]
 800229a:	|      429a      	cmp	r2, r3
 800229c:	|  /-- d104      	bne.n	80022a8 <I2C_check_flag+0x28>
 800229e:	|  |   68fb      	ldr	r3, [r7, #12]
 80022a0:	|  |   1e5a      	subs	r2, r3, #1
 80022a2:	|  |   60fa      	str	r2, [r7, #12]
 80022a4:	|  |   2b00      	cmp	r3, #0
 80022a6:	\--|-- daf6      	bge.n	8002296 <I2C_check_flag+0x16>
	if(counter == 0){
 80022a8:	   \-> 68fb      	ldr	r3, [r7, #12]
 80022aa:	       2b00      	cmp	r3, #0
 80022ac:	/----- d101      	bne.n	80022b2 <I2C_check_flag+0x32>
		return ERROR;
 80022ae:	|      2301      	movs	r3, #1
 80022b0:	|  /-- e000      	b.n	80022b4 <I2C_check_flag+0x34>
	}
	return SUCCESS;
 80022b2:	\--|-> 2300      	movs	r3, #0
}
 80022b4:	   \-> 4618      	mov	r0, r3
 80022b6:	       3714      	adds	r7, #20
 80022b8:	       46bd      	mov	sp, r7
 80022ba:	       f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	       4770      	bx	lr

080022c0 <I2C_Clear_Error_Flags>:

void I2C_Clear_Error_Flags(I2C_TypeDef *I2Cx){
 80022c0:	    b480      	push	{r7}
 80022c2:	    b083      	sub	sp, #12
 80022c4:	    af00      	add	r7, sp, #0
 80022c6:	    6078      	str	r0, [r7, #4]

	I2Cx->ISR = I2C_ISR_TXE;
 80022c8:	    687b      	ldr	r3, [r7, #4]
 80022ca:	    2201      	movs	r2, #1
 80022cc:	    619a      	str	r2, [r3, #24]
	I2Cx->ICR |= I2C_ICR_NACKCF;
 80022ce:	    687b      	ldr	r3, [r7, #4]
 80022d0:	    69db      	ldr	r3, [r3, #28]
 80022d2:	    f043 0210 	orr.w	r2, r3, #16
 80022d6:	    687b      	ldr	r3, [r7, #4]
 80022d8:	    61da      	str	r2, [r3, #28]
	I2Cx->ICR |= I2C_ICR_BERRCF;
 80022da:	    687b      	ldr	r3, [r7, #4]
 80022dc:	    69db      	ldr	r3, [r3, #28]
 80022de:	    f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022e2:	    687b      	ldr	r3, [r7, #4]
 80022e4:	    61da      	str	r2, [r3, #28]
	I2Cx->ICR |= I2C_ICR_STOPCF;
 80022e6:	    687b      	ldr	r3, [r7, #4]
 80022e8:	    69db      	ldr	r3, [r3, #28]
 80022ea:	    f043 0220 	orr.w	r2, r3, #32
 80022ee:	    687b      	ldr	r3, [r7, #4]
 80022f0:	    61da      	str	r2, [r3, #28]

	if((I2Cx->ISR & I2C_ISR_ARLO) == 1){
 80022f2:	    687b      	ldr	r3, [r7, #4]
 80022f4:	    699b      	ldr	r3, [r3, #24]
 80022f6:	    f403 7300 	and.w	r3, r3, #512	; 0x200
 80022fa:	    2b01      	cmp	r3, #1
 80022fc:	/-- d105      	bne.n	800230a <I2C_Clear_Error_Flags+0x4a>
		I2Cx->ISR |= I2C_ISR_ARLO;
 80022fe:	|   687b      	ldr	r3, [r7, #4]
 8002300:	|   699b      	ldr	r3, [r3, #24]
 8002302:	|   f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002306:	|   687b      	ldr	r3, [r7, #4]
 8002308:	|   619a      	str	r2, [r3, #24]
	}
	if((I2Cx->ISR & I2C_ISR_BUSY) == 1){
 800230a:	\-> 687b      	ldr	r3, [r7, #4]
 800230c:	    699b      	ldr	r3, [r3, #24]
 800230e:	    f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002312:	    2b01      	cmp	r3, #1
 8002314:	/-- d10b      	bne.n	800232e <I2C_Clear_Error_Flags+0x6e>
		I2Cx->CR1 &= ~I2C_CR1_PE;
 8002316:	|   687b      	ldr	r3, [r7, #4]
 8002318:	|   681b      	ldr	r3, [r3, #0]
 800231a:	|   f023 0201 	bic.w	r2, r3, #1
 800231e:	|   687b      	ldr	r3, [r7, #4]
 8002320:	|   601a      	str	r2, [r3, #0]
		I2Cx->CR1 |= I2C_CR1_PE;
 8002322:	|   687b      	ldr	r3, [r7, #4]
 8002324:	|   681b      	ldr	r3, [r3, #0]
 8002326:	|   f043 0201 	orr.w	r2, r3, #1
 800232a:	|   687b      	ldr	r3, [r7, #4]
 800232c:	|   601a      	str	r2, [r3, #0]
	}
}
 800232e:	\-> bf00      	nop
 8002330:	    370c      	adds	r7, #12
 8002332:	    46bd      	mov	sp, r7
 8002334:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	    4770      	bx	lr

0800233a <I2C_Read_byte_St_ReSt>:
				reg_addr = U32 	-> 	size_reg_addr = I2C_SIZE_REG_ADDR_U32
	@param 	reg_addr - 8,16,24,32-bit Registry address on the remote device
	@param  *data - pointer to variable u8 where would be written data from the remote device.
	@retval 0 - SUCCESS, -1 - ERROR
*/
ErrorStatus I2C_Read_byte_St_ReSt(I2C_TypeDef *I2Cx, uint8_t SlaveAddr, uint8_t size_reg_addr , uint32_t reg_addr, uint8_t *data){
 800233a:	                b580      	push	{r7, lr}
 800233c:	                b08a      	sub	sp, #40	; 0x28
 800233e:	                af02      	add	r7, sp, #8
 8002340:	                60f8      	str	r0, [r7, #12]
 8002342:	                607b      	str	r3, [r7, #4]
 8002344:	                460b      	mov	r3, r1
 8002346:	                72fb      	strb	r3, [r7, #11]
 8002348:	                4613      	mov	r3, r2
 800234a:	                72bb      	strb	r3, [r7, #10]

	if( size_reg_addr == 0 || size_reg_addr > 4 ){
 800234c:	                7abb      	ldrb	r3, [r7, #10]
 800234e:	                2b00      	cmp	r3, #0
 8002350:	         /----- d002      	beq.n	8002358 <I2C_Read_byte_St_ReSt+0x1e>
 8002352:	         |      7abb      	ldrb	r3, [r7, #10]
 8002354:	         |      2b04      	cmp	r3, #4
 8002356:	         |  /-- d901      	bls.n	800235c <I2C_Read_byte_St_ReSt+0x22>
		return ERROR;
 8002358:	         \--|-> 2301      	movs	r3, #1
 800235a:	/-----------|-- e0a3      	b.n	80024a4 <I2C_Read_byte_St_ReSt+0x16a>
	}
	volatile int32_t timeout = I2C_TIMEOUT;
 800235c:	|           \-> f241 3388 	movw	r3, #5000	; 0x1388
 8002360:	|               617b      	str	r3, [r7, #20]
	uint8_t receive_data = 0;
 8002362:	|               2300      	movs	r3, #0
 8002364:	|               777b      	strb	r3, [r7, #29]
	uint8_t i = 0;
 8002366:	|               2300      	movs	r3, #0
 8002368:	|               77fb      	strb	r3, [r7, #31]
	int8_t  j = 0;
 800236a:	|               2300      	movs	r3, #0
 800236c:	|               77bb      	strb	r3, [r7, #30]
	uint32_t SlaveAddr1;

	SlaveAddr1 = (uint8_t)(SlaveAddr << 1);
 800236e:	|               7afb      	ldrb	r3, [r7, #11]
 8002370:	|               005b      	lsls	r3, r3, #1
 8002372:	|               b2db      	uxtb	r3, r3
 8002374:	|               61bb      	str	r3, [r7, #24]

	//Clear flags if the previous attempt to exchange was not successful.
	I2C_Clear_Error_Flags(I2Cx);
 8002376:	|               68f8      	ldr	r0, [r7, #12]
 8002378:	|               f7ff ffa2 	bl	80022c0 <I2C_Clear_Error_Flags>

	I2C_HandleTransfer(I2Cx, (uint32_t)SlaveAddr1, I2C_ADDRSLAVE_7BIT, (uint32_t)size_reg_addr, I2C_MODE_SOFTEND, I2C_GENERATE_START_WRITE);
 800237c:	|               7abb      	ldrb	r3, [r7, #10]
 800237e:	|               4a4b      	ldr	r2, [pc, #300]	; (80024ac <I2C_Read_byte_St_ReSt+0x172>)
 8002380:	|               9201      	str	r2, [sp, #4]
 8002382:	|               2200      	movs	r2, #0
 8002384:	|               9200      	str	r2, [sp, #0]
 8002386:	|               2200      	movs	r2, #0
 8002388:	|               69b9      	ldr	r1, [r7, #24]
 800238a:	|               68f8      	ldr	r0, [r7, #12]
 800238c:	|               f7ff ff52 	bl	8002234 <I2C_HandleTransfer>
	while(((I2Cx->ISR & I2C_ISR_TXE) == RESET) && (timeout--) >= 0);
 8002390:	|               bf00      	nop
 8002392:	|        /----> 68fb      	ldr	r3, [r7, #12]
 8002394:	|        |      699b      	ldr	r3, [r3, #24]
 8002396:	|        |      f003 0301 	and.w	r3, r3, #1
 800239a:	|        |      2b00      	cmp	r3, #0
 800239c:	|        |  /-- d104      	bne.n	80023a8 <I2C_Read_byte_St_ReSt+0x6e>
 800239e:	|        |  |   697b      	ldr	r3, [r7, #20]
 80023a0:	|        |  |   1e5a      	subs	r2, r3, #1
 80023a2:	|        |  |   617a      	str	r2, [r7, #20]
 80023a4:	|        |  |   2b00      	cmp	r3, #0
 80023a6:	|        \--|-- daf4      	bge.n	8002392 <I2C_Read_byte_St_ReSt+0x58>
	if(timeout <= 0){
 80023a8:	|           \-> 697b      	ldr	r3, [r7, #20]
 80023aa:	|               2b00      	cmp	r3, #0
 80023ac:	|           /-- dc01      	bgt.n	80023b2 <I2C_Read_byte_St_ReSt+0x78>
		return ERROR;
 80023ae:	|           |   2301      	movs	r3, #1
 80023b0:	+-----------|-- e078      	b.n	80024a4 <I2C_Read_byte_St_ReSt+0x16a>
	}

	for( i = size_reg_addr , j = size_reg_addr-1 ; i != 0; i--, j-- ){ //high byte is sent first
 80023b2:	|           \-> 7abb      	ldrb	r3, [r7, #10]
 80023b4:	|               77fb      	strb	r3, [r7, #31]
 80023b6:	|               7abb      	ldrb	r3, [r7, #10]
 80023b8:	|               3b01      	subs	r3, #1
 80023ba:	|               b2db      	uxtb	r3, r3
 80023bc:	|               77bb      	strb	r3, [r7, #30]
 80023be:	|     /-------- e023      	b.n	8002408 <I2C_Read_byte_St_ReSt+0xce>

		I2Cx->TXDR = (uint8_t)(reg_addr >> (j*8));
 80023c0:	|  /--|-------> f997 301e 	ldrsb.w	r3, [r7, #30]
 80023c4:	|  |  |         00db      	lsls	r3, r3, #3
 80023c6:	|  |  |         687a      	ldr	r2, [r7, #4]
 80023c8:	|  |  |         fa22 f303 	lsr.w	r3, r2, r3
 80023cc:	|  |  |         b2db      	uxtb	r3, r3
 80023ce:	|  |  |         461a      	mov	r2, r3
 80023d0:	|  |  |         68fb      	ldr	r3, [r7, #12]
 80023d2:	|  |  |         629a      	str	r2, [r3, #40]	; 0x28

		while(((I2Cx->ISR & I2C_ISR_TXE) == RESET) && (timeout--) >= 0);
 80023d4:	|  |  |         bf00      	nop
 80023d6:	|  |  |  /----> 68fb      	ldr	r3, [r7, #12]
 80023d8:	|  |  |  |      699b      	ldr	r3, [r3, #24]
 80023da:	|  |  |  |      f003 0301 	and.w	r3, r3, #1
 80023de:	|  |  |  |      2b00      	cmp	r3, #0
 80023e0:	|  |  |  |  /-- d104      	bne.n	80023ec <I2C_Read_byte_St_ReSt+0xb2>
 80023e2:	|  |  |  |  |   697b      	ldr	r3, [r7, #20]
 80023e4:	|  |  |  |  |   1e5a      	subs	r2, r3, #1
 80023e6:	|  |  |  |  |   617a      	str	r2, [r7, #20]
 80023e8:	|  |  |  |  |   2b00      	cmp	r3, #0
 80023ea:	|  |  |  \--|-- daf4      	bge.n	80023d6 <I2C_Read_byte_St_ReSt+0x9c>
		if(timeout <= 0){
 80023ec:	|  |  |     \-> 697b      	ldr	r3, [r7, #20]
 80023ee:	|  |  |         2b00      	cmp	r3, #0
 80023f0:	|  |  |     /-- dc01      	bgt.n	80023f6 <I2C_Read_byte_St_ReSt+0xbc>
			return ERROR;
 80023f2:	|  |  |     |   2301      	movs	r3, #1
 80023f4:	+--|--|-----|-- e056      	b.n	80024a4 <I2C_Read_byte_St_ReSt+0x16a>
	for( i = size_reg_addr , j = size_reg_addr-1 ; i != 0; i--, j-- ){ //high byte is sent first
 80023f6:	|  |  |     \-> 7ffb      	ldrb	r3, [r7, #31]
 80023f8:	|  |  |         3b01      	subs	r3, #1
 80023fa:	|  |  |         77fb      	strb	r3, [r7, #31]
 80023fc:	|  |  |         f997 301e 	ldrsb.w	r3, [r7, #30]
 8002400:	|  |  |         b2db      	uxtb	r3, r3
 8002402:	|  |  |         3b01      	subs	r3, #1
 8002404:	|  |  |         b2db      	uxtb	r3, r3
 8002406:	|  |  |         77bb      	strb	r3, [r7, #30]
 8002408:	|  |  \-------> 7ffb      	ldrb	r3, [r7, #31]
 800240a:	|  |            2b00      	cmp	r3, #0
 800240c:	|  \----------- d1d8      	bne.n	80023c0 <I2C_Read_byte_St_ReSt+0x86>
		}
	}

	while(((I2Cx->ISR & I2C_ISR_TC) == RESET) && (timeout--) >= 0);
 800240e:	|               bf00      	nop
 8002410:	|        /----> 68fb      	ldr	r3, [r7, #12]
 8002412:	|        |      699b      	ldr	r3, [r3, #24]
 8002414:	|        |      f003 0340 	and.w	r3, r3, #64	; 0x40
 8002418:	|        |      2b00      	cmp	r3, #0
 800241a:	|        |  /-- d104      	bne.n	8002426 <I2C_Read_byte_St_ReSt+0xec>
 800241c:	|        |  |   697b      	ldr	r3, [r7, #20]
 800241e:	|        |  |   1e5a      	subs	r2, r3, #1
 8002420:	|        |  |   617a      	str	r2, [r7, #20]
 8002422:	|        |  |   2b00      	cmp	r3, #0
 8002424:	|        \--|-- daf4      	bge.n	8002410 <I2C_Read_byte_St_ReSt+0xd6>
	if(timeout <= 0){
 8002426:	|           \-> 697b      	ldr	r3, [r7, #20]
 8002428:	|               2b00      	cmp	r3, #0
 800242a:	|           /-- dc01      	bgt.n	8002430 <I2C_Read_byte_St_ReSt+0xf6>
		return ERROR;
 800242c:	|           |   2301      	movs	r3, #1
 800242e:	+-----------|-- e039      	b.n	80024a4 <I2C_Read_byte_St_ReSt+0x16a>
	}

	I2C_HandleTransfer(I2Cx, (uint32_t)SlaveAddr1, I2C_ADDRSLAVE_7BIT, (uint32_t)1, I2C_MODE_AUTOEND, I2C_GENERATE_START_READ);
 8002430:	|           \-> 4b1f      	ldr	r3, [pc, #124]	; (80024b0 <I2C_Read_byte_St_ReSt+0x176>)
 8002432:	|               9301      	str	r3, [sp, #4]
 8002434:	|               f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002438:	|               9300      	str	r3, [sp, #0]
 800243a:	|               2301      	movs	r3, #1
 800243c:	|               2200      	movs	r2, #0
 800243e:	|               69b9      	ldr	r1, [r7, #24]
 8002440:	|               68f8      	ldr	r0, [r7, #12]
 8002442:	|               f7ff fef7 	bl	8002234 <I2C_HandleTransfer>

	while(((I2Cx->ISR & I2C_ISR_RXNE) == RESET) && (timeout--) >= 0);
 8002446:	|               bf00      	nop
 8002448:	|        /----> 68fb      	ldr	r3, [r7, #12]
 800244a:	|        |      699b      	ldr	r3, [r3, #24]
 800244c:	|        |      f003 0304 	and.w	r3, r3, #4
 8002450:	|        |      2b00      	cmp	r3, #0
 8002452:	|        |  /-- d104      	bne.n	800245e <I2C_Read_byte_St_ReSt+0x124>
 8002454:	|        |  |   697b      	ldr	r3, [r7, #20]
 8002456:	|        |  |   1e5a      	subs	r2, r3, #1
 8002458:	|        |  |   617a      	str	r2, [r7, #20]
 800245a:	|        |  |   2b00      	cmp	r3, #0
 800245c:	|        \--|-- daf4      	bge.n	8002448 <I2C_Read_byte_St_ReSt+0x10e>
	if(timeout <= 0){
 800245e:	|           \-> 697b      	ldr	r3, [r7, #20]
 8002460:	|               2b00      	cmp	r3, #0
 8002462:	|           /-- dc01      	bgt.n	8002468 <I2C_Read_byte_St_ReSt+0x12e>
		return ERROR;
 8002464:	|           |   2301      	movs	r3, #1
 8002466:	+-----------|-- e01d      	b.n	80024a4 <I2C_Read_byte_St_ReSt+0x16a>
	}
	//LL_I2C_AcknowledgeNextData(I2Cx, LL_I2C_NACK);
	receive_data = I2Cx->RXDR & 0xFF;
 8002468:	|           \-> 68fb      	ldr	r3, [r7, #12]
 800246a:	|               6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	|               777b      	strb	r3, [r7, #29]

	//LL_I2C_GenerateStopCondition(I2Cx);
	while(((I2Cx->ISR & I2C_ISR_STOPF) == RESET) && (timeout--) >= 0);
 800246e:	|               bf00      	nop
 8002470:	|        /----> 68fb      	ldr	r3, [r7, #12]
 8002472:	|        |      699b      	ldr	r3, [r3, #24]
 8002474:	|        |      f003 0320 	and.w	r3, r3, #32
 8002478:	|        |      2b00      	cmp	r3, #0
 800247a:	|        |  /-- d104      	bne.n	8002486 <I2C_Read_byte_St_ReSt+0x14c>
 800247c:	|        |  |   697b      	ldr	r3, [r7, #20]
 800247e:	|        |  |   1e5a      	subs	r2, r3, #1
 8002480:	|        |  |   617a      	str	r2, [r7, #20]
 8002482:	|        |  |   2b00      	cmp	r3, #0
 8002484:	|        \--|-- daf4      	bge.n	8002470 <I2C_Read_byte_St_ReSt+0x136>
	if(timeout <= 0){
 8002486:	|           \-> 697b      	ldr	r3, [r7, #20]
 8002488:	|               2b00      	cmp	r3, #0
 800248a:	|           /-- dc01      	bgt.n	8002490 <I2C_Read_byte_St_ReSt+0x156>
		return ERROR;
 800248c:	|           |   2301      	movs	r3, #1
 800248e:	+-----------|-- e009      	b.n	80024a4 <I2C_Read_byte_St_ReSt+0x16a>
	}

	I2Cx->ICR |= I2C_ICR_STOPCF;
 8002490:	|           \-> 68fb      	ldr	r3, [r7, #12]
 8002492:	|               69db      	ldr	r3, [r3, #28]
 8002494:	|               f043 0220 	orr.w	r2, r3, #32
 8002498:	|               68fb      	ldr	r3, [r7, #12]
 800249a:	|               61da      	str	r2, [r3, #28]

	*data = receive_data;
 800249c:	|               6abb      	ldr	r3, [r7, #40]	; 0x28
 800249e:	|               7f7a      	ldrb	r2, [r7, #29]
 80024a0:	|               701a      	strb	r2, [r3, #0]

	return SUCCESS;
 80024a2:	|               2300      	movs	r3, #0
}
 80024a4:	\-------------> 4618      	mov	r0, r3
 80024a6:	                3720      	adds	r7, #32
 80024a8:	                46bd      	mov	sp, r7
 80024aa:	                bd80      	pop	{r7, pc}
 80024ac:	                2000      	movs	r0, #0
 80024ae:	                8000      	strh	r0, [r0, #0]
 80024b0:	                2400      	movs	r4, #0
 80024b2:	                8000      	strh	r0, [r0, #0]

080024b4 <I2C_Read_word_u16_St_ReSt>:
				reg_addr = U32 	-> 	size_reg_addr = I2C_SIZE_REG_ADDR_U32
	@param 	reg_addr - 8,16,24,32-bit Registry address on the remote device
	@param 	*data - pointer to variable u16 where would be written data from the remote device.
	@retval 0 - SUCCESS, -1 - ERROR
*/
ErrorStatus I2C_Read_word_u16_St_ReSt(I2C_TypeDef *I2Cx, uint8_t dev_addr, uint8_t size_reg_addr, uint32_t reg_addr, uint8_t msb_first, uint16_t *data){
 80024b4:	                b580      	push	{r7, lr}
 80024b6:	                b088      	sub	sp, #32
 80024b8:	                af02      	add	r7, sp, #8
 80024ba:	                60f8      	str	r0, [r7, #12]
 80024bc:	                607b      	str	r3, [r7, #4]
 80024be:	                460b      	mov	r3, r1
 80024c0:	                72fb      	strb	r3, [r7, #11]
 80024c2:	                4613      	mov	r3, r2
 80024c4:	                72bb      	strb	r3, [r7, #10]
	volatile int32_t timeout = I2C_TIMEOUT;
 80024c6:	                f241 3388 	movw	r3, #5000	; 0x1388
 80024ca:	                613b      	str	r3, [r7, #16]
	if( size_reg_addr == 0 || size_reg_addr > 4 ){
 80024cc:	                7abb      	ldrb	r3, [r7, #10]
 80024ce:	                2b00      	cmp	r3, #0
 80024d0:	         /----- d002      	beq.n	80024d8 <I2C_Read_word_u16_St_ReSt+0x24>
 80024d2:	         |      7abb      	ldrb	r3, [r7, #10]
 80024d4:	         |      2b04      	cmp	r3, #4
 80024d6:	         |  /-- d901      	bls.n	80024dc <I2C_Read_word_u16_St_ReSt+0x28>
		return ERROR;
 80024d8:	         \--|-> 2301      	movs	r3, #1
 80024da:	/-----------|-- e0e2      	b.n	80026a2 <I2C_Read_word_u16_St_ReSt+0x1ee>
	}

	uint8_t high_byte = 0, low_byte = 0;
 80024dc:	|           \-> 2300      	movs	r3, #0
 80024de:	|               757b      	strb	r3, [r7, #21]
 80024e0:	|               2300      	movs	r3, #0
 80024e2:	|               753b      	strb	r3, [r7, #20]
	uint8_t i = 0;
 80024e4:	|               2300      	movs	r3, #0
 80024e6:	|               75fb      	strb	r3, [r7, #23]
	int8_t  j = 0;
 80024e8:	|               2300      	movs	r3, #0
 80024ea:	|               75bb      	strb	r3, [r7, #22]

	dev_addr = (uint8_t)(dev_addr << 1);
 80024ec:	|               7afb      	ldrb	r3, [r7, #11]
 80024ee:	|               005b      	lsls	r3, r3, #1
 80024f0:	|               72fb      	strb	r3, [r7, #11]

	//Clear flags if the previous attempt to exchange was not successful.
	I2C_Clear_Error_Flags(I2Cx);
 80024f2:	|               68f8      	ldr	r0, [r7, #12]
 80024f4:	|               f7ff fee4 	bl	80022c0 <I2C_Clear_Error_Flags>
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_BUSY) >> I2C_ISR_BUSY_Pos, SET) != SUCCESS){
	// 	return ERROR;
	// }
	while(((I2Cx->ISR & I2C_ISR_BUSY) == SET) && (timeout--) >= 0);
 80024f8:	|               bf00      	nop
 80024fa:	|        /----> 68fb      	ldr	r3, [r7, #12]
 80024fc:	|        |      699b      	ldr	r3, [r3, #24]
 80024fe:	|        |      f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002502:	|        |      2b01      	cmp	r3, #1
 8002504:	|        |  /-- d104      	bne.n	8002510 <I2C_Read_word_u16_St_ReSt+0x5c>
 8002506:	|        |  |   693b      	ldr	r3, [r7, #16]
 8002508:	|        |  |   1e5a      	subs	r2, r3, #1
 800250a:	|        |  |   613a      	str	r2, [r7, #16]
 800250c:	|        |  |   2b00      	cmp	r3, #0
 800250e:	|        \--|-- daf4      	bge.n	80024fa <I2C_Read_word_u16_St_ReSt+0x46>
	if(timeout <= 0){
 8002510:	|           \-> 693b      	ldr	r3, [r7, #16]
 8002512:	|               2b00      	cmp	r3, #0
 8002514:	|           /-- dc01      	bgt.n	800251a <I2C_Read_word_u16_St_ReSt+0x66>
		return ERROR;
 8002516:	|           |   2301      	movs	r3, #1
 8002518:	+-----------|-- e0c3      	b.n	80026a2 <I2C_Read_word_u16_St_ReSt+0x1ee>
	}

	I2C_HandleTransfer(I2Cx, (uint32_t)dev_addr, I2C_ADDRSLAVE_7BIT, (uint32_t)size_reg_addr, I2C_MODE_SOFTEND, I2C_GENERATE_START_WRITE);
 800251a:	|           \-> 7af9      	ldrb	r1, [r7, #11]
 800251c:	|               7abb      	ldrb	r3, [r7, #10]
 800251e:	|               4a63      	ldr	r2, [pc, #396]	; (80026ac <I2C_Read_word_u16_St_ReSt+0x1f8>)
 8002520:	|               9201      	str	r2, [sp, #4]
 8002522:	|               2200      	movs	r2, #0
 8002524:	|               9200      	str	r2, [sp, #0]
 8002526:	|               2200      	movs	r2, #0
 8002528:	|               68f8      	ldr	r0, [r7, #12]
 800252a:	|               f7ff fe83 	bl	8002234 <I2C_HandleTransfer>
	while(((I2Cx->ISR & I2C_ISR_TXE) == RESET) && (timeout--) >= 0);
 800252e:	|               bf00      	nop
 8002530:	|        /----> 68fb      	ldr	r3, [r7, #12]
 8002532:	|        |      699b      	ldr	r3, [r3, #24]
 8002534:	|        |      f003 0301 	and.w	r3, r3, #1
 8002538:	|        |      2b00      	cmp	r3, #0
 800253a:	|        |  /-- d104      	bne.n	8002546 <I2C_Read_word_u16_St_ReSt+0x92>
 800253c:	|        |  |   693b      	ldr	r3, [r7, #16]
 800253e:	|        |  |   1e5a      	subs	r2, r3, #1
 8002540:	|        |  |   613a      	str	r2, [r7, #16]
 8002542:	|        |  |   2b00      	cmp	r3, #0
 8002544:	|        \--|-- daf4      	bge.n	8002530 <I2C_Read_word_u16_St_ReSt+0x7c>
	if(timeout <= 0){
 8002546:	|           \-> 693b      	ldr	r3, [r7, #16]
 8002548:	|               2b00      	cmp	r3, #0
 800254a:	|           /-- dc01      	bgt.n	8002550 <I2C_Read_word_u16_St_ReSt+0x9c>
		return ERROR;
 800254c:	|           |   2301      	movs	r3, #1
 800254e:	+-----------|-- e0a8      	b.n	80026a2 <I2C_Read_word_u16_St_ReSt+0x1ee>
	}
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_TXE) >> I2C_ISR_TXE_Pos, RESET) != SUCCESS){
	// 	return ERROR;
	// }
	I2Cx->CR2 |= I2C_CR2_START;
 8002550:	|           \-> 68fb      	ldr	r3, [r7, #12]
 8002552:	|               685b      	ldr	r3, [r3, #4]
 8002554:	|               f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002558:	|               68fb      	ldr	r3, [r7, #12]
 800255a:	|               605a      	str	r2, [r3, #4]

	for( i = size_reg_addr , j = size_reg_addr-1 ; i != 0; i--, j-- ){ //high byte is sent first
 800255c:	|               7abb      	ldrb	r3, [r7, #10]
 800255e:	|               75fb      	strb	r3, [r7, #23]
 8002560:	|               7abb      	ldrb	r3, [r7, #10]
 8002562:	|               3b01      	subs	r3, #1
 8002564:	|               b2db      	uxtb	r3, r3
 8002566:	|               75bb      	strb	r3, [r7, #22]
 8002568:	|     /-------- e023      	b.n	80025b2 <I2C_Read_word_u16_St_ReSt+0xfe>

		I2Cx->TXDR = (uint8_t)(reg_addr >> (j*8));
 800256a:	|  /--|-------> f997 3016 	ldrsb.w	r3, [r7, #22]
 800256e:	|  |  |         00db      	lsls	r3, r3, #3
 8002570:	|  |  |         687a      	ldr	r2, [r7, #4]
 8002572:	|  |  |         fa22 f303 	lsr.w	r3, r2, r3
 8002576:	|  |  |         b2db      	uxtb	r3, r3
 8002578:	|  |  |         461a      	mov	r2, r3
 800257a:	|  |  |         68fb      	ldr	r3, [r7, #12]
 800257c:	|  |  |         629a      	str	r2, [r3, #40]	; 0x28

		while(((I2Cx->ISR & I2C_ISR_TXE) == RESET) && (timeout--) >= 0);
 800257e:	|  |  |         bf00      	nop
 8002580:	|  |  |  /----> 68fb      	ldr	r3, [r7, #12]
 8002582:	|  |  |  |      699b      	ldr	r3, [r3, #24]
 8002584:	|  |  |  |      f003 0301 	and.w	r3, r3, #1
 8002588:	|  |  |  |      2b00      	cmp	r3, #0
 800258a:	|  |  |  |  /-- d104      	bne.n	8002596 <I2C_Read_word_u16_St_ReSt+0xe2>
 800258c:	|  |  |  |  |   693b      	ldr	r3, [r7, #16]
 800258e:	|  |  |  |  |   1e5a      	subs	r2, r3, #1
 8002590:	|  |  |  |  |   613a      	str	r2, [r7, #16]
 8002592:	|  |  |  |  |   2b00      	cmp	r3, #0
 8002594:	|  |  |  \--|-- daf4      	bge.n	8002580 <I2C_Read_word_u16_St_ReSt+0xcc>
		if(timeout <= 0){
 8002596:	|  |  |     \-> 693b      	ldr	r3, [r7, #16]
 8002598:	|  |  |         2b00      	cmp	r3, #0
 800259a:	|  |  |     /-- dc01      	bgt.n	80025a0 <I2C_Read_word_u16_St_ReSt+0xec>
			return ERROR;
 800259c:	|  |  |     |   2301      	movs	r3, #1
 800259e:	+--|--|-----|-- e080      	b.n	80026a2 <I2C_Read_word_u16_St_ReSt+0x1ee>
	for( i = size_reg_addr , j = size_reg_addr-1 ; i != 0; i--, j-- ){ //high byte is sent first
 80025a0:	|  |  |     \-> 7dfb      	ldrb	r3, [r7, #23]
 80025a2:	|  |  |         3b01      	subs	r3, #1
 80025a4:	|  |  |         75fb      	strb	r3, [r7, #23]
 80025a6:	|  |  |         f997 3016 	ldrsb.w	r3, [r7, #22]
 80025aa:	|  |  |         b2db      	uxtb	r3, r3
 80025ac:	|  |  |         3b01      	subs	r3, #1
 80025ae:	|  |  |         b2db      	uxtb	r3, r3
 80025b0:	|  |  |         75bb      	strb	r3, [r7, #22]
 80025b2:	|  |  \-------> 7dfb      	ldrb	r3, [r7, #23]
 80025b4:	|  |            2b00      	cmp	r3, #0
 80025b6:	|  \----------- d1d8      	bne.n	800256a <I2C_Read_word_u16_St_ReSt+0xb6>
		// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_TXE) >> I2C_ISR_TXE_Pos, RESET) != SUCCESS){
		// 	return ERROR;
		// }
	}

	while(((I2Cx->ISR & I2C_ISR_TC) == RESET) && (timeout--) >= 0);
 80025b8:	|               bf00      	nop
 80025ba:	|        /----> 68fb      	ldr	r3, [r7, #12]
 80025bc:	|        |      699b      	ldr	r3, [r3, #24]
 80025be:	|        |      f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	|        |      2b00      	cmp	r3, #0
 80025c4:	|        |  /-- d104      	bne.n	80025d0 <I2C_Read_word_u16_St_ReSt+0x11c>
 80025c6:	|        |  |   693b      	ldr	r3, [r7, #16]
 80025c8:	|        |  |   1e5a      	subs	r2, r3, #1
 80025ca:	|        |  |   613a      	str	r2, [r7, #16]
 80025cc:	|        |  |   2b00      	cmp	r3, #0
 80025ce:	|        \--|-- daf4      	bge.n	80025ba <I2C_Read_word_u16_St_ReSt+0x106>
	if(timeout <= 0){
 80025d0:	|           \-> 693b      	ldr	r3, [r7, #16]
 80025d2:	|               2b00      	cmp	r3, #0
 80025d4:	|           /-- dc01      	bgt.n	80025da <I2C_Read_word_u16_St_ReSt+0x126>
		return ERROR;
 80025d6:	|           |   2301      	movs	r3, #1
 80025d8:	+-----------|-- e063      	b.n	80026a2 <I2C_Read_word_u16_St_ReSt+0x1ee>
	}
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_TC) >> I2C_ISR_RXNE_Pos, RESET) != SUCCESS){
	// 	return ERROR;
	// }

	I2C_HandleTransfer(I2Cx, (uint32_t)dev_addr, I2C_ADDRSLAVE_7BIT, (uint32_t)2, I2C_MODE_AUTOEND, I2C_GENERATE_RESTART_7BIT_READ); //LL_I2C_MODE_SOFTEND
 80025da:	|           \-> 7af9      	ldrb	r1, [r7, #11]
 80025dc:	|               4b34      	ldr	r3, [pc, #208]	; (80026b0 <I2C_Read_word_u16_St_ReSt+0x1fc>)
 80025de:	|               9301      	str	r3, [sp, #4]
 80025e0:	|               f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025e4:	|               9300      	str	r3, [sp, #0]
 80025e6:	|               2302      	movs	r3, #2
 80025e8:	|               2200      	movs	r2, #0
 80025ea:	|               68f8      	ldr	r0, [r7, #12]
 80025ec:	|               f7ff fe22 	bl	8002234 <I2C_HandleTransfer>

	while(((I2Cx->ISR & I2C_ISR_RXNE) == RESET) && (timeout--) >= 0);
 80025f0:	|               bf00      	nop
 80025f2:	|        /----> 68fb      	ldr	r3, [r7, #12]
 80025f4:	|        |      699b      	ldr	r3, [r3, #24]
 80025f6:	|        |      f003 0304 	and.w	r3, r3, #4
 80025fa:	|        |      2b00      	cmp	r3, #0
 80025fc:	|        |  /-- d104      	bne.n	8002608 <I2C_Read_word_u16_St_ReSt+0x154>
 80025fe:	|        |  |   693b      	ldr	r3, [r7, #16]
 8002600:	|        |  |   1e5a      	subs	r2, r3, #1
 8002602:	|        |  |   613a      	str	r2, [r7, #16]
 8002604:	|        |  |   2b00      	cmp	r3, #0
 8002606:	|        \--|-- daf4      	bge.n	80025f2 <I2C_Read_word_u16_St_ReSt+0x13e>
	if(timeout <= 0){
 8002608:	|           \-> 693b      	ldr	r3, [r7, #16]
 800260a:	|               2b00      	cmp	r3, #0
 800260c:	|           /-- dc01      	bgt.n	8002612 <I2C_Read_word_u16_St_ReSt+0x15e>
		return ERROR;
 800260e:	|           |   2301      	movs	r3, #1
 8002610:	+-----------|-- e047      	b.n	80026a2 <I2C_Read_word_u16_St_ReSt+0x1ee>
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_RXNE) >> I2C_ISR_RXNE_Pos, RESET) != SUCCESS){
	// 	return ERROR;
	// }

	//LL_I2C_AcknowledgeNextData(I2Cx, LL_I2C_ACK);
	high_byte = I2Cx->RXDR & 0xFF;
 8002612:	|           \-> 68fb      	ldr	r3, [r7, #12]
 8002614:	|               6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	|               757b      	strb	r3, [r7, #21]

	while(((I2Cx->ISR & I2C_ISR_RXNE) == RESET) && (timeout--) >= 0);
 8002618:	|               bf00      	nop
 800261a:	|        /----> 68fb      	ldr	r3, [r7, #12]
 800261c:	|        |      699b      	ldr	r3, [r3, #24]
 800261e:	|        |      f003 0304 	and.w	r3, r3, #4
 8002622:	|        |      2b00      	cmp	r3, #0
 8002624:	|        |  /-- d104      	bne.n	8002630 <I2C_Read_word_u16_St_ReSt+0x17c>
 8002626:	|        |  |   693b      	ldr	r3, [r7, #16]
 8002628:	|        |  |   1e5a      	subs	r2, r3, #1
 800262a:	|        |  |   613a      	str	r2, [r7, #16]
 800262c:	|        |  |   2b00      	cmp	r3, #0
 800262e:	|        \--|-- daf4      	bge.n	800261a <I2C_Read_word_u16_St_ReSt+0x166>
	if(timeout <= 0){
 8002630:	|           \-> 693b      	ldr	r3, [r7, #16]
 8002632:	|               2b00      	cmp	r3, #0
 8002634:	|           /-- dc01      	bgt.n	800263a <I2C_Read_word_u16_St_ReSt+0x186>
		return ERROR;
 8002636:	|           |   2301      	movs	r3, #1
 8002638:	+-----------|-- e033      	b.n	80026a2 <I2C_Read_word_u16_St_ReSt+0x1ee>
	}
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_RXNE) >> I2C_ISR_RXNE_Pos, RESET) != SUCCESS){
	// 	return ERROR;
	// }
	// LL_I2C_AcknowledgeNextData(I2Cx, LL_I2C_ACK);
	low_byte = I2Cx->RXDR & 0xFF;
 800263a:	|           \-> 68fb      	ldr	r3, [r7, #12]
 800263c:	|               6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	|               753b      	strb	r3, [r7, #20]

	while(((I2Cx->ISR & I2C_ISR_STOPF) == RESET) && (timeout--) >= 0);
 8002640:	|               bf00      	nop
 8002642:	|        /----> 68fb      	ldr	r3, [r7, #12]
 8002644:	|        |      699b      	ldr	r3, [r3, #24]
 8002646:	|        |      f003 0320 	and.w	r3, r3, #32
 800264a:	|        |      2b00      	cmp	r3, #0
 800264c:	|        |  /-- d104      	bne.n	8002658 <I2C_Read_word_u16_St_ReSt+0x1a4>
 800264e:	|        |  |   693b      	ldr	r3, [r7, #16]
 8002650:	|        |  |   1e5a      	subs	r2, r3, #1
 8002652:	|        |  |   613a      	str	r2, [r7, #16]
 8002654:	|        |  |   2b00      	cmp	r3, #0
 8002656:	|        \--|-- daf4      	bge.n	8002642 <I2C_Read_word_u16_St_ReSt+0x18e>
	if(timeout <= 0){
 8002658:	|           \-> 693b      	ldr	r3, [r7, #16]
 800265a:	|               2b00      	cmp	r3, #0
 800265c:	|           /-- dc01      	bgt.n	8002662 <I2C_Read_word_u16_St_ReSt+0x1ae>
		return ERROR;
 800265e:	|           |   2301      	movs	r3, #1
 8002660:	+-----------|-- e01f      	b.n	80026a2 <I2C_Read_word_u16_St_ReSt+0x1ee>
	//LL_I2C_GenerateStopCondition(I2Cx);
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_STOPF) >> I2C_ISR_STOPF_Pos, RESET) != SUCCESS){
	// 	return ERROR;
	// }

	I2Cx->ICR |= I2C_ICR_STOPCF;
 8002662:	|           \-> 68fb      	ldr	r3, [r7, #12]
 8002664:	|               69db      	ldr	r3, [r3, #28]
 8002666:	|               f043 0220 	orr.w	r2, r3, #32
 800266a:	|               68fb      	ldr	r3, [r7, #12]
 800266c:	|               61da      	str	r2, [r3, #28]
	if(msb_first){
 800266e:	|               f897 3020 	ldrb.w	r3, [r7, #32]
 8002672:	|               2b00      	cmp	r3, #0
 8002674:	|        /----- d00a      	beq.n	800268c <I2C_Read_word_u16_St_ReSt+0x1d8>
		*data = (uint16_t)( ( high_byte  << 8 ) | low_byte );
 8002676:	|        |      7d7b      	ldrb	r3, [r7, #21]
 8002678:	|        |      021b      	lsls	r3, r3, #8
 800267a:	|        |      b21a      	sxth	r2, r3
 800267c:	|        |      7d3b      	ldrb	r3, [r7, #20]
 800267e:	|        |      b21b      	sxth	r3, r3
 8002680:	|        |      4313      	orrs	r3, r2
 8002682:	|        |      b21b      	sxth	r3, r3
 8002684:	|        |      b29a      	uxth	r2, r3
 8002686:	|        |      6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	|        |      801a      	strh	r2, [r3, #0]
 800268a:	|        |  /-- e009      	b.n	80026a0 <I2C_Read_word_u16_St_ReSt+0x1ec>
	}
	else{
		*data = (uint16_t)( ( low_byte  << 8 ) |  high_byte);
 800268c:	|        \--|-> 7d3b      	ldrb	r3, [r7, #20]
 800268e:	|           |   021b      	lsls	r3, r3, #8
 8002690:	|           |   b21a      	sxth	r2, r3
 8002692:	|           |   7d7b      	ldrb	r3, [r7, #21]
 8002694:	|           |   b21b      	sxth	r3, r3
 8002696:	|           |   4313      	orrs	r3, r2
 8002698:	|           |   b21b      	sxth	r3, r3
 800269a:	|           |   b29a      	uxth	r2, r3
 800269c:	|           |   6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	|           |   801a      	strh	r2, [r3, #0]
	}


	return SUCCESS;
 80026a0:	|           \-> 2300      	movs	r3, #0
}
 80026a2:	\-------------> 4618      	mov	r0, r3
 80026a4:	                3718      	adds	r7, #24
 80026a6:	                46bd      	mov	sp, r7
 80026a8:	                bd80      	pop	{r7, pc}
 80026aa:	                bf00      	nop
 80026ac:	                2000      	movs	r0, #0
 80026ae:	                8000      	strh	r0, [r0, #0]
 80026b0:	                2400      	movs	r4, #0
 80026b2:	                8000      	strh	r0, [r0, #0]

080026b4 <I2C_Read_word_u24_St_ReSt>:


ErrorStatus I2C_Read_word_u24_St_ReSt(I2C_TypeDef *I2Cx, uint8_t dev_addr, uint8_t size_reg_addr, uint32_t reg_addr, uint32_t *data){
 80026b4:	                b580      	push	{r7, lr}
 80026b6:	                b08a      	sub	sp, #40	; 0x28
 80026b8:	                af02      	add	r7, sp, #8
 80026ba:	                60f8      	str	r0, [r7, #12]
 80026bc:	                607b      	str	r3, [r7, #4]
 80026be:	                460b      	mov	r3, r1
 80026c0:	                72fb      	strb	r3, [r7, #11]
 80026c2:	                4613      	mov	r3, r2
 80026c4:	                72bb      	strb	r3, [r7, #10]
	volatile int32_t timeout = I2C_TIMEOUT;
 80026c6:	                f241 3388 	movw	r3, #5000	; 0x1388
 80026ca:	                617b      	str	r3, [r7, #20]
	if( size_reg_addr == 0 || size_reg_addr > 4 ){
 80026cc:	                7abb      	ldrb	r3, [r7, #10]
 80026ce:	                2b00      	cmp	r3, #0
 80026d0:	         /----- d002      	beq.n	80026d8 <I2C_Read_word_u24_St_ReSt+0x24>
 80026d2:	         |      7abb      	ldrb	r3, [r7, #10]
 80026d4:	         |      2b04      	cmp	r3, #4
 80026d6:	         |  /-- d901      	bls.n	80026dc <I2C_Read_word_u24_St_ReSt+0x28>
		return ERROR;
 80026d8:	         \--|-> 2301      	movs	r3, #1
 80026da:	/-----------|-- e0e9      	b.n	80028b0 <I2C_Read_word_u24_St_ReSt+0x1fc>
	}

	uint8_t high_byte = 0, mid_byte = 0, low_byte = 0;
 80026dc:	|           \-> 2300      	movs	r3, #0
 80026de:	|               777b      	strb	r3, [r7, #29]
 80026e0:	|               2300      	movs	r3, #0
 80026e2:	|               773b      	strb	r3, [r7, #28]
 80026e4:	|               2300      	movs	r3, #0
 80026e6:	|               76fb      	strb	r3, [r7, #27]
	uint8_t i = 0;
 80026e8:	|               2300      	movs	r3, #0
 80026ea:	|               77fb      	strb	r3, [r7, #31]
	int8_t  j = 0;
 80026ec:	|               2300      	movs	r3, #0
 80026ee:	|               77bb      	strb	r3, [r7, #30]

	dev_addr = (uint8_t)(dev_addr << 1);
 80026f0:	|               7afb      	ldrb	r3, [r7, #11]
 80026f2:	|               005b      	lsls	r3, r3, #1
 80026f4:	|               72fb      	strb	r3, [r7, #11]

	//Clear flags if the previous attempt to exchange was not successful.
	I2C_Clear_Error_Flags(I2Cx);
 80026f6:	|               68f8      	ldr	r0, [r7, #12]
 80026f8:	|               f7ff fde2 	bl	80022c0 <I2C_Clear_Error_Flags>
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_BUSY) >> I2C_ISR_BUSY_Pos, SET) != SUCCESS){
	// 	return ERROR;
	// }
	while(((I2Cx->ISR & I2C_ISR_BUSY) == SET) && ((timeout--) >= 0));
 80026fc:	|               bf00      	nop
 80026fe:	|        /----> 68fb      	ldr	r3, [r7, #12]
 8002700:	|        |      699b      	ldr	r3, [r3, #24]
 8002702:	|        |      f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002706:	|        |      2b01      	cmp	r3, #1
 8002708:	|        |  /-- d104      	bne.n	8002714 <I2C_Read_word_u24_St_ReSt+0x60>
 800270a:	|        |  |   697b      	ldr	r3, [r7, #20]
 800270c:	|        |  |   1e5a      	subs	r2, r3, #1
 800270e:	|        |  |   617a      	str	r2, [r7, #20]
 8002710:	|        |  |   2b00      	cmp	r3, #0
 8002712:	|        \--|-- daf4      	bge.n	80026fe <I2C_Read_word_u24_St_ReSt+0x4a>
	if(timeout <= 0){
 8002714:	|           \-> 697b      	ldr	r3, [r7, #20]
 8002716:	|               2b00      	cmp	r3, #0
 8002718:	|           /-- dc01      	bgt.n	800271e <I2C_Read_word_u24_St_ReSt+0x6a>
		return ERROR;
 800271a:	|           |   2301      	movs	r3, #1
 800271c:	+-----------|-- e0c8      	b.n	80028b0 <I2C_Read_word_u24_St_ReSt+0x1fc>
	}

	I2C_HandleTransfer(I2Cx, (uint32_t)dev_addr, I2C_ADDRSLAVE_7BIT, (uint32_t)size_reg_addr, I2C_MODE_SOFTEND, I2C_GENERATE_START_WRITE);
 800271e:	|           \-> 7af9      	ldrb	r1, [r7, #11]
 8002720:	|               7abb      	ldrb	r3, [r7, #10]
 8002722:	|               4a65      	ldr	r2, [pc, #404]	; (80028b8 <I2C_Read_word_u24_St_ReSt+0x204>)
 8002724:	|               9201      	str	r2, [sp, #4]
 8002726:	|               2200      	movs	r2, #0
 8002728:	|               9200      	str	r2, [sp, #0]
 800272a:	|               2200      	movs	r2, #0
 800272c:	|               68f8      	ldr	r0, [r7, #12]
 800272e:	|               f7ff fd81 	bl	8002234 <I2C_HandleTransfer>
	while(((I2Cx->ISR & I2C_ISR_TXE) == RESET) && ((timeout--) >= 0));
 8002732:	|               bf00      	nop
 8002734:	|        /----> 68fb      	ldr	r3, [r7, #12]
 8002736:	|        |      699b      	ldr	r3, [r3, #24]
 8002738:	|        |      f003 0301 	and.w	r3, r3, #1
 800273c:	|        |      2b00      	cmp	r3, #0
 800273e:	|        |  /-- d104      	bne.n	800274a <I2C_Read_word_u24_St_ReSt+0x96>
 8002740:	|        |  |   697b      	ldr	r3, [r7, #20]
 8002742:	|        |  |   1e5a      	subs	r2, r3, #1
 8002744:	|        |  |   617a      	str	r2, [r7, #20]
 8002746:	|        |  |   2b00      	cmp	r3, #0
 8002748:	|        \--|-- daf4      	bge.n	8002734 <I2C_Read_word_u24_St_ReSt+0x80>
	if(timeout <= 0){
 800274a:	|           \-> 697b      	ldr	r3, [r7, #20]
 800274c:	|               2b00      	cmp	r3, #0
 800274e:	|           /-- dc01      	bgt.n	8002754 <I2C_Read_word_u24_St_ReSt+0xa0>
		return ERROR;
 8002750:	|           |   2301      	movs	r3, #1
 8002752:	+-----------|-- e0ad      	b.n	80028b0 <I2C_Read_word_u24_St_ReSt+0x1fc>
	}
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_TXE) >> I2C_ISR_TXE_Pos, RESET) != SUCCESS){
	// 	return ERROR;
	// }
	I2Cx->CR2 |= I2C_CR2_START;
 8002754:	|           \-> 68fb      	ldr	r3, [r7, #12]
 8002756:	|               685b      	ldr	r3, [r3, #4]
 8002758:	|               f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800275c:	|               68fb      	ldr	r3, [r7, #12]
 800275e:	|               605a      	str	r2, [r3, #4]

	for( i = size_reg_addr , j = size_reg_addr-1 ; i != 0; i--, j-- ){ //high byte is sent first
 8002760:	|               7abb      	ldrb	r3, [r7, #10]
 8002762:	|               77fb      	strb	r3, [r7, #31]
 8002764:	|               7abb      	ldrb	r3, [r7, #10]
 8002766:	|               3b01      	subs	r3, #1
 8002768:	|               b2db      	uxtb	r3, r3
 800276a:	|               77bb      	strb	r3, [r7, #30]
 800276c:	|     /-------- e023      	b.n	80027b6 <I2C_Read_word_u24_St_ReSt+0x102>

		I2Cx->TXDR = (uint8_t)(reg_addr >> (j*8));
 800276e:	|  /--|-------> f997 301e 	ldrsb.w	r3, [r7, #30]
 8002772:	|  |  |         00db      	lsls	r3, r3, #3
 8002774:	|  |  |         687a      	ldr	r2, [r7, #4]
 8002776:	|  |  |         fa22 f303 	lsr.w	r3, r2, r3
 800277a:	|  |  |         b2db      	uxtb	r3, r3
 800277c:	|  |  |         461a      	mov	r2, r3
 800277e:	|  |  |         68fb      	ldr	r3, [r7, #12]
 8002780:	|  |  |         629a      	str	r2, [r3, #40]	; 0x28

		while(((I2Cx->ISR & I2C_ISR_TXE) == RESET) && ((timeout--) >= 0));
 8002782:	|  |  |         bf00      	nop
 8002784:	|  |  |  /----> 68fb      	ldr	r3, [r7, #12]
 8002786:	|  |  |  |      699b      	ldr	r3, [r3, #24]
 8002788:	|  |  |  |      f003 0301 	and.w	r3, r3, #1
 800278c:	|  |  |  |      2b00      	cmp	r3, #0
 800278e:	|  |  |  |  /-- d104      	bne.n	800279a <I2C_Read_word_u24_St_ReSt+0xe6>
 8002790:	|  |  |  |  |   697b      	ldr	r3, [r7, #20]
 8002792:	|  |  |  |  |   1e5a      	subs	r2, r3, #1
 8002794:	|  |  |  |  |   617a      	str	r2, [r7, #20]
 8002796:	|  |  |  |  |   2b00      	cmp	r3, #0
 8002798:	|  |  |  \--|-- daf4      	bge.n	8002784 <I2C_Read_word_u24_St_ReSt+0xd0>
		if(timeout <= 0){
 800279a:	|  |  |     \-> 697b      	ldr	r3, [r7, #20]
 800279c:	|  |  |         2b00      	cmp	r3, #0
 800279e:	|  |  |     /-- dc01      	bgt.n	80027a4 <I2C_Read_word_u24_St_ReSt+0xf0>
			return ERROR;
 80027a0:	|  |  |     |   2301      	movs	r3, #1
 80027a2:	+--|--|-----|-- e085      	b.n	80028b0 <I2C_Read_word_u24_St_ReSt+0x1fc>
	for( i = size_reg_addr , j = size_reg_addr-1 ; i != 0; i--, j-- ){ //high byte is sent first
 80027a4:	|  |  |     \-> 7ffb      	ldrb	r3, [r7, #31]
 80027a6:	|  |  |         3b01      	subs	r3, #1
 80027a8:	|  |  |         77fb      	strb	r3, [r7, #31]
 80027aa:	|  |  |         f997 301e 	ldrsb.w	r3, [r7, #30]
 80027ae:	|  |  |         b2db      	uxtb	r3, r3
 80027b0:	|  |  |         3b01      	subs	r3, #1
 80027b2:	|  |  |         b2db      	uxtb	r3, r3
 80027b4:	|  |  |         77bb      	strb	r3, [r7, #30]
 80027b6:	|  |  \-------> 7ffb      	ldrb	r3, [r7, #31]
 80027b8:	|  |            2b00      	cmp	r3, #0
 80027ba:	|  \----------- d1d8      	bne.n	800276e <I2C_Read_word_u24_St_ReSt+0xba>
		// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_TXE) >> I2C_ISR_TXE_Pos, RESET) != SUCCESS){
		// 	return ERROR;
		// }
	}

	while(((I2Cx->ISR & I2C_ISR_TC) == RESET) && (timeout--) >= 0);
 80027bc:	|               bf00      	nop
 80027be:	|        /----> 68fb      	ldr	r3, [r7, #12]
 80027c0:	|        |      699b      	ldr	r3, [r3, #24]
 80027c2:	|        |      f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	|        |      2b00      	cmp	r3, #0
 80027c8:	|        |  /-- d104      	bne.n	80027d4 <I2C_Read_word_u24_St_ReSt+0x120>
 80027ca:	|        |  |   697b      	ldr	r3, [r7, #20]
 80027cc:	|        |  |   1e5a      	subs	r2, r3, #1
 80027ce:	|        |  |   617a      	str	r2, [r7, #20]
 80027d0:	|        |  |   2b00      	cmp	r3, #0
 80027d2:	|        \--|-- daf4      	bge.n	80027be <I2C_Read_word_u24_St_ReSt+0x10a>
	if(timeout <= 0){
 80027d4:	|           \-> 697b      	ldr	r3, [r7, #20]
 80027d6:	|               2b00      	cmp	r3, #0
 80027d8:	|           /-- dc01      	bgt.n	80027de <I2C_Read_word_u24_St_ReSt+0x12a>
		return ERROR;
 80027da:	|           |   2301      	movs	r3, #1
 80027dc:	+-----------|-- e068      	b.n	80028b0 <I2C_Read_word_u24_St_ReSt+0x1fc>
	}
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_TC) >> I2C_ISR_RXNE_Pos, RESET) != SUCCESS){
	// 	return ERROR;
	// }

	I2C_HandleTransfer(I2Cx, (uint32_t)dev_addr, I2C_ADDRSLAVE_7BIT, (uint32_t)3, I2C_MODE_AUTOEND, I2C_GENERATE_RESTART_7BIT_READ); //LL_I2C_MODE_SOFTEND
 80027de:	|           \-> 7af9      	ldrb	r1, [r7, #11]
 80027e0:	|               4b36      	ldr	r3, [pc, #216]	; (80028bc <I2C_Read_word_u24_St_ReSt+0x208>)
 80027e2:	|               9301      	str	r3, [sp, #4]
 80027e4:	|               f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e8:	|               9300      	str	r3, [sp, #0]
 80027ea:	|               2303      	movs	r3, #3
 80027ec:	|               2200      	movs	r2, #0
 80027ee:	|               68f8      	ldr	r0, [r7, #12]
 80027f0:	|               f7ff fd20 	bl	8002234 <I2C_HandleTransfer>

	while(((I2Cx->ISR & I2C_ISR_RXNE) == RESET) && (timeout--) >= 0);
 80027f4:	|               bf00      	nop
 80027f6:	|        /----> 68fb      	ldr	r3, [r7, #12]
 80027f8:	|        |      699b      	ldr	r3, [r3, #24]
 80027fa:	|        |      f003 0304 	and.w	r3, r3, #4
 80027fe:	|        |      2b00      	cmp	r3, #0
 8002800:	|        |  /-- d104      	bne.n	800280c <I2C_Read_word_u24_St_ReSt+0x158>
 8002802:	|        |  |   697b      	ldr	r3, [r7, #20]
 8002804:	|        |  |   1e5a      	subs	r2, r3, #1
 8002806:	|        |  |   617a      	str	r2, [r7, #20]
 8002808:	|        |  |   2b00      	cmp	r3, #0
 800280a:	|        \--|-- daf4      	bge.n	80027f6 <I2C_Read_word_u24_St_ReSt+0x142>
	if(timeout <= 0){
 800280c:	|           \-> 697b      	ldr	r3, [r7, #20]
 800280e:	|               2b00      	cmp	r3, #0
 8002810:	|           /-- dc01      	bgt.n	8002816 <I2C_Read_word_u24_St_ReSt+0x162>
		return ERROR;
 8002812:	|           |   2301      	movs	r3, #1
 8002814:	+-----------|-- e04c      	b.n	80028b0 <I2C_Read_word_u24_St_ReSt+0x1fc>
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_RXNE) >> I2C_ISR_RXNE_Pos, RESET) != SUCCESS){
	// 	return ERROR;
	// }

	//LL_I2C_AcknowledgeNextData(I2Cx, LL_I2C_ACK);
	high_byte = I2Cx->RXDR & 0xFF;
 8002816:	|           \-> 68fb      	ldr	r3, [r7, #12]
 8002818:	|               6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	|               777b      	strb	r3, [r7, #29]

	while(((I2Cx->ISR & I2C_ISR_RXNE) == RESET) && (timeout--) >= 0);
 800281c:	|               bf00      	nop
 800281e:	|        /----> 68fb      	ldr	r3, [r7, #12]
 8002820:	|        |      699b      	ldr	r3, [r3, #24]
 8002822:	|        |      f003 0304 	and.w	r3, r3, #4
 8002826:	|        |      2b00      	cmp	r3, #0
 8002828:	|        |  /-- d104      	bne.n	8002834 <I2C_Read_word_u24_St_ReSt+0x180>
 800282a:	|        |  |   697b      	ldr	r3, [r7, #20]
 800282c:	|        |  |   1e5a      	subs	r2, r3, #1
 800282e:	|        |  |   617a      	str	r2, [r7, #20]
 8002830:	|        |  |   2b00      	cmp	r3, #0
 8002832:	|        \--|-- daf4      	bge.n	800281e <I2C_Read_word_u24_St_ReSt+0x16a>
	if(timeout <= 0){
 8002834:	|           \-> 697b      	ldr	r3, [r7, #20]
 8002836:	|               2b00      	cmp	r3, #0
 8002838:	|           /-- dc01      	bgt.n	800283e <I2C_Read_word_u24_St_ReSt+0x18a>
		return ERROR;
 800283a:	|           |   2301      	movs	r3, #1
 800283c:	+-----------|-- e038      	b.n	80028b0 <I2C_Read_word_u24_St_ReSt+0x1fc>
	}
	mid_byte = I2Cx->RXDR & 0xFF;
 800283e:	|           \-> 68fb      	ldr	r3, [r7, #12]
 8002840:	|               6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	|               773b      	strb	r3, [r7, #28]

	while(((I2Cx->ISR & I2C_ISR_RXNE) == RESET) && (timeout--) >= 0);
 8002844:	|               bf00      	nop
 8002846:	|        /----> 68fb      	ldr	r3, [r7, #12]
 8002848:	|        |      699b      	ldr	r3, [r3, #24]
 800284a:	|        |      f003 0304 	and.w	r3, r3, #4
 800284e:	|        |      2b00      	cmp	r3, #0
 8002850:	|        |  /-- d104      	bne.n	800285c <I2C_Read_word_u24_St_ReSt+0x1a8>
 8002852:	|        |  |   697b      	ldr	r3, [r7, #20]
 8002854:	|        |  |   1e5a      	subs	r2, r3, #1
 8002856:	|        |  |   617a      	str	r2, [r7, #20]
 8002858:	|        |  |   2b00      	cmp	r3, #0
 800285a:	|        \--|-- daf4      	bge.n	8002846 <I2C_Read_word_u24_St_ReSt+0x192>
	if(timeout <= 0){
 800285c:	|           \-> 697b      	ldr	r3, [r7, #20]
 800285e:	|               2b00      	cmp	r3, #0
 8002860:	|           /-- dc01      	bgt.n	8002866 <I2C_Read_word_u24_St_ReSt+0x1b2>
		return ERROR;
 8002862:	|           |   2301      	movs	r3, #1
 8002864:	+-----------|-- e024      	b.n	80028b0 <I2C_Read_word_u24_St_ReSt+0x1fc>
	}
	low_byte = I2Cx->RXDR & 0xFF;
 8002866:	|           \-> 68fb      	ldr	r3, [r7, #12]
 8002868:	|               6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	|               76fb      	strb	r3, [r7, #27]

	while(((I2Cx->ISR & I2C_ISR_STOPF) == RESET) && (timeout--) >= 0);
 800286c:	|               bf00      	nop
 800286e:	|        /----> 68fb      	ldr	r3, [r7, #12]
 8002870:	|        |      699b      	ldr	r3, [r3, #24]
 8002872:	|        |      f003 0320 	and.w	r3, r3, #32
 8002876:	|        |      2b00      	cmp	r3, #0
 8002878:	|        |  /-- d104      	bne.n	8002884 <I2C_Read_word_u24_St_ReSt+0x1d0>
 800287a:	|        |  |   697b      	ldr	r3, [r7, #20]
 800287c:	|        |  |   1e5a      	subs	r2, r3, #1
 800287e:	|        |  |   617a      	str	r2, [r7, #20]
 8002880:	|        |  |   2b00      	cmp	r3, #0
 8002882:	|        \--|-- daf4      	bge.n	800286e <I2C_Read_word_u24_St_ReSt+0x1ba>
	if(timeout <= 0){
 8002884:	|           \-> 697b      	ldr	r3, [r7, #20]
 8002886:	|               2b00      	cmp	r3, #0
 8002888:	|           /-- dc01      	bgt.n	800288e <I2C_Read_word_u24_St_ReSt+0x1da>
		return ERROR;
 800288a:	|           |   2301      	movs	r3, #1
 800288c:	+-----------|-- e010      	b.n	80028b0 <I2C_Read_word_u24_St_ReSt+0x1fc>
	//LL_I2C_GenerateStopCondition(I2Cx);
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_STOPF) >> I2C_ISR_STOPF_Pos, RESET) != SUCCESS){
	// 	return ERROR;
	// }

	I2Cx->ICR |= I2C_ICR_STOPCF;
 800288e:	|           \-> 68fb      	ldr	r3, [r7, #12]
 8002890:	|               69db      	ldr	r3, [r3, #28]
 8002892:	|               f043 0220 	orr.w	r2, r3, #32
 8002896:	|               68fb      	ldr	r3, [r7, #12]
 8002898:	|               61da      	str	r2, [r3, #28]

	*data = (uint32_t)( ( high_byte  << 16 ) | ( mid_byte  << 8 ) | low_byte );
 800289a:	|               7f7b      	ldrb	r3, [r7, #29]
 800289c:	|               041a      	lsls	r2, r3, #16
 800289e:	|               7f3b      	ldrb	r3, [r7, #28]
 80028a0:	|               021b      	lsls	r3, r3, #8
 80028a2:	|               431a      	orrs	r2, r3
 80028a4:	|               7efb      	ldrb	r3, [r7, #27]
 80028a6:	|               4313      	orrs	r3, r2
 80028a8:	|               461a      	mov	r2, r3
 80028aa:	|               6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	|               601a      	str	r2, [r3, #0]

	return SUCCESS;
 80028ae:	|               2300      	movs	r3, #0
}
 80028b0:	\-------------> 4618      	mov	r0, r3
 80028b2:	                3720      	adds	r7, #32
 80028b4:	                46bd      	mov	sp, r7
 80028b6:	                bd80      	pop	{r7, pc}
 80028b8:	                2000      	movs	r0, #0
 80028ba:	                8000      	strh	r0, [r0, #0]
 80028bc:	                2400      	movs	r4, #0
 80028be:	                8000      	strh	r0, [r0, #0]

080028c0 <I2C_Write_word_u16_St>:
				reg_addr = U32 	-> 	size_reg_addr = I2C_SIZE_REG_ADDR_U32
	@param 	reg_addr - 8,16,24,32-bit Registry address on the remote device
	@param  data - uint16_t data to be writing
	@retval 0 - SUCCESS, -1 - ERROR
*/
ErrorStatus I2C_Write_word_u16_St(I2C_TypeDef *I2Cx, uint8_t dev_addr, uint8_t size_reg_addr, uint32_t reg_addr, uint16_t data){
 80028c0:	                b580      	push	{r7, lr}
 80028c2:	                b088      	sub	sp, #32
 80028c4:	                af02      	add	r7, sp, #8
 80028c6:	                60f8      	str	r0, [r7, #12]
 80028c8:	                607b      	str	r3, [r7, #4]
 80028ca:	                460b      	mov	r3, r1
 80028cc:	                72fb      	strb	r3, [r7, #11]
 80028ce:	                4613      	mov	r3, r2
 80028d0:	                72bb      	strb	r3, [r7, #10]
	volatile int32_t timeout = I2C_TIMEOUT;
 80028d2:	                f241 3388 	movw	r3, #5000	; 0x1388
 80028d6:	                613b      	str	r3, [r7, #16]
	if( size_reg_addr == 0 || size_reg_addr > 4 ){
 80028d8:	                7abb      	ldrb	r3, [r7, #10]
 80028da:	                2b00      	cmp	r3, #0
 80028dc:	         /----- d002      	beq.n	80028e4 <I2C_Write_word_u16_St+0x24>
 80028de:	         |      7abb      	ldrb	r3, [r7, #10]
 80028e0:	         |      2b04      	cmp	r3, #4
 80028e2:	         |  /-- d901      	bls.n	80028e8 <I2C_Write_word_u16_St+0x28>
		return ERROR;
 80028e4:	         \--|-> 2301      	movs	r3, #1
 80028e6:	/-----------|-- e0be      	b.n	8002a66 <I2C_Write_word_u16_St+0x1a6>
	}

	uint8_t low_byte = (uint8_t) data;
 80028e8:	|           \-> 8c3b      	ldrh	r3, [r7, #32]
 80028ea:	|               757b      	strb	r3, [r7, #21]
	uint8_t high_byte = (uint8_t)(data >> 8);
 80028ec:	|               8c3b      	ldrh	r3, [r7, #32]
 80028ee:	|               0a1b      	lsrs	r3, r3, #8
 80028f0:	|               b29b      	uxth	r3, r3
 80028f2:	|               753b      	strb	r3, [r7, #20]
	uint8_t i = 0;
 80028f4:	|               2300      	movs	r3, #0
 80028f6:	|               75fb      	strb	r3, [r7, #23]
	int8_t  j = 0;
 80028f8:	|               2300      	movs	r3, #0
 80028fa:	|               75bb      	strb	r3, [r7, #22]

	dev_addr = (uint8_t)(dev_addr << 1);
 80028fc:	|               7afb      	ldrb	r3, [r7, #11]
 80028fe:	|               005b      	lsls	r3, r3, #1
 8002900:	|               72fb      	strb	r3, [r7, #11]

	//Clear flags if the previous attempt to exchange was not successful.
	I2C_Clear_Error_Flags(I2Cx);
 8002902:	|               68f8      	ldr	r0, [r7, #12]
 8002904:	|               f7ff fcdc 	bl	80022c0 <I2C_Clear_Error_Flags>
	while(((I2Cx->ISR & I2C_ISR_BUSY) == SET) && (timeout--) >= 0);
 8002908:	|               bf00      	nop
 800290a:	|        /----> 68fb      	ldr	r3, [r7, #12]
 800290c:	|        |      699b      	ldr	r3, [r3, #24]
 800290e:	|        |      f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002912:	|        |      2b01      	cmp	r3, #1
 8002914:	|        |  /-- d104      	bne.n	8002920 <I2C_Write_word_u16_St+0x60>
 8002916:	|        |  |   693b      	ldr	r3, [r7, #16]
 8002918:	|        |  |   1e5a      	subs	r2, r3, #1
 800291a:	|        |  |   613a      	str	r2, [r7, #16]
 800291c:	|        |  |   2b00      	cmp	r3, #0
 800291e:	|        \--|-- daf4      	bge.n	800290a <I2C_Write_word_u16_St+0x4a>
	if(timeout <= 0){
 8002920:	|           \-> 693b      	ldr	r3, [r7, #16]
 8002922:	|               2b00      	cmp	r3, #0
 8002924:	|           /-- dc01      	bgt.n	800292a <I2C_Write_word_u16_St+0x6a>
		return ERROR;
 8002926:	|           |   2301      	movs	r3, #1
 8002928:	+-----------|-- e09d      	b.n	8002a66 <I2C_Write_word_u16_St+0x1a6>
	}
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_BUSY), SET) != SUCCESS){
	// 	return ERROR;
	// }

	I2C_HandleTransfer(I2Cx, (uint32_t)dev_addr, I2C_ADDRSLAVE_7BIT, (uint32_t)(size_reg_addr+2), I2C_MODE_AUTOEND , I2C_GENERATE_START_WRITE); ////LL_I2C_MODE_SOFTEND
 800292a:	|           \-> 7af9      	ldrb	r1, [r7, #11]
 800292c:	|               7abb      	ldrb	r3, [r7, #10]
 800292e:	|               3302      	adds	r3, #2
 8002930:	|               461a      	mov	r2, r3
 8002932:	|               4b4f      	ldr	r3, [pc, #316]	; (8002a70 <I2C_Write_word_u16_St+0x1b0>)
 8002934:	|               9301      	str	r3, [sp, #4]
 8002936:	|               f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800293a:	|               9300      	str	r3, [sp, #0]
 800293c:	|               4613      	mov	r3, r2
 800293e:	|               2200      	movs	r2, #0
 8002940:	|               68f8      	ldr	r0, [r7, #12]
 8002942:	|               f7ff fc77 	bl	8002234 <I2C_HandleTransfer>

	while(((I2Cx->ISR & I2C_ISR_TXE) == RESET) && (timeout--) >= 0);
 8002946:	|               bf00      	nop
 8002948:	|        /----> 68fb      	ldr	r3, [r7, #12]
 800294a:	|        |      699b      	ldr	r3, [r3, #24]
 800294c:	|        |      f003 0301 	and.w	r3, r3, #1
 8002950:	|        |      2b00      	cmp	r3, #0
 8002952:	|        |  /-- d104      	bne.n	800295e <I2C_Write_word_u16_St+0x9e>
 8002954:	|        |  |   693b      	ldr	r3, [r7, #16]
 8002956:	|        |  |   1e5a      	subs	r2, r3, #1
 8002958:	|        |  |   613a      	str	r2, [r7, #16]
 800295a:	|        |  |   2b00      	cmp	r3, #0
 800295c:	|        \--|-- daf4      	bge.n	8002948 <I2C_Write_word_u16_St+0x88>
	if(timeout <= 0){
 800295e:	|           \-> 693b      	ldr	r3, [r7, #16]
 8002960:	|               2b00      	cmp	r3, #0
 8002962:	|           /-- dc01      	bgt.n	8002968 <I2C_Write_word_u16_St+0xa8>
		return ERROR;
 8002964:	|           |   2301      	movs	r3, #1
 8002966:	+-----------|-- e07e      	b.n	8002a66 <I2C_Write_word_u16_St+0x1a6>
	}
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_TXE) >> I2C_ISR_TXE_Pos, RESET) != SUCCESS){
	// 	return ERROR;
	// }

	for( i = size_reg_addr , j = size_reg_addr-1 ; i != 0; i--, j-- ){ //high byte is sent first
 8002968:	|           \-> 7abb      	ldrb	r3, [r7, #10]
 800296a:	|               75fb      	strb	r3, [r7, #23]
 800296c:	|               7abb      	ldrb	r3, [r7, #10]
 800296e:	|               3b01      	subs	r3, #1
 8002970:	|               b2db      	uxtb	r3, r3
 8002972:	|               75bb      	strb	r3, [r7, #22]
 8002974:	|     /-------- e023      	b.n	80029be <I2C_Write_word_u16_St+0xfe>

		I2Cx->TXDR = (uint8_t)(reg_addr >> (j*8));
 8002976:	|  /--|-------> f997 3016 	ldrsb.w	r3, [r7, #22]
 800297a:	|  |  |         00db      	lsls	r3, r3, #3
 800297c:	|  |  |         687a      	ldr	r2, [r7, #4]
 800297e:	|  |  |         fa22 f303 	lsr.w	r3, r2, r3
 8002982:	|  |  |         b2db      	uxtb	r3, r3
 8002984:	|  |  |         461a      	mov	r2, r3
 8002986:	|  |  |         68fb      	ldr	r3, [r7, #12]
 8002988:	|  |  |         629a      	str	r2, [r3, #40]	; 0x28

		while(((I2Cx->ISR & I2C_ISR_TXE) == RESET) && (timeout--) >= 0);
 800298a:	|  |  |         bf00      	nop
 800298c:	|  |  |  /----> 68fb      	ldr	r3, [r7, #12]
 800298e:	|  |  |  |      699b      	ldr	r3, [r3, #24]
 8002990:	|  |  |  |      f003 0301 	and.w	r3, r3, #1
 8002994:	|  |  |  |      2b00      	cmp	r3, #0
 8002996:	|  |  |  |  /-- d104      	bne.n	80029a2 <I2C_Write_word_u16_St+0xe2>
 8002998:	|  |  |  |  |   693b      	ldr	r3, [r7, #16]
 800299a:	|  |  |  |  |   1e5a      	subs	r2, r3, #1
 800299c:	|  |  |  |  |   613a      	str	r2, [r7, #16]
 800299e:	|  |  |  |  |   2b00      	cmp	r3, #0
 80029a0:	|  |  |  \--|-- daf4      	bge.n	800298c <I2C_Write_word_u16_St+0xcc>
		if(timeout <= 0){
 80029a2:	|  |  |     \-> 693b      	ldr	r3, [r7, #16]
 80029a4:	|  |  |         2b00      	cmp	r3, #0
 80029a6:	|  |  |     /-- dc01      	bgt.n	80029ac <I2C_Write_word_u16_St+0xec>
			return ERROR;
 80029a8:	|  |  |     |   2301      	movs	r3, #1
 80029aa:	+--|--|-----|-- e05c      	b.n	8002a66 <I2C_Write_word_u16_St+0x1a6>
	for( i = size_reg_addr , j = size_reg_addr-1 ; i != 0; i--, j-- ){ //high byte is sent first
 80029ac:	|  |  |     \-> 7dfb      	ldrb	r3, [r7, #23]
 80029ae:	|  |  |         3b01      	subs	r3, #1
 80029b0:	|  |  |         75fb      	strb	r3, [r7, #23]
 80029b2:	|  |  |         f997 3016 	ldrsb.w	r3, [r7, #22]
 80029b6:	|  |  |         b2db      	uxtb	r3, r3
 80029b8:	|  |  |         3b01      	subs	r3, #1
 80029ba:	|  |  |         b2db      	uxtb	r3, r3
 80029bc:	|  |  |         75bb      	strb	r3, [r7, #22]
 80029be:	|  |  \-------> 7dfb      	ldrb	r3, [r7, #23]
 80029c0:	|  |            2b00      	cmp	r3, #0
 80029c2:	|  \----------- d1d8      	bne.n	8002976 <I2C_Write_word_u16_St+0xb6>
		// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_TXE) >> I2C_ISR_TXE_Pos, RESET) != SUCCESS){
		// 	return ERROR;
		// }
	}

	I2Cx->TXDR = high_byte;
 80029c4:	|               7d3a      	ldrb	r2, [r7, #20]
 80029c6:	|               68fb      	ldr	r3, [r7, #12]
 80029c8:	|               629a      	str	r2, [r3, #40]	; 0x28
	while(((I2Cx->ISR & I2C_ISR_TXE) == RESET) && (timeout--) >= 0);
 80029ca:	|               bf00      	nop
 80029cc:	|        /----> 68fb      	ldr	r3, [r7, #12]
 80029ce:	|        |      699b      	ldr	r3, [r3, #24]
 80029d0:	|        |      f003 0301 	and.w	r3, r3, #1
 80029d4:	|        |      2b00      	cmp	r3, #0
 80029d6:	|        |  /-- d104      	bne.n	80029e2 <I2C_Write_word_u16_St+0x122>
 80029d8:	|        |  |   693b      	ldr	r3, [r7, #16]
 80029da:	|        |  |   1e5a      	subs	r2, r3, #1
 80029dc:	|        |  |   613a      	str	r2, [r7, #16]
 80029de:	|        |  |   2b00      	cmp	r3, #0
 80029e0:	|        \--|-- daf4      	bge.n	80029cc <I2C_Write_word_u16_St+0x10c>
	if(timeout <= 0){
 80029e2:	|           \-> 693b      	ldr	r3, [r7, #16]
 80029e4:	|               2b00      	cmp	r3, #0
 80029e6:	|           /-- dc01      	bgt.n	80029ec <I2C_Write_word_u16_St+0x12c>
		return ERROR;
 80029e8:	|           |   2301      	movs	r3, #1
 80029ea:	+-----------|-- e03c      	b.n	8002a66 <I2C_Write_word_u16_St+0x1a6>
	}
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_TXE) >> I2C_ISR_TXE_Pos, RESET) != SUCCESS){
	// 	return ERROR;
	// }

	I2Cx->TXDR = low_byte;
 80029ec:	|           \-> 7d7a      	ldrb	r2, [r7, #21]
 80029ee:	|               68fb      	ldr	r3, [r7, #12]
 80029f0:	|               629a      	str	r2, [r3, #40]	; 0x28
	while(((I2Cx->ISR & I2C_ISR_TXE) == RESET) && (timeout--) >= 0);
 80029f2:	|               bf00      	nop
 80029f4:	|        /----> 68fb      	ldr	r3, [r7, #12]
 80029f6:	|        |      699b      	ldr	r3, [r3, #24]
 80029f8:	|        |      f003 0301 	and.w	r3, r3, #1
 80029fc:	|        |      2b00      	cmp	r3, #0
 80029fe:	|        |  /-- d104      	bne.n	8002a0a <I2C_Write_word_u16_St+0x14a>
 8002a00:	|        |  |   693b      	ldr	r3, [r7, #16]
 8002a02:	|        |  |   1e5a      	subs	r2, r3, #1
 8002a04:	|        |  |   613a      	str	r2, [r7, #16]
 8002a06:	|        |  |   2b00      	cmp	r3, #0
 8002a08:	|        \--|-- daf4      	bge.n	80029f4 <I2C_Write_word_u16_St+0x134>
	if(timeout <= 0){
 8002a0a:	|           \-> 693b      	ldr	r3, [r7, #16]
 8002a0c:	|               2b00      	cmp	r3, #0
 8002a0e:	|           /-- dc01      	bgt.n	8002a14 <I2C_Write_word_u16_St+0x154>
		return ERROR;
 8002a10:	|           |   2301      	movs	r3, #1
 8002a12:	+-----------|-- e028      	b.n	8002a66 <I2C_Write_word_u16_St+0x1a6>
	}
	while(((I2Cx->ISR & I2C_ISR_TXE) == RESET) && (timeout--) >= 0);
 8002a14:	|           \-> bf00      	nop
 8002a16:	|        /----> 68fb      	ldr	r3, [r7, #12]
 8002a18:	|        |      699b      	ldr	r3, [r3, #24]
 8002a1a:	|        |      f003 0301 	and.w	r3, r3, #1
 8002a1e:	|        |      2b00      	cmp	r3, #0
 8002a20:	|        |  /-- d104      	bne.n	8002a2c <I2C_Write_word_u16_St+0x16c>
 8002a22:	|        |  |   693b      	ldr	r3, [r7, #16]
 8002a24:	|        |  |   1e5a      	subs	r2, r3, #1
 8002a26:	|        |  |   613a      	str	r2, [r7, #16]
 8002a28:	|        |  |   2b00      	cmp	r3, #0
 8002a2a:	|        \--|-- daf4      	bge.n	8002a16 <I2C_Write_word_u16_St+0x156>
	if(timeout <= 0){
 8002a2c:	|           \-> 693b      	ldr	r3, [r7, #16]
 8002a2e:	|               2b00      	cmp	r3, #0
 8002a30:	|           /-- dc01      	bgt.n	8002a36 <I2C_Write_word_u16_St+0x176>
		return ERROR;
 8002a32:	|           |   2301      	movs	r3, #1
 8002a34:	+-----------|-- e017      	b.n	8002a66 <I2C_Write_word_u16_St+0x1a6>
	// if(timeout <= 0){
	// 	return ERROR;
	// }

	//LL_I2C_GenerateStopCondition(I2Cx);
	while(((I2Cx->ISR & I2C_ISR_STOPF) == RESET) && (timeout--) >= 0);
 8002a36:	|           \-> bf00      	nop
 8002a38:	|        /----> 68fb      	ldr	r3, [r7, #12]
 8002a3a:	|        |      699b      	ldr	r3, [r3, #24]
 8002a3c:	|        |      f003 0320 	and.w	r3, r3, #32
 8002a40:	|        |      2b00      	cmp	r3, #0
 8002a42:	|        |  /-- d104      	bne.n	8002a4e <I2C_Write_word_u16_St+0x18e>
 8002a44:	|        |  |   693b      	ldr	r3, [r7, #16]
 8002a46:	|        |  |   1e5a      	subs	r2, r3, #1
 8002a48:	|        |  |   613a      	str	r2, [r7, #16]
 8002a4a:	|        |  |   2b00      	cmp	r3, #0
 8002a4c:	|        \--|-- daf4      	bge.n	8002a38 <I2C_Write_word_u16_St+0x178>
	if(timeout <= 0){
 8002a4e:	|           \-> 693b      	ldr	r3, [r7, #16]
 8002a50:	|               2b00      	cmp	r3, #0
 8002a52:	|           /-- dc01      	bgt.n	8002a58 <I2C_Write_word_u16_St+0x198>
		return ERROR;
 8002a54:	|           |   2301      	movs	r3, #1
 8002a56:	+-----------|-- e006      	b.n	8002a66 <I2C_Write_word_u16_St+0x1a6>
	}
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_STOPF) >> I2C_ISR_TXE_Pos, RESET) != SUCCESS){
	// 	return ERROR;
	// }

	I2Cx->ICR |= I2C_ICR_STOPCF;
 8002a58:	|           \-> 68fb      	ldr	r3, [r7, #12]
 8002a5a:	|               69db      	ldr	r3, [r3, #28]
 8002a5c:	|               f043 0220 	orr.w	r2, r3, #32
 8002a60:	|               68fb      	ldr	r3, [r7, #12]
 8002a62:	|               61da      	str	r2, [r3, #28]

	return SUCCESS;
 8002a64:	|               2300      	movs	r3, #0
}
 8002a66:	\-------------> 4618      	mov	r0, r3
 8002a68:	                3718      	adds	r7, #24
 8002a6a:	                46bd      	mov	sp, r7
 8002a6c:	                bd80      	pop	{r7, pc}
 8002a6e:	                bf00      	nop
 8002a70:	                2000      	movs	r0, #0
 8002a72:	                8000      	strh	r0, [r0, #0]

08002a74 <I2C_Write_byte_St>:

ErrorStatus I2C_Write_byte_St(I2C_TypeDef *I2Cx, uint8_t dev_addr, uint8_t size_reg_addr, uint32_t reg_addr, uint8_t data){
 8002a74:	                b580      	push	{r7, lr}
 8002a76:	                b088      	sub	sp, #32
 8002a78:	                af02      	add	r7, sp, #8
 8002a7a:	                60f8      	str	r0, [r7, #12]
 8002a7c:	                607b      	str	r3, [r7, #4]
 8002a7e:	                460b      	mov	r3, r1
 8002a80:	                72fb      	strb	r3, [r7, #11]
 8002a82:	                4613      	mov	r3, r2
 8002a84:	                72bb      	strb	r3, [r7, #10]
	volatile int32_t timeout = I2C_TIMEOUT;
 8002a86:	                f241 3388 	movw	r3, #5000	; 0x1388
 8002a8a:	                613b      	str	r3, [r7, #16]
	if( size_reg_addr == 0 || size_reg_addr > 4 ){
 8002a8c:	                7abb      	ldrb	r3, [r7, #10]
 8002a8e:	                2b00      	cmp	r3, #0
 8002a90:	         /----- d002      	beq.n	8002a98 <I2C_Write_byte_St+0x24>
 8002a92:	         |      7abb      	ldrb	r3, [r7, #10]
 8002a94:	         |      2b04      	cmp	r3, #4
 8002a96:	         |  /-- d901      	bls.n	8002a9c <I2C_Write_byte_St+0x28>
		return ERROR;
 8002a98:	         \--|-> 2301      	movs	r3, #1
 8002a9a:	/-----------|-- e09a      	b.n	8002bd2 <I2C_Write_byte_St+0x15e>
	}

	uint8_t i = 0;
 8002a9c:	|           \-> 2300      	movs	r3, #0
 8002a9e:	|               75fb      	strb	r3, [r7, #23]
	int8_t  j = 0;
 8002aa0:	|               2300      	movs	r3, #0
 8002aa2:	|               75bb      	strb	r3, [r7, #22]

	dev_addr = (uint8_t)(dev_addr << 1);
 8002aa4:	|               7afb      	ldrb	r3, [r7, #11]
 8002aa6:	|               005b      	lsls	r3, r3, #1
 8002aa8:	|               72fb      	strb	r3, [r7, #11]

	//Clear flags if the previous attempt to exchange was not successful.
	I2C_Clear_Error_Flags(I2Cx);
 8002aaa:	|               68f8      	ldr	r0, [r7, #12]
 8002aac:	|               f7ff fc08 	bl	80022c0 <I2C_Clear_Error_Flags>
	while(((I2Cx->ISR & I2C_ISR_BUSY) == SET) && (timeout--) >= 0);
 8002ab0:	|               bf00      	nop
 8002ab2:	|        /----> 68fb      	ldr	r3, [r7, #12]
 8002ab4:	|        |      699b      	ldr	r3, [r3, #24]
 8002ab6:	|        |      f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aba:	|        |      2b01      	cmp	r3, #1
 8002abc:	|        |  /-- d104      	bne.n	8002ac8 <I2C_Write_byte_St+0x54>
 8002abe:	|        |  |   693b      	ldr	r3, [r7, #16]
 8002ac0:	|        |  |   1e5a      	subs	r2, r3, #1
 8002ac2:	|        |  |   613a      	str	r2, [r7, #16]
 8002ac4:	|        |  |   2b00      	cmp	r3, #0
 8002ac6:	|        \--|-- daf4      	bge.n	8002ab2 <I2C_Write_byte_St+0x3e>
	if(timeout <= 0){
 8002ac8:	|           \-> 693b      	ldr	r3, [r7, #16]
 8002aca:	|               2b00      	cmp	r3, #0
 8002acc:	|           /-- dc01      	bgt.n	8002ad2 <I2C_Write_byte_St+0x5e>
		return ERROR;
 8002ace:	|           |   2301      	movs	r3, #1
 8002ad0:	+-----------|-- e07f      	b.n	8002bd2 <I2C_Write_byte_St+0x15e>
	}
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_BUSY), SET) != SUCCESS){
	// 	return ERROR;
	// }

	I2C_HandleTransfer(I2Cx, (uint32_t)dev_addr, I2C_ADDRSLAVE_7BIT, (uint32_t)(size_reg_addr+2), I2C_MODE_AUTOEND , I2C_GENERATE_START_WRITE); ////LL_I2C_MODE_SOFTEND
 8002ad2:	|           \-> 7af9      	ldrb	r1, [r7, #11]
 8002ad4:	|               7abb      	ldrb	r3, [r7, #10]
 8002ad6:	|               3302      	adds	r3, #2
 8002ad8:	|               461a      	mov	r2, r3
 8002ada:	|               4b40      	ldr	r3, [pc, #256]	; (8002bdc <I2C_Write_byte_St+0x168>)
 8002adc:	|               9301      	str	r3, [sp, #4]
 8002ade:	|               f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ae2:	|               9300      	str	r3, [sp, #0]
 8002ae4:	|               4613      	mov	r3, r2
 8002ae6:	|               2200      	movs	r2, #0
 8002ae8:	|               68f8      	ldr	r0, [r7, #12]
 8002aea:	|               f7ff fba3 	bl	8002234 <I2C_HandleTransfer>

	while(((I2Cx->ISR & I2C_ISR_TXE) == RESET) && (timeout--) >= 0);
 8002aee:	|               bf00      	nop
 8002af0:	|        /----> 68fb      	ldr	r3, [r7, #12]
 8002af2:	|        |      699b      	ldr	r3, [r3, #24]
 8002af4:	|        |      f003 0301 	and.w	r3, r3, #1
 8002af8:	|        |      2b00      	cmp	r3, #0
 8002afa:	|        |  /-- d104      	bne.n	8002b06 <I2C_Write_byte_St+0x92>
 8002afc:	|        |  |   693b      	ldr	r3, [r7, #16]
 8002afe:	|        |  |   1e5a      	subs	r2, r3, #1
 8002b00:	|        |  |   613a      	str	r2, [r7, #16]
 8002b02:	|        |  |   2b00      	cmp	r3, #0
 8002b04:	|        \--|-- daf4      	bge.n	8002af0 <I2C_Write_byte_St+0x7c>
	if(timeout <= 0){
 8002b06:	|           \-> 693b      	ldr	r3, [r7, #16]
 8002b08:	|               2b00      	cmp	r3, #0
 8002b0a:	|           /-- dc01      	bgt.n	8002b10 <I2C_Write_byte_St+0x9c>
		return ERROR;
 8002b0c:	|           |   2301      	movs	r3, #1
 8002b0e:	+-----------|-- e060      	b.n	8002bd2 <I2C_Write_byte_St+0x15e>
	}
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_TXE) >> I2C_ISR_TXE_Pos, RESET) != SUCCESS){
	// 	return ERROR;
	// }

	for( i = size_reg_addr , j = size_reg_addr-1 ; i != 0; i--, j-- ){ //high byte is sent first
 8002b10:	|           \-> 7abb      	ldrb	r3, [r7, #10]
 8002b12:	|               75fb      	strb	r3, [r7, #23]
 8002b14:	|               7abb      	ldrb	r3, [r7, #10]
 8002b16:	|               3b01      	subs	r3, #1
 8002b18:	|               b2db      	uxtb	r3, r3
 8002b1a:	|               75bb      	strb	r3, [r7, #22]
 8002b1c:	|     /-------- e023      	b.n	8002b66 <I2C_Write_byte_St+0xf2>

		I2Cx->TXDR = (uint8_t)(reg_addr >> (j*8));
 8002b1e:	|  /--|-------> f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b22:	|  |  |         00db      	lsls	r3, r3, #3
 8002b24:	|  |  |         687a      	ldr	r2, [r7, #4]
 8002b26:	|  |  |         fa22 f303 	lsr.w	r3, r2, r3
 8002b2a:	|  |  |         b2db      	uxtb	r3, r3
 8002b2c:	|  |  |         461a      	mov	r2, r3
 8002b2e:	|  |  |         68fb      	ldr	r3, [r7, #12]
 8002b30:	|  |  |         629a      	str	r2, [r3, #40]	; 0x28

		while(((I2Cx->ISR & I2C_ISR_TXE) == RESET) && (timeout--) >= 0);
 8002b32:	|  |  |         bf00      	nop
 8002b34:	|  |  |  /----> 68fb      	ldr	r3, [r7, #12]
 8002b36:	|  |  |  |      699b      	ldr	r3, [r3, #24]
 8002b38:	|  |  |  |      f003 0301 	and.w	r3, r3, #1
 8002b3c:	|  |  |  |      2b00      	cmp	r3, #0
 8002b3e:	|  |  |  |  /-- d104      	bne.n	8002b4a <I2C_Write_byte_St+0xd6>
 8002b40:	|  |  |  |  |   693b      	ldr	r3, [r7, #16]
 8002b42:	|  |  |  |  |   1e5a      	subs	r2, r3, #1
 8002b44:	|  |  |  |  |   613a      	str	r2, [r7, #16]
 8002b46:	|  |  |  |  |   2b00      	cmp	r3, #0
 8002b48:	|  |  |  \--|-- daf4      	bge.n	8002b34 <I2C_Write_byte_St+0xc0>
		if(timeout <= 0){
 8002b4a:	|  |  |     \-> 693b      	ldr	r3, [r7, #16]
 8002b4c:	|  |  |         2b00      	cmp	r3, #0
 8002b4e:	|  |  |     /-- dc01      	bgt.n	8002b54 <I2C_Write_byte_St+0xe0>
			return ERROR;
 8002b50:	|  |  |     |   2301      	movs	r3, #1
 8002b52:	+--|--|-----|-- e03e      	b.n	8002bd2 <I2C_Write_byte_St+0x15e>
	for( i = size_reg_addr , j = size_reg_addr-1 ; i != 0; i--, j-- ){ //high byte is sent first
 8002b54:	|  |  |     \-> 7dfb      	ldrb	r3, [r7, #23]
 8002b56:	|  |  |         3b01      	subs	r3, #1
 8002b58:	|  |  |         75fb      	strb	r3, [r7, #23]
 8002b5a:	|  |  |         f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b5e:	|  |  |         b2db      	uxtb	r3, r3
 8002b60:	|  |  |         3b01      	subs	r3, #1
 8002b62:	|  |  |         b2db      	uxtb	r3, r3
 8002b64:	|  |  |         75bb      	strb	r3, [r7, #22]
 8002b66:	|  |  \-------> 7dfb      	ldrb	r3, [r7, #23]
 8002b68:	|  |            2b00      	cmp	r3, #0
 8002b6a:	|  \----------- d1d8      	bne.n	8002b1e <I2C_Write_byte_St+0xaa>
		// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_TXE) >> I2C_ISR_TXE_Pos, RESET) != SUCCESS){
		// 	return ERROR;
		// }
	}

	I2Cx->TXDR = data;
 8002b6c:	|               f897 2020 	ldrb.w	r2, [r7, #32]
 8002b70:	|               68fb      	ldr	r3, [r7, #12]
 8002b72:	|               629a      	str	r2, [r3, #40]	; 0x28
	while(((I2Cx->ISR & I2C_ISR_TXE) == RESET) && (timeout--) >= 0);
 8002b74:	|               bf00      	nop
 8002b76:	|        /----> 68fb      	ldr	r3, [r7, #12]
 8002b78:	|        |      699b      	ldr	r3, [r3, #24]
 8002b7a:	|        |      f003 0301 	and.w	r3, r3, #1
 8002b7e:	|        |      2b00      	cmp	r3, #0
 8002b80:	|        |  /-- d104      	bne.n	8002b8c <I2C_Write_byte_St+0x118>
 8002b82:	|        |  |   693b      	ldr	r3, [r7, #16]
 8002b84:	|        |  |   1e5a      	subs	r2, r3, #1
 8002b86:	|        |  |   613a      	str	r2, [r7, #16]
 8002b88:	|        |  |   2b00      	cmp	r3, #0
 8002b8a:	|        \--|-- daf4      	bge.n	8002b76 <I2C_Write_byte_St+0x102>
	if(timeout <= 0){
 8002b8c:	|           \-> 693b      	ldr	r3, [r7, #16]
 8002b8e:	|               2b00      	cmp	r3, #0
 8002b90:	|           /-- dc01      	bgt.n	8002b96 <I2C_Write_byte_St+0x122>
		return ERROR;
 8002b92:	|           |   2301      	movs	r3, #1
 8002b94:	+-----------|-- e01d      	b.n	8002bd2 <I2C_Write_byte_St+0x15e>
	}
	//LL_I2C_GenerateStopCondition(I2Cx);
	I2Cx->CR2 |= I2C_CR2_STOP;
 8002b96:	|           \-> 68fb      	ldr	r3, [r7, #12]
 8002b98:	|               685b      	ldr	r3, [r3, #4]
 8002b9a:	|               f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002b9e:	|               68fb      	ldr	r3, [r7, #12]
 8002ba0:	|               605a      	str	r2, [r3, #4]
	while(((I2Cx->ISR & I2C_ISR_STOPF) == RESET) && (timeout--) >= 0);
 8002ba2:	|               bf00      	nop
 8002ba4:	|        /----> 68fb      	ldr	r3, [r7, #12]
 8002ba6:	|        |      699b      	ldr	r3, [r3, #24]
 8002ba8:	|        |      f003 0320 	and.w	r3, r3, #32
 8002bac:	|        |      2b00      	cmp	r3, #0
 8002bae:	|        |  /-- d104      	bne.n	8002bba <I2C_Write_byte_St+0x146>
 8002bb0:	|        |  |   693b      	ldr	r3, [r7, #16]
 8002bb2:	|        |  |   1e5a      	subs	r2, r3, #1
 8002bb4:	|        |  |   613a      	str	r2, [r7, #16]
 8002bb6:	|        |  |   2b00      	cmp	r3, #0
 8002bb8:	|        \--|-- daf4      	bge.n	8002ba4 <I2C_Write_byte_St+0x130>
	if(timeout <= 0){
 8002bba:	|           \-> 693b      	ldr	r3, [r7, #16]
 8002bbc:	|               2b00      	cmp	r3, #0
 8002bbe:	|           /-- dc01      	bgt.n	8002bc4 <I2C_Write_byte_St+0x150>
		return ERROR;
 8002bc0:	|           |   2301      	movs	r3, #1
 8002bc2:	+-----------|-- e006      	b.n	8002bd2 <I2C_Write_byte_St+0x15e>
	}
	// if(I2C_check_flag((I2Cx->ISR & I2C_ISR_STOPF) >> I2C_ISR_TXE_Pos, RESET) != SUCCESS){
	// 	return ERROR;
	// }

	I2Cx->ICR |= I2C_ICR_STOPCF;
 8002bc4:	|           \-> 68fb      	ldr	r3, [r7, #12]
 8002bc6:	|               69db      	ldr	r3, [r3, #28]
 8002bc8:	|               f043 0220 	orr.w	r2, r3, #32
 8002bcc:	|               68fb      	ldr	r3, [r7, #12]
 8002bce:	|               61da      	str	r2, [r3, #28]

	return SUCCESS;
 8002bd0:	|               2300      	movs	r3, #0
}
 8002bd2:	\-------------> 4618      	mov	r0, r3
 8002bd4:	                3718      	adds	r7, #24
 8002bd6:	                46bd      	mov	sp, r7
 8002bd8:	                bd80      	pop	{r7, pc}
 8002bda:	                bf00      	nop
 8002bdc:	                2000      	movs	r0, #0
 8002bde:	                8000      	strh	r0, [r0, #0]

08002be0 <OneWire_SendBit>:
//     if(counter == 0)
//         return 1;
//     return 0;
// }

uint8_t OneWire_SendBit(OneWire *ow, uint8_t data){
 8002be0:	       b480      	push	{r7}
 8002be2:	       b085      	sub	sp, #20
 8002be4:	       af00      	add	r7, sp, #0
 8002be6:	       6078      	str	r0, [r7, #4]
 8002be8:	       460b      	mov	r3, r1
 8002bea:	       70fb      	strb	r3, [r7, #3]
    if(ow->uart->ISR & USART_ISR_ORE) ow->uart->ICR |= USART_ICR_ORECF;
 8002bec:	       687b      	ldr	r3, [r7, #4]
 8002bee:	       681b      	ldr	r3, [r3, #0]
 8002bf0:	       69db      	ldr	r3, [r3, #28]
 8002bf2:	       f003 0308 	and.w	r3, r3, #8
 8002bf6:	       2b00      	cmp	r3, #0
 8002bf8:	   /-- d007      	beq.n	8002c0a <OneWire_SendBit+0x2a>
 8002bfa:	   |   687b      	ldr	r3, [r7, #4]
 8002bfc:	   |   681b      	ldr	r3, [r3, #0]
 8002bfe:	   |   6a1a      	ldr	r2, [r3, #32]
 8002c00:	   |   687b      	ldr	r3, [r7, #4]
 8002c02:	   |   681b      	ldr	r3, [r3, #0]
 8002c04:	   |   f042 0208 	orr.w	r2, r2, #8
 8002c08:	   |   621a      	str	r2, [r3, #32]
    if(ow->uart->ISR & USART_ISR_FE) ow->uart->ICR |= USART_ICR_FECF;
 8002c0a:	   \-> 687b      	ldr	r3, [r7, #4]
 8002c0c:	       681b      	ldr	r3, [r3, #0]
 8002c0e:	       69db      	ldr	r3, [r3, #28]
 8002c10:	       f003 0302 	and.w	r3, r3, #2
 8002c14:	       2b00      	cmp	r3, #0
 8002c16:	   /-- d007      	beq.n	8002c28 <OneWire_SendBit+0x48>
 8002c18:	   |   687b      	ldr	r3, [r7, #4]
 8002c1a:	   |   681b      	ldr	r3, [r3, #0]
 8002c1c:	   |   6a1a      	ldr	r2, [r3, #32]
 8002c1e:	   |   687b      	ldr	r3, [r7, #4]
 8002c20:	   |   681b      	ldr	r3, [r3, #0]
 8002c22:	   |   f042 0202 	orr.w	r2, r2, #2
 8002c26:	   |   621a      	str	r2, [r3, #32]
    if(ow->uart->ISR & USART_ISR_NE) ow->uart->ICR |= USART_ICR_NECF;
 8002c28:	   \-> 687b      	ldr	r3, [r7, #4]
 8002c2a:	       681b      	ldr	r3, [r3, #0]
 8002c2c:	       69db      	ldr	r3, [r3, #28]
 8002c2e:	       f003 0304 	and.w	r3, r3, #4
 8002c32:	       2b00      	cmp	r3, #0
 8002c34:	   /-- d007      	beq.n	8002c46 <OneWire_SendBit+0x66>
 8002c36:	   |   687b      	ldr	r3, [r7, #4]
 8002c38:	   |   681b      	ldr	r3, [r3, #0]
 8002c3a:	   |   6a1a      	ldr	r2, [r3, #32]
 8002c3c:	   |   687b      	ldr	r3, [r7, #4]
 8002c3e:	   |   681b      	ldr	r3, [r3, #0]
 8002c40:	   |   f042 0204 	orr.w	r2, r2, #4
 8002c44:	   |   621a      	str	r2, [r3, #32]
	while(!(ow->uart->ISR & USART_ISR_TC));
 8002c46:	   \-> bf00      	nop
 8002c48:	   /-> 687b      	ldr	r3, [r7, #4]
 8002c4a:	   |   681b      	ldr	r3, [r3, #0]
 8002c4c:	   |   69db      	ldr	r3, [r3, #28]
 8002c4e:	   |   f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	   |   2b00      	cmp	r3, #0
 8002c54:	   \-- d0f8      	beq.n	8002c48 <OneWire_SendBit+0x68>
	ow->uart->TDR = (data == 1) ? OneWire_bit_1 : data;
 8002c56:	       78fb      	ldrb	r3, [r7, #3]
 8002c58:	       2b01      	cmp	r3, #1
 8002c5a:	/----- d002      	beq.n	8002c62 <OneWire_SendBit+0x82>
 8002c5c:	|      78fb      	ldrb	r3, [r7, #3]
 8002c5e:	|      b29a      	uxth	r2, r3
 8002c60:	|  /-- e000      	b.n	8002c64 <OneWire_SendBit+0x84>
 8002c62:	\--|-> 22ff      	movs	r2, #255	; 0xff
 8002c64:	   \-> 687b      	ldr	r3, [r7, #4]
 8002c66:	       681b      	ldr	r3, [r3, #0]
 8002c68:	       851a      	strh	r2, [r3, #40]	; 0x28
	while(!(ow->uart->ISR & USART_ISR_TC));
 8002c6a:	       bf00      	nop
 8002c6c:	   /-> 687b      	ldr	r3, [r7, #4]
 8002c6e:	   |   681b      	ldr	r3, [r3, #0]
 8002c70:	   |   69db      	ldr	r3, [r3, #28]
 8002c72:	   |   f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	   |   2b00      	cmp	r3, #0
 8002c78:	   \-- d0f8      	beq.n	8002c6c <OneWire_SendBit+0x8c>
	while(!(ow->uart->ISR & USART_ISR_RXNE));
 8002c7a:	       bf00      	nop
 8002c7c:	   /-> 687b      	ldr	r3, [r7, #4]
 8002c7e:	   |   681b      	ldr	r3, [r3, #0]
 8002c80:	   |   69db      	ldr	r3, [r3, #28]
 8002c82:	   |   f003 0320 	and.w	r3, r3, #32
 8002c86:	   |   2b00      	cmp	r3, #0
 8002c88:	   \-- d0f8      	beq.n	8002c7c <OneWire_SendBit+0x9c>
	uint8_t rx_data = ow->uart->RDR;
 8002c8a:	       687b      	ldr	r3, [r7, #4]
 8002c8c:	       681b      	ldr	r3, [r3, #0]
 8002c8e:	       8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c90:	       b29b      	uxth	r3, r3
 8002c92:	       73fb      	strb	r3, [r7, #15]
	return rx_data;
 8002c94:	       7bfb      	ldrb	r3, [r7, #15]
}
 8002c96:	       4618      	mov	r0, r3
 8002c98:	       3714      	adds	r7, #20
 8002c9a:	       46bd      	mov	sp, r7
 8002c9c:	       f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	       4770      	bx	lr

08002ca2 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire *ow){
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
    return OneWire_SendBit(ow, OneWire_read_bit) == OneWire_bit_1 ? 1 : 0;
 8002caa:	21ff      	movs	r1, #255	; 0xff
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ff97 	bl	8002be0 <OneWire_SendBit>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2bff      	cmp	r3, #255	; 0xff
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <OneWire_Reset>:

OneWireStatus OneWire_Reset(OneWire *ow){
 8002cc6:	       b580      	push	{r7, lr}
 8002cc8:	       b084      	sub	sp, #16
 8002cca:	       af00      	add	r7, sp, #0
 8002ccc:	       6078      	str	r0, [r7, #4]
    UART_init(ow->uart, 9600, HALF_DUPLEX);
 8002cce:	       687b      	ldr	r3, [r7, #4]
 8002cd0:	       681b      	ldr	r3, [r3, #0]
 8002cd2:	       2201      	movs	r2, #1
 8002cd4:	       f44f 5116 	mov.w	r1, #9600	; 0x2580
 8002cd8:	       4618      	mov	r0, r3
 8002cda:	       f002 fe5d 	bl	8005998 <UART_init>
    uint8_t answer = OneWire_SendBit(ow, OneWire_reset_cmd);
 8002cde:	       21f0      	movs	r1, #240	; 0xf0
 8002ce0:	       6878      	ldr	r0, [r7, #4]
 8002ce2:	       f7ff ff7d 	bl	8002be0 <OneWire_SendBit>
 8002ce6:	       4603      	mov	r3, r0
 8002ce8:	       73fb      	strb	r3, [r7, #15]
    UART_init(ow->uart, 115200, HALF_DUPLEX);
 8002cea:	       687b      	ldr	r3, [r7, #4]
 8002cec:	       681b      	ldr	r3, [r3, #0]
 8002cee:	       2201      	movs	r2, #1
 8002cf0:	       f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8002cf4:	       4618      	mov	r0, r3
 8002cf6:	       f002 fe4f 	bl	8005998 <UART_init>
    if(answer == OneWire_reset_cmd) return ONE_WIRE_EMPTY_BUS;
 8002cfa:	       7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	       2bf0      	cmp	r3, #240	; 0xf0
 8002cfe:	/----- d101      	bne.n	8002d04 <OneWire_Reset+0x3e>
 8002d00:	|      2301      	movs	r3, #1
 8002d02:	|  /-- e000      	b.n	8002d06 <OneWire_Reset+0x40>
    return ONE_WIRE_OK;
 8002d04:	\--|-> 2300      	movs	r3, #0
}
 8002d06:	   \-> 4618      	mov	r0, r3
 8002d08:	       3710      	adds	r7, #16
 8002d0a:	       46bd      	mov	sp, r7
 8002d0c:	       bd80      	pop	{r7, pc}

08002d0e <OneWire_Read>:

uint8_t OneWire_Read(OneWire *ow){
 8002d0e:	       b580      	push	{r7, lr}
 8002d10:	       b084      	sub	sp, #16
 8002d12:	       af00      	add	r7, sp, #0
 8002d14:	       6078      	str	r0, [r7, #4]
    uint8_t buffer = 0;
 8002d16:	       2300      	movs	r3, #0
 8002d18:	       73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < 8; i++){
 8002d1a:	       2300      	movs	r3, #0
 8002d1c:	       73bb      	strb	r3, [r7, #14]
 8002d1e:	   /-- e010      	b.n	8002d42 <OneWire_Read+0x34>
        buffer |= OneWire_ReadBit(ow) << i;
 8002d20:	/--|-> 6878      	ldr	r0, [r7, #4]
 8002d22:	|  |   f7ff ffbe 	bl	8002ca2 <OneWire_ReadBit>
 8002d26:	|  |   4603      	mov	r3, r0
 8002d28:	|  |   461a      	mov	r2, r3
 8002d2a:	|  |   7bbb      	ldrb	r3, [r7, #14]
 8002d2c:	|  |   fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	|  |   b25a      	sxtb	r2, r3
 8002d32:	|  |   f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d36:	|  |   4313      	orrs	r3, r2
 8002d38:	|  |   b25b      	sxtb	r3, r3
 8002d3a:	|  |   73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < 8; i++){
 8002d3c:	|  |   7bbb      	ldrb	r3, [r7, #14]
 8002d3e:	|  |   3301      	adds	r3, #1
 8002d40:	|  |   73bb      	strb	r3, [r7, #14]
 8002d42:	|  \-> 7bbb      	ldrb	r3, [r7, #14]
 8002d44:	|      2b07      	cmp	r3, #7
 8002d46:	\----- d9eb      	bls.n	8002d20 <OneWire_Read+0x12>
    }
    return buffer;
 8002d48:	       7bfb      	ldrb	r3, [r7, #15]
}
 8002d4a:	       4618      	mov	r0, r3
 8002d4c:	       3710      	adds	r7, #16
 8002d4e:	       46bd      	mov	sp, r7
 8002d50:	       bd80      	pop	{r7, pc}

08002d52 <OneWire_ReadArray>:

void OneWire_ReadArray(OneWire *ow, uint8_t *array, uint8_t length){
 8002d52:	       b590      	push	{r4, r7, lr}
 8002d54:	       b087      	sub	sp, #28
 8002d56:	       af00      	add	r7, sp, #0
 8002d58:	       60f8      	str	r0, [r7, #12]
 8002d5a:	       60b9      	str	r1, [r7, #8]
 8002d5c:	       4613      	mov	r3, r2
 8002d5e:	       71fb      	strb	r3, [r7, #7]
    for(uint8_t i = 0; i < length; i++){
 8002d60:	       2300      	movs	r3, #0
 8002d62:	       75fb      	strb	r3, [r7, #23]
 8002d64:	   /-- e00a      	b.n	8002d7c <OneWire_ReadArray+0x2a>
        array[i] = OneWire_Read(ow);
 8002d66:	/--|-> 7dfb      	ldrb	r3, [r7, #23]
 8002d68:	|  |   68ba      	ldr	r2, [r7, #8]
 8002d6a:	|  |   18d4      	adds	r4, r2, r3
 8002d6c:	|  |   68f8      	ldr	r0, [r7, #12]
 8002d6e:	|  |   f7ff ffce 	bl	8002d0e <OneWire_Read>
 8002d72:	|  |   4603      	mov	r3, r0
 8002d74:	|  |   7023      	strb	r3, [r4, #0]
    for(uint8_t i = 0; i < length; i++){
 8002d76:	|  |   7dfb      	ldrb	r3, [r7, #23]
 8002d78:	|  |   3301      	adds	r3, #1
 8002d7a:	|  |   75fb      	strb	r3, [r7, #23]
 8002d7c:	|  \-> 7dfa      	ldrb	r2, [r7, #23]
 8002d7e:	|      79fb      	ldrb	r3, [r7, #7]
 8002d80:	|      429a      	cmp	r2, r3
 8002d82:	\----- d3f0      	bcc.n	8002d66 <OneWire_ReadArray+0x14>
    }
}
 8002d84:	       bf00      	nop
 8002d86:	       bf00      	nop
 8002d88:	       371c      	adds	r7, #28
 8002d8a:	       46bd      	mov	sp, r7
 8002d8c:	       bd90      	pop	{r4, r7, pc}

08002d8e <OneWire_Write>:

uint8_t OneWire_Write(OneWire *ow, uint8_t byte){
 8002d8e:	       b580      	push	{r7, lr}
 8002d90:	       b084      	sub	sp, #16
 8002d92:	       af00      	add	r7, sp, #0
 8002d94:	       6078      	str	r0, [r7, #4]
 8002d96:	       460b      	mov	r3, r1
 8002d98:	       70fb      	strb	r3, [r7, #3]
    uint8_t buffer = 0;
 8002d9a:	       2300      	movs	r3, #0
 8002d9c:	       73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < 8; i++){
 8002d9e:	       2300      	movs	r3, #0
 8002da0:	       73bb      	strb	r3, [r7, #14]
 8002da2:	   /-- e01f      	b.n	8002de4 <OneWire_Write+0x56>
        // Полученное значение интерпретируем также: получили 0xFF - прочитали бит, равный 1.
        uint8_t next_bit = ((byte >> i) & 0x01);
 8002da4:	/--|-> 78fa      	ldrb	r2, [r7, #3]
 8002da6:	|  |   7bbb      	ldrb	r3, [r7, #14]
 8002da8:	|  |   fa42 f303 	asr.w	r3, r2, r3
 8002dac:	|  |   b2db      	uxtb	r3, r3
 8002dae:	|  |   f003 0301 	and.w	r3, r3, #1
 8002db2:	|  |   737b      	strb	r3, [r7, #13]
        buffer |= (OneWire_SendBit(ow, next_bit) == OneWire_bit_1 ? 1 : 0) << i;
 8002db4:	|  |   7b7b      	ldrb	r3, [r7, #13]
 8002db6:	|  |   4619      	mov	r1, r3
 8002db8:	|  |   6878      	ldr	r0, [r7, #4]
 8002dba:	|  |   f7ff ff11 	bl	8002be0 <OneWire_SendBit>
 8002dbe:	|  |   4603      	mov	r3, r0
 8002dc0:	|  |   2bff      	cmp	r3, #255	; 0xff
 8002dc2:	|  |   bf0c      	ite	eq
 8002dc4:	|  |   2301      	moveq	r3, #1
 8002dc6:	|  |   2300      	movne	r3, #0
 8002dc8:	|  |   b2db      	uxtb	r3, r3
 8002dca:	|  |   461a      	mov	r2, r3
 8002dcc:	|  |   7bbb      	ldrb	r3, [r7, #14]
 8002dce:	|  |   fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	|  |   b25a      	sxtb	r2, r3
 8002dd4:	|  |   f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd8:	|  |   4313      	orrs	r3, r2
 8002dda:	|  |   b25b      	sxtb	r3, r3
 8002ddc:	|  |   73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < 8; i++){
 8002dde:	|  |   7bbb      	ldrb	r3, [r7, #14]
 8002de0:	|  |   3301      	adds	r3, #1
 8002de2:	|  |   73bb      	strb	r3, [r7, #14]
 8002de4:	|  \-> 7bbb      	ldrb	r3, [r7, #14]
 8002de6:	|      2b07      	cmp	r3, #7
 8002de8:	\----- d9dc      	bls.n	8002da4 <OneWire_Write+0x16>
    }
    return buffer;
 8002dea:	       7bfb      	ldrb	r3, [r7, #15]
}
 8002dec:	       4618      	mov	r0, r3
 8002dee:	       3710      	adds	r7, #16
 8002df0:	       46bd      	mov	sp, r7
 8002df2:	       bd80      	pop	{r7, pc}

08002df4 <OneWire_WriteArray>:

void OneWire_WriteArray(OneWire *ow, uint8_t *array, uint8_t length){
 8002df4:	       b580      	push	{r7, lr}
 8002df6:	       b086      	sub	sp, #24
 8002df8:	       af00      	add	r7, sp, #0
 8002dfa:	       60f8      	str	r0, [r7, #12]
 8002dfc:	       60b9      	str	r1, [r7, #8]
 8002dfe:	       4613      	mov	r3, r2
 8002e00:	       71fb      	strb	r3, [r7, #7]
    for(uint8_t i = 0; i < length; i++){
 8002e02:	       2300      	movs	r3, #0
 8002e04:	       75fb      	strb	r3, [r7, #23]
 8002e06:	   /-- e00a      	b.n	8002e1e <OneWire_WriteArray+0x2a>
        OneWire_Write(ow, array[i]);
 8002e08:	/--|-> 7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	|  |   68ba      	ldr	r2, [r7, #8]
 8002e0c:	|  |   4413      	add	r3, r2
 8002e0e:	|  |   781b      	ldrb	r3, [r3, #0]
 8002e10:	|  |   4619      	mov	r1, r3
 8002e12:	|  |   68f8      	ldr	r0, [r7, #12]
 8002e14:	|  |   f7ff ffbb 	bl	8002d8e <OneWire_Write>
    for(uint8_t i = 0; i < length; i++){
 8002e18:	|  |   7dfb      	ldrb	r3, [r7, #23]
 8002e1a:	|  |   3301      	adds	r3, #1
 8002e1c:	|  |   75fb      	strb	r3, [r7, #23]
 8002e1e:	|  \-> 7dfa      	ldrb	r2, [r7, #23]
 8002e20:	|      79fb      	ldrb	r3, [r7, #7]
 8002e22:	|      429a      	cmp	r2, r3
 8002e24:	\----- d3f0      	bcc.n	8002e08 <OneWire_WriteArray+0x14>
    }
}
 8002e26:	       bf00      	nop
 8002e28:	       bf00      	nop
 8002e2a:	       3718      	adds	r7, #24
 8002e2c:	       46bd      	mov	sp, r7
 8002e2e:	       bd80      	pop	{r7, pc}

08002e30 <OneWire_InitStruct>:

void OneWire_InitStruct(OneWire *ow) {
 8002e30:	             b480      	push	{r7}
 8002e32:	             b085      	sub	sp, #20
 8002e34:	             af00      	add	r7, sp, #0
 8002e36:	             6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MAXDEVICES_ON_THE_BUS; i++) {
 8002e38:	             2300      	movs	r3, #0
 8002e3a:	             73fb      	strb	r3, [r7, #15]
 8002e3c:	   /-------- e016      	b.n	8002e6c <OneWire_InitStruct+0x3c>
        uint8_t *r = (uint8_t *)(&ow->ids[i]);
 8002e3e:	/--|-------> 7bfb      	ldrb	r3, [r7, #15]
 8002e40:	|  |         00db      	lsls	r3, r3, #3
 8002e42:	|  |         687a      	ldr	r2, [r7, #4]
 8002e44:	|  |         4413      	add	r3, r2
 8002e46:	|  |         3304      	adds	r3, #4
 8002e48:	|  |         60bb      	str	r3, [r7, #8]
        for (uint8_t j = 0; j < 8; j++)
 8002e4a:	|  |         2300      	movs	r3, #0
 8002e4c:	|  |         73bb      	strb	r3, [r7, #14]
 8002e4e:	|  |     /-- e007      	b.n	8002e60 <OneWire_InitStruct+0x30>
            r[j] = 0;
 8002e50:	|  |  /--|-> 7bbb      	ldrb	r3, [r7, #14]
 8002e52:	|  |  |  |   68ba      	ldr	r2, [r7, #8]
 8002e54:	|  |  |  |   4413      	add	r3, r2
 8002e56:	|  |  |  |   2200      	movs	r2, #0
 8002e58:	|  |  |  |   701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++)
 8002e5a:	|  |  |  |   7bbb      	ldrb	r3, [r7, #14]
 8002e5c:	|  |  |  |   3301      	adds	r3, #1
 8002e5e:	|  |  |  |   73bb      	strb	r3, [r7, #14]
 8002e60:	|  |  |  \-> 7bbb      	ldrb	r3, [r7, #14]
 8002e62:	|  |  |      2b07      	cmp	r3, #7
 8002e64:	|  |  \----- d9f4      	bls.n	8002e50 <OneWire_InitStruct+0x20>
    for (uint8_t i = 0; i < MAXDEVICES_ON_THE_BUS; i++) {
 8002e66:	|  |         7bfb      	ldrb	r3, [r7, #15]
 8002e68:	|  |         3301      	adds	r3, #1
 8002e6a:	|  |         73fb      	strb	r3, [r7, #15]
 8002e6c:	|  \-------> 7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	|            2b13      	cmp	r3, #19
 8002e70:	\----------- d9e5      	bls.n	8002e3e <OneWire_InitStruct+0xe>
    }
    for (uint8_t i; i < 8; i++)
 8002e72:	         /-- e008      	b.n	8002e86 <OneWire_InitStruct+0x56>
        ow->lastROM[i] = 0x00;
 8002e74:	      /--|-> 7b7b      	ldrb	r3, [r7, #13]
 8002e76:	      |  |   687a      	ldr	r2, [r7, #4]
 8002e78:	      |  |   4413      	add	r3, r2
 8002e7a:	      |  |   2200      	movs	r2, #0
 8002e7c:	      |  |   f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    for (uint8_t i; i < 8; i++)
 8002e80:	      |  |   7b7b      	ldrb	r3, [r7, #13]
 8002e82:	      |  |   3301      	adds	r3, #1
 8002e84:	      |  |   737b      	strb	r3, [r7, #13]
 8002e86:	      |  \-> 7b7b      	ldrb	r3, [r7, #13]
 8002e88:	      |      2b07      	cmp	r3, #7
 8002e8a:	      \----- d9f3      	bls.n	8002e74 <OneWire_InitStruct+0x44>
    ow->last_diff_bit_position = 64;
 8002e8c:	             687b      	ldr	r3, [r7, #4]
 8002e8e:	             2240      	movs	r2, #64	; 0x40
 8002e90:	             f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

}
 8002e94:	             bf00      	nop
 8002e96:	             3714      	adds	r7, #20
 8002e98:	             46bd      	mov	sp, r7
 8002e9a:	             f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	             4770      	bx	lr

08002ea0 <hasNextRom>:
/*
 * return 1 if has got one more address
 * return 0 if hasn't
 * return -1 if error reading happened
 */
int8_t hasNextRom(OneWire *ow, uint8_t *ROM) {
 8002ea0:	                      b580      	push	{r7, lr}
 8002ea2:	                      b086      	sub	sp, #24
 8002ea4:	                      af00      	add	r7, sp, #0
 8002ea6:	                      6078      	str	r0, [r7, #4]
 8002ea8:	                      6039      	str	r1, [r7, #0]
    if (OneWire_Reset(ow) == ONE_WIRE_EMPTY_BUS) return 0;
 8002eaa:	                      6878      	ldr	r0, [r7, #4]
 8002eac:	                      f7ff ff0b 	bl	8002cc6 <OneWire_Reset>
 8002eb0:	                      4603      	mov	r3, r0
 8002eb2:	                      2b01      	cmp	r3, #1
 8002eb4:	                  /-- d101      	bne.n	8002eba <hasNextRom+0x1a>
 8002eb6:	                  |   2300      	movs	r3, #0
 8002eb8:	/-----------------|-- e091      	b.n	8002fde <hasNextRom+0x13e>
    OneWire_Write(ow, 0xF0);  // OneWire Search cmd
 8002eba:	|                 \-> 21f0      	movs	r1, #240	; 0xf0
 8002ebc:	|                     6878      	ldr	r0, [r7, #4]
 8002ebe:	|                     f7ff ff66 	bl	8002d8e <OneWire_Write>

    uint8_t bitNum = 0;
 8002ec2:	|                     2300      	movs	r3, #0
 8002ec4:	|                     75fb      	strb	r3, [r7, #23]
    int8_t zeroFork = -1;
 8002ec6:	|                     23ff      	movs	r3, #255	; 0xff
 8002ec8:	|                     75bb      	strb	r3, [r7, #22]
    while(bitNum < OneWire_ROM_ID_lenth){
 8002eca:	|     /-------------- e064      	b.n	8002f96 <hasNextRom+0xf6>
        uint8_t byteNum = bitNum >> 3;
 8002ecc:	|  /--|-------------> 7dfb      	ldrb	r3, [r7, #23]
 8002ece:	|  |  |               08db      	lsrs	r3, r3, #3
 8002ed0:	|  |  |               74fb      	strb	r3, [r7, #19]
        uint8_t *current_byte_in_rom = (ROM) + byteNum;
 8002ed2:	|  |  |               7cfb      	ldrb	r3, [r7, #19]
 8002ed4:	|  |  |               683a      	ldr	r2, [r7, #0]
 8002ed6:	|  |  |               4413      	add	r3, r2
 8002ed8:	|  |  |               60fb      	str	r3, [r7, #12]
        uint8_t cB, cmp_cB, searchDirection = 0;
 8002eda:	|  |  |               2300      	movs	r3, #0
 8002edc:	|  |  |               757b      	strb	r3, [r7, #21]
        cB = OneWire_ReadBit(ow);  // чтение прямого бита
 8002ede:	|  |  |               6878      	ldr	r0, [r7, #4]
 8002ee0:	|  |  |               f7ff fedf 	bl	8002ca2 <OneWire_ReadBit>
 8002ee4:	|  |  |               4603      	mov	r3, r0
 8002ee6:	|  |  |               72fb      	strb	r3, [r7, #11]
        cmp_cB = OneWire_ReadBit(ow);  // чтение комплементарного бита
 8002ee8:	|  |  |               6878      	ldr	r0, [r7, #4]
 8002eea:	|  |  |               f7ff feda 	bl	8002ca2 <OneWire_ReadBit>
 8002eee:	|  |  |               4603      	mov	r3, r0
 8002ef0:	|  |  |               72bb      	strb	r3, [r7, #10]
        if (cB != cmp_cB) searchDirection = cB;
 8002ef2:	|  |  |               7afa      	ldrb	r2, [r7, #11]
 8002ef4:	|  |  |               7abb      	ldrb	r3, [r7, #10]
 8002ef6:	|  |  |               429a      	cmp	r2, r3
 8002ef8:	|  |  |           /-- d002      	beq.n	8002f00 <hasNextRom+0x60>
 8002efa:	|  |  |           |   7afb      	ldrb	r3, [r7, #11]
 8002efc:	|  |  |           |   757b      	strb	r3, [r7, #21]
 8002efe:	|  |  |  /--------|-- e030      	b.n	8002f62 <hasNextRom+0xc2>
        else if (cB == cmp_cB && cB == 0) {  // коллизия
 8002f00:	|  |  |  |        \-> 7afa      	ldrb	r2, [r7, #11]
 8002f02:	|  |  |  |            7abb      	ldrb	r3, [r7, #10]
 8002f04:	|  |  |  |            429a      	cmp	r2, r3
 8002f06:	|  |  |  |  /-------- d129      	bne.n	8002f5c <hasNextRom+0xbc>
 8002f08:	|  |  |  |  |         7afb      	ldrb	r3, [r7, #11]
 8002f0a:	|  |  |  |  |         2b00      	cmp	r3, #0
 8002f0c:	|  |  |  |  +-------- d126      	bne.n	8002f5c <hasNextRom+0xbc>
            // в прошлой итерации выбрали левую ветку, а теперь при повторном проходе выбираем правую ветку
            if (bitNum == ow->last_diff_bit_position)
 8002f0e:	|  |  |  |  |         7dfa      	ldrb	r2, [r7, #23]
 8002f10:	|  |  |  |  |         687b      	ldr	r3, [r7, #4]
 8002f12:	|  |  |  |  |         f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002f16:	|  |  |  |  |         429a      	cmp	r2, r3
 8002f18:	|  |  |  |  |     /-- d102      	bne.n	8002f20 <hasNextRom+0x80>
                searchDirection = 1;
 8002f1a:	|  |  |  |  |     |   2301      	movs	r3, #1
 8002f1c:	|  |  |  |  |     |   757b      	strb	r3, [r7, #21]
 8002f1e:	|  |  |  |  |  /--|-- e017      	b.n	8002f50 <hasNextRom+0xb0>
            else if (bitNum > ow->last_diff_bit_position)  // в этой ветке еще не были, поэтому идем влево
 8002f20:	|  |  |  |  |  |  \-> 7dfa      	ldrb	r2, [r7, #23]
 8002f22:	|  |  |  |  |  |      687b      	ldr	r3, [r7, #4]
 8002f24:	|  |  |  |  |  |      f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002f28:	|  |  |  |  |  |      429a      	cmp	r2, r3
 8002f2a:	|  |  |  |  |  |  /-- dd02      	ble.n	8002f32 <hasNextRom+0x92>
                searchDirection = 0;
 8002f2c:	|  |  |  |  |  |  |   2300      	movs	r3, #0
 8002f2e:	|  |  |  |  |  |  |   757b      	strb	r3, [r7, #21]
 8002f30:	|  |  |  |  |  +--|-- e00e      	b.n	8002f50 <hasNextRom+0xb0>
            else  // пока не дошли до новой развилки searchDirection = ROM[STEP]
                searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> (bitNum & 0x07)) & 0x01);
 8002f32:	|  |  |  |  |  |  \-> 7cfb      	ldrb	r3, [r7, #19]
 8002f34:	|  |  |  |  |  |      687a      	ldr	r2, [r7, #4]
 8002f36:	|  |  |  |  |  |      4413      	add	r3, r2
 8002f38:	|  |  |  |  |  |      f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8002f3c:	|  |  |  |  |  |      461a      	mov	r2, r3
 8002f3e:	|  |  |  |  |  |      7dfb      	ldrb	r3, [r7, #23]
 8002f40:	|  |  |  |  |  |      f003 0307 	and.w	r3, r3, #7
 8002f44:	|  |  |  |  |  |      fa42 f303 	asr.w	r3, r2, r3
 8002f48:	|  |  |  |  |  |      b2db      	uxtb	r3, r3
 8002f4a:	|  |  |  |  |  |      f003 0301 	and.w	r3, r3, #1
 8002f4e:	|  |  |  |  |  |      757b      	strb	r3, [r7, #21]

            if (searchDirection == 0)  // запоминаем развилку, в которой поворачивали налево
 8002f50:	|  |  |  |  |  \----> 7d7b      	ldrb	r3, [r7, #21]
 8002f52:	|  |  |  |  |         2b00      	cmp	r3, #0
 8002f54:	|  |  |  +--|-------- d105      	bne.n	8002f62 <hasNextRom+0xc2>
                zeroFork = bitNum;
 8002f56:	|  |  |  |  |         7dfb      	ldrb	r3, [r7, #23]
 8002f58:	|  |  |  |  |         75bb      	strb	r3, [r7, #22]
            if (searchDirection == 0)  // запоминаем развилку, в которой поворачивали налево
 8002f5a:	|  |  |  +--|-------- e002      	b.n	8002f62 <hasNextRom+0xc2>
            // else повернули на развилке вправо
        }
        else return -1;  // empty bus or algorythm issue  cB == cmp_cB && cB == 1
 8002f5c:	|  |  |  |  \-------> f04f 33ff 	mov.w	r3, #4294967295
 8002f60:	+--|--|--|----------- e03d      	b.n	8002fde <hasNextRom+0x13e>

        if (searchDirection)
 8002f62:	|  |  |  \----------> 7d7b      	ldrb	r3, [r7, #21]
 8002f64:	|  |  |               2b00      	cmp	r3, #0
 8002f66:	|  |  |           /-- d00e      	beq.n	8002f86 <hasNextRom+0xe6>
            *(current_byte_in_rom) |= 1 << (bitNum & 0x07); // сохраняем бит
 8002f68:	|  |  |           |   68fb      	ldr	r3, [r7, #12]
 8002f6a:	|  |  |           |   781b      	ldrb	r3, [r3, #0]
 8002f6c:	|  |  |           |   b25a      	sxtb	r2, r3
 8002f6e:	|  |  |           |   7dfb      	ldrb	r3, [r7, #23]
 8002f70:	|  |  |           |   f003 0307 	and.w	r3, r3, #7
 8002f74:	|  |  |           |   2101      	movs	r1, #1
 8002f76:	|  |  |           |   fa01 f303 	lsl.w	r3, r1, r3
 8002f7a:	|  |  |           |   b25b      	sxtb	r3, r3
 8002f7c:	|  |  |           |   4313      	orrs	r3, r2
 8002f7e:	|  |  |           |   b25b      	sxtb	r3, r3
 8002f80:	|  |  |           |   b2da      	uxtb	r2, r3
 8002f82:	|  |  |           |   68fb      	ldr	r3, [r7, #12]
 8002f84:	|  |  |           |   701a      	strb	r2, [r3, #0]
        OneWire_SendBit(ow, searchDirection);
 8002f86:	|  |  |           \-> 7d7b      	ldrb	r3, [r7, #21]
 8002f88:	|  |  |               4619      	mov	r1, r3
 8002f8a:	|  |  |               6878      	ldr	r0, [r7, #4]
 8002f8c:	|  |  |               f7ff fe28 	bl	8002be0 <OneWire_SendBit>
        bitNum++;
 8002f90:	|  |  |               7dfb      	ldrb	r3, [r7, #23]
 8002f92:	|  |  |               3301      	adds	r3, #1
 8002f94:	|  |  |               75fb      	strb	r3, [r7, #23]
    while(bitNum < OneWire_ROM_ID_lenth){
 8002f96:	|  |  \-------------> 7dfb      	ldrb	r3, [r7, #23]
 8002f98:	|  |                  2b3f      	cmp	r3, #63	; 0x3f
 8002f9a:	|  \----------------- d997      	bls.n	8002ecc <hasNextRom+0x2c>
    }
    ow->last_diff_bit_position = zeroFork;
 8002f9c:	|                     f997 2016 	ldrsb.w	r2, [r7, #22]
 8002fa0:	|                     687b      	ldr	r3, [r7, #4]
 8002fa2:	|                     f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    for (uint8_t i = 0; i < 7; i++)
 8002fa6:	|                     2300      	movs	r3, #0
 8002fa8:	|                     753b      	strb	r3, [r7, #20]
 8002faa:	|                 /-- e00c      	b.n	8002fc6 <hasNextRom+0x126>
        ow->lastROM[i] = ROM[i];
 8002fac:	|              /--|-> 7d3b      	ldrb	r3, [r7, #20]
 8002fae:	|              |  |   683a      	ldr	r2, [r7, #0]
 8002fb0:	|              |  |   441a      	add	r2, r3
 8002fb2:	|              |  |   7d3b      	ldrb	r3, [r7, #20]
 8002fb4:	|              |  |   7811      	ldrb	r1, [r2, #0]
 8002fb6:	|              |  |   687a      	ldr	r2, [r7, #4]
 8002fb8:	|              |  |   4413      	add	r3, r2
 8002fba:	|              |  |   460a      	mov	r2, r1
 8002fbc:	|              |  |   f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    for (uint8_t i = 0; i < 7; i++)
 8002fc0:	|              |  |   7d3b      	ldrb	r3, [r7, #20]
 8002fc2:	|              |  |   3301      	adds	r3, #1
 8002fc4:	|              |  |   753b      	strb	r3, [r7, #20]
 8002fc6:	|              |  \-> 7d3b      	ldrb	r3, [r7, #20]
 8002fc8:	|              |      2b06      	cmp	r3, #6
 8002fca:	|              \----- d9ef      	bls.n	8002fac <hasNextRom+0x10c>
    return ow->last_diff_bit_position > 0;
 8002fcc:	|                     687b      	ldr	r3, [r7, #4]
 8002fce:	|                     f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002fd2:	|                     2b00      	cmp	r3, #0
 8002fd4:	|                     bfcc      	ite	gt
 8002fd6:	|                     2301      	movgt	r3, #1
 8002fd8:	|                     2300      	movle	r3, #0
 8002fda:	|                     b2db      	uxtb	r3, r3
 8002fdc:	|                     b25b      	sxtb	r3, r3
}
 8002fde:	\-------------------> 4618      	mov	r0, r3
 8002fe0:	                      3718      	adds	r7, #24
 8002fe2:	                      46bd      	mov	sp, r7
 8002fe4:	                      bd80      	pop	{r7, pc}

08002fe6 <OneWire_CRC8_ROM>:

uint8_t OneWire_CRC8_ROM(uint8_t *data, uint8_t length){
 8002fe6:	                b480      	push	{r7}
 8002fe8:	                b085      	sub	sp, #20
 8002fea:	                af00      	add	r7, sp, #0
 8002fec:	                6078      	str	r0, [r7, #4]
 8002fee:	                460b      	mov	r3, r1
 8002ff0:	                70fb      	strb	r3, [r7, #3]
    uint8_t checksum = 0;
 8002ff2:	                2300      	movs	r3, #0
 8002ff4:	                73fb      	strb	r3, [r7, #15]
    while (length--){
 8002ff6:	   /----------- e022      	b.n	800303e <OneWire_CRC8_ROM+0x58>
        uint8_t currentByte = *data++;
 8002ff8:	/--|----------> 687b      	ldr	r3, [r7, #4]
 8002ffa:	|  |            1c5a      	adds	r2, r3, #1
 8002ffc:	|  |            607a      	str	r2, [r7, #4]
 8002ffe:	|  |            781b      	ldrb	r3, [r3, #0]
 8003000:	|  |            73bb      	strb	r3, [r7, #14]
        for (uint8_t i = 8; i; i--){
 8003002:	|  |            2308      	movs	r3, #8
 8003004:	|  |            737b      	strb	r3, [r7, #13]
 8003006:	|  |     /----- e017      	b.n	8003038 <OneWire_CRC8_ROM+0x52>
            uint8_t temp = (checksum ^ currentByte) & 0x01;
 8003008:	|  |  /--|----> 7bfa      	ldrb	r2, [r7, #15]
 800300a:	|  |  |  |      7bbb      	ldrb	r3, [r7, #14]
 800300c:	|  |  |  |      4053      	eors	r3, r2
 800300e:	|  |  |  |      b2db      	uxtb	r3, r3
 8003010:	|  |  |  |      f003 0301 	and.w	r3, r3, #1
 8003014:	|  |  |  |      733b      	strb	r3, [r7, #12]
            checksum >>= 1;
 8003016:	|  |  |  |      7bfb      	ldrb	r3, [r7, #15]
 8003018:	|  |  |  |      085b      	lsrs	r3, r3, #1
 800301a:	|  |  |  |      73fb      	strb	r3, [r7, #15]
            if (temp) checksum ^= 0x8C;
 800301c:	|  |  |  |      7b3b      	ldrb	r3, [r7, #12]
 800301e:	|  |  |  |      2b00      	cmp	r3, #0
 8003020:	|  |  |  |  /-- d004      	beq.n	800302c <OneWire_CRC8_ROM+0x46>
 8003022:	|  |  |  |  |   7bfb      	ldrb	r3, [r7, #15]
 8003024:	|  |  |  |  |   f083 0373 	eor.w	r3, r3, #115	; 0x73
 8003028:	|  |  |  |  |   43db      	mvns	r3, r3
 800302a:	|  |  |  |  |   73fb      	strb	r3, [r7, #15]
            currentByte >>= 1;
 800302c:	|  |  |  |  \-> 7bbb      	ldrb	r3, [r7, #14]
 800302e:	|  |  |  |      085b      	lsrs	r3, r3, #1
 8003030:	|  |  |  |      73bb      	strb	r3, [r7, #14]
        for (uint8_t i = 8; i; i--){
 8003032:	|  |  |  |      7b7b      	ldrb	r3, [r7, #13]
 8003034:	|  |  |  |      3b01      	subs	r3, #1
 8003036:	|  |  |  |      737b      	strb	r3, [r7, #13]
 8003038:	|  |  |  \----> 7b7b      	ldrb	r3, [r7, #13]
 800303a:	|  |  |         2b00      	cmp	r3, #0
 800303c:	|  |  \-------- d1e4      	bne.n	8003008 <OneWire_CRC8_ROM+0x22>
    while (length--){
 800303e:	|  \----------> 78fb      	ldrb	r3, [r7, #3]
 8003040:	|               1e5a      	subs	r2, r3, #1
 8003042:	|               70fa      	strb	r2, [r7, #3]
 8003044:	|               2b00      	cmp	r3, #0
 8003046:	\-------------- d1d7      	bne.n	8002ff8 <OneWire_CRC8_ROM+0x12>
        }
    }
    return checksum;
 8003048:	                7bfb      	ldrb	r3, [r7, #15]
}
 800304a:	                4618      	mov	r0, r3
 800304c:	                3714      	adds	r7, #20
 800304e:	                46bd      	mov	sp, r7
 8003050:	                f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	                4770      	bx	lr

08003056 <OneWire_SearchDevices>:

// Возвращает количество устройств на шине или код ошибки, если значение меньше 0
int OneWire_SearchDevices(OneWire *ow) {
 8003056:	             b590      	push	{r4, r7, lr}
 8003058:	             b085      	sub	sp, #20
 800305a:	             af00      	add	r7, sp, #0
 800305c:	             6078      	str	r0, [r7, #4]
    int8_t device_counter = 0, nextROM = 1;
 800305e:	             2300      	movs	r3, #0
 8003060:	             73fb      	strb	r3, [r7, #15]
 8003062:	             2301      	movs	r3, #1
 8003064:	             73bb      	strb	r3, [r7, #14]
    OneWire_InitStruct(ow);
 8003066:	             6878      	ldr	r0, [r7, #4]
 8003068:	             f7ff fee2 	bl	8002e30 <OneWire_InitStruct>
    while (nextROM && device_counter < MAXDEVICES_ON_THE_BUS){
 800306c:	   /-------- e038      	b.n	80030e0 <OneWire_SearchDevices+0x8a>
        nextROM = hasNextRom(ow, (uint8_t *)(&ow->ids[device_counter]));
 800306e:	/--|-------> f997 300f 	ldrsb.w	r3, [r7, #15]
 8003072:	|  |         00db      	lsls	r3, r3, #3
 8003074:	|  |         687a      	ldr	r2, [r7, #4]
 8003076:	|  |         4413      	add	r3, r2
 8003078:	|  |         3304      	adds	r3, #4
 800307a:	|  |         4619      	mov	r1, r3
 800307c:	|  |         6878      	ldr	r0, [r7, #4]
 800307e:	|  |         f7ff ff0f 	bl	8002ea0 <hasNextRom>
 8003082:	|  |         4603      	mov	r3, r0
 8003084:	|  |         73bb      	strb	r3, [r7, #14]
        ow->crc_status[device_counter] = OneWire_CRC8_ROM((uint8_t *)(&ow->ids[device_counter]), 8);
 8003086:	|  |         f997 300f 	ldrsb.w	r3, [r7, #15]
 800308a:	|  |         00db      	lsls	r3, r3, #3
 800308c:	|  |         687a      	ldr	r2, [r7, #4]
 800308e:	|  |         4413      	add	r3, r2
 8003090:	|  |         3304      	adds	r3, #4
 8003092:	|  |         f997 400f 	ldrsb.w	r4, [r7, #15]
 8003096:	|  |         2108      	movs	r1, #8
 8003098:	|  |         4618      	mov	r0, r3
 800309a:	|  |         f7ff ffa4 	bl	8002fe6 <OneWire_CRC8_ROM>
 800309e:	|  |         4603      	mov	r3, r0
 80030a0:	|  |         461a      	mov	r2, r3
 80030a2:	|  |         687b      	ldr	r3, [r7, #4]
 80030a4:	|  |         4423      	add	r3, r4
 80030a6:	|  |         f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        if (nextROM < 0)
 80030aa:	|  |         f997 300e 	ldrsb.w	r3, [r7, #14]
 80030ae:	|  |         2b00      	cmp	r3, #0
 80030b0:	|  |     /-- da02      	bge.n	80030b8 <OneWire_SearchDevices+0x62>
            return -1;
 80030b2:	|  |     |   f04f 33ff 	mov.w	r3, #4294967295
 80030b6:	|  |  /--|-- e01d      	b.n	80030f4 <OneWire_SearchDevices+0x9e>
        if (nextROM != 0)
 80030b8:	|  |  |  \-> f997 300e 	ldrsb.w	r3, [r7, #14]
 80030bc:	|  |  |      2b00      	cmp	r3, #0
 80030be:	|  |  |  /-- d005      	beq.n	80030cc <OneWire_SearchDevices+0x76>
            device_counter++;
 80030c0:	|  |  |  |   f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c4:	|  |  |  |   b2db      	uxtb	r3, r3
 80030c6:	|  |  |  |   3301      	adds	r3, #1
 80030c8:	|  |  |  |   b2db      	uxtb	r3, r3
 80030ca:	|  |  |  |   73fb      	strb	r3, [r7, #15]
        if(nextROM == 0 && device_counter == 0)
 80030cc:	|  |  |  \-> f997 300e 	ldrsb.w	r3, [r7, #14]
 80030d0:	|  |  |      2b00      	cmp	r3, #0
 80030d2:	|  +--|----- d105      	bne.n	80030e0 <OneWire_SearchDevices+0x8a>
 80030d4:	|  |  |      f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d8:	|  |  |      2b00      	cmp	r3, #0
 80030da:	|  +--|----- d101      	bne.n	80030e0 <OneWire_SearchDevices+0x8a>
            return 0;
 80030dc:	|  |  |      2300      	movs	r3, #0
 80030de:	|  |  +----- e009      	b.n	80030f4 <OneWire_SearchDevices+0x9e>
    while (nextROM && device_counter < MAXDEVICES_ON_THE_BUS){
 80030e0:	|  \--|----> f997 300e 	ldrsb.w	r3, [r7, #14]
 80030e4:	|     |      2b00      	cmp	r3, #0
 80030e6:	|     |  /-- d003      	beq.n	80030f0 <OneWire_SearchDevices+0x9a>
 80030e8:	|     |  |   f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ec:	|     |  |   2b13      	cmp	r3, #19
 80030ee:	\-----|--|-- ddbe      	ble.n	800306e <OneWire_SearchDevices+0x18>

    }
    return device_counter;
 80030f0:	      |  \-> f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030f4:	      \----> 4618      	mov	r0, r3
 80030f6:	             3714      	adds	r7, #20
 80030f8:	             46bd      	mov	sp, r7
 80030fa:	             bd90      	pop	{r4, r7, pc}

080030fc <OneWire_MatchRom>:

OneWireStatus OneWire_MatchRom(OneWire *ow, RomCode *rom){
 80030fc:	       b580      	push	{r7, lr}
 80030fe:	       b084      	sub	sp, #16
 8003100:	       af00      	add	r7, sp, #0
 8003102:	       6078      	str	r0, [r7, #4]
 8003104:	       6039      	str	r1, [r7, #0]
    OneWireStatus status = OneWire_Reset(ow);
 8003106:	       6878      	ldr	r0, [r7, #4]
 8003108:	       f7ff fddd 	bl	8002cc6 <OneWire_Reset>
 800310c:	       4603      	mov	r3, r0
 800310e:	       73fb      	strb	r3, [r7, #15]
    if (status == ONE_WIRE_EMPTY_BUS) return status;
 8003110:	       7bfb      	ldrb	r3, [r7, #15]
 8003112:	       2b01      	cmp	r3, #1
 8003114:	   /-- d101      	bne.n	800311a <OneWire_MatchRom+0x1e>
 8003116:	   |   7bfb      	ldrb	r3, [r7, #15]
 8003118:	/--|-- e009      	b.n	800312e <OneWire_MatchRom+0x32>
    OneWire_Write(ow, 0x55);  // Match ROM cmd
 800311a:	|  \-> 2155      	movs	r1, #85	; 0x55
 800311c:	|      6878      	ldr	r0, [r7, #4]
 800311e:	|      f7ff fe36 	bl	8002d8e <OneWire_Write>
    OneWire_WriteArray(ow, (uint8_t *)(rom), 8);
 8003122:	|      2208      	movs	r2, #8
 8003124:	|      6839      	ldr	r1, [r7, #0]
 8003126:	|      6878      	ldr	r0, [r7, #4]
 8003128:	|      f7ff fe64 	bl	8002df4 <OneWire_WriteArray>
    return status;
 800312c:	|      7bfb      	ldrb	r3, [r7, #15]
 800312e:	\----> 4618      	mov	r0, r3
 8003130:	       3710      	adds	r7, #16
 8003132:	       46bd      	mov	sp, r7
 8003134:	       bd80      	pop	{r7, pc}
	...

08003138 <PWM_init>:
#define TIMER_DEVIDER 2 //TIMx->PSC

int global_freq; //глабальная переменная для значения частоты, передаваемой в функцию инициализации. Данное значение надо как-то передать функции
				 // ChangeFilling(TIM_TypeDef *TIMx , int channel, int fill) т.к. в ней надо рассчитать процент заполнения ШИМа.

void PWM_init(TIM_TypeDef *TIMx, int channel, int freq, int fill){
 8003138:	       b480      	push	{r7}
 800313a:	       b087      	sub	sp, #28
 800313c:	       af00      	add	r7, sp, #0
 800313e:	       60f8      	str	r0, [r7, #12]
 8003140:	       60b9      	str	r1, [r7, #8]
 8003142:	       607a      	str	r2, [r7, #4]
 8003144:	       603b      	str	r3, [r7, #0]
	 * 			  для TIMER_DEVIDER=1 и частоты тактирования таймера = 72МГц минимальная частота ШИМ = 550Гц.
	 * 			  Общая формула для вычисления частоты ШИМ PWM_freq = timer_clk / (TIMx->ARR * (TIMx->PSC + 1))
	 * int fill - процент заполнения ШИМа. Может принимать значения 0-100.
	 */

	global_freq = freq;
 8003146:	       4a58      	ldr	r2, [pc, #352]	; (80032a8 <PWM_init+0x170>)
 8003148:	       687b      	ldr	r3, [r7, #4]
 800314a:	       6013      	str	r3, [r2, #0]

	if(TIMx == TIM1) {
 800314c:	       68fb      	ldr	r3, [r7, #12]
 800314e:	       4a57      	ldr	r2, [pc, #348]	; (80032ac <PWM_init+0x174>)
 8003150:	       4293      	cmp	r3, r2
 8003152:	   /-- d106      	bne.n	8003162 <PWM_init+0x2a>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8003154:	   |   4b56      	ldr	r3, [pc, #344]	; (80032b0 <PWM_init+0x178>)
 8003156:	   |   6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003158:	   |   4a55      	ldr	r2, [pc, #340]	; (80032b0 <PWM_init+0x178>)
 800315a:	   |   f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800315e:	   |   6613      	str	r3, [r2, #96]	; 0x60
 8003160:	/--|-- e014      	b.n	800318c <PWM_init+0x54>
//		if(channel == PWM_CH1) 	  gpio_init(PA6, Alternative_PP, Max_50_MHz);
//		else if(channel == PWM_CH2) gpio_init(PA7, Alternative_PP, Max_50_MHz);
//		else if(channel == PWM_CH3) gpio_init(PB0, Alternative_PP, Max_50_MHz);
//		else if(channel == PWM_CH4) gpio_init(PB1, Alternative_PP, Max_50_MHz);

	else if(TIMx == TIM15){
 8003162:	|  \-> 68fb      	ldr	r3, [r7, #12]
 8003164:	|      4a53      	ldr	r2, [pc, #332]	; (80032b4 <PWM_init+0x17c>)
 8003166:	|      4293      	cmp	r3, r2
 8003168:	|  /-- d106      	bne.n	8003178 <PWM_init+0x40>
		RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;
 800316a:	|  |   4b51      	ldr	r3, [pc, #324]	; (80032b0 <PWM_init+0x178>)
 800316c:	|  |   6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316e:	|  |   4a50      	ldr	r2, [pc, #320]	; (80032b0 <PWM_init+0x178>)
 8003170:	|  |   f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003174:	|  |   6613      	str	r3, [r2, #96]	; 0x60
 8003176:	+--|-- e009      	b.n	800318c <PWM_init+0x54>
	}
	else if(TIMx == TIM2){
 8003178:	|  \-> 68fb      	ldr	r3, [r7, #12]
 800317a:	|      f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317e:	+----- d105      	bne.n	800318c <PWM_init+0x54>
		RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8003180:	|      4b4b      	ldr	r3, [pc, #300]	; (80032b0 <PWM_init+0x178>)
 8003182:	|      6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003184:	|      4a4a      	ldr	r2, [pc, #296]	; (80032b0 <PWM_init+0x178>)
 8003186:	|      f043 0301 	orr.w	r3, r3, #1
 800318a:	|      6593      	str	r3, [r2, #88]	; 0x58
	}
	TIMx->PSC = TIMER_DEVIDER; // !ЗАМЕТКА! (При увеличении значения делителя сильно падает точность)
 800318c:	\----> 68fb      	ldr	r3, [r7, #12]
 800318e:	       2202      	movs	r2, #2
 8003190:	       629a      	str	r2, [r3, #40]	; 0x28

	int pwm_freq = F_CPU / ((TIMER_DEVIDER + 1) * freq); //для TIMx->PSC = 1 минимальная частота 550Гц (т.к. TIMx->ARR 16 бит)
 8003192:	       687a      	ldr	r2, [r7, #4]
 8003194:	       4613      	mov	r3, r2
 8003196:	       005b      	lsls	r3, r3, #1
 8003198:	       4413      	add	r3, r2
 800319a:	       4a47      	ldr	r2, [pc, #284]	; (80032b8 <PWM_init+0x180>)
 800319c:	       fb92 f3f3 	sdiv	r3, r2, r3
 80031a0:	       617b      	str	r3, [r7, #20]
	TIMx->ARR = pwm_freq; //для TIMx->PSC = 1 минимальная частота 550Гц (т.к. TIMx->ARR 16 бит)
 80031a2:	       697a      	ldr	r2, [r7, #20]
 80031a4:	       68fb      	ldr	r3, [r7, #12]
 80031a6:	       62da      	str	r2, [r3, #44]	; 0x2c
 80031a8:	       68bb      	ldr	r3, [r7, #8]
 80031aa:	       3b01      	subs	r3, #1
 80031ac:	       2b03      	cmp	r3, #3
 80031ae:	/----- d85b      	bhi.n	8003268 <PWM_init+0x130>
 80031b0:	|      a201      	add	r2, pc, #4	; (adr r2, 80031b8 <PWM_init+0x80>)
 80031b2:	|      f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	|      bf00      	nop
 80031b8:	|      31c9      	adds	r1, #201	; 0xc9
 80031ba:	|      0800      	lsrs	r0, r0, #32
 80031bc:	|      31f1      	adds	r1, #241	; 0xf1
 80031be:	|      0800      	lsrs	r0, r0, #32
 80031c0:	|      3219      	adds	r2, #25
 80031c2:	|      0800      	lsrs	r0, r0, #32
 80031c4:	|      3241      	adds	r2, #65	; 0x41
 80031c6:	|      0800      	lsrs	r0, r0, #32

	switch (channel) {  //включаем выбранный канал
		case PWM_CH1:
			TIMx->CCR1 = pwm_freq * fill / 100; 	//процент заполнения
 80031c8:	|      697b      	ldr	r3, [r7, #20]
 80031ca:	|      683a      	ldr	r2, [r7, #0]
 80031cc:	|      fb02 f303 	mul.w	r3, r2, r3
 80031d0:	|      4a3a      	ldr	r2, [pc, #232]	; (80032bc <PWM_init+0x184>)
 80031d2:	|      fb82 1203 	smull	r1, r2, r2, r3
 80031d6:	|      1152      	asrs	r2, r2, #5
 80031d8:	|      17db      	asrs	r3, r3, #31
 80031da:	|      1ad3      	subs	r3, r2, r3
 80031dc:	|      461a      	mov	r2, r3
 80031de:	|      68fb      	ldr	r3, [r7, #12]
 80031e0:	|      635a      	str	r2, [r3, #52]	; 0x34
			TIMx->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0;		//PWM mode 1, инверсный ШИМ 1 канал
 80031e2:	|      68fb      	ldr	r3, [r7, #12]
 80031e4:	|      699b      	ldr	r3, [r3, #24]
 80031e6:	|      f043 0270 	orr.w	r2, r3, #112	; 0x70
 80031ea:	|      68fb      	ldr	r3, [r7, #12]
 80031ec:	|      619a      	str	r2, [r3, #24]
			break;
 80031ee:	|  /-- e03c      	b.n	800326a <PWM_init+0x132>
		case PWM_CH2:
			TIMx->CCR2 = pwm_freq * fill / 100;	//процент заполнения
 80031f0:	|  |   697b      	ldr	r3, [r7, #20]
 80031f2:	|  |   683a      	ldr	r2, [r7, #0]
 80031f4:	|  |   fb02 f303 	mul.w	r3, r2, r3
 80031f8:	|  |   4a30      	ldr	r2, [pc, #192]	; (80032bc <PWM_init+0x184>)
 80031fa:	|  |   fb82 1203 	smull	r1, r2, r2, r3
 80031fe:	|  |   1152      	asrs	r2, r2, #5
 8003200:	|  |   17db      	asrs	r3, r3, #31
 8003202:	|  |   1ad3      	subs	r3, r2, r3
 8003204:	|  |   461a      	mov	r2, r3
 8003206:	|  |   68fb      	ldr	r3, [r7, #12]
 8003208:	|  |   639a      	str	r2, [r3, #56]	; 0x38
			TIMx->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_0;		//PWM mode 1, инверсный ШИМ 2 канал
 800320a:	|  |   68fb      	ldr	r3, [r7, #12]
 800320c:	|  |   699b      	ldr	r3, [r3, #24]
 800320e:	|  |   f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8003212:	|  |   68fb      	ldr	r3, [r7, #12]
 8003214:	|  |   619a      	str	r2, [r3, #24]
			break;
 8003216:	|  +-- e028      	b.n	800326a <PWM_init+0x132>
		case PWM_CH3:
			TIMx->CCR3 = pwm_freq * fill / 100;	//процент заполнения
 8003218:	|  |   697b      	ldr	r3, [r7, #20]
 800321a:	|  |   683a      	ldr	r2, [r7, #0]
 800321c:	|  |   fb02 f303 	mul.w	r3, r2, r3
 8003220:	|  |   4a26      	ldr	r2, [pc, #152]	; (80032bc <PWM_init+0x184>)
 8003222:	|  |   fb82 1203 	smull	r1, r2, r2, r3
 8003226:	|  |   1152      	asrs	r2, r2, #5
 8003228:	|  |   17db      	asrs	r3, r3, #31
 800322a:	|  |   1ad3      	subs	r3, r2, r3
 800322c:	|  |   461a      	mov	r2, r3
 800322e:	|  |   68fb      	ldr	r3, [r7, #12]
 8003230:	|  |   63da      	str	r2, [r3, #60]	; 0x3c
			TIMx->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_0;	 	//PWM mode 1, инверсный ШИМ 3 канал
 8003232:	|  |   68fb      	ldr	r3, [r7, #12]
 8003234:	|  |   69db      	ldr	r3, [r3, #28]
 8003236:	|  |   f043 0270 	orr.w	r2, r3, #112	; 0x70
 800323a:	|  |   68fb      	ldr	r3, [r7, #12]
 800323c:	|  |   61da      	str	r2, [r3, #28]
			break;
 800323e:	|  +-- e014      	b.n	800326a <PWM_init+0x132>
		case PWM_CH4:
			TIMx->CCR4 = pwm_freq * fill / 100;	//процент заполнения
 8003240:	|  |   697b      	ldr	r3, [r7, #20]
 8003242:	|  |   683a      	ldr	r2, [r7, #0]
 8003244:	|  |   fb02 f303 	mul.w	r3, r2, r3
 8003248:	|  |   4a1c      	ldr	r2, [pc, #112]	; (80032bc <PWM_init+0x184>)
 800324a:	|  |   fb82 1203 	smull	r1, r2, r2, r3
 800324e:	|  |   1152      	asrs	r2, r2, #5
 8003250:	|  |   17db      	asrs	r3, r3, #31
 8003252:	|  |   1ad3      	subs	r3, r2, r3
 8003254:	|  |   461a      	mov	r2, r3
 8003256:	|  |   68fb      	ldr	r3, [r7, #12]
 8003258:	|  |   641a      	str	r2, [r3, #64]	; 0x40
			TIMx->CCMR2 |= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_0;		//PWM mode 1, инверсный ШИМ 4 канал
 800325a:	|  |   68fb      	ldr	r3, [r7, #12]
 800325c:	|  |   69db      	ldr	r3, [r3, #28]
 800325e:	|  |   f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8003262:	|  |   68fb      	ldr	r3, [r7, #12]
 8003264:	|  |   61da      	str	r2, [r3, #28]
			break;
 8003266:	|  +-- e000      	b.n	800326a <PWM_init+0x132>
		default:
			break;
 8003268:	\--|-> bf00      	nop
	}
	// TIMx->CCER |= TIM_CCER_CC4E | TIM_CCER_CC4P | TIM_CCER_CC3E | TIM_CCER_CC3P | TIM_CCER_CC2E | TIM_CCER_CC2P | TIM_CCER_CC1E | TIM_CCER_CC1P;
	TIMx->BDTR |= TIM_BDTR_MOE; 	//активирует пины как выходы при настроенном регистре TIMx_CCER. странно... работает и без этого...
 800326a:	   \-> 68fb      	ldr	r3, [r7, #12]
 800326c:	       6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	       f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003272:	       68fb      	ldr	r3, [r7, #12]
 8003274:	       645a      	str	r2, [r3, #68]	; 0x44
	TIMx->CR1 &= ~TIM_CR1_DIR; 	//считаем вверх
 8003276:	       68fb      	ldr	r3, [r7, #12]
 8003278:	       681b      	ldr	r3, [r3, #0]
 800327a:	       f023 0210 	bic.w	r2, r3, #16
 800327e:	       68fb      	ldr	r3, [r7, #12]
 8003280:	       601a      	str	r2, [r3, #0]
	TIMx->CR1 &= ~TIM_CR1_CMS; 	//выравнивание по фронту, Fast PWM
 8003282:	       68fb      	ldr	r3, [r7, #12]
 8003284:	       681b      	ldr	r3, [r3, #0]
 8003286:	       f023 0260 	bic.w	r2, r3, #96	; 0x60
 800328a:	       68fb      	ldr	r3, [r7, #12]
 800328c:	       601a      	str	r2, [r3, #0]
	TIMx->CR1 |= TIM_CR1_CEN;		//запускаем таймер
 800328e:	       68fb      	ldr	r3, [r7, #12]
 8003290:	       681b      	ldr	r3, [r3, #0]
 8003292:	       f043 0201 	orr.w	r2, r3, #1
 8003296:	       68fb      	ldr	r3, [r7, #12]
 8003298:	       601a      	str	r2, [r3, #0]
}
 800329a:	       bf00      	nop
 800329c:	       371c      	adds	r7, #28
 800329e:	       46bd      	mov	sp, r7
 80032a0:	       f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	       4770      	bx	lr
 80032a6:	       bf00      	nop
 80032a8:	       3c14      	subs	r4, #20
 80032aa:	       2000      	movs	r0, #0
 80032ac:	       2c00      	cmp	r4, #0
 80032ae:	       4001      	ands	r1, r0
 80032b0:	       1000      	asrs	r0, r0, #32
 80032b2:	       4002      	ands	r2, r0
 80032b4:	       4000      	ands	r0, r0
 80032b6:	       4001      	ands	r1, r0
 80032b8:	       0900      	lsrs	r0, r0, #4
 80032ba:	       003d      	movs	r5, r7
 80032bc:	       851f      	strh	r7, [r3, #40]	; 0x28
 80032be:	       51eb      	str	r3, [r5, r7]

080032c0 <PWM_start_single>:

void PWM_start_single(TIM_TypeDef *TIMx , int channel){
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
	TIMx->CCER |= (0x3 << (4 * (channel-1))); //пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅ пїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅ.
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	3a01      	subs	r2, #1
 80032d2:	0092      	lsls	r2, r2, #2
 80032d4:	2103      	movs	r1, #3
 80032d6:	fa01 f202 	lsl.w	r2, r1, r2
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	621a      	str	r2, [r3, #32]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <PWM_start_all>:

void PWM_start_all(TIM_TypeDef *TIMx ){
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
	//настроим на выход канал.
	TIMx->CCER |= TIM_CCER_CC4E | TIM_CCER_CC4P | TIM_CCER_CC3E | TIM_CCER_CC3P; //| TIM_CCER_CC2E | TIM_CCER_CC2P | TIM_CCER_CC1E | TIM_CCER_CC1P;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f443 524c 	orr.w	r2, r3, #13056	; 0x3300
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	621a      	str	r2, [r3, #32]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <PWM_stop_all>:

void PWM_stop_all(TIM_TypeDef *TIMx ){
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	//функция для остановки всех каналов одновременно
	TIMx->CCER &= ~(TIM_CCER_CC4E | TIM_CCER_CC4P | TIM_CCER_CC3E | TIM_CCER_CC3P); //| TIM_CCER_CC2E | TIM_CCER_CC2P | TIM_CCER_CC1E | TIM_CCER_CC1P);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	f423 524c 	bic.w	r2, r3, #13056	; 0x3300
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	621a      	str	r2, [r3, #32]
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <PWM_change_fill>:

void PWM_change_fill(TIM_TypeDef *TIMx , int channel, int fill){
 800332c:	       b480      	push	{r7}
 800332e:	       b085      	sub	sp, #20
 8003330:	       af00      	add	r7, sp, #0
 8003332:	       60f8      	str	r0, [r7, #12]
 8003334:	       60b9      	str	r1, [r7, #8]
 8003336:	       607a      	str	r2, [r7, #4]
	 * TIM_TypeDef *TIMx - регистр таймера, поддерживающего ШИМ режим, например TIM1, TIM3 и т.д.
	 * int channel - номер канала таймера. Принимает на вход цифру 1-4 или значение из нумерованного списка PWM_CH1-PWM_CH4.
	 * int fill - процент заполнения ШИМа. Может принимать значения 0-100.
	 */

	if(channel == PWM_CH1) TIMx->CCR1 = F_CPU / ((TIMER_DEVIDER + 1) * global_freq) * fill / 100; // F_CPU / ((TIMER_DEVIDER + 1) * global_freq) - пїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅ
 8003338:	       68bb      	ldr	r3, [r7, #8]
 800333a:	       2b01      	cmp	r3, #1
 800333c:	   /-- d114      	bne.n	8003368 <PWM_change_fill+0x3c>
 800333e:	   |   4b31      	ldr	r3, [pc, #196]	; (8003404 <PWM_change_fill+0xd8>)
 8003340:	   |   681a      	ldr	r2, [r3, #0]
 8003342:	   |   4613      	mov	r3, r2
 8003344:	   |   005b      	lsls	r3, r3, #1
 8003346:	   |   4413      	add	r3, r2
 8003348:	   |   4a2f      	ldr	r2, [pc, #188]	; (8003408 <PWM_change_fill+0xdc>)
 800334a:	   |   fb92 f3f3 	sdiv	r3, r2, r3
 800334e:	   |   687a      	ldr	r2, [r7, #4]
 8003350:	   |   fb02 f303 	mul.w	r3, r2, r3
 8003354:	   |   4a2d      	ldr	r2, [pc, #180]	; (800340c <PWM_change_fill+0xe0>)
 8003356:	   |   fb82 1203 	smull	r1, r2, r2, r3
 800335a:	   |   1152      	asrs	r2, r2, #5
 800335c:	   |   17db      	asrs	r3, r3, #31
 800335e:	   |   1ad3      	subs	r3, r2, r3
 8003360:	   |   461a      	mov	r2, r3
 8003362:	   |   68fb      	ldr	r3, [r7, #12]
 8003364:	   |   635a      	str	r2, [r3, #52]	; 0x34
	else if(channel == PWM_CH2) TIMx->CCR2 = F_CPU / ((TIMER_DEVIDER + 1) * global_freq) * fill / 100; // PWM_freq * fill /100 - пїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ
	else if(channel == PWM_CH3) TIMx->CCR3 = F_CPU / ((TIMER_DEVIDER + 1) * global_freq) * fill / 100;
	else if(channel == PWM_CH4) TIMx->CCR4 = F_CPU / ((TIMER_DEVIDER + 1) * global_freq) * fill / 100;
}
 8003366:	/--|-- e046      	b.n	80033f6 <PWM_change_fill+0xca>
	else if(channel == PWM_CH2) TIMx->CCR2 = F_CPU / ((TIMER_DEVIDER + 1) * global_freq) * fill / 100; // PWM_freq * fill /100 - пїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ
 8003368:	|  \-> 68bb      	ldr	r3, [r7, #8]
 800336a:	|      2b02      	cmp	r3, #2
 800336c:	|  /-- d114      	bne.n	8003398 <PWM_change_fill+0x6c>
 800336e:	|  |   4b25      	ldr	r3, [pc, #148]	; (8003404 <PWM_change_fill+0xd8>)
 8003370:	|  |   681a      	ldr	r2, [r3, #0]
 8003372:	|  |   4613      	mov	r3, r2
 8003374:	|  |   005b      	lsls	r3, r3, #1
 8003376:	|  |   4413      	add	r3, r2
 8003378:	|  |   4a23      	ldr	r2, [pc, #140]	; (8003408 <PWM_change_fill+0xdc>)
 800337a:	|  |   fb92 f3f3 	sdiv	r3, r2, r3
 800337e:	|  |   687a      	ldr	r2, [r7, #4]
 8003380:	|  |   fb02 f303 	mul.w	r3, r2, r3
 8003384:	|  |   4a21      	ldr	r2, [pc, #132]	; (800340c <PWM_change_fill+0xe0>)
 8003386:	|  |   fb82 1203 	smull	r1, r2, r2, r3
 800338a:	|  |   1152      	asrs	r2, r2, #5
 800338c:	|  |   17db      	asrs	r3, r3, #31
 800338e:	|  |   1ad3      	subs	r3, r2, r3
 8003390:	|  |   461a      	mov	r2, r3
 8003392:	|  |   68fb      	ldr	r3, [r7, #12]
 8003394:	|  |   639a      	str	r2, [r3, #56]	; 0x38
}
 8003396:	+--|-- e02e      	b.n	80033f6 <PWM_change_fill+0xca>
	else if(channel == PWM_CH3) TIMx->CCR3 = F_CPU / ((TIMER_DEVIDER + 1) * global_freq) * fill / 100;
 8003398:	|  \-> 68bb      	ldr	r3, [r7, #8]
 800339a:	|      2b03      	cmp	r3, #3
 800339c:	|  /-- d114      	bne.n	80033c8 <PWM_change_fill+0x9c>
 800339e:	|  |   4b19      	ldr	r3, [pc, #100]	; (8003404 <PWM_change_fill+0xd8>)
 80033a0:	|  |   681a      	ldr	r2, [r3, #0]
 80033a2:	|  |   4613      	mov	r3, r2
 80033a4:	|  |   005b      	lsls	r3, r3, #1
 80033a6:	|  |   4413      	add	r3, r2
 80033a8:	|  |   4a17      	ldr	r2, [pc, #92]	; (8003408 <PWM_change_fill+0xdc>)
 80033aa:	|  |   fb92 f3f3 	sdiv	r3, r2, r3
 80033ae:	|  |   687a      	ldr	r2, [r7, #4]
 80033b0:	|  |   fb02 f303 	mul.w	r3, r2, r3
 80033b4:	|  |   4a15      	ldr	r2, [pc, #84]	; (800340c <PWM_change_fill+0xe0>)
 80033b6:	|  |   fb82 1203 	smull	r1, r2, r2, r3
 80033ba:	|  |   1152      	asrs	r2, r2, #5
 80033bc:	|  |   17db      	asrs	r3, r3, #31
 80033be:	|  |   1ad3      	subs	r3, r2, r3
 80033c0:	|  |   461a      	mov	r2, r3
 80033c2:	|  |   68fb      	ldr	r3, [r7, #12]
 80033c4:	|  |   63da      	str	r2, [r3, #60]	; 0x3c
}
 80033c6:	+--|-- e016      	b.n	80033f6 <PWM_change_fill+0xca>
	else if(channel == PWM_CH4) TIMx->CCR4 = F_CPU / ((TIMER_DEVIDER + 1) * global_freq) * fill / 100;
 80033c8:	|  \-> 68bb      	ldr	r3, [r7, #8]
 80033ca:	|      2b04      	cmp	r3, #4
 80033cc:	+----- d113      	bne.n	80033f6 <PWM_change_fill+0xca>
 80033ce:	|      4b0d      	ldr	r3, [pc, #52]	; (8003404 <PWM_change_fill+0xd8>)
 80033d0:	|      681a      	ldr	r2, [r3, #0]
 80033d2:	|      4613      	mov	r3, r2
 80033d4:	|      005b      	lsls	r3, r3, #1
 80033d6:	|      4413      	add	r3, r2
 80033d8:	|      4a0b      	ldr	r2, [pc, #44]	; (8003408 <PWM_change_fill+0xdc>)
 80033da:	|      fb92 f3f3 	sdiv	r3, r2, r3
 80033de:	|      687a      	ldr	r2, [r7, #4]
 80033e0:	|      fb02 f303 	mul.w	r3, r2, r3
 80033e4:	|      4a09      	ldr	r2, [pc, #36]	; (800340c <PWM_change_fill+0xe0>)
 80033e6:	|      fb82 1203 	smull	r1, r2, r2, r3
 80033ea:	|      1152      	asrs	r2, r2, #5
 80033ec:	|      17db      	asrs	r3, r3, #31
 80033ee:	|      1ad3      	subs	r3, r2, r3
 80033f0:	|      461a      	mov	r2, r3
 80033f2:	|      68fb      	ldr	r3, [r7, #12]
 80033f4:	|      641a      	str	r2, [r3, #64]	; 0x40
}
 80033f6:	\----> bf00      	nop
 80033f8:	       3714      	adds	r7, #20
 80033fa:	       46bd      	mov	sp, r7
 80033fc:	       f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	       4770      	bx	lr
 8003402:	       bf00      	nop
 8003404:	       3c14      	subs	r4, #20
 8003406:	       2000      	movs	r0, #0
 8003408:	       0900      	lsrs	r0, r0, #4
 800340a:	       003d      	movs	r5, r7
 800340c:	       851f      	strh	r7, [r3, #40]	; 0x28
 800340e:	       51eb      	str	r3, [r5, r7]

08003410 <PWM_stop_single>:

void PWM_stop_single(TIM_TypeDef *TIMx , int channel){
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
	/*
	 * Функция отключения одного указанного канала.
	 */
	TIMx->CCER &= ~(0x3 << (4 * (channel-1)));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	3a01      	subs	r2, #1
 8003422:	0092      	lsls	r2, r2, #2
 8003424:	2103      	movs	r1, #3
 8003426:	fa01 f202 	lsl.w	r2, r1, r2
 800342a:	43d2      	mvns	r2, r2
 800342c:	401a      	ands	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	621a      	str	r2, [r3, #32]
//	TIMx->BDTR &= ~TIM_BDTR_MOE;
//	TIMx->CR1 &= ~TIM_CR1_CEN;

}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <PWM_deinit>:

void PWM_deinit(TIM_TypeDef *TIMx ){
 800343e:	    b480      	push	{r7}
 8003440:	    b083      	sub	sp, #12
 8003442:	    af00      	add	r7, sp, #0
 8003444:	    6078      	str	r0, [r7, #4]
	/*
	 * Функция деинициализации указанного таймера, т.е. отключает ШИМ, переводит регистры таймера и пины мк в начальное состояние
	 * TIM_TypeDef *TIMx - регистр таймера, поддерживающего ШИМ режим, например TIM1, TIM3 и т.д.
	 */
	TIMx->CCMR2 = 0;
 8003446:	    687b      	ldr	r3, [r7, #4]
 8003448:	    2200      	movs	r2, #0
 800344a:	    61da      	str	r2, [r3, #28]
	TIMx->CCMR1 = 0;
 800344c:	    687b      	ldr	r3, [r7, #4]
 800344e:	    2200      	movs	r2, #0
 8003450:	    619a      	str	r2, [r3, #24]
	TIMx->CCR1 = 0;
 8003452:	    687b      	ldr	r3, [r7, #4]
 8003454:	    2200      	movs	r2, #0
 8003456:	    635a      	str	r2, [r3, #52]	; 0x34
	TIMx->CCR2 = 0;
 8003458:	    687b      	ldr	r3, [r7, #4]
 800345a:	    2200      	movs	r2, #0
 800345c:	    639a      	str	r2, [r3, #56]	; 0x38
	TIMx->CCR3 = 0;
 800345e:	    687b      	ldr	r3, [r7, #4]
 8003460:	    2200      	movs	r2, #0
 8003462:	    63da      	str	r2, [r3, #60]	; 0x3c
	TIMx->CCR4 = 0;
 8003464:	    687b      	ldr	r3, [r7, #4]
 8003466:	    2200      	movs	r2, #0
 8003468:	    641a      	str	r2, [r3, #64]	; 0x40
	TIMx->CCER = 0;
 800346a:	    687b      	ldr	r3, [r7, #4]
 800346c:	    2200      	movs	r2, #0
 800346e:	    621a      	str	r2, [r3, #32]
	TIMx->ARR = 0;
 8003470:	    687b      	ldr	r3, [r7, #4]
 8003472:	    2200      	movs	r2, #0
 8003474:	    62da      	str	r2, [r3, #44]	; 0x2c
	if(TIMx == TIM1) {
 8003476:	    687b      	ldr	r3, [r7, #4]
 8003478:	    4a07      	ldr	r2, [pc, #28]	; (8003498 <PWM_deinit+0x5a>)
 800347a:	    4293      	cmp	r3, r2
 800347c:	/-- d105      	bne.n	800348a <PWM_deinit+0x4c>
		RCC->APB2ENR &= ~RCC_APB2ENR_TIM1EN;
 800347e:	|   4b07      	ldr	r3, [pc, #28]	; (800349c <PWM_deinit+0x5e>)
 8003480:	|   6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003482:	|   4a06      	ldr	r2, [pc, #24]	; (800349c <PWM_deinit+0x5e>)
 8003484:	|   f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003488:	|   6613      	str	r3, [r2, #96]	; 0x60
//		gpio_init(PA9, General_PP, Max_2_MHz);
//		gpio_init(PA10, General_PP, Max_2_MHz);
//		gpio_init(PA11, General_PP, Max_2_MHz);
	}

}
 800348a:	\-> bf00      	nop
 800348c:	    370c      	adds	r7, #12
 800348e:	    46bd      	mov	sp, r7
 8003490:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	    4770      	bx	lr
 8003496:	    bf00      	nop
 8003498:	    2c00      	cmp	r4, #0
 800349a:	    4001      	ands	r1, r0
 800349c:	    1000      	asrs	r0, r0, #32
 800349e:	    4002      	ands	r2, r0

080034a0 <RCC_init_hse>:
#include "rcc.h"
#include "System.h"
#include "stm32l431xx.h"


int RCC_init_hse(){
 80034a0:	       b480      	push	{r7}
 80034a2:	       b087      	sub	sp, #28
 80034a4:	       af00      	add	r7, sp, #0
	//RCC_DeInit();
	if(!(RCC->CR & RCC_CR_HSERDY)){ //check HSE if it didn't launch, then launch
 80034a6:	       4b47      	ldr	r3, [pc, #284]	; (80035c4 <RCC_init_hse+0x124>)
 80034a8:	       681b      	ldr	r3, [r3, #0]
 80034aa:	       f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	       2b00      	cmp	r3, #0
 80034b0:	/----- d10c      	bne.n	80034cc <RCC_init_hse+0x2c>
		RCC->CR |= RCC_CR_HSEON;
 80034b2:	|      4b44      	ldr	r3, [pc, #272]	; (80035c4 <RCC_init_hse+0x124>)
 80034b4:	|      681b      	ldr	r3, [r3, #0]
 80034b6:	|      4a43      	ldr	r2, [pc, #268]	; (80035c4 <RCC_init_hse+0x124>)
 80034b8:	|      f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034bc:	|      6013      	str	r3, [r2, #0]
		while(!(RCC->CR & RCC_CR_HSERDY)); //waiting while HSE launching
 80034be:	|      bf00      	nop
 80034c0:	|  /-> 4b40      	ldr	r3, [pc, #256]	; (80035c4 <RCC_init_hse+0x124>)
 80034c2:	|  |   681b      	ldr	r3, [r3, #0]
 80034c4:	|  |   f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c8:	|  |   2b00      	cmp	r3, #0
 80034ca:	|  \-- d0f9      	beq.n	80034c0 <RCC_init_hse+0x20>
	}
	RCC->CR &= ~(RCC_CR_PLLON);
 80034cc:	\----> 4b3d      	ldr	r3, [pc, #244]	; (80035c4 <RCC_init_hse+0x124>)
 80034ce:	       681b      	ldr	r3, [r3, #0]
 80034d0:	       4a3c      	ldr	r2, [pc, #240]	; (80035c4 <RCC_init_hse+0x124>)
 80034d2:	       f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d6:	       6013      	str	r3, [r2, #0]

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
 80034d8:	       4b3a      	ldr	r3, [pc, #232]	; (80035c4 <RCC_init_hse+0x124>)
 80034da:	       68db      	ldr	r3, [r3, #12]
 80034dc:	       4a39      	ldr	r2, [pc, #228]	; (80035c4 <RCC_init_hse+0x124>)
 80034de:	       f043 0303 	orr.w	r3, r3, #3
 80034e2:	       60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM);
 80034e4:	       4b37      	ldr	r3, [pc, #220]	; (80035c4 <RCC_init_hse+0x124>)
 80034e6:	       68db      	ldr	r3, [r3, #12]
 80034e8:	       4a36      	ldr	r2, [pc, #216]	; (80035c4 <RCC_init_hse+0x124>)
 80034ea:	       f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ee:	       60d3      	str	r3, [r2, #12]
//	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM;
	//00: PLLR = 2
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN);
 80034f0:	       4b34      	ldr	r3, [pc, #208]	; (80035c4 <RCC_init_hse+0x124>)
 80034f2:	       68db      	ldr	r3, [r3, #12]
 80034f4:	       4a33      	ldr	r2, [pc, #204]	; (80035c4 <RCC_init_hse+0x124>)
 80034f6:	       f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034fa:	       60d3      	str	r3, [r2, #12]
	1010110: PLLN = 86
	1010111: PLLN = 87 wrong configuration
	...
	1111111: PLLN = 127 wrong configuration
	*/
	RCC->PLLCFGR |= (13 << RCC_PLLCFGR_PLLN_Pos); //HSE(8MHz) * VCO(20) / PLLR(2) = 80Mhz
 80034fc:	       4b31      	ldr	r3, [pc, #196]	; (80035c4 <RCC_init_hse+0x124>)
 80034fe:	       68db      	ldr	r3, [r3, #12]
 8003500:	       4a30      	ldr	r2, [pc, #192]	; (80035c4 <RCC_init_hse+0x124>)
 8003502:	       f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003506:	       60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;
 8003508:	       4b2e      	ldr	r3, [pc, #184]	; (80035c4 <RCC_init_hse+0x124>)
 800350a:	       68db      	ldr	r3, [r3, #12]
 800350c:	       4a2d      	ldr	r2, [pc, #180]	; (80035c4 <RCC_init_hse+0x124>)
 800350e:	       f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003512:	       60d3      	str	r3, [r2, #12]
//	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));

	RCC->CR |= RCC_CR_PLLON;
 8003514:	       4b2b      	ldr	r3, [pc, #172]	; (80035c4 <RCC_init_hse+0x124>)
 8003516:	       681b      	ldr	r3, [r3, #0]
 8003518:	       4a2a      	ldr	r2, [pc, #168]	; (80035c4 <RCC_init_hse+0x124>)
 800351a:	       f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800351e:	       6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8003520:	       bf00      	nop
 8003522:	   /-> 4b28      	ldr	r3, [pc, #160]	; (80035c4 <RCC_init_hse+0x124>)
 8003524:	   |   681b      	ldr	r3, [r3, #0]
 8003526:	   |   f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352a:	   |   2b00      	cmp	r3, #0
 800352c:	   \-- d0f9      	beq.n	8003522 <RCC_init_hse+0x82>
	 * 	|	2 WS	|	  <48	   |	  <18	  |
	 * 	|	3 WS	|	  <64	   |	  <24	  |
	 * 	|___4 WS____|_____<80______|______<30_____|
	 *
	 */
	FLASH->ACR &= 0xFFFFFFF8; //clear register
 800352e:	       4b26      	ldr	r3, [pc, #152]	; (80035c8 <RCC_init_hse+0x128>)
 8003530:	       681b      	ldr	r3, [r3, #0]
 8003532:	       4a25      	ldr	r2, [pc, #148]	; (80035c8 <RCC_init_hse+0x128>)
 8003534:	       f023 0307 	bic.w	r3, r3, #7
 8003538:	       6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 800353a:	       4b23      	ldr	r3, [pc, #140]	; (80035c8 <RCC_init_hse+0x128>)
 800353c:	       681b      	ldr	r3, [r3, #0]
 800353e:	       4a22      	ldr	r2, [pc, #136]	; (80035c8 <RCC_init_hse+0x128>)
 8003540:	       f043 0303 	orr.w	r3, r3, #3
 8003544:	       6013      	str	r3, [r2, #0]

	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	uint32_t AHB_presc = RCC_CFGR_HPRE_0;
 8003546:	       2310      	movs	r3, #16
 8003548:	       617b      	str	r3, [r7, #20]
	uint32_t APB1_presc = RCC_CFGR_PPRE1_0;
 800354a:	       f44f 7380 	mov.w	r3, #256	; 0x100
 800354e:	       613b      	str	r3, [r7, #16]
	uint32_t APB2_presc = RCC_CFGR_PPRE2_0;
 8003550:	       f44f 6300 	mov.w	r3, #2048	; 0x800
 8003554:	       60fb      	str	r3, [r7, #12]
	uint8_t system_clk = F_CPU / 1000000;
 8003556:	       2304      	movs	r3, #4
 8003558:	       72fb      	strb	r3, [r7, #11]

	RCC->CFGR |= AHB_presc | APB1_presc | APB2_presc; //AHB not devided (72MHz) | APB1 not devided (72MHz) | APB2 not devided (72MHz)
 800355a:	       4b1a      	ldr	r3, [pc, #104]	; (80035c4 <RCC_init_hse+0x124>)
 800355c:	       689a      	ldr	r2, [r3, #8]
 800355e:	       6979      	ldr	r1, [r7, #20]
 8003560:	       693b      	ldr	r3, [r7, #16]
 8003562:	       4319      	orrs	r1, r3
 8003564:	       68fb      	ldr	r3, [r7, #12]
 8003566:	       430b      	orrs	r3, r1
 8003568:	       4916      	ldr	r1, [pc, #88]	; (80035c4 <RCC_init_hse+0x124>)
 800356a:	       4313      	orrs	r3, r2
 800356c:	       608b      	str	r3, [r1, #8]

	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800356e:	       4b15      	ldr	r3, [pc, #84]	; (80035c4 <RCC_init_hse+0x124>)
 8003570:	       689b      	ldr	r3, [r3, #8]
 8003572:	       4a14      	ldr	r2, [pc, #80]	; (80035c4 <RCC_init_hse+0x124>)
 8003574:	       f043 0303 	orr.w	r3, r3, #3
 8003578:	       6093      	str	r3, [r2, #8]

	RCC->CR &= ~(RCC_CR_HSION);
 800357a:	       4b12      	ldr	r3, [pc, #72]	; (80035c4 <RCC_init_hse+0x124>)
 800357c:	       681b      	ldr	r3, [r3, #0]
 800357e:	       4a11      	ldr	r2, [pc, #68]	; (80035c4 <RCC_init_hse+0x124>)
 8003580:	       f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003584:	       6013      	str	r3, [r2, #0]

	uint32_t timings = 0; //  unused - 00000000 | AHB - 00000000 | APB2 - 00000000 | APB1 - 00000000
 8003586:	       2300      	movs	r3, #0
 8003588:	       607b      	str	r3, [r7, #4]
	timings |= ((system_clk / (AHB_presc >> 4)) << 16) | (system_clk / (APB2_presc >> 11) << 0) | ((system_clk / (APB1_presc >> 8)) << 8);
 800358a:	       7afa      	ldrb	r2, [r7, #11]
 800358c:	       697b      	ldr	r3, [r7, #20]
 800358e:	       091b      	lsrs	r3, r3, #4
 8003590:	       fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	       041a      	lsls	r2, r3, #16
 8003596:	       7af9      	ldrb	r1, [r7, #11]
 8003598:	       68fb      	ldr	r3, [r7, #12]
 800359a:	       0adb      	lsrs	r3, r3, #11
 800359c:	       fbb1 f3f3 	udiv	r3, r1, r3
 80035a0:	       431a      	orrs	r2, r3
 80035a2:	       7af9      	ldrb	r1, [r7, #11]
 80035a4:	       693b      	ldr	r3, [r7, #16]
 80035a6:	       0a1b      	lsrs	r3, r3, #8
 80035a8:	       fbb1 f3f3 	udiv	r3, r1, r3
 80035ac:	       021b      	lsls	r3, r3, #8
 80035ae:	       4313      	orrs	r3, r2
 80035b0:	       687a      	ldr	r2, [r7, #4]
 80035b2:	       4313      	orrs	r3, r2
 80035b4:	       607b      	str	r3, [r7, #4]
	return timings;
 80035b6:	       687b      	ldr	r3, [r7, #4]

}
 80035b8:	       4618      	mov	r0, r3
 80035ba:	       371c      	adds	r7, #28
 80035bc:	       46bd      	mov	sp, r7
 80035be:	       f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	       4770      	bx	lr
 80035c4:	       1000      	asrs	r0, r0, #32
 80035c6:	       4002      	ands	r2, r0
 80035c8:	       2000      	movs	r0, #0
 80035ca:	       4002      	ands	r2, r0

080035cc <RCC_init_hsi>:
int RCC_init_hsi(){
 80035cc:	    b480      	push	{r7}
 80035ce:	    b087      	sub	sp, #28
 80035d0:	    af00      	add	r7, sp, #0
	//RCC_DeInit();
	RCC->CR |= RCC_CR_HSION;
 80035d2:	    4b41      	ldr	r3, [pc, #260]	; (80036d8 <RCC_init_hsi+0x10c>)
 80035d4:	    681b      	ldr	r3, [r3, #0]
 80035d6:	    4a40      	ldr	r2, [pc, #256]	; (80036d8 <RCC_init_hsi+0x10c>)
 80035d8:	    f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035dc:	    6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY));
 80035de:	    bf00      	nop
 80035e0:	/-> 4b3d      	ldr	r3, [pc, #244]	; (80036d8 <RCC_init_hsi+0x10c>)
 80035e2:	|   681b      	ldr	r3, [r3, #0]
 80035e4:	|   f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e8:	|   2b00      	cmp	r3, #0
 80035ea:	\-- d0f9      	beq.n	80035e0 <RCC_init_hsi+0x14>
	
	RCC->CR &= ~(RCC_CR_PLLON);
 80035ec:	    4b3a      	ldr	r3, [pc, #232]	; (80036d8 <RCC_init_hsi+0x10c>)
 80035ee:	    681b      	ldr	r3, [r3, #0]
 80035f0:	    4a39      	ldr	r2, [pc, #228]	; (80036d8 <RCC_init_hsi+0x10c>)
 80035f2:	    f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035f6:	    6013      	str	r3, [r2, #0]

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI;
 80035f8:	    4b37      	ldr	r3, [pc, #220]	; (80036d8 <RCC_init_hsi+0x10c>)
 80035fa:	    68db      	ldr	r3, [r3, #12]
 80035fc:	    4a36      	ldr	r2, [pc, #216]	; (80036d8 <RCC_init_hsi+0x10c>)
 80035fe:	    f043 0302 	orr.w	r3, r3, #2
 8003602:	    60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM);
 8003604:	    4b34      	ldr	r3, [pc, #208]	; (80036d8 <RCC_init_hsi+0x10c>)
 8003606:	    68db      	ldr	r3, [r3, #12]
 8003608:	    4a33      	ldr	r2, [pc, #204]	; (80036d8 <RCC_init_hsi+0x10c>)
 800360a:	    f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360e:	    60d3      	str	r3, [r2, #12]
//	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM;

	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN);
 8003610:	    4b31      	ldr	r3, [pc, #196]	; (80036d8 <RCC_init_hsi+0x10c>)
 8003612:	    68db      	ldr	r3, [r3, #12]
 8003614:	    4a30      	ldr	r2, [pc, #192]	; (80036d8 <RCC_init_hsi+0x10c>)
 8003616:	    f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800361a:	    60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (10 << 8); //HSI(16MHz) * VCO(10) / PLLR(2) = 80Mhz
 800361c:	    4b2e      	ldr	r3, [pc, #184]	; (80036d8 <RCC_init_hsi+0x10c>)
 800361e:	    68db      	ldr	r3, [r3, #12]
 8003620:	    4a2d      	ldr	r2, [pc, #180]	; (80036d8 <RCC_init_hsi+0x10c>)
 8003622:	    f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8003626:	    60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;
 8003628:	    4b2b      	ldr	r3, [pc, #172]	; (80036d8 <RCC_init_hsi+0x10c>)
 800362a:	    68db      	ldr	r3, [r3, #12]
 800362c:	    4a2a      	ldr	r2, [pc, #168]	; (80036d8 <RCC_init_hsi+0x10c>)
 800362e:	    f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003632:	    60d3      	str	r3, [r2, #12]
//	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));

	RCC->CR |= RCC_CR_PLLON;
 8003634:	    4b28      	ldr	r3, [pc, #160]	; (80036d8 <RCC_init_hsi+0x10c>)
 8003636:	    681b      	ldr	r3, [r3, #0]
 8003638:	    4a27      	ldr	r2, [pc, #156]	; (80036d8 <RCC_init_hsi+0x10c>)
 800363a:	    f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800363e:	    6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8003640:	    bf00      	nop
 8003642:	/-> 4b25      	ldr	r3, [pc, #148]	; (80036d8 <RCC_init_hsi+0x10c>)
 8003644:	|   681b      	ldr	r3, [r3, #0]
 8003646:	|   f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	|   2b00      	cmp	r3, #0
 800364c:	\-- d0f9      	beq.n	8003642 <RCC_init_hsi+0x76>
	 * 	|	2 WS	|	  <48	   |	  <18	  |
	 * 	|	3 WS	|	  <64	   |	  <24	  |
	 * 	|___4 WS____|_____<80______|______<30_____|
	 *
	 */
	FLASH->ACR &= 0xFFFFFFF8; //clear register
 800364e:	    4b23      	ldr	r3, [pc, #140]	; (80036dc <RCC_init_hsi+0x110>)
 8003650:	    681b      	ldr	r3, [r3, #0]
 8003652:	    4a22      	ldr	r2, [pc, #136]	; (80036dc <RCC_init_hsi+0x110>)
 8003654:	    f023 0307 	bic.w	r3, r3, #7
 8003658:	    6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 800365a:	    4b20      	ldr	r3, [pc, #128]	; (80036dc <RCC_init_hsi+0x110>)
 800365c:	    681b      	ldr	r3, [r3, #0]
 800365e:	    4a1f      	ldr	r2, [pc, #124]	; (80036dc <RCC_init_hsi+0x110>)
 8003660:	    f043 0303 	orr.w	r3, r3, #3
 8003664:	    6013      	str	r3, [r2, #0]

	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	uint32_t AHB_presc = RCC_CFGR_HPRE_0;
 8003666:	    2310      	movs	r3, #16
 8003668:	    617b      	str	r3, [r7, #20]
	uint32_t APB1_presc = RCC_CFGR_PPRE1_0;
 800366a:	    f44f 7380 	mov.w	r3, #256	; 0x100
 800366e:	    613b      	str	r3, [r7, #16]
	uint32_t APB2_presc = RCC_CFGR_PPRE2_0;
 8003670:	    f44f 6300 	mov.w	r3, #2048	; 0x800
 8003674:	    60fb      	str	r3, [r7, #12]
	uint8_t system_clk = F_CPU / 1000000;
 8003676:	    2304      	movs	r3, #4
 8003678:	    72fb      	strb	r3, [r7, #11]

	RCC->CFGR |= AHB_presc | APB1_presc | APB2_presc; //AHB not devided (72MHz) | APB1 not devided (72MHz) | APB2 not devided (72MHz)
 800367a:	    4b17      	ldr	r3, [pc, #92]	; (80036d8 <RCC_init_hsi+0x10c>)
 800367c:	    689a      	ldr	r2, [r3, #8]
 800367e:	    6979      	ldr	r1, [r7, #20]
 8003680:	    693b      	ldr	r3, [r7, #16]
 8003682:	    4319      	orrs	r1, r3
 8003684:	    68fb      	ldr	r3, [r7, #12]
 8003686:	    430b      	orrs	r3, r1
 8003688:	    4913      	ldr	r1, [pc, #76]	; (80036d8 <RCC_init_hsi+0x10c>)
 800368a:	    4313      	orrs	r3, r2
 800368c:	    608b      	str	r3, [r1, #8]

	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800368e:	    4b12      	ldr	r3, [pc, #72]	; (80036d8 <RCC_init_hsi+0x10c>)
 8003690:	    689b      	ldr	r3, [r3, #8]
 8003692:	    4a11      	ldr	r2, [pc, #68]	; (80036d8 <RCC_init_hsi+0x10c>)
 8003694:	    f043 0303 	orr.w	r3, r3, #3
 8003698:	    6093      	str	r3, [r2, #8]

	// RCC->CR &= ~(RCC_CR_HSION);

	uint32_t timings = 0; //  unused - 00000000 | AHB - 00000000 | APB2 - 00000000 | APB1 - 00000000
 800369a:	    2300      	movs	r3, #0
 800369c:	    607b      	str	r3, [r7, #4]
	timings |= ((system_clk / (AHB_presc >> 4)) << 16) | (system_clk / (APB2_presc >> 11) << 0) | ((system_clk / (APB1_presc >> 8)) << 8);
 800369e:	    7afa      	ldrb	r2, [r7, #11]
 80036a0:	    697b      	ldr	r3, [r7, #20]
 80036a2:	    091b      	lsrs	r3, r3, #4
 80036a4:	    fbb2 f3f3 	udiv	r3, r2, r3
 80036a8:	    041a      	lsls	r2, r3, #16
 80036aa:	    7af9      	ldrb	r1, [r7, #11]
 80036ac:	    68fb      	ldr	r3, [r7, #12]
 80036ae:	    0adb      	lsrs	r3, r3, #11
 80036b0:	    fbb1 f3f3 	udiv	r3, r1, r3
 80036b4:	    431a      	orrs	r2, r3
 80036b6:	    7af9      	ldrb	r1, [r7, #11]
 80036b8:	    693b      	ldr	r3, [r7, #16]
 80036ba:	    0a1b      	lsrs	r3, r3, #8
 80036bc:	    fbb1 f3f3 	udiv	r3, r1, r3
 80036c0:	    021b      	lsls	r3, r3, #8
 80036c2:	    4313      	orrs	r3, r2
 80036c4:	    687a      	ldr	r2, [r7, #4]
 80036c6:	    4313      	orrs	r3, r2
 80036c8:	    607b      	str	r3, [r7, #4]
	return timings;
 80036ca:	    687b      	ldr	r3, [r7, #4]

}
 80036cc:	    4618      	mov	r0, r3
 80036ce:	    371c      	adds	r7, #28
 80036d0:	    46bd      	mov	sp, r7
 80036d2:	    f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	    4770      	bx	lr
 80036d8:	    1000      	asrs	r0, r0, #32
 80036da:	    4002      	ands	r2, r0
 80036dc:	    2000      	movs	r0, #0
 80036de:	    4002      	ands	r2, r0

080036e0 <__NVIC_EnableIRQ>:
{
 80036e0:	    b480      	push	{r7}
 80036e2:	    b083      	sub	sp, #12
 80036e4:	    af00      	add	r7, sp, #0
 80036e6:	    4603      	mov	r3, r0
 80036e8:	    71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ea:	    f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	    2b00      	cmp	r3, #0
 80036f0:	/-- db0b      	blt.n	800370a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036f2:	|   79fb      	ldrb	r3, [r7, #7]
 80036f4:	|   f003 021f 	and.w	r2, r3, #31
 80036f8:	|   4907      	ldr	r1, [pc, #28]	; (8003718 <__NVIC_EnableIRQ+0x38>)
 80036fa:	|   f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	|   095b      	lsrs	r3, r3, #5
 8003700:	|   2001      	movs	r0, #1
 8003702:	|   fa00 f202 	lsl.w	r2, r0, r2
 8003706:	|   f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800370a:	\-> bf00      	nop
 800370c:	    370c      	adds	r7, #12
 800370e:	    46bd      	mov	sp, r7
 8003710:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	    4770      	bx	lr
 8003716:	    bf00      	nop
 8003718:	    e100      	b.n	800391c <RTC_set_time+0x70>
 800371a:	    e000      	b.n	800371e <__NVIC_ClearPendingIRQ+0x2>

0800371c <__NVIC_ClearPendingIRQ>:
{
 800371c:	    b480      	push	{r7}
 800371e:	    b083      	sub	sp, #12
 8003720:	    af00      	add	r7, sp, #0
 8003722:	    4603      	mov	r3, r0
 8003724:	    71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003726:	    f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	    2b00      	cmp	r3, #0
 800372c:	/-- db0c      	blt.n	8003748 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800372e:	|   79fb      	ldrb	r3, [r7, #7]
 8003730:	|   f003 021f 	and.w	r2, r3, #31
 8003734:	|   4907      	ldr	r1, [pc, #28]	; (8003754 <__NVIC_ClearPendingIRQ+0x38>)
 8003736:	|   f997 3007 	ldrsb.w	r3, [r7, #7]
 800373a:	|   095b      	lsrs	r3, r3, #5
 800373c:	|   2001      	movs	r0, #1
 800373e:	|   fa00 f202 	lsl.w	r2, r0, r2
 8003742:	|   3360      	adds	r3, #96	; 0x60
 8003744:	|   f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003748:	\-> bf00      	nop
 800374a:	    370c      	adds	r7, #12
 800374c:	    46bd      	mov	sp, r7
 800374e:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	    4770      	bx	lr
 8003754:	    e100      	b.n	8003958 <RTC_struct_brief_time_converter+0x38>
 8003756:	    e000      	b.n	800375a <__NVIC_SetPriority+0x2>

08003758 <__NVIC_SetPriority>:
{
 8003758:	       b480      	push	{r7}
 800375a:	       b083      	sub	sp, #12
 800375c:	       af00      	add	r7, sp, #0
 800375e:	       4603      	mov	r3, r0
 8003760:	       6039      	str	r1, [r7, #0]
 8003762:	       71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003764:	       f997 3007 	ldrsb.w	r3, [r7, #7]
 8003768:	       2b00      	cmp	r3, #0
 800376a:	   /-- db0a      	blt.n	8003782 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800376c:	   |   683b      	ldr	r3, [r7, #0]
 800376e:	   |   b2da      	uxtb	r2, r3
 8003770:	   |   490c      	ldr	r1, [pc, #48]	; (80037a4 <__NVIC_SetPriority+0x4c>)
 8003772:	   |   f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	   |   0112      	lsls	r2, r2, #4
 8003778:	   |   b2d2      	uxtb	r2, r2
 800377a:	   |   440b      	add	r3, r1
 800377c:	   |   f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003780:	/--|-- e00a      	b.n	8003798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003782:	|  \-> 683b      	ldr	r3, [r7, #0]
 8003784:	|      b2da      	uxtb	r2, r3
 8003786:	|      4908      	ldr	r1, [pc, #32]	; (80037a8 <__NVIC_SetPriority+0x50>)
 8003788:	|      79fb      	ldrb	r3, [r7, #7]
 800378a:	|      f003 030f 	and.w	r3, r3, #15
 800378e:	|      3b04      	subs	r3, #4
 8003790:	|      0112      	lsls	r2, r2, #4
 8003792:	|      b2d2      	uxtb	r2, r2
 8003794:	|      440b      	add	r3, r1
 8003796:	|      761a      	strb	r2, [r3, #24]
}
 8003798:	\----> bf00      	nop
 800379a:	       370c      	adds	r7, #12
 800379c:	       46bd      	mov	sp, r7
 800379e:	       f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	       4770      	bx	lr
 80037a4:	       e100      	b.n	80039a8 <RTC_struct_brief_time_converter+0x88>
 80037a6:	   /-- e000      	b.n	80037aa <__NVIC_SetPriority+0x52>
 80037a8:	   |   ed00 e000 	stc	0, cr14, [r0, #-0]

080037ac <RTC_auto_wakeup_enable>:
 *
 *
 */


void RTC_auto_wakeup_enable(uint16_t period_sec) {
 80037ac:	    b580      	push	{r7, lr}
 80037ae:	    b082      	sub	sp, #8
 80037b0:	    af00      	add	r7, sp, #0
 80037b2:	    4603      	mov	r3, r0
 80037b4:	    80fb      	strh	r3, [r7, #6]
	// unlock write protection
    PWR->CR1 |= PWR_CR1_DBP;
 80037b6:	    4b39      	ldr	r3, [pc, #228]	; (800389c <RTC_auto_wakeup_enable+0xf0>)
 80037b8:	    681b      	ldr	r3, [r3, #0]
 80037ba:	    4a38      	ldr	r2, [pc, #224]	; (800389c <RTC_auto_wakeup_enable+0xf0>)
 80037bc:	    f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c0:	    6013      	str	r3, [r2, #0]
	while((RTC->ISR & RTC_ISR_RSF) == 0);
 80037c2:	    bf00      	nop
 80037c4:	/-> 4b36      	ldr	r3, [pc, #216]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 80037c6:	|   68db      	ldr	r3, [r3, #12]
 80037c8:	|   f003 0320 	and.w	r3, r3, #32
 80037cc:	|   2b00      	cmp	r3, #0
 80037ce:	\-- d0f9      	beq.n	80037c4 <RTC_auto_wakeup_enable+0x18>
	RTC->WPR = 0xCA;
 80037d0:	    4b33      	ldr	r3, [pc, #204]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 80037d2:	    22ca      	movs	r2, #202	; 0xca
 80037d4:	    625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;
 80037d6:	    4b32      	ldr	r3, [pc, #200]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 80037d8:	    2253      	movs	r2, #83	; 0x53
 80037da:	    625a      	str	r2, [r3, #36]	; 0x24

	RTC->CR &= ~RTC_CR_WUTE;  // disable the wakeup timer
 80037dc:	    4b30      	ldr	r3, [pc, #192]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 80037de:	    689b      	ldr	r3, [r3, #8]
 80037e0:	    4a2f      	ldr	r2, [pc, #188]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 80037e2:	    f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037e6:	    6093      	str	r3, [r2, #8]
	// polling to make sure the access to wakeup auto-reload counter and to WUCKSEL[2:0] bits is allowed
	while (!(RTC->ISR & RTC_ISR_WUTWF));
 80037e8:	    bf00      	nop
 80037ea:	/-> 4b2d      	ldr	r3, [pc, #180]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 80037ec:	|   68db      	ldr	r3, [r3, #12]
 80037ee:	|   f003 0304 	and.w	r3, r3, #4
 80037f2:	|   2b00      	cmp	r3, #0
 80037f4:	\-- d0f9      	beq.n	80037ea <RTC_auto_wakeup_enable+0x3e>
	// program the wakeup auto-reload value and the wakeup clock selection
	RTC->WUTR = period_sec;	// the WUTF flag is set every (WUT[15:0] + 1) = (0 + 1) = (1) ck_wut cycles
 80037f6:	    4a2a      	ldr	r2, [pc, #168]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 80037f8:	    88fb      	ldrh	r3, [r7, #6]
 80037fa:	    6153      	str	r3, [r2, #20]
	RTC->CR &= ~RTC_CR_WUCKSEL_1;	// 10x: ck_spre (usually 1 Hz) clock is selected
 80037fc:	    4b28      	ldr	r3, [pc, #160]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 80037fe:	    689b      	ldr	r3, [r3, #8]
 8003800:	    4a27      	ldr	r2, [pc, #156]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 8003802:	    f023 0302 	bic.w	r3, r3, #2
 8003806:	    6093      	str	r3, [r2, #8]
	RTC->CR |= RTC_CR_WUCKSEL_2;
 8003808:	    4b25      	ldr	r3, [pc, #148]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 800380a:	    689b      	ldr	r3, [r3, #8]
 800380c:	    4a24      	ldr	r2, [pc, #144]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 800380e:	    f043 0304 	orr.w	r3, r3, #4
 8003812:	    6093      	str	r3, [r2, #8]

	// enable the RTC Wakeup interrupt - enable the EXTI Line 18
	if (!(RCC->APB2ENR & RCC_APB2ENR_SYSCFGEN)) RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8003814:	    4b23      	ldr	r3, [pc, #140]	; (80038a4 <RTC_auto_wakeup_enable+0xf8>)
 8003816:	    6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003818:	    f003 0301 	and.w	r3, r3, #1
 800381c:	    2b00      	cmp	r3, #0
 800381e:	/-- d105      	bne.n	800382c <RTC_auto_wakeup_enable+0x80>
 8003820:	|   4b20      	ldr	r3, [pc, #128]	; (80038a4 <RTC_auto_wakeup_enable+0xf8>)
 8003822:	|   6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003824:	|   4a1f      	ldr	r2, [pc, #124]	; (80038a4 <RTC_auto_wakeup_enable+0xf8>)
 8003826:	|   f043 0301 	orr.w	r3, r3, #1
 800382a:	|   6613      	str	r3, [r2, #96]	; 0x60
	EXTI->IMR1 |= EXTI_IMR1_IM20;	// interrupt request mask - IM22 is not masked now
 800382c:	\-> 4b1e      	ldr	r3, [pc, #120]	; (80038a8 <RTC_auto_wakeup_enable+0xfc>)
 800382e:	    681b      	ldr	r3, [r3, #0]
 8003830:	    4a1d      	ldr	r2, [pc, #116]	; (80038a8 <RTC_auto_wakeup_enable+0xfc>)
 8003832:	    f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003836:	    6013      	str	r3, [r2, #0]
	EXTI->RTSR1 |= EXTI_RTSR1_RT20;	// rising edge trigger enabled for EXTI line 17
 8003838:	    4b1b      	ldr	r3, [pc, #108]	; (80038a8 <RTC_auto_wakeup_enable+0xfc>)
 800383a:	    689b      	ldr	r3, [r3, #8]
 800383c:	    4a1a      	ldr	r2, [pc, #104]	; (80038a8 <RTC_auto_wakeup_enable+0xfc>)
 800383e:	    f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003842:	    6093      	str	r3, [r2, #8]

	NVIC_EnableIRQ(RTC_WKUP_IRQn);	// enable the RTC_WKUP IRQ channel in the NVIC
 8003844:	    2003      	movs	r0, #3
 8003846:	    f7ff ff4b 	bl	80036e0 <__NVIC_EnableIRQ>
	NVIC_ClearPendingIRQ(RTC_WKUP_IRQn);
 800384a:	    2003      	movs	r0, #3
 800384c:	    f7ff ff66 	bl	800371c <__NVIC_ClearPendingIRQ>
	NVIC_SetPriority(RTC_WKUP_IRQn, 0);	// highest priority
 8003850:	    2100      	movs	r1, #0
 8003852:	    2003      	movs	r0, #3
 8003854:	    f7ff ff80 	bl	8003758 <__NVIC_SetPriority>
    if(RTC->ISR & RTC_ISR_WUTF) RTC->ISR &= ~RTC_ISR_WUTF;
 8003858:	    4b11      	ldr	r3, [pc, #68]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 800385a:	    68db      	ldr	r3, [r3, #12]
 800385c:	    f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003860:	    2b00      	cmp	r3, #0
 8003862:	/-- d005      	beq.n	8003870 <RTC_auto_wakeup_enable+0xc4>
 8003864:	|   4b0e      	ldr	r3, [pc, #56]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 8003866:	|   68db      	ldr	r3, [r3, #12]
 8003868:	|   4a0d      	ldr	r2, [pc, #52]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 800386a:	|   f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800386e:	|   60d3      	str	r3, [r2, #12]
	RTC->CR |= RTC_CR_WUTIE;  // 1: Wakeup timer interrupt enabled
 8003870:	\-> 4b0b      	ldr	r3, [pc, #44]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 8003872:	    689b      	ldr	r3, [r3, #8]
 8003874:	    4a0a      	ldr	r2, [pc, #40]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 8003876:	    f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800387a:	    6093      	str	r3, [r2, #8]
	RTC->CR |= RTC_CR_WUTE;  // enable the timer again
 800387c:	    4b08      	ldr	r3, [pc, #32]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 800387e:	    689b      	ldr	r3, [r3, #8]
 8003880:	    4a07      	ldr	r2, [pc, #28]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 8003882:	    f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003886:	    6093      	str	r3, [r2, #8]

	// lock write protection - writing a wrong key reactivates the write protection
	RTC->WPR = 0xFF;
 8003888:	    4b05      	ldr	r3, [pc, #20]	; (80038a0 <RTC_auto_wakeup_enable+0xf4>)
 800388a:	    22ff      	movs	r2, #255	; 0xff
 800388c:	    625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("cpsie i" : : : "memory");
 800388e:	    b662      	cpsie	i
}
 8003890:	    bf00      	nop
	__enable_irq();	// global interrupts enable
}
 8003892:	    bf00      	nop
 8003894:	    3708      	adds	r7, #8
 8003896:	    46bd      	mov	sp, r7
 8003898:	    bd80      	pop	{r7, pc}
 800389a:	    bf00      	nop
 800389c:	    7000      	strb	r0, [r0, #0]
 800389e:	    4000      	ands	r0, r0
 80038a0:	    2800      	cmp	r0, #0
 80038a2:	    4000      	ands	r0, r0
 80038a4:	    1000      	asrs	r0, r0, #32
 80038a6:	    4002      	ands	r2, r0
 80038a8:	    0400      	lsls	r0, r0, #16
 80038aa:	    4001      	ands	r1, r0

080038ac <RTC_set_time>:
void RTC_set_time(uint32_t time_reg){
 80038ac:	    b480      	push	{r7}
 80038ae:	    b083      	sub	sp, #12
 80038b0:	    af00      	add	r7, sp, #0
 80038b2:	    6078      	str	r0, [r7, #4]
	// uint32_t time_value, date_value;
	// unlock write protection
    PWR->CR1 |= PWR_CR1_DBP;
 80038b4:	    4b18      	ldr	r3, [pc, #96]	; (8003918 <RTC_set_time+0x6c>)
 80038b6:	    681b      	ldr	r3, [r3, #0]
 80038b8:	    4a17      	ldr	r2, [pc, #92]	; (8003918 <RTC_set_time+0x6c>)
 80038ba:	    f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038be:	    6013      	str	r3, [r2, #0]
	RTC->WPR = 0xCA;
 80038c0:	    4b16      	ldr	r3, [pc, #88]	; (800391c <RTC_set_time+0x70>)
 80038c2:	    22ca      	movs	r2, #202	; 0xca
 80038c4:	    625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;
 80038c6:	    4b15      	ldr	r3, [pc, #84]	; (800391c <RTC_set_time+0x70>)
 80038c8:	    2253      	movs	r2, #83	; 0x53
 80038ca:	    625a      	str	r2, [r3, #36]	; 0x24
	// initialization mode on (INITF == 1) - calendar counter is stopped, can update now
	RTC->ISR |= RTC_ISR_INIT;
 80038cc:	    4b13      	ldr	r3, [pc, #76]	; (800391c <RTC_set_time+0x70>)
 80038ce:	    68db      	ldr	r3, [r3, #12]
 80038d0:	    4a12      	ldr	r2, [pc, #72]	; (800391c <RTC_set_time+0x70>)
 80038d2:	    f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d6:	    60d3      	str	r3, [r2, #12]
	while (!(RTC->ISR & RTC_ISR_INITF));  // INITF polling
 80038d8:	    bf00      	nop
 80038da:	/-> 4b10      	ldr	r3, [pc, #64]	; (800391c <RTC_set_time+0x70>)
 80038dc:	|   68db      	ldr	r3, [r3, #12]
 80038de:	|   f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e2:	|   2b00      	cmp	r3, #0
 80038e4:	\-- d0f9      	beq.n	80038da <RTC_set_time+0x2e>
	RTC->TR = time_reg;
 80038e6:	    4a0d      	ldr	r2, [pc, #52]	; (800391c <RTC_set_time+0x70>)
 80038e8:	    687b      	ldr	r3, [r7, #4]
 80038ea:	    6013      	str	r3, [r2, #0]
	RTC->ISR &= ~RTC_ISR_INIT;  // exit from the init mode
 80038ec:	    4b0b      	ldr	r3, [pc, #44]	; (800391c <RTC_set_time+0x70>)
 80038ee:	    68db      	ldr	r3, [r3, #12]
 80038f0:	    4a0a      	ldr	r2, [pc, #40]	; (800391c <RTC_set_time+0x70>)
 80038f2:	    f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038f6:	    60d3      	str	r3, [r2, #12]
	// lock write protection - writing a wrong key reactivates the write protection
	RTC->WPR = 0xFF;
 80038f8:	    4b08      	ldr	r3, [pc, #32]	; (800391c <RTC_set_time+0x70>)
 80038fa:	    22ff      	movs	r2, #255	; 0xff
 80038fc:	    625a      	str	r2, [r3, #36]	; 0x24
    PWR->CR1 &= ~PWR_CR1_DBP;
 80038fe:	    4b06      	ldr	r3, [pc, #24]	; (8003918 <RTC_set_time+0x6c>)
 8003900:	    681b      	ldr	r3, [r3, #0]
 8003902:	    4a05      	ldr	r2, [pc, #20]	; (8003918 <RTC_set_time+0x6c>)
 8003904:	    f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003908:	    6013      	str	r3, [r2, #0]
}
 800390a:	    bf00      	nop
 800390c:	    370c      	adds	r7, #12
 800390e:	    46bd      	mov	sp, r7
 8003910:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	    4770      	bx	lr
 8003916:	    bf00      	nop
 8003918:	    7000      	strb	r0, [r0, #0]
 800391a:	    4000      	ands	r0, r0
 800391c:	    2800      	cmp	r0, #0
 800391e:	    4000      	ands	r0, r0

08003920 <RTC_struct_brief_time_converter>:

uint32_t RTC_struct_brief_time_converter(RTC_struct_brief *br_data){
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
    uint32_t time_value = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
    time_value |= ((br_data->hours / 10) << RTC_TR_HT_Pos) | ((br_data->hours % 10) << RTC_TR_HU_Pos);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	791b      	ldrb	r3, [r3, #4]
 8003930:	4a28      	ldr	r2, [pc, #160]	; (80039d4 <RTC_struct_brief_time_converter+0xb4>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	08db      	lsrs	r3, r3, #3
 8003938:	b2db      	uxtb	r3, r3
 800393a:	0518      	lsls	r0, r3, #20
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	791a      	ldrb	r2, [r3, #4]
 8003940:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <RTC_struct_brief_time_converter+0xb4>)
 8003942:	fba3 1302 	umull	r1, r3, r3, r2
 8003946:	08d9      	lsrs	r1, r3, #3
 8003948:	460b      	mov	r3, r1
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	041b      	lsls	r3, r3, #16
 8003956:	4303      	orrs	r3, r0
 8003958:	461a      	mov	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
    time_value |= ((br_data->minutes / 10) << RTC_TR_MNT_Pos) | ((br_data->minutes % 10) << RTC_TR_MNU_Pos);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	795b      	ldrb	r3, [r3, #5]
 8003964:	4a1b      	ldr	r2, [pc, #108]	; (80039d4 <RTC_struct_brief_time_converter+0xb4>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	08db      	lsrs	r3, r3, #3
 800396c:	b2db      	uxtb	r3, r3
 800396e:	0318      	lsls	r0, r3, #12
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	795a      	ldrb	r2, [r3, #5]
 8003974:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <RTC_struct_brief_time_converter+0xb4>)
 8003976:	fba3 1302 	umull	r1, r3, r3, r2
 800397a:	08d9      	lsrs	r1, r3, #3
 800397c:	460b      	mov	r3, r1
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	4303      	orrs	r3, r0
 800398c:	461a      	mov	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
    time_value |= ((br_data->seconds / 10) << RTC_TR_ST_Pos) | ((br_data->minutes % 10) << RTC_TR_SU_Pos);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	799b      	ldrb	r3, [r3, #6]
 8003998:	4a0e      	ldr	r2, [pc, #56]	; (80039d4 <RTC_struct_brief_time_converter+0xb4>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	08db      	lsrs	r3, r3, #3
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	0118      	lsls	r0, r3, #4
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	795a      	ldrb	r2, [r3, #5]
 80039a8:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <RTC_struct_brief_time_converter+0xb4>)
 80039aa:	fba3 1302 	umull	r1, r3, r3, r2
 80039ae:	08d9      	lsrs	r1, r3, #3
 80039b0:	460b      	mov	r3, r1
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	4303      	orrs	r3, r0
 80039be:	461a      	mov	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
    return time_value;
 80039c6:	68fb      	ldr	r3, [r7, #12]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	cccd      	ldmia	r4!, {r0, r2, r3, r6, r7}
 80039d6:	cccc      	ldmia	r4!, {r2, r3, r6, r7}

080039d8 <RTC_struct_brief_date_converter>:

uint32_t RTC_struct_brief_date_converter(RTC_struct_brief *br_data){
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
    uint32_t date_value = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
	date_value |= ((br_data->years / 10) << RTC_DR_YT_Pos) | ((br_data->years % 10) << RTC_DR_YU_Pos);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	4a2c      	ldr	r2, [pc, #176]	; (8003a9c <RTC_struct_brief_date_converter+0xc4>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	08db      	lsrs	r3, r3, #3
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	0518      	lsls	r0, r3, #20
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	781a      	ldrb	r2, [r3, #0]
 80039f8:	4b28      	ldr	r3, [pc, #160]	; (8003a9c <RTC_struct_brief_date_converter+0xc4>)
 80039fa:	fba3 1302 	umull	r1, r3, r3, r2
 80039fe:	08d9      	lsrs	r1, r3, #3
 8003a00:	460b      	mov	r3, r1
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	041b      	lsls	r3, r3, #16
 8003a0e:	4303      	orrs	r3, r0
 8003a10:	461a      	mov	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
    date_value |= ((br_data->week_day) << RTC_DR_WDU_Pos);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	785b      	ldrb	r3, [r3, #1]
 8003a1c:	035b      	lsls	r3, r3, #13
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
    date_value |= ((br_data->months / 10) << RTC_DR_MT_Pos) | ((br_data->months % 10) << RTC_DR_MU_Pos);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	789b      	ldrb	r3, [r3, #2]
 8003a2a:	4a1c      	ldr	r2, [pc, #112]	; (8003a9c <RTC_struct_brief_date_converter+0xc4>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	08db      	lsrs	r3, r3, #3
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	0318      	lsls	r0, r3, #12
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	789a      	ldrb	r2, [r3, #2]
 8003a3a:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <RTC_struct_brief_date_converter+0xc4>)
 8003a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a40:	08d9      	lsrs	r1, r3, #3
 8003a42:	460b      	mov	r3, r1
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	021b      	lsls	r3, r3, #8
 8003a50:	4303      	orrs	r3, r0
 8003a52:	461a      	mov	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
    date_value |= ((br_data->date / 10) << RTC_DR_DT_Pos) | ((br_data->date % 10) << RTC_DR_DU_Pos);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	78db      	ldrb	r3, [r3, #3]
 8003a5e:	4a0f      	ldr	r2, [pc, #60]	; (8003a9c <RTC_struct_brief_date_converter+0xc4>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	08db      	lsrs	r3, r3, #3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	0118      	lsls	r0, r3, #4
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	78da      	ldrb	r2, [r3, #3]
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <RTC_struct_brief_date_converter+0xc4>)
 8003a70:	fba3 1302 	umull	r1, r3, r3, r2
 8003a74:	08d9      	lsrs	r1, r3, #3
 8003a76:	460b      	mov	r3, r1
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	440b      	add	r3, r1
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	4303      	orrs	r3, r0
 8003a84:	461a      	mov	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
    return date_value;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	cccd      	ldmia	r4!, {r0, r2, r3, r6, r7}
 8003a9e:	cccc      	ldmia	r4!, {r2, r3, r6, r7}

08003aa0 <RTC_set_date>:

void RTC_set_date(uint32_t date_reg){
 8003aa0:	    b480      	push	{r7}
 8003aa2:	    b083      	sub	sp, #12
 8003aa4:	    af00      	add	r7, sp, #0
 8003aa6:	    6078      	str	r0, [r7, #4]
	// uint32_t time_value, date_value;
	// unlock write protection
    PWR->CR1 |= PWR_CR1_DBP;
 8003aa8:	    4b18      	ldr	r3, [pc, #96]	; (8003b0c <RTC_set_date+0x6c>)
 8003aaa:	    681b      	ldr	r3, [r3, #0]
 8003aac:	    4a17      	ldr	r2, [pc, #92]	; (8003b0c <RTC_set_date+0x6c>)
 8003aae:	    f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab2:	    6013      	str	r3, [r2, #0]
	RTC->WPR = 0xCA;
 8003ab4:	    4b16      	ldr	r3, [pc, #88]	; (8003b10 <RTC_set_date+0x70>)
 8003ab6:	    22ca      	movs	r2, #202	; 0xca
 8003ab8:	    625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;
 8003aba:	    4b15      	ldr	r3, [pc, #84]	; (8003b10 <RTC_set_date+0x70>)
 8003abc:	    2253      	movs	r2, #83	; 0x53
 8003abe:	    625a      	str	r2, [r3, #36]	; 0x24
	// initialization mode on (INITF == 1) - calendar counter is stopped, can update now
	RTC->ISR |= RTC_ISR_INIT;
 8003ac0:	    4b13      	ldr	r3, [pc, #76]	; (8003b10 <RTC_set_date+0x70>)
 8003ac2:	    68db      	ldr	r3, [r3, #12]
 8003ac4:	    4a12      	ldr	r2, [pc, #72]	; (8003b10 <RTC_set_date+0x70>)
 8003ac6:	    f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aca:	    60d3      	str	r3, [r2, #12]
	while (!(RTC->ISR & RTC_ISR_INITF));  // INITF polling
 8003acc:	    bf00      	nop
 8003ace:	/-> 4b10      	ldr	r3, [pc, #64]	; (8003b10 <RTC_set_date+0x70>)
 8003ad0:	|   68db      	ldr	r3, [r3, #12]
 8003ad2:	|   f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad6:	|   2b00      	cmp	r3, #0
 8003ad8:	\-- d0f9      	beq.n	8003ace <RTC_set_date+0x2e>
	RTC->DR = date_reg;
 8003ada:	    4a0d      	ldr	r2, [pc, #52]	; (8003b10 <RTC_set_date+0x70>)
 8003adc:	    687b      	ldr	r3, [r7, #4]
 8003ade:	    6053      	str	r3, [r2, #4]
	RTC->ISR &= ~RTC_ISR_INIT;  // exit from the init mode
 8003ae0:	    4b0b      	ldr	r3, [pc, #44]	; (8003b10 <RTC_set_date+0x70>)
 8003ae2:	    68db      	ldr	r3, [r3, #12]
 8003ae4:	    4a0a      	ldr	r2, [pc, #40]	; (8003b10 <RTC_set_date+0x70>)
 8003ae6:	    f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aea:	    60d3      	str	r3, [r2, #12]
	// lock write protection - writing a wrong key reactivates the write protection
	RTC->WPR = 0xFF;
 8003aec:	    4b08      	ldr	r3, [pc, #32]	; (8003b10 <RTC_set_date+0x70>)
 8003aee:	    22ff      	movs	r2, #255	; 0xff
 8003af0:	    625a      	str	r2, [r3, #36]	; 0x24
    PWR->CR1 &= ~PWR_CR1_DBP;
 8003af2:	    4b06      	ldr	r3, [pc, #24]	; (8003b0c <RTC_set_date+0x6c>)
 8003af4:	    681b      	ldr	r3, [r3, #0]
 8003af6:	    4a05      	ldr	r2, [pc, #20]	; (8003b0c <RTC_set_date+0x6c>)
 8003af8:	    f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003afc:	    6013      	str	r3, [r2, #0]
}
 8003afe:	    bf00      	nop
 8003b00:	    370c      	adds	r7, #12
 8003b02:	    46bd      	mov	sp, r7
 8003b04:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	    4770      	bx	lr
 8003b0a:	    bf00      	nop
 8003b0c:	    7000      	strb	r0, [r0, #0]
 8003b0e:	    4000      	ands	r0, r0
 8003b10:	    2800      	cmp	r0, #0
 8003b12:	    4000      	ands	r0, r0

08003b14 <RTC_data_update>:

void RTC_data_update(RTC_struct_brief *br_data){
 8003b14:	    b480      	push	{r7}
 8003b16:	    b085      	sub	sp, #20
 8003b18:	    af00      	add	r7, sp, #0
 8003b1a:	    6078      	str	r0, [r7, #4]
	uint32_t time_value = 0, date_value = 0;
 8003b1c:	    2300      	movs	r3, #0
 8003b1e:	    60fb      	str	r3, [r7, #12]
 8003b20:	    2300      	movs	r3, #0
 8003b22:	    60bb      	str	r3, [r7, #8]
	// unlock write protection
	PWR->CR1 |= PWR_CR1_DBP;
 8003b24:	    4b6d      	ldr	r3, [pc, #436]	; (8003cdc <RTC_data_update+0x1c8>)
 8003b26:	    681b      	ldr	r3, [r3, #0]
 8003b28:	    4a6c      	ldr	r2, [pc, #432]	; (8003cdc <RTC_data_update+0x1c8>)
 8003b2a:	    f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2e:	    6013      	str	r3, [r2, #0]
	RTC->WPR = 0xCA;
 8003b30:	    4b6b      	ldr	r3, [pc, #428]	; (8003ce0 <RTC_data_update+0x1cc>)
 8003b32:	    22ca      	movs	r2, #202	; 0xca
 8003b34:	    625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;
 8003b36:	    4b6a      	ldr	r3, [pc, #424]	; (8003ce0 <RTC_data_update+0x1cc>)
 8003b38:	    2253      	movs	r2, #83	; 0x53
 8003b3a:	    625a      	str	r2, [r3, #36]	; 0x24
	// initialization mode on (INITF == 1) - calendar counter is stopped, can update now
	RTC->ISR |= RTC_ISR_INIT;
 8003b3c:	    4b68      	ldr	r3, [pc, #416]	; (8003ce0 <RTC_data_update+0x1cc>)
 8003b3e:	    68db      	ldr	r3, [r3, #12]
 8003b40:	    4a67      	ldr	r2, [pc, #412]	; (8003ce0 <RTC_data_update+0x1cc>)
 8003b42:	    f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b46:	    60d3      	str	r3, [r2, #12]
	while (!(RTC->ISR & RTC_ISR_INITF));  // INITF polling
 8003b48:	    bf00      	nop
 8003b4a:	/-> 4b65      	ldr	r3, [pc, #404]	; (8003ce0 <RTC_data_update+0x1cc>)
 8003b4c:	|   68db      	ldr	r3, [r3, #12]
 8003b4e:	|   f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b52:	|   2b00      	cmp	r3, #0
 8003b54:	\-- d0f9      	beq.n	8003b4a <RTC_data_update+0x36>
	// prescalers - two separate write access - synch predivider
    time_value |= ((br_data->hours / 10) << RTC_TR_HT_Pos) | ((br_data->hours % 10) << RTC_TR_HU_Pos);
 8003b56:	    687b      	ldr	r3, [r7, #4]
 8003b58:	    791b      	ldrb	r3, [r3, #4]
 8003b5a:	    4a62      	ldr	r2, [pc, #392]	; (8003ce4 <RTC_data_update+0x1d0>)
 8003b5c:	    fba2 2303 	umull	r2, r3, r2, r3
 8003b60:	    08db      	lsrs	r3, r3, #3
 8003b62:	    b2db      	uxtb	r3, r3
 8003b64:	    0518      	lsls	r0, r3, #20
 8003b66:	    687b      	ldr	r3, [r7, #4]
 8003b68:	    791a      	ldrb	r2, [r3, #4]
 8003b6a:	    4b5e      	ldr	r3, [pc, #376]	; (8003ce4 <RTC_data_update+0x1d0>)
 8003b6c:	    fba3 1302 	umull	r1, r3, r3, r2
 8003b70:	    08d9      	lsrs	r1, r3, #3
 8003b72:	    460b      	mov	r3, r1
 8003b74:	    009b      	lsls	r3, r3, #2
 8003b76:	    440b      	add	r3, r1
 8003b78:	    005b      	lsls	r3, r3, #1
 8003b7a:	    1ad3      	subs	r3, r2, r3
 8003b7c:	    b2db      	uxtb	r3, r3
 8003b7e:	    041b      	lsls	r3, r3, #16
 8003b80:	    4303      	orrs	r3, r0
 8003b82:	    461a      	mov	r2, r3
 8003b84:	    68fb      	ldr	r3, [r7, #12]
 8003b86:	    4313      	orrs	r3, r2
 8003b88:	    60fb      	str	r3, [r7, #12]
    time_value |= ((br_data->minutes / 10) << RTC_TR_MNT_Pos) | ((br_data->minutes % 10) << RTC_TR_MNU_Pos);
 8003b8a:	    687b      	ldr	r3, [r7, #4]
 8003b8c:	    795b      	ldrb	r3, [r3, #5]
 8003b8e:	    4a55      	ldr	r2, [pc, #340]	; (8003ce4 <RTC_data_update+0x1d0>)
 8003b90:	    fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	    08db      	lsrs	r3, r3, #3
 8003b96:	    b2db      	uxtb	r3, r3
 8003b98:	    0318      	lsls	r0, r3, #12
 8003b9a:	    687b      	ldr	r3, [r7, #4]
 8003b9c:	    795a      	ldrb	r2, [r3, #5]
 8003b9e:	    4b51      	ldr	r3, [pc, #324]	; (8003ce4 <RTC_data_update+0x1d0>)
 8003ba0:	    fba3 1302 	umull	r1, r3, r3, r2
 8003ba4:	    08d9      	lsrs	r1, r3, #3
 8003ba6:	    460b      	mov	r3, r1
 8003ba8:	    009b      	lsls	r3, r3, #2
 8003baa:	    440b      	add	r3, r1
 8003bac:	    005b      	lsls	r3, r3, #1
 8003bae:	    1ad3      	subs	r3, r2, r3
 8003bb0:	    b2db      	uxtb	r3, r3
 8003bb2:	    021b      	lsls	r3, r3, #8
 8003bb4:	    4303      	orrs	r3, r0
 8003bb6:	    461a      	mov	r2, r3
 8003bb8:	    68fb      	ldr	r3, [r7, #12]
 8003bba:	    4313      	orrs	r3, r2
 8003bbc:	    60fb      	str	r3, [r7, #12]
    time_value |= ((br_data->seconds / 10) << RTC_TR_ST_Pos) | ((br_data->minutes % 10) << RTC_TR_SU_Pos);
 8003bbe:	    687b      	ldr	r3, [r7, #4]
 8003bc0:	    799b      	ldrb	r3, [r3, #6]
 8003bc2:	    4a48      	ldr	r2, [pc, #288]	; (8003ce4 <RTC_data_update+0x1d0>)
 8003bc4:	    fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	    08db      	lsrs	r3, r3, #3
 8003bca:	    b2db      	uxtb	r3, r3
 8003bcc:	    0118      	lsls	r0, r3, #4
 8003bce:	    687b      	ldr	r3, [r7, #4]
 8003bd0:	    795a      	ldrb	r2, [r3, #5]
 8003bd2:	    4b44      	ldr	r3, [pc, #272]	; (8003ce4 <RTC_data_update+0x1d0>)
 8003bd4:	    fba3 1302 	umull	r1, r3, r3, r2
 8003bd8:	    08d9      	lsrs	r1, r3, #3
 8003bda:	    460b      	mov	r3, r1
 8003bdc:	    009b      	lsls	r3, r3, #2
 8003bde:	    440b      	add	r3, r1
 8003be0:	    005b      	lsls	r3, r3, #1
 8003be2:	    1ad3      	subs	r3, r2, r3
 8003be4:	    b2db      	uxtb	r3, r3
 8003be6:	    4303      	orrs	r3, r0
 8003be8:	    461a      	mov	r2, r3
 8003bea:	    68fb      	ldr	r3, [r7, #12]
 8003bec:	    4313      	orrs	r3, r2
 8003bee:	    60fb      	str	r3, [r7, #12]
	RTC->TR = time_value;
 8003bf0:	    4a3b      	ldr	r2, [pc, #236]	; (8003ce0 <RTC_data_update+0x1cc>)
 8003bf2:	    68fb      	ldr	r3, [r7, #12]
 8003bf4:	    6013      	str	r3, [r2, #0]
	date_value |= ((br_data->years / 10) << RTC_DR_YT_Pos) | ((br_data->years % 10) << RTC_DR_YU_Pos);
 8003bf6:	    687b      	ldr	r3, [r7, #4]
 8003bf8:	    781b      	ldrb	r3, [r3, #0]
 8003bfa:	    4a3a      	ldr	r2, [pc, #232]	; (8003ce4 <RTC_data_update+0x1d0>)
 8003bfc:	    fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	    08db      	lsrs	r3, r3, #3
 8003c02:	    b2db      	uxtb	r3, r3
 8003c04:	    0518      	lsls	r0, r3, #20
 8003c06:	    687b      	ldr	r3, [r7, #4]
 8003c08:	    781a      	ldrb	r2, [r3, #0]
 8003c0a:	    4b36      	ldr	r3, [pc, #216]	; (8003ce4 <RTC_data_update+0x1d0>)
 8003c0c:	    fba3 1302 	umull	r1, r3, r3, r2
 8003c10:	    08d9      	lsrs	r1, r3, #3
 8003c12:	    460b      	mov	r3, r1
 8003c14:	    009b      	lsls	r3, r3, #2
 8003c16:	    440b      	add	r3, r1
 8003c18:	    005b      	lsls	r3, r3, #1
 8003c1a:	    1ad3      	subs	r3, r2, r3
 8003c1c:	    b2db      	uxtb	r3, r3
 8003c1e:	    041b      	lsls	r3, r3, #16
 8003c20:	    4303      	orrs	r3, r0
 8003c22:	    461a      	mov	r2, r3
 8003c24:	    68bb      	ldr	r3, [r7, #8]
 8003c26:	    4313      	orrs	r3, r2
 8003c28:	    60bb      	str	r3, [r7, #8]
    date_value |= ((br_data->week_day) << RTC_DR_WDU_Pos);
 8003c2a:	    687b      	ldr	r3, [r7, #4]
 8003c2c:	    785b      	ldrb	r3, [r3, #1]
 8003c2e:	    035b      	lsls	r3, r3, #13
 8003c30:	    461a      	mov	r2, r3
 8003c32:	    68bb      	ldr	r3, [r7, #8]
 8003c34:	    4313      	orrs	r3, r2
 8003c36:	    60bb      	str	r3, [r7, #8]
    date_value |= ((br_data->months / 10) << RTC_DR_MT_Pos) | ((br_data->months % 10) << RTC_DR_MU_Pos);
 8003c38:	    687b      	ldr	r3, [r7, #4]
 8003c3a:	    789b      	ldrb	r3, [r3, #2]
 8003c3c:	    4a29      	ldr	r2, [pc, #164]	; (8003ce4 <RTC_data_update+0x1d0>)
 8003c3e:	    fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	    08db      	lsrs	r3, r3, #3
 8003c44:	    b2db      	uxtb	r3, r3
 8003c46:	    0318      	lsls	r0, r3, #12
 8003c48:	    687b      	ldr	r3, [r7, #4]
 8003c4a:	    789a      	ldrb	r2, [r3, #2]
 8003c4c:	    4b25      	ldr	r3, [pc, #148]	; (8003ce4 <RTC_data_update+0x1d0>)
 8003c4e:	    fba3 1302 	umull	r1, r3, r3, r2
 8003c52:	    08d9      	lsrs	r1, r3, #3
 8003c54:	    460b      	mov	r3, r1
 8003c56:	    009b      	lsls	r3, r3, #2
 8003c58:	    440b      	add	r3, r1
 8003c5a:	    005b      	lsls	r3, r3, #1
 8003c5c:	    1ad3      	subs	r3, r2, r3
 8003c5e:	    b2db      	uxtb	r3, r3
 8003c60:	    021b      	lsls	r3, r3, #8
 8003c62:	    4303      	orrs	r3, r0
 8003c64:	    461a      	mov	r2, r3
 8003c66:	    68bb      	ldr	r3, [r7, #8]
 8003c68:	    4313      	orrs	r3, r2
 8003c6a:	    60bb      	str	r3, [r7, #8]
    date_value |= ((br_data->date / 10) << RTC_DR_DT_Pos) | ((br_data->date % 10) << RTC_DR_DU_Pos);
 8003c6c:	    687b      	ldr	r3, [r7, #4]
 8003c6e:	    78db      	ldrb	r3, [r3, #3]
 8003c70:	    4a1c      	ldr	r2, [pc, #112]	; (8003ce4 <RTC_data_update+0x1d0>)
 8003c72:	    fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	    08db      	lsrs	r3, r3, #3
 8003c78:	    b2db      	uxtb	r3, r3
 8003c7a:	    0118      	lsls	r0, r3, #4
 8003c7c:	    687b      	ldr	r3, [r7, #4]
 8003c7e:	    78da      	ldrb	r2, [r3, #3]
 8003c80:	    4b18      	ldr	r3, [pc, #96]	; (8003ce4 <RTC_data_update+0x1d0>)
 8003c82:	    fba3 1302 	umull	r1, r3, r3, r2
 8003c86:	    08d9      	lsrs	r1, r3, #3
 8003c88:	    460b      	mov	r3, r1
 8003c8a:	    009b      	lsls	r3, r3, #2
 8003c8c:	    440b      	add	r3, r1
 8003c8e:	    005b      	lsls	r3, r3, #1
 8003c90:	    1ad3      	subs	r3, r2, r3
 8003c92:	    b2db      	uxtb	r3, r3
 8003c94:	    4303      	orrs	r3, r0
 8003c96:	    461a      	mov	r2, r3
 8003c98:	    68bb      	ldr	r3, [r7, #8]
 8003c9a:	    4313      	orrs	r3, r2
 8003c9c:	    60bb      	str	r3, [r7, #8]
    RTC->DR = date_value;
 8003c9e:	    4a10      	ldr	r2, [pc, #64]	; (8003ce0 <RTC_data_update+0x1cc>)
 8003ca0:	    68bb      	ldr	r3, [r7, #8]
 8003ca2:	    6053      	str	r3, [r2, #4]
	RTC->CR &= ~RTC_CR_FMT;  // 24h format == 0
 8003ca4:	    4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <RTC_data_update+0x1cc>)
 8003ca6:	    689b      	ldr	r3, [r3, #8]
 8003ca8:	    4a0d      	ldr	r2, [pc, #52]	; (8003ce0 <RTC_data_update+0x1cc>)
 8003caa:	    f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cae:	    6093      	str	r3, [r2, #8]
	RTC->ISR &= ~RTC_ISR_INIT;  // exit from the init mode
 8003cb0:	    4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <RTC_data_update+0x1cc>)
 8003cb2:	    68db      	ldr	r3, [r3, #12]
 8003cb4:	    4a0a      	ldr	r2, [pc, #40]	; (8003ce0 <RTC_data_update+0x1cc>)
 8003cb6:	    f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cba:	    60d3      	str	r3, [r2, #12]
	// lock write protection - writing a wrong key reactivates the write protection
	RTC->WPR = 0xFF;
 8003cbc:	    4b08      	ldr	r3, [pc, #32]	; (8003ce0 <RTC_data_update+0x1cc>)
 8003cbe:	    22ff      	movs	r2, #255	; 0xff
 8003cc0:	    625a      	str	r2, [r3, #36]	; 0x24
	PWR->CR1 &= ~PWR_CR1_DBP;
 8003cc2:	    4b06      	ldr	r3, [pc, #24]	; (8003cdc <RTC_data_update+0x1c8>)
 8003cc4:	    681b      	ldr	r3, [r3, #0]
 8003cc6:	    4a05      	ldr	r2, [pc, #20]	; (8003cdc <RTC_data_update+0x1c8>)
 8003cc8:	    f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ccc:	    6013      	str	r3, [r2, #0]
}
 8003cce:	    bf00      	nop
 8003cd0:	    3714      	adds	r7, #20
 8003cd2:	    46bd      	mov	sp, r7
 8003cd4:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	    4770      	bx	lr
 8003cda:	    bf00      	nop
 8003cdc:	    7000      	strb	r0, [r0, #0]
 8003cde:	    4000      	ands	r0, r0
 8003ce0:	    2800      	cmp	r0, #0
 8003ce2:	    4000      	ands	r0, r0
 8003ce4:	    cccd      	ldmia	r4!, {r0, r2, r3, r6, r7}
 8003ce6:	    cccc      	ldmia	r4!, {r2, r3, r6, r7}

08003ce8 <RTC_Init>:
// uint32_t RTC_struct_brief_to_seconds(RTC_struct_brief *br_data){
//     const uint8_t day_in_month[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

//     uint32_t sec = br_data->seconds + br_data->minutes * 60 + br_data->hours * 3600 + br_data->date * 86400 +
// }
uint8_t RTC_Init(){
 8003ce8:	          b480      	push	{r7}
 8003cea:	          af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;
 8003cec:	          4b4f      	ldr	r3, [pc, #316]	; (8003e2c <RTC_Init+0x144>)
 8003cee:	          6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	          4a4e      	ldr	r2, [pc, #312]	; (8003e2c <RTC_Init+0x144>)
 8003cf2:	          f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	          6593      	str	r3, [r2, #88]	; 0x58

	if((RCC->BDCR & RCC_BDCR_RTCEN) == 0){
 8003cf8:	          4b4c      	ldr	r3, [pc, #304]	; (8003e2c <RTC_Init+0x144>)
 8003cfa:	          f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	          f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d02:	          2b00      	cmp	r3, #0
 8003d04:	/-------- f040 808b 	bne.w	8003e1e <RTC_Init+0x136>
		// check the INITS status flag in RTC_ISR register to verify if the calendar is already initialized
		if (RTC->ISR & RTC_ISR_INITS)
 8003d08:	|         4b49      	ldr	r3, [pc, #292]	; (8003e30 <RTC_Init+0x148>)
 8003d0a:	|         68db      	ldr	r3, [r3, #12]
 8003d0c:	|         f003 0310 	and.w	r3, r3, #16
 8003d10:	|         2b00      	cmp	r3, #0
 8003d12:	|     /-- d001      	beq.n	8003d18 <RTC_Init+0x30>
            return 0;
 8003d14:	|     |   2300      	movs	r3, #0
 8003d16:	|  /--|-- e083      	b.n	8003e20 <RTC_Init+0x138>
		// PWR clock on
		PWR->CR1 |= PWR_CR1_DBP;  // enable WRITE - allow access to backup registers (BDCR)
 8003d18:	|  |  \-> 4b46      	ldr	r3, [pc, #280]	; (8003e34 <RTC_Init+0x14c>)
 8003d1a:	|  |      681b      	ldr	r3, [r3, #0]
 8003d1c:	|  |      4a45      	ldr	r2, [pc, #276]	; (8003e34 <RTC_Init+0x14c>)
 8003d1e:	|  |      f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d22:	|  |      6013      	str	r3, [r2, #0]
		if (!(RCC->BDCR & RCC_BDCR_RTCEN)) {  // pass only at the first time
 8003d24:	|  |      4b41      	ldr	r3, [pc, #260]	; (8003e2c <RTC_Init+0x144>)
 8003d26:	|  |      f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2a:	|  |      f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d2e:	|  |      2b00      	cmp	r3, #0
 8003d30:	|  |  /-- d10f      	bne.n	8003d52 <RTC_Init+0x6a>
			RCC->BDCR |= RCC_BDCR_BDRST;  // software reset - 1: Resets the entire Backup domain
 8003d32:	|  |  |   4b3e      	ldr	r3, [pc, #248]	; (8003e2c <RTC_Init+0x144>)
 8003d34:	|  |  |   f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d38:	|  |  |   4a3c      	ldr	r2, [pc, #240]	; (8003e2c <RTC_Init+0x144>)
 8003d3a:	|  |  |   f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3e:	|  |  |   f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			RCC->BDCR &= ~RCC_BDCR_BDRST;
 8003d42:	|  |  |   4b3a      	ldr	r3, [pc, #232]	; (8003e2c <RTC_Init+0x144>)
 8003d44:	|  |  |   f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d48:	|  |  |   4a38      	ldr	r2, [pc, #224]	; (8003e2c <RTC_Init+0x144>)
 8003d4a:	|  |  |   f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4e:	|  |  |   f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		}
		RCC->BDCR |= RCC_BDCR_LSEON;  // enable LSE - Low-speed external oscillator
 8003d52:	|  |  \-> 4b36      	ldr	r3, [pc, #216]	; (8003e2c <RTC_Init+0x144>)
 8003d54:	|  |      f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d58:	|  |      4a34      	ldr	r2, [pc, #208]	; (8003e2c <RTC_Init+0x144>)
 8003d5a:	|  |      f043 0301 	orr.w	r3, r3, #1
 8003d5e:	|  |      f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		while (!(RCC->BDCR & RCC_BDCR_LSERDY));  // wait for being ready by polling
 8003d62:	|  |      bf00      	nop
 8003d64:	|  |  /-> 4b31      	ldr	r3, [pc, #196]	; (8003e2c <RTC_Init+0x144>)
 8003d66:	|  |  |   f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	|  |  |   f003 0302 	and.w	r3, r3, #2
 8003d6e:	|  |  |   2b00      	cmp	r3, #0
 8003d70:	|  |  \-- d0f8      	beq.n	8003d64 <RTC_Init+0x7c>
		// LSE as clk source - [01] - LSE oscillator clock used as the RTC clock
		RCC->BDCR |= RCC_BDCR_RTCSEL_0;
 8003d72:	|  |      4b2e      	ldr	r3, [pc, #184]	; (8003e2c <RTC_Init+0x144>)
 8003d74:	|  |      f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d78:	|  |      4a2c      	ldr	r2, [pc, #176]	; (8003e2c <RTC_Init+0x144>)
 8003d7a:	|  |      f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7e:	|  |      f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		RCC->BDCR &= ~RCC_BDCR_RTCSEL_1;
 8003d82:	|  |      4b2a      	ldr	r3, [pc, #168]	; (8003e2c <RTC_Init+0x144>)
 8003d84:	|  |      f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d88:	|  |      4a28      	ldr	r2, [pc, #160]	; (8003e2c <RTC_Init+0x144>)
 8003d8a:	|  |      f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d8e:	|  |      f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		RCC->BDCR |= RCC_BDCR_RTCEN;  // RTC clock on
 8003d92:	|  |      4b26      	ldr	r3, [pc, #152]	; (8003e2c <RTC_Init+0x144>)
 8003d94:	|  |      f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d98:	|  |      4a24      	ldr	r2, [pc, #144]	; (8003e2c <RTC_Init+0x144>)
 8003d9a:	|  |      f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d9e:	|  |      f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		// RTC_auto_wakeup_enable();
		// RTC_data_update(f_data);
			// unlock write protection
        RTC->WPR = 0xCA;
 8003da2:	|  |      4b23      	ldr	r3, [pc, #140]	; (8003e30 <RTC_Init+0x148>)
 8003da4:	|  |      22ca      	movs	r2, #202	; 0xca
 8003da6:	|  |      625a      	str	r2, [r3, #36]	; 0x24
        RTC->WPR = 0x53;
 8003da8:	|  |      4b21      	ldr	r3, [pc, #132]	; (8003e30 <RTC_Init+0x148>)
 8003daa:	|  |      2253      	movs	r2, #83	; 0x53
 8003dac:	|  |      625a      	str	r2, [r3, #36]	; 0x24
        // initialization mode on (INITF == 1) - calendar counter is stopped, can update now
        RTC->ISR |= RTC_ISR_INIT;
 8003dae:	|  |      4b20      	ldr	r3, [pc, #128]	; (8003e30 <RTC_Init+0x148>)
 8003db0:	|  |      68db      	ldr	r3, [r3, #12]
 8003db2:	|  |      4a1f      	ldr	r2, [pc, #124]	; (8003e30 <RTC_Init+0x148>)
 8003db4:	|  |      f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db8:	|  |      60d3      	str	r3, [r2, #12]
        while (!(RTC->ISR & RTC_ISR_INITF));  // INITF polling
 8003dba:	|  |      bf00      	nop
 8003dbc:	|  |  /-> 4b1c      	ldr	r3, [pc, #112]	; (8003e30 <RTC_Init+0x148>)
 8003dbe:	|  |  |   68db      	ldr	r3, [r3, #12]
 8003dc0:	|  |  |   f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc4:	|  |  |   2b00      	cmp	r3, #0
 8003dc6:	|  |  \-- d0f9      	beq.n	8003dbc <RTC_Init+0xd4>
        // Fck_spre = RTCCLK / (PREDIV_S+1)*(PREDIV_A+1)
        RTC->PRER |= (0x7F << 16) | 0xFF;  // (0x7F+1) * (0xFF + 1) = 32768
 8003dc8:	|  |      4b19      	ldr	r3, [pc, #100]	; (8003e30 <RTC_Init+0x148>)
 8003dca:	|  |      691b      	ldr	r3, [r3, #16]
 8003dcc:	|  |      4a18      	ldr	r2, [pc, #96]	; (8003e30 <RTC_Init+0x148>)
 8003dce:	|  |      f443 03fe 	orr.w	r3, r3, #8323072	; 0x7f0000
 8003dd2:	|  |      f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8003dd6:	|  |      6113      	str	r3, [r2, #16]
        RTC->TR = 0x00000000;
 8003dd8:	|  |      4b15      	ldr	r3, [pc, #84]	; (8003e30 <RTC_Init+0x148>)
 8003dda:	|  |      2200      	movs	r2, #0
 8003ddc:	|  |      601a      	str	r2, [r3, #0]
        RTC->DR = 0x00000000;
 8003dde:	|  |      4b14      	ldr	r3, [pc, #80]	; (8003e30 <RTC_Init+0x148>)
 8003de0:	|  |      2200      	movs	r2, #0
 8003de2:	|  |      605a      	str	r2, [r3, #4]
        RTC->CR &= ~RTC_CR_FMT;  // 24h format == 0
 8003de4:	|  |      4b12      	ldr	r3, [pc, #72]	; (8003e30 <RTC_Init+0x148>)
 8003de6:	|  |      689b      	ldr	r3, [r3, #8]
 8003de8:	|  |      4a11      	ldr	r2, [pc, #68]	; (8003e30 <RTC_Init+0x148>)
 8003dea:	|  |      f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dee:	|  |      6093      	str	r3, [r2, #8]
        RTC->CALR |= 1 << 12;  // enable LPCAL
 8003df0:	|  |      4b0f      	ldr	r3, [pc, #60]	; (8003e30 <RTC_Init+0x148>)
 8003df2:	|  |      6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df4:	|  |      4a0e      	ldr	r2, [pc, #56]	; (8003e30 <RTC_Init+0x148>)
 8003df6:	|  |      f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003dfa:	|  |      63d3      	str	r3, [r2, #60]	; 0x3c
        RTC->ISR &= ~RTC_ISR_INIT;  // exit from the init mode
 8003dfc:	|  |      4b0c      	ldr	r3, [pc, #48]	; (8003e30 <RTC_Init+0x148>)
 8003dfe:	|  |      68db      	ldr	r3, [r3, #12]
 8003e00:	|  |      4a0b      	ldr	r2, [pc, #44]	; (8003e30 <RTC_Init+0x148>)
 8003e02:	|  |      f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e06:	|  |      60d3      	str	r3, [r2, #12]
        // lock write protection - writing a wrong key reactivates the write protection
        RTC->WPR = 0xFF;
 8003e08:	|  |      4b09      	ldr	r3, [pc, #36]	; (8003e30 <RTC_Init+0x148>)
 8003e0a:	|  |      22ff      	movs	r2, #255	; 0xff
 8003e0c:	|  |      625a      	str	r2, [r3, #36]	; 0x24
		PWR->CR1 &= ~PWR_CR1_DBP;
 8003e0e:	|  |      4b09      	ldr	r3, [pc, #36]	; (8003e34 <RTC_Init+0x14c>)
 8003e10:	|  |      681b      	ldr	r3, [r3, #0]
 8003e12:	|  |      4a08      	ldr	r2, [pc, #32]	; (8003e34 <RTC_Init+0x14c>)
 8003e14:	|  |      f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e18:	|  |      6013      	str	r3, [r2, #0]
        return 1;  // First init
 8003e1a:	|  |      2301      	movs	r3, #1
 8003e1c:	|  +----- e000      	b.n	8003e20 <RTC_Init+0x138>
	}
    return 0;  // already inited
 8003e1e:	\--|----> 2300      	movs	r3, #0
}
 8003e20:	   \----> 4618      	mov	r0, r3
 8003e22:	          46bd      	mov	sp, r7
 8003e24:	          f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	          4770      	bx	lr
 8003e2a:	          bf00      	nop
 8003e2c:	          1000      	asrs	r0, r0, #32
 8003e2e:	          4002      	ands	r2, r0
 8003e30:	          2800      	cmp	r0, #0
 8003e32:	          4000      	ands	r0, r0
 8003e34:	          7000      	strb	r0, [r0, #0]
 8003e36:	          4000      	ands	r0, r0

08003e38 <rtc_writeToBkp>:

void rtc_writeToBkp(uint32_t *val, uint8_t size){
 8003e38:	       b480      	push	{r7}
 8003e3a:	       b085      	sub	sp, #20
 8003e3c:	       af00      	add	r7, sp, #0
 8003e3e:	       6078      	str	r0, [r7, #4]
 8003e40:	       460b      	mov	r3, r1
 8003e42:	       70fb      	strb	r3, [r7, #3]
	if(!(RCC->APB1ENR1 & RCC_APB1ENR1_PWREN))
 8003e44:	       4b20      	ldr	r3, [pc, #128]	; (8003ec8 <rtc_writeToBkp+0x90>)
 8003e46:	       6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e48:	       f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	       2b00      	cmp	r3, #0
 8003e4e:	   /-- d105      	bne.n	8003e5c <rtc_writeToBkp+0x24>
		RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;
 8003e50:	   |   4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <rtc_writeToBkp+0x90>)
 8003e52:	   |   6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e54:	   |   4a1c      	ldr	r2, [pc, #112]	; (8003ec8 <rtc_writeToBkp+0x90>)
 8003e56:	   |   f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	   |   6593      	str	r3, [r2, #88]	; 0x58
	PWR->CR1 |= PWR_CR1_DBP;                     //Разрешить доступ к Backup области
 8003e5c:	   \-> 4b1b      	ldr	r3, [pc, #108]	; (8003ecc <rtc_writeToBkp+0x94>)
 8003e5e:	       681b      	ldr	r3, [r3, #0]
 8003e60:	       4a1a      	ldr	r2, [pc, #104]	; (8003ecc <rtc_writeToBkp+0x94>)
 8003e62:	       f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e66:	       6013      	str	r3, [r2, #0]
	while((RTC->ISR & RTC_ISR_RSF) == 0);        //Wait for RTC APB registers synchronisation
 8003e68:	       bf00      	nop
 8003e6a:	   /-> 4b19      	ldr	r3, [pc, #100]	; (8003ed0 <rtc_writeToBkp+0x98>)
 8003e6c:	   |   68db      	ldr	r3, [r3, #12]
 8003e6e:	   |   f003 0320 	and.w	r3, r3, #32
 8003e72:	   |   2b00      	cmp	r3, #0
 8003e74:	   \-- d0f9      	beq.n	8003e6a <rtc_writeToBkp+0x32>
	RTC->WPR = 0xCA;                             //Unlock write protection
 8003e76:	       4b16      	ldr	r3, [pc, #88]	; (8003ed0 <rtc_writeToBkp+0x98>)
 8003e78:	       22ca      	movs	r2, #202	; 0xca
 8003e7a:	       625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;                             //Unlock write protection
 8003e7c:	       4b14      	ldr	r3, [pc, #80]	; (8003ed0 <rtc_writeToBkp+0x98>)
 8003e7e:	       2253      	movs	r2, #83	; 0x53
 8003e80:	       625a      	str	r2, [r3, #36]	; 0x24

	for(uint8_t i = 0; i < size; i++){
 8003e82:	       2300      	movs	r3, #0
 8003e84:	       73fb      	strb	r3, [r7, #15]
 8003e86:	   /-- e00c      	b.n	8003ea2 <rtc_writeToBkp+0x6a>
		*(uint32_t*)(RTC_BASE + (uint32_t)(0x50 + i)) = val[i];
 8003e88:	/--|-> 7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	|  |   009b      	lsls	r3, r3, #2
 8003e8c:	|  |   687a      	ldr	r2, [r7, #4]
 8003e8e:	|  |   441a      	add	r2, r3
 8003e90:	|  |   7bf9      	ldrb	r1, [r7, #15]
 8003e92:	|  |   4b10      	ldr	r3, [pc, #64]	; (8003ed4 <rtc_writeToBkp+0x9c>)
 8003e94:	|  |   440b      	add	r3, r1
 8003e96:	|  |   4619      	mov	r1, r3
 8003e98:	|  |   6813      	ldr	r3, [r2, #0]
 8003e9a:	|  |   600b      	str	r3, [r1, #0]
	for(uint8_t i = 0; i < size; i++){
 8003e9c:	|  |   7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	|  |   3301      	adds	r3, #1
 8003ea0:	|  |   73fb      	strb	r3, [r7, #15]
 8003ea2:	|  \-> 7bfa      	ldrb	r2, [r7, #15]
 8003ea4:	|      78fb      	ldrb	r3, [r7, #3]
 8003ea6:	|      429a      	cmp	r2, r3
 8003ea8:	\----- d3ee      	bcc.n	8003e88 <rtc_writeToBkp+0x50>
	}

	RTC->WPR = 0xFF;							//Enable the write protection for RTC registers
 8003eaa:	       4b09      	ldr	r3, [pc, #36]	; (8003ed0 <rtc_writeToBkp+0x98>)
 8003eac:	       22ff      	movs	r2, #255	; 0xff
 8003eae:	       625a      	str	r2, [r3, #36]	; 0x24
	PWR->CR1 &= ~PWR_CR1_DBP;                   //Запреть доступ к Backup области
 8003eb0:	       4b06      	ldr	r3, [pc, #24]	; (8003ecc <rtc_writeToBkp+0x94>)
 8003eb2:	       681b      	ldr	r3, [r3, #0]
 8003eb4:	       4a05      	ldr	r2, [pc, #20]	; (8003ecc <rtc_writeToBkp+0x94>)
 8003eb6:	       f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eba:	       6013      	str	r3, [r2, #0]
}
 8003ebc:	       bf00      	nop
 8003ebe:	       3714      	adds	r7, #20
 8003ec0:	       46bd      	mov	sp, r7
 8003ec2:	       f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	       4770      	bx	lr
 8003ec8:	       1000      	asrs	r0, r0, #32
 8003eca:	       4002      	ands	r2, r0
 8003ecc:	       7000      	strb	r0, [r0, #0]
 8003ece:	       4000      	ands	r0, r0
 8003ed0:	       2800      	cmp	r0, #0
 8003ed2:	       4000      	ands	r0, r0
 8003ed4:	       2850      	cmp	r0, #80	; 0x50
 8003ed6:	       4000      	ands	r0, r0

08003ed8 <write_single_bkp_reg>:

void write_single_bkp_reg(uint8_t reg_num, uint32_t val){
 8003ed8:	    b480      	push	{r7}
 8003eda:	    b083      	sub	sp, #12
 8003edc:	    af00      	add	r7, sp, #0
 8003ede:	    4603      	mov	r3, r0
 8003ee0:	    6039      	str	r1, [r7, #0]
 8003ee2:	    71fb      	strb	r3, [r7, #7]
    if(!(RCC->APB1ENR1 & RCC_APB1ENR1_PWREN))
 8003ee4:	    4b1b      	ldr	r3, [pc, #108]	; (8003f54 <write_single_bkp_reg+0x7c>)
 8003ee6:	    6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	    f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eec:	    2b00      	cmp	r3, #0
 8003eee:	/-- d105      	bne.n	8003efc <write_single_bkp_reg+0x24>
		RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;
 8003ef0:	|   4b18      	ldr	r3, [pc, #96]	; (8003f54 <write_single_bkp_reg+0x7c>)
 8003ef2:	|   6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	|   4a17      	ldr	r2, [pc, #92]	; (8003f54 <write_single_bkp_reg+0x7c>)
 8003ef6:	|   f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efa:	|   6593      	str	r3, [r2, #88]	; 0x58
	PWR->CR1 |= PWR_CR1_DBP;                     //Разрешить доступ к Backup области
 8003efc:	\-> 4b16      	ldr	r3, [pc, #88]	; (8003f58 <write_single_bkp_reg+0x80>)
 8003efe:	    681b      	ldr	r3, [r3, #0]
 8003f00:	    4a15      	ldr	r2, [pc, #84]	; (8003f58 <write_single_bkp_reg+0x80>)
 8003f02:	    f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f06:	    6013      	str	r3, [r2, #0]
	while((RTC->ISR & RTC_ISR_RSF) == 0);        //Wait for RTC APB registers synchronisation
 8003f08:	    bf00      	nop
 8003f0a:	/-> 4b14      	ldr	r3, [pc, #80]	; (8003f5c <write_single_bkp_reg+0x84>)
 8003f0c:	|   68db      	ldr	r3, [r3, #12]
 8003f0e:	|   f003 0320 	and.w	r3, r3, #32
 8003f12:	|   2b00      	cmp	r3, #0
 8003f14:	\-- d0f9      	beq.n	8003f0a <write_single_bkp_reg+0x32>
	RTC->WPR = 0xCA;                             //Unlock write protection
 8003f16:	    4b11      	ldr	r3, [pc, #68]	; (8003f5c <write_single_bkp_reg+0x84>)
 8003f18:	    22ca      	movs	r2, #202	; 0xca
 8003f1a:	    625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;                             //Unlock write protection
 8003f1c:	    4b0f      	ldr	r3, [pc, #60]	; (8003f5c <write_single_bkp_reg+0x84>)
 8003f1e:	    2253      	movs	r2, #83	; 0x53
 8003f20:	    625a      	str	r2, [r3, #36]	; 0x24
    *(uint32_t *)(RTC_BASE + (0x50 + reg_num * 4)) = val;
 8003f22:	    79fb      	ldrb	r3, [r7, #7]
 8003f24:	    3314      	adds	r3, #20
 8003f26:	    009b      	lsls	r3, r3, #2
 8003f28:	    f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f2c:	    f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003f30:	    461a      	mov	r2, r3
 8003f32:	    683b      	ldr	r3, [r7, #0]
 8003f34:	    6013      	str	r3, [r2, #0]

	RTC->WPR = 0xFF;							//Enable the write protection for RTC registers
 8003f36:	    4b09      	ldr	r3, [pc, #36]	; (8003f5c <write_single_bkp_reg+0x84>)
 8003f38:	    22ff      	movs	r2, #255	; 0xff
 8003f3a:	    625a      	str	r2, [r3, #36]	; 0x24
	PWR->CR1 &= ~PWR_CR1_DBP;                   //Запреть доступ к Backup области
 8003f3c:	    4b06      	ldr	r3, [pc, #24]	; (8003f58 <write_single_bkp_reg+0x80>)
 8003f3e:	    681b      	ldr	r3, [r3, #0]
 8003f40:	    4a05      	ldr	r2, [pc, #20]	; (8003f58 <write_single_bkp_reg+0x80>)
 8003f42:	    f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f46:	    6013      	str	r3, [r2, #0]
}
 8003f48:	    bf00      	nop
 8003f4a:	    370c      	adds	r7, #12
 8003f4c:	    46bd      	mov	sp, r7
 8003f4e:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	    4770      	bx	lr
 8003f54:	    1000      	asrs	r0, r0, #32
 8003f56:	    4002      	ands	r2, r0
 8003f58:	    7000      	strb	r0, [r0, #0]
 8003f5a:	    4000      	ands	r0, r0
 8003f5c:	    2800      	cmp	r0, #0
 8003f5e:	    4000      	ands	r0, r0

08003f60 <RTC_time_difference>:

void RTC_time_difference(RTC_struct_brief *older_time, RTC_struct_brief *newer_time, RTC_struct_brief *difference){
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
    difference->years = newer_time->years - older_time->years;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	781a      	ldrb	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	701a      	strb	r2, [r3, #0]
    difference->months = newer_time->months - older_time->months;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	789a      	ldrb	r2, [r3, #2]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	789b      	ldrb	r3, [r3, #2]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	709a      	strb	r2, [r3, #2]
    difference->date = newer_time->date - older_time->date;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	78da      	ldrb	r2, [r3, #3]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	78db      	ldrb	r3, [r3, #3]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	70da      	strb	r2, [r3, #3]
    difference->hours = newer_time->hours - older_time->hours;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	791a      	ldrb	r2, [r3, #4]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	791b      	ldrb	r3, [r3, #4]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	711a      	strb	r2, [r3, #4]
    difference->minutes = newer_time->minutes - older_time->minutes;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	795a      	ldrb	r2, [r3, #5]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	795b      	ldrb	r3, [r3, #5]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	715a      	strb	r2, [r3, #5]
    difference->seconds = newer_time->seconds - older_time->seconds;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	799a      	ldrb	r2, [r3, #6]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	799b      	ldrb	r3, [r3, #6]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	719a      	strb	r2, [r3, #6]
}
 8003fcc:	bf00      	nop
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <RTC_EncodeDateTime>:

const uint16_t day_offset[12] = {0, 31, 61,92, 122, 153, 184, 214, 245, 275,306, 337};
uint32_t RTC_EncodeDateTime(RTC_struct_brief *dt)
{
 8003fd8:	    b480      	push	{r7}
 8003fda:	    b085      	sub	sp, #20
 8003fdc:	    af00      	add	r7, sp, #0
 8003fde:	    6078      	str	r0, [r7, #4]
        uint8_t a = dt->months < 3; // а = 1, если месяц январь или февраль
 8003fe0:	    687b      	ldr	r3, [r7, #4]
 8003fe2:	    789b      	ldrb	r3, [r3, #2]
 8003fe4:	    2b02      	cmp	r3, #2
 8003fe6:	    bf94      	ite	ls
 8003fe8:	    2301      	movls	r3, #1
 8003fea:	    2300      	movhi	r3, #0
 8003fec:	    b2db      	uxtb	r3, r3
 8003fee:	    73fb      	strb	r3, [r7, #15]
        int8_t y = dt->years - a;  // y = отнимаем от года 1, если а = 1, а так же 2000;
 8003ff0:	    687b      	ldr	r3, [r7, #4]
 8003ff2:	    781a      	ldrb	r2, [r3, #0]
 8003ff4:	    7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	    1ad3      	subs	r3, r2, r3
 8003ff8:	    b2db      	uxtb	r3, r3
 8003ffa:	    73bb      	strb	r3, [r7, #14]
        uint8_t m = dt->months + 12 * a - 3; // аналогия выражения (12 + month - 3) % 12; делаем март нулевым месяцем года.
 8003ffc:	    687b      	ldr	r3, [r7, #4]
 8003ffe:	    789a      	ldrb	r2, [r3, #2]
 8004000:	    7bfb      	ldrb	r3, [r7, #15]
 8004002:	    4619      	mov	r1, r3
 8004004:	    0049      	lsls	r1, r1, #1
 8004006:	    440b      	add	r3, r1
 8004008:	    009b      	lsls	r3, r3, #2
 800400a:	    b2db      	uxtb	r3, r3
 800400c:	    4413      	add	r3, r2
 800400e:	    b2db      	uxtb	r3, r3
 8004010:	    3b03      	subs	r3, #3
 8004012:	    737b      	strb	r3, [r7, #13]
        return (dt->date - 1 + day_offset[m] + y * 365 + y / 4 - y / 100 + y / 400) * 86400 +
 8004014:	    687b      	ldr	r3, [r7, #4]
 8004016:	    78db      	ldrb	r3, [r3, #3]
 8004018:	    3b01      	subs	r3, #1
 800401a:	    7b7a      	ldrb	r2, [r7, #13]
 800401c:	    4920      	ldr	r1, [pc, #128]	; (80040a0 <RTC_EncodeDateTime+0xc8>)
 800401e:	    f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004022:	    441a      	add	r2, r3
 8004024:	    f997 300e 	ldrsb.w	r3, [r7, #14]
 8004028:	    f240 116d 	movw	r1, #365	; 0x16d
 800402c:	    fb01 f303 	mul.w	r3, r1, r3
 8004030:	    441a      	add	r2, r3
 8004032:	    f997 300e 	ldrsb.w	r3, [r7, #14]
 8004036:	    2b00      	cmp	r3, #0
 8004038:	/-- da00      	bge.n	800403c <RTC_EncodeDateTime+0x64>
 800403a:	|   3303      	adds	r3, #3
 800403c:	\-> 109b      	asrs	r3, r3, #2
 800403e:	    b25b      	sxtb	r3, r3
 8004040:	    441a      	add	r2, r3
 8004042:	    f997 300e 	ldrsb.w	r3, [r7, #14]
 8004046:	    4917      	ldr	r1, [pc, #92]	; (80040a4 <RTC_EncodeDateTime+0xcc>)
 8004048:	    fb81 0103 	smull	r0, r1, r1, r3
 800404c:	    1149      	asrs	r1, r1, #5
 800404e:	    17db      	asrs	r3, r3, #31
 8004050:	    1acb      	subs	r3, r1, r3
 8004052:	    b25b      	sxtb	r3, r3
 8004054:	    1ad2      	subs	r2, r2, r3
 8004056:	    f997 300e 	ldrsb.w	r3, [r7, #14]
 800405a:	    4912      	ldr	r1, [pc, #72]	; (80040a4 <RTC_EncodeDateTime+0xcc>)
 800405c:	    fb81 0103 	smull	r0, r1, r1, r3
 8004060:	    11c9      	asrs	r1, r1, #7
 8004062:	    17db      	asrs	r3, r3, #31
 8004064:	    1acb      	subs	r3, r1, r3
 8004066:	    4413      	add	r3, r2
 8004068:	    4a0f      	ldr	r2, [pc, #60]	; (80040a8 <RTC_EncodeDateTime+0xd0>)
 800406a:	    fb03 f202 	mul.w	r2, r3, r2
               (int)dt->hours * 3600 + (int)dt->minutes * 60 + dt->seconds;
 800406e:	    687b      	ldr	r3, [r7, #4]
 8004070:	    791b      	ldrb	r3, [r3, #4]
 8004072:	    4619      	mov	r1, r3
 8004074:	    f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004078:	    fb01 f303 	mul.w	r3, r1, r3
        return (dt->date - 1 + day_offset[m] + y * 365 + y / 4 - y / 100 + y / 400) * 86400 +
 800407c:	    441a      	add	r2, r3
               (int)dt->hours * 3600 + (int)dt->minutes * 60 + dt->seconds;
 800407e:	    687b      	ldr	r3, [r7, #4]
 8004080:	    795b      	ldrb	r3, [r3, #5]
 8004082:	    4619      	mov	r1, r3
 8004084:	    460b      	mov	r3, r1
 8004086:	    011b      	lsls	r3, r3, #4
 8004088:	    1a5b      	subs	r3, r3, r1
 800408a:	    009b      	lsls	r3, r3, #2
 800408c:	    4413      	add	r3, r2
 800408e:	    687a      	ldr	r2, [r7, #4]
 8004090:	    7992      	ldrb	r2, [r2, #6]
 8004092:	    4413      	add	r3, r2
}
 8004094:	    4618      	mov	r0, r3
 8004096:	    3714      	adds	r7, #20
 8004098:	    46bd      	mov	sp, r7
 800409a:	    f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	    4770      	bx	lr
 80040a0:	    aeec      	add	r6, sp, #944	; 0x3b0
 80040a2:	    0800      	lsrs	r0, r0, #32
 80040a4:	    851f      	strh	r7, [r3, #40]	; 0x28
 80040a6:	    51eb      	str	r3, [r5, r7]
 80040a8:	    5180      	str	r0, [r0, r6]
 80040aa:	    0001      	movs	r1, r0

080040ac <RTC_get_time>:
void RTC_get_time(RTC_struct_brief *br_data)
{
 80040ac:	    b480      	push	{r7}
 80040ae:	    b085      	sub	sp, #20
 80040b0:	    af00      	add	r7, sp, #0
 80040b2:	    6078      	str	r0, [r7, #4]
	// we need to clear less bits: (RTC->DR & RTC_DR_DT)
	// and to shift right the part, which we want to --> to normal decimal

	while (!(RTC->ISR & RTC_ISR_RSF));	//  Calendar shadow registers synchronized
 80040b4:	    bf00      	nop
 80040b6:	/-> 4b4d      	ldr	r3, [pc, #308]	; (80041ec <RTC_get_time+0x140>)
 80040b8:	|   68db      	ldr	r3, [r3, #12]
 80040ba:	|   f003 0320 	and.w	r3, r3, #32
 80040be:	|   2b00      	cmp	r3, #0
 80040c0:	\-- d0f9      	beq.n	80040b6 <RTC_get_time+0xa>

	uint32_t TR_buf = 0, DR_buf = 0;
 80040c2:	    2300      	movs	r3, #0
 80040c4:	    60fb      	str	r3, [r7, #12]
 80040c6:	    2300      	movs	r3, #0
 80040c8:	    60bb      	str	r3, [r7, #8]

	TR_buf = (RTC->TR);
 80040ca:	    4b48      	ldr	r3, [pc, #288]	; (80041ec <RTC_get_time+0x140>)
 80040cc:	    681b      	ldr	r3, [r3, #0]
 80040ce:	    60fb      	str	r3, [r7, #12]

	br_data->hours = ((((TR_buf & RTC_TR_HT) >> RTC_TR_HT_Pos) * 10) + ((TR_buf & RTC_TR_HU) >> RTC_TR_HU_Pos));
 80040d0:	    68fb      	ldr	r3, [r7, #12]
 80040d2:	    0d1b      	lsrs	r3, r3, #20
 80040d4:	    b2db      	uxtb	r3, r3
 80040d6:	    f003 0303 	and.w	r3, r3, #3
 80040da:	    b2db      	uxtb	r3, r3
 80040dc:	    461a      	mov	r2, r3
 80040de:	    0092      	lsls	r2, r2, #2
 80040e0:	    4413      	add	r3, r2
 80040e2:	    005b      	lsls	r3, r3, #1
 80040e4:	    b2da      	uxtb	r2, r3
 80040e6:	    68fb      	ldr	r3, [r7, #12]
 80040e8:	    0c1b      	lsrs	r3, r3, #16
 80040ea:	    b2db      	uxtb	r3, r3
 80040ec:	    f003 030f 	and.w	r3, r3, #15
 80040f0:	    b2db      	uxtb	r3, r3
 80040f2:	    4413      	add	r3, r2
 80040f4:	    b2da      	uxtb	r2, r3
 80040f6:	    687b      	ldr	r3, [r7, #4]
 80040f8:	    711a      	strb	r2, [r3, #4]
	br_data->minutes = ((((TR_buf & RTC_TR_MNT) >> RTC_TR_MNT_Pos) * 10) + ((TR_buf & RTC_TR_MNU) >> RTC_TR_MNU_Pos));
 80040fa:	    68fb      	ldr	r3, [r7, #12]
 80040fc:	    0b1b      	lsrs	r3, r3, #12
 80040fe:	    b2db      	uxtb	r3, r3
 8004100:	    f003 0307 	and.w	r3, r3, #7
 8004104:	    b2db      	uxtb	r3, r3
 8004106:	    461a      	mov	r2, r3
 8004108:	    0092      	lsls	r2, r2, #2
 800410a:	    4413      	add	r3, r2
 800410c:	    005b      	lsls	r3, r3, #1
 800410e:	    b2da      	uxtb	r2, r3
 8004110:	    68fb      	ldr	r3, [r7, #12]
 8004112:	    0a1b      	lsrs	r3, r3, #8
 8004114:	    b2db      	uxtb	r3, r3
 8004116:	    f003 030f 	and.w	r3, r3, #15
 800411a:	    b2db      	uxtb	r3, r3
 800411c:	    4413      	add	r3, r2
 800411e:	    b2da      	uxtb	r2, r3
 8004120:	    687b      	ldr	r3, [r7, #4]
 8004122:	    715a      	strb	r2, [r3, #5]
	br_data->seconds = ((((TR_buf & RTC_TR_ST) >> RTC_TR_ST_Pos) * 10) + ((TR_buf & RTC_TR_SU) >> RTC_TR_SU_Pos));
 8004124:	    68fb      	ldr	r3, [r7, #12]
 8004126:	    091b      	lsrs	r3, r3, #4
 8004128:	    b2db      	uxtb	r3, r3
 800412a:	    f003 0307 	and.w	r3, r3, #7
 800412e:	    b2db      	uxtb	r3, r3
 8004130:	    461a      	mov	r2, r3
 8004132:	    0092      	lsls	r2, r2, #2
 8004134:	    4413      	add	r3, r2
 8004136:	    005b      	lsls	r3, r3, #1
 8004138:	    b2da      	uxtb	r2, r3
 800413a:	    68fb      	ldr	r3, [r7, #12]
 800413c:	    b2db      	uxtb	r3, r3
 800413e:	    f003 030f 	and.w	r3, r3, #15
 8004142:	    b2db      	uxtb	r3, r3
 8004144:	    4413      	add	r3, r2
 8004146:	    b2da      	uxtb	r2, r3
 8004148:	    687b      	ldr	r3, [r7, #4]
 800414a:	    719a      	strb	r2, [r3, #6]

	DR_buf = (RTC->DR);
 800414c:	    4b27      	ldr	r3, [pc, #156]	; (80041ec <RTC_get_time+0x140>)
 800414e:	    685b      	ldr	r3, [r3, #4]
 8004150:	    60bb      	str	r3, [r7, #8]

	br_data->years = ((((DR_buf & RTC_DR_YT) >> RTC_DR_YT_Pos) * 10) + ((DR_buf & RTC_DR_YU) >> RTC_DR_YU_Pos));
 8004152:	    68bb      	ldr	r3, [r7, #8]
 8004154:	    0d1b      	lsrs	r3, r3, #20
 8004156:	    b2db      	uxtb	r3, r3
 8004158:	    f003 030f 	and.w	r3, r3, #15
 800415c:	    b2db      	uxtb	r3, r3
 800415e:	    461a      	mov	r2, r3
 8004160:	    0092      	lsls	r2, r2, #2
 8004162:	    4413      	add	r3, r2
 8004164:	    005b      	lsls	r3, r3, #1
 8004166:	    b2da      	uxtb	r2, r3
 8004168:	    68bb      	ldr	r3, [r7, #8]
 800416a:	    0c1b      	lsrs	r3, r3, #16
 800416c:	    b2db      	uxtb	r3, r3
 800416e:	    f003 030f 	and.w	r3, r3, #15
 8004172:	    b2db      	uxtb	r3, r3
 8004174:	    4413      	add	r3, r2
 8004176:	    b2da      	uxtb	r2, r3
 8004178:	    687b      	ldr	r3, [r7, #4]
 800417a:	    701a      	strb	r2, [r3, #0]
	br_data->months = ((((DR_buf & RTC_DR_MT) >> RTC_DR_MT_Pos) * 10) + ((DR_buf & RTC_DR_MU) >> RTC_DR_MU_Pos));
 800417c:	    68bb      	ldr	r3, [r7, #8]
 800417e:	    0b1b      	lsrs	r3, r3, #12
 8004180:	    b2db      	uxtb	r3, r3
 8004182:	    f003 0301 	and.w	r3, r3, #1
 8004186:	    b2db      	uxtb	r3, r3
 8004188:	    461a      	mov	r2, r3
 800418a:	    0092      	lsls	r2, r2, #2
 800418c:	    4413      	add	r3, r2
 800418e:	    005b      	lsls	r3, r3, #1
 8004190:	    b2da      	uxtb	r2, r3
 8004192:	    68bb      	ldr	r3, [r7, #8]
 8004194:	    0a1b      	lsrs	r3, r3, #8
 8004196:	    b2db      	uxtb	r3, r3
 8004198:	    f003 030f 	and.w	r3, r3, #15
 800419c:	    b2db      	uxtb	r3, r3
 800419e:	    4413      	add	r3, r2
 80041a0:	    b2da      	uxtb	r2, r3
 80041a2:	    687b      	ldr	r3, [r7, #4]
 80041a4:	    709a      	strb	r2, [r3, #2]
	br_data->date = ((((DR_buf & RTC_DR_DT) >> RTC_DR_DT_Pos) * 10) + ((DR_buf & RTC_DR_DU) >> RTC_DR_DU_Pos));
 80041a6:	    68bb      	ldr	r3, [r7, #8]
 80041a8:	    091b      	lsrs	r3, r3, #4
 80041aa:	    b2db      	uxtb	r3, r3
 80041ac:	    f003 0303 	and.w	r3, r3, #3
 80041b0:	    b2db      	uxtb	r3, r3
 80041b2:	    461a      	mov	r2, r3
 80041b4:	    0092      	lsls	r2, r2, #2
 80041b6:	    4413      	add	r3, r2
 80041b8:	    005b      	lsls	r3, r3, #1
 80041ba:	    b2da      	uxtb	r2, r3
 80041bc:	    68bb      	ldr	r3, [r7, #8]
 80041be:	    b2db      	uxtb	r3, r3
 80041c0:	    f003 030f 	and.w	r3, r3, #15
 80041c4:	    b2db      	uxtb	r3, r3
 80041c6:	    4413      	add	r3, r2
 80041c8:	    b2da      	uxtb	r2, r3
 80041ca:	    687b      	ldr	r3, [r7, #4]
 80041cc:	    70da      	strb	r2, [r3, #3]
	br_data->week_day = ((DR_buf & RTC_DR_WDU) >> RTC_DR_WDU_Pos);
 80041ce:	    68bb      	ldr	r3, [r7, #8]
 80041d0:	    0b5b      	lsrs	r3, r3, #13
 80041d2:	    b2db      	uxtb	r3, r3
 80041d4:	    f003 0307 	and.w	r3, r3, #7
 80041d8:	    b2da      	uxtb	r2, r3
 80041da:	    687b      	ldr	r3, [r7, #4]
 80041dc:	    705a      	strb	r2, [r3, #1]
}
 80041de:	    bf00      	nop
 80041e0:	    3714      	adds	r7, #20
 80041e2:	    46bd      	mov	sp, r7
 80041e4:	    f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	    4770      	bx	lr
 80041ea:	    bf00      	nop
 80041ec:	    2800      	cmp	r0, #0
 80041ee:	    4000      	ands	r0, r0

080041f0 <RTC_get_alarm>:

void RTC_get_alarm(RTC_struct_brief *br_data)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	br_data->date = ((((RTC->ALRMAR & RTC_ALRMAR_DT) >> RTC_ALRMAR_DT_Pos) * 10) + ((RTC->ALRMAR & RTC_ALRMAR_DU) >> RTC_ALRMAR_DU_Pos));
 80041f8:	4b25      	ldr	r3, [pc, #148]	; (8004290 <RTC_get_alarm+0xa0>)
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	0f1b      	lsrs	r3, r3, #28
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f003 0303 	and.w	r3, r3, #3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	0092      	lsls	r2, r2, #2
 800420a:	4413      	add	r3, r2
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	b2da      	uxtb	r2, r3
 8004210:	4b1f      	ldr	r3, [pc, #124]	; (8004290 <RTC_get_alarm+0xa0>)
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	0e1b      	lsrs	r3, r3, #24
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f003 030f 	and.w	r3, r3, #15
 800421c:	b2db      	uxtb	r3, r3
 800421e:	4413      	add	r3, r2
 8004220:	b2da      	uxtb	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	70da      	strb	r2, [r3, #3]
	br_data->hours = ((((RTC->ALRMAR & RTC_ALRMAR_HT) >> RTC_ALRMAR_HT_Pos) * 10) + ((RTC->ALRMAR & RTC_ALRMAR_HU) >> RTC_ALRMAR_HU_Pos));
 8004226:	4b1a      	ldr	r3, [pc, #104]	; (8004290 <RTC_get_alarm+0xa0>)
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	0d1b      	lsrs	r3, r3, #20
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	b2db      	uxtb	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	0092      	lsls	r2, r2, #2
 8004238:	4413      	add	r3, r2
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	b2da      	uxtb	r2, r3
 800423e:	4b14      	ldr	r3, [pc, #80]	; (8004290 <RTC_get_alarm+0xa0>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	0c1b      	lsrs	r3, r3, #16
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	b2db      	uxtb	r3, r3
 800424c:	4413      	add	r3, r2
 800424e:	b2da      	uxtb	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	711a      	strb	r2, [r3, #4]
	br_data->minutes = ((((RTC->ALRMAR & RTC_ALRMAR_MNT) >> RTC_ALRMAR_MNT_Pos) * 10) + ((RTC->ALRMAR & RTC_ALRMAR_MNU) >> RTC_ALRMAR_MNU_Pos));
 8004254:	4b0e      	ldr	r3, [pc, #56]	; (8004290 <RTC_get_alarm+0xa0>)
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	0b1b      	lsrs	r3, r3, #12
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	b2db      	uxtb	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	0092      	lsls	r2, r2, #2
 8004266:	4413      	add	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	b2da      	uxtb	r2, r3
 800426c:	4b08      	ldr	r3, [pc, #32]	; (8004290 <RTC_get_alarm+0xa0>)
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	b2db      	uxtb	r3, r3
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	b2db      	uxtb	r3, r3
 800427a:	4413      	add	r3, r2
 800427c:	b2da      	uxtb	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	715a      	strb	r2, [r3, #5]
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	2800      	cmp	r0, #0
 8004292:	4000      	ands	r0, r0

08004294 <RTC_alarm_init>:

void RTC_alarm_init(void)
{
 8004294:	    b580      	push	{r7, lr}
 8004296:	    af00      	add	r7, sp, #0
	// unlock write protection
	PWR->CR1 |= PWR_CR1_DBP;
 8004298:	    4b3f      	ldr	r3, [pc, #252]	; (8004398 <RTC_alarm_init+0x104>)
 800429a:	    681b      	ldr	r3, [r3, #0]
 800429c:	    4a3e      	ldr	r2, [pc, #248]	; (8004398 <RTC_alarm_init+0x104>)
 800429e:	    f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a2:	    6013      	str	r3, [r2, #0]
	while((RTC->ISR & RTC_ISR_RSF) == 0);
 80042a4:	    bf00      	nop
 80042a6:	/-> 4b3d      	ldr	r3, [pc, #244]	; (800439c <RTC_alarm_init+0x108>)
 80042a8:	|   68db      	ldr	r3, [r3, #12]
 80042aa:	|   f003 0320 	and.w	r3, r3, #32
 80042ae:	|   2b00      	cmp	r3, #0
 80042b0:	\-- d0f9      	beq.n	80042a6 <RTC_alarm_init+0x12>
	RTC->WPR = 0xCA;
 80042b2:	    4b3a      	ldr	r3, [pc, #232]	; (800439c <RTC_alarm_init+0x108>)
 80042b4:	    22ca      	movs	r2, #202	; 0xca
 80042b6:	    625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;
 80042b8:	    4b38      	ldr	r3, [pc, #224]	; (800439c <RTC_alarm_init+0x108>)
 80042ba:	    2253      	movs	r2, #83	; 0x53
 80042bc:	    625a      	str	r2, [r3, #36]	; 0x24

	// disable Alarm A
	RTC->CR &= ~RTC_CR_ALRAE;
 80042be:	    4b37      	ldr	r3, [pc, #220]	; (800439c <RTC_alarm_init+0x108>)
 80042c0:	    689b      	ldr	r3, [r3, #8]
 80042c2:	    4a36      	ldr	r2, [pc, #216]	; (800439c <RTC_alarm_init+0x108>)
 80042c4:	    f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042c8:	    6093      	str	r3, [r2, #8]
	RTC->ISR &= ~RTC_ISR_ALRAF;
 80042ca:	    4b34      	ldr	r3, [pc, #208]	; (800439c <RTC_alarm_init+0x108>)
 80042cc:	    68db      	ldr	r3, [r3, #12]
 80042ce:	    4a33      	ldr	r2, [pc, #204]	; (800439c <RTC_alarm_init+0x108>)
 80042d0:	    f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042d4:	    60d3      	str	r3, [r2, #12]

	// wait for Alarm A write flag, to make sure the access to alarm reg is allowed
	while (!(RTC->ISR & RTC_ISR_ALRAWF));
 80042d6:	    bf00      	nop
 80042d8:	/-> 4b30      	ldr	r3, [pc, #192]	; (800439c <RTC_alarm_init+0x108>)
 80042da:	|   68db      	ldr	r3, [r3, #12]
 80042dc:	|   f003 0301 	and.w	r3, r3, #1
 80042e0:	|   2b00      	cmp	r3, #0
 80042e2:	\-- d0f9      	beq.n	80042d8 <RTC_alarm_init+0x44>
	// date, hours, minutes, seconds mask - Alarm A set if they match
	RTC->ALRMAR |= RTC_ALRMAR_MSK4;		// 0: Alarm A set if the date/day match
 80042e4:	    4b2d      	ldr	r3, [pc, #180]	; (800439c <RTC_alarm_init+0x108>)
 80042e6:	    69db      	ldr	r3, [r3, #28]
 80042e8:	    4a2c      	ldr	r2, [pc, #176]	; (800439c <RTC_alarm_init+0x108>)
 80042ea:	    f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042ee:	    61d3      	str	r3, [r2, #28]
	RTC->ALRMAR |= RTC_ALRMAR_MSK3;	// 0: Alarm A set if the hours match
 80042f0:	    4b2a      	ldr	r3, [pc, #168]	; (800439c <RTC_alarm_init+0x108>)
 80042f2:	    69db      	ldr	r3, [r3, #28]
 80042f4:	    4a29      	ldr	r2, [pc, #164]	; (800439c <RTC_alarm_init+0x108>)
 80042f6:	    f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042fa:	    61d3      	str	r3, [r2, #28]
	RTC->ALRMAR |= RTC_ALRMAR_MSK2;		// 0: Alarm A set if the minutes match
 80042fc:	    4b27      	ldr	r3, [pc, #156]	; (800439c <RTC_alarm_init+0x108>)
 80042fe:	    69db      	ldr	r3, [r3, #28]
 8004300:	    4a26      	ldr	r2, [pc, #152]	; (800439c <RTC_alarm_init+0x108>)
 8004302:	    f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004306:	    61d3      	str	r3, [r2, #28]
	// RTC->ALRMAR &= ~RTC_ALRMAR_MSK4;	// 0: Alarm A set if the date/day match
	// RTC->ALRMAR &= ~RTC_ALRMAR_MSK3;	// 0: Alarm A set if the hours match
	// RTC->ALRMAR &= ~RTC_ALRMAR_MSK2;	// 0: Alarm A set if the minutes match
	RTC->ALRMAR &= ~RTC_ALRMAR_MSK1;		// 1: Seconds don’t care in Alarm A comparison
 8004308:	    4b24      	ldr	r3, [pc, #144]	; (800439c <RTC_alarm_init+0x108>)
 800430a:	    69db      	ldr	r3, [r3, #28]
 800430c:	    4a23      	ldr	r2, [pc, #140]	; (800439c <RTC_alarm_init+0x108>)
 800430e:	    f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004312:	    61d3      	str	r3, [r2, #28]
	// RTC->ALRMAR |= RTC_ALRMAR_MSK1;		// 1: Seconds don’t care in Alarm A comparison

	RTC->ALRMAR &= ~RTC_ALRMAR_WDSEL;	// DU[3:0] field represents the date units
 8004314:	    4b21      	ldr	r3, [pc, #132]	; (800439c <RTC_alarm_init+0x108>)
 8004316:	    69db      	ldr	r3, [r3, #28]
 8004318:	    4a20      	ldr	r2, [pc, #128]	; (800439c <RTC_alarm_init+0x108>)
 800431a:	    f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800431e:	    61d3      	str	r3, [r2, #28]
	RTC->ALRMAR &= ~RTC_ALRMAR_PM;		// 0: AM or 24-hour format
 8004320:	    4b1e      	ldr	r3, [pc, #120]	; (800439c <RTC_alarm_init+0x108>)
 8004322:	    69db      	ldr	r3, [r3, #28]
 8004324:	    4a1d      	ldr	r2, [pc, #116]	; (800439c <RTC_alarm_init+0x108>)
 8004326:	    f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800432a:	    61d3      	str	r3, [r2, #28]

	// enable the RTC Alarm interrupt - enable the EXTI Line 18
	// SYSCFG (System configuration controller) clock through APB2 bus enable
	if (!(RCC->APB2ENR & RCC_APB2ENR_SYSCFGEN)) RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800432c:	    4b1c      	ldr	r3, [pc, #112]	; (80043a0 <RTC_alarm_init+0x10c>)
 800432e:	    6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004330:	    f003 0301 	and.w	r3, r3, #1
 8004334:	    2b00      	cmp	r3, #0
 8004336:	/-- d105      	bne.n	8004344 <RTC_alarm_init+0xb0>
 8004338:	|   4b19      	ldr	r3, [pc, #100]	; (80043a0 <RTC_alarm_init+0x10c>)
 800433a:	|   6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433c:	|   4a18      	ldr	r2, [pc, #96]	; (80043a0 <RTC_alarm_init+0x10c>)
 800433e:	|   f043 0301 	orr.w	r3, r3, #1
 8004342:	|   6613      	str	r3, [r2, #96]	; 0x60
	EXTI->IMR1 |= EXTI_IMR1_IM18;	// interrupt request mask - IM18 is not masked now
 8004344:	\-> 4b17      	ldr	r3, [pc, #92]	; (80043a4 <RTC_alarm_init+0x110>)
 8004346:	    681b      	ldr	r3, [r3, #0]
 8004348:	    4a16      	ldr	r2, [pc, #88]	; (80043a4 <RTC_alarm_init+0x110>)
 800434a:	    f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800434e:	    6013      	str	r3, [r2, #0]
	EXTI->RTSR1 |= EXTI_RTSR1_RT18;	// rising edge trigger enabled for EXTI line 18
 8004350:	    4b14      	ldr	r3, [pc, #80]	; (80043a4 <RTC_alarm_init+0x110>)
 8004352:	    689b      	ldr	r3, [r3, #8]
 8004354:	    4a13      	ldr	r2, [pc, #76]	; (80043a4 <RTC_alarm_init+0x110>)
 8004356:	    f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800435a:	    6093      	str	r3, [r2, #8]

	NVIC_EnableIRQ(RTC_Alarm_IRQn);	// enable the RTC_Alarm IRQ channel in the NVIC
 800435c:	    2029      	movs	r0, #41	; 0x29
 800435e:	    f7ff f9bf 	bl	80036e0 <__NVIC_EnableIRQ>
	NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);
 8004362:	    2029      	movs	r0, #41	; 0x29
 8004364:	    f7ff f9da 	bl	800371c <__NVIC_ClearPendingIRQ>
	NVIC_SetPriority(RTC_Alarm_IRQn, 0);	// highest priority
 8004368:	    2100      	movs	r1, #0
 800436a:	    2029      	movs	r0, #41	; 0x29
 800436c:	    f7ff f9f4 	bl	8003758 <__NVIC_SetPriority>

	// 1: Alarm A interrupt enabled
	RTC->CR |= RTC_CR_ALRAIE;
 8004370:	    4b0a      	ldr	r3, [pc, #40]	; (800439c <RTC_alarm_init+0x108>)
 8004372:	    689b      	ldr	r3, [r3, #8]
 8004374:	    4a09      	ldr	r2, [pc, #36]	; (800439c <RTC_alarm_init+0x108>)
 8004376:	    f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800437a:	    6093      	str	r3, [r2, #8]
	// lock write protection - writing a wrong key reactivates the write protection
	RTC->WPR = 0xFF;
 800437c:	    4b07      	ldr	r3, [pc, #28]	; (800439c <RTC_alarm_init+0x108>)
 800437e:	    22ff      	movs	r2, #255	; 0xff
 8004380:	    625a      	str	r2, [r3, #36]	; 0x24
	PWR->CR1 &= ~PWR_CR1_DBP;
 8004382:	    4b05      	ldr	r3, [pc, #20]	; (8004398 <RTC_alarm_init+0x104>)
 8004384:	    681b      	ldr	r3, [r3, #0]
 8004386:	    4a04      	ldr	r2, [pc, #16]	; (8004398 <RTC_alarm_init+0x104>)
 8004388:	    f423 7380 	bic.w	r3, r3, #256	; 0x100
 800438c:	    6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800438e:	    b662      	cpsie	i
}
 8004390:	    bf00      	nop

	__enable_irq();	// global interrupts enable
}
 8004392:	    bf00      	nop
 8004394:	    bd80      	pop	{r7, pc}
 8004396:	    bf00      	nop
 8004398:	    7000      	strb	r0, [r0, #0]
 800439a:	    4000      	ands	r0, r0
 800439c:	    2800      	cmp	r0, #0
 800439e:	    4000      	ands	r0, r0
 80043a0:	    1000      	asrs	r0, r0, #32
 80043a2:	    4002      	ands	r2, r0
 80043a4:	    0400      	lsls	r0, r0, #16
 80043a6:	    4001      	ands	r1, r0

080043a8 <RTC_alarm_update>:

void RTC_alarm_update(RTC_struct_full *f_data)
{
 80043a8:	    b580      	push	{r7, lr}
 80043aa:	    b082      	sub	sp, #8
 80043ac:	    af00      	add	r7, sp, #0
 80043ae:	    6078      	str	r0, [r7, #4]
	// unlock write protection
	PWR->CR1 |= PWR_CR1_DBP;
 80043b0:	    4b49      	ldr	r3, [pc, #292]	; (80044d8 <RTC_alarm_update+0x130>)
 80043b2:	    681b      	ldr	r3, [r3, #0]
 80043b4:	    4a48      	ldr	r2, [pc, #288]	; (80044d8 <RTC_alarm_update+0x130>)
 80043b6:	    f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ba:	    6013      	str	r3, [r2, #0]
	while((RTC->ISR & RTC_ISR_RSF) == 0);
 80043bc:	    bf00      	nop
 80043be:	/-> 4b47      	ldr	r3, [pc, #284]	; (80044dc <RTC_alarm_update+0x134>)
 80043c0:	|   68db      	ldr	r3, [r3, #12]
 80043c2:	|   f003 0320 	and.w	r3, r3, #32
 80043c6:	|   2b00      	cmp	r3, #0
 80043c8:	\-- d0f9      	beq.n	80043be <RTC_alarm_update+0x16>
	RTC->WPR = 0xCA;
 80043ca:	    4b44      	ldr	r3, [pc, #272]	; (80044dc <RTC_alarm_update+0x134>)
 80043cc:	    22ca      	movs	r2, #202	; 0xca
 80043ce:	    625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;
 80043d0:	    4b42      	ldr	r3, [pc, #264]	; (80044dc <RTC_alarm_update+0x134>)
 80043d2:	    2253      	movs	r2, #83	; 0x53
 80043d4:	    625a      	str	r2, [r3, #36]	; 0x24
	// disable Alarm A
	RTC->CR &= ~RTC_CR_ALRAE;
 80043d6:	    4b41      	ldr	r3, [pc, #260]	; (80044dc <RTC_alarm_update+0x134>)
 80043d8:	    689b      	ldr	r3, [r3, #8]
 80043da:	    4a40      	ldr	r2, [pc, #256]	; (80044dc <RTC_alarm_update+0x134>)
 80043dc:	    f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043e0:	    6093      	str	r3, [r2, #8]

	// wait for Alarm A write flag, to make sure the access to alarm reg is allowed
	while (!(RTC->ISR & RTC_ISR_ALRAWF));
 80043e2:	    bf00      	nop
 80043e4:	/-> 4b3d      	ldr	r3, [pc, #244]	; (80044dc <RTC_alarm_update+0x134>)
 80043e6:	|   68db      	ldr	r3, [r3, #12]
 80043e8:	|   f003 0301 	and.w	r3, r3, #1
 80043ec:	|   2b00      	cmp	r3, #0
 80043ee:	\-- d0f9      	beq.n	80043e4 <RTC_alarm_update+0x3c>

	RTC->ALRMAR |= (f_data->date_tens << RTC_ALRMAR_DT_Pos);	// Bits 29:28 DT[1:0]: Date tens in BCD format
 80043f0:	    4b3a      	ldr	r3, [pc, #232]	; (80044dc <RTC_alarm_update+0x134>)
 80043f2:	    69db      	ldr	r3, [r3, #28]
 80043f4:	    687a      	ldr	r2, [r7, #4]
 80043f6:	    7952      	ldrb	r2, [r2, #5]
 80043f8:	    0712      	lsls	r2, r2, #28
 80043fa:	    4611      	mov	r1, r2
 80043fc:	    4a37      	ldr	r2, [pc, #220]	; (80044dc <RTC_alarm_update+0x134>)
 80043fe:	    430b      	orrs	r3, r1
 8004400:	    61d3      	str	r3, [r2, #28]
	RTC->ALRMAR |= (f_data->date_units << RTC_ALRMAR_DU_Pos);	// Bits 27:24 DU[3:0]: Date units or day in BCD format.
 8004402:	    4b36      	ldr	r3, [pc, #216]	; (80044dc <RTC_alarm_update+0x134>)
 8004404:	    69db      	ldr	r3, [r3, #28]
 8004406:	    687a      	ldr	r2, [r7, #4]
 8004408:	    7992      	ldrb	r2, [r2, #6]
 800440a:	    0612      	lsls	r2, r2, #24
 800440c:	    4611      	mov	r1, r2
 800440e:	    4a33      	ldr	r2, [pc, #204]	; (80044dc <RTC_alarm_update+0x134>)
 8004410:	    430b      	orrs	r3, r1
 8004412:	    61d3      	str	r3, [r2, #28]
	RTC->ALRMAR |= (f_data->hour_tens << RTC_ALRMAR_HT_Pos);	// Bits 21:20 HT[1:0]: Hour tens in BCD forma
 8004414:	    4b31      	ldr	r3, [pc, #196]	; (80044dc <RTC_alarm_update+0x134>)
 8004416:	    69db      	ldr	r3, [r3, #28]
 8004418:	    687a      	ldr	r2, [r7, #4]
 800441a:	    79d2      	ldrb	r2, [r2, #7]
 800441c:	    0512      	lsls	r2, r2, #20
 800441e:	    4611      	mov	r1, r2
 8004420:	    4a2e      	ldr	r2, [pc, #184]	; (80044dc <RTC_alarm_update+0x134>)
 8004422:	    430b      	orrs	r3, r1
 8004424:	    61d3      	str	r3, [r2, #28]
	RTC->ALRMAR |= (f_data->hour_units << RTC_ALRMAR_HU_Pos);	// Bits 19:16 HU[3:0]: Hour units in BCD format.
 8004426:	    4b2d      	ldr	r3, [pc, #180]	; (80044dc <RTC_alarm_update+0x134>)
 8004428:	    69db      	ldr	r3, [r3, #28]
 800442a:	    687a      	ldr	r2, [r7, #4]
 800442c:	    7a12      	ldrb	r2, [r2, #8]
 800442e:	    0412      	lsls	r2, r2, #16
 8004430:	    4611      	mov	r1, r2
 8004432:	    4a2a      	ldr	r2, [pc, #168]	; (80044dc <RTC_alarm_update+0x134>)
 8004434:	    430b      	orrs	r3, r1
 8004436:	    61d3      	str	r3, [r2, #28]
	RTC->ALRMAR |= (f_data->minute_tens << RTC_ALRMAR_MNT_Pos);	// Bits 14:12 MNT[2:0]: Minute tens in BCD format.
 8004438:	    4b28      	ldr	r3, [pc, #160]	; (80044dc <RTC_alarm_update+0x134>)
 800443a:	    69db      	ldr	r3, [r3, #28]
 800443c:	    687a      	ldr	r2, [r7, #4]
 800443e:	    7a52      	ldrb	r2, [r2, #9]
 8004440:	    0312      	lsls	r2, r2, #12
 8004442:	    4611      	mov	r1, r2
 8004444:	    4a25      	ldr	r2, [pc, #148]	; (80044dc <RTC_alarm_update+0x134>)
 8004446:	    430b      	orrs	r3, r1
 8004448:	    61d3      	str	r3, [r2, #28]
	RTC->ALRMAR |= (f_data->minute_units << RTC_ALRMAR_MNU_Pos);	// Bits 11:8 MNU[3:0]: Minute units in BCD format.
 800444a:	    4b24      	ldr	r3, [pc, #144]	; (80044dc <RTC_alarm_update+0x134>)
 800444c:	    69db      	ldr	r3, [r3, #28]
 800444e:	    687a      	ldr	r2, [r7, #4]
 8004450:	    7a92      	ldrb	r2, [r2, #10]
 8004452:	    0212      	lsls	r2, r2, #8
 8004454:	    4611      	mov	r1, r2
 8004456:	    4a21      	ldr	r2, [pc, #132]	; (80044dc <RTC_alarm_update+0x134>)
 8004458:	    430b      	orrs	r3, r1
 800445a:	    61d3      	str	r3, [r2, #28]

	// enable Alarm A
	RTC->CR |= RTC_CR_ALRAE;
 800445c:	    4b1f      	ldr	r3, [pc, #124]	; (80044dc <RTC_alarm_update+0x134>)
 800445e:	    689b      	ldr	r3, [r3, #8]
 8004460:	    4a1e      	ldr	r2, [pc, #120]	; (80044dc <RTC_alarm_update+0x134>)
 8004462:	    f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004466:	    6093      	str	r3, [r2, #8]

	// enable the RTC Alarm interrupt - enable the EXTI Line 17
	// SYSCFG (System configuration controller) clock through APB2 bus enable
	if (!(RCC->APB2ENR & RCC_APB2ENR_SYSCFGEN))
 8004468:	    4b1d      	ldr	r3, [pc, #116]	; (80044e0 <RTC_alarm_update+0x138>)
 800446a:	    6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446c:	    f003 0301 	and.w	r3, r3, #1
 8004470:	    2b00      	cmp	r3, #0
 8004472:	/-- d105      	bne.n	8004480 <RTC_alarm_update+0xd8>
	{
		RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8004474:	|   4b1a      	ldr	r3, [pc, #104]	; (80044e0 <RTC_alarm_update+0x138>)
 8004476:	|   6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004478:	|   4a19      	ldr	r2, [pc, #100]	; (80044e0 <RTC_alarm_update+0x138>)
 800447a:	|   f043 0301 	orr.w	r3, r3, #1
 800447e:	|   6613      	str	r3, [r2, #96]	; 0x60
	}

	EXTI->IMR1 |= EXTI_IMR1_IM18;	// interrupt request mask - IM17 is not masked now
 8004480:	\-> 4b18      	ldr	r3, [pc, #96]	; (80044e4 <RTC_alarm_update+0x13c>)
 8004482:	    681b      	ldr	r3, [r3, #0]
 8004484:	    4a17      	ldr	r2, [pc, #92]	; (80044e4 <RTC_alarm_update+0x13c>)
 8004486:	    f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800448a:	    6013      	str	r3, [r2, #0]
	EXTI->RTSR1 |= EXTI_RTSR1_RT18;	// rising edge trigger enabled for EXTI line 17
 800448c:	    4b15      	ldr	r3, [pc, #84]	; (80044e4 <RTC_alarm_update+0x13c>)
 800448e:	    689b      	ldr	r3, [r3, #8]
 8004490:	    4a14      	ldr	r2, [pc, #80]	; (80044e4 <RTC_alarm_update+0x13c>)
 8004492:	    f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004496:	    6093      	str	r3, [r2, #8]

	NVIC_EnableIRQ(RTC_Alarm_IRQn);	// enable the RTC_Alarm IRQ channel in the NVIC
 8004498:	    2029      	movs	r0, #41	; 0x29
 800449a:	    f7ff f921 	bl	80036e0 <__NVIC_EnableIRQ>
	NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);
 800449e:	    2029      	movs	r0, #41	; 0x29
 80044a0:	    f7ff f93c 	bl	800371c <__NVIC_ClearPendingIRQ>
	NVIC_SetPriority(RTC_Alarm_IRQn, 0);	// highest priority
 80044a4:	    2100      	movs	r1, #0
 80044a6:	    2029      	movs	r0, #41	; 0x29
 80044a8:	    f7ff f956 	bl	8003758 <__NVIC_SetPriority>

	// 1: Alarm A interrupt enabled
	RTC->CR |= RTC_CR_ALRAIE;
 80044ac:	    4b0b      	ldr	r3, [pc, #44]	; (80044dc <RTC_alarm_update+0x134>)
 80044ae:	    689b      	ldr	r3, [r3, #8]
 80044b0:	    4a0a      	ldr	r2, [pc, #40]	; (80044dc <RTC_alarm_update+0x134>)
 80044b2:	    f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044b6:	    6093      	str	r3, [r2, #8]
	// lock write protection - writing a wrong key reactivates the write protection
	RTC->WPR = 0xFF;
 80044b8:	    4b08      	ldr	r3, [pc, #32]	; (80044dc <RTC_alarm_update+0x134>)
 80044ba:	    22ff      	movs	r2, #255	; 0xff
 80044bc:	    625a      	str	r2, [r3, #36]	; 0x24
	PWR->CR1 &= ~PWR_CR1_DBP;
 80044be:	    4b06      	ldr	r3, [pc, #24]	; (80044d8 <RTC_alarm_update+0x130>)
 80044c0:	    681b      	ldr	r3, [r3, #0]
 80044c2:	    4a05      	ldr	r2, [pc, #20]	; (80044d8 <RTC_alarm_update+0x130>)
 80044c4:	    f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c8:	    6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044ca:	    b662      	cpsie	i
}
 80044cc:	    bf00      	nop

	__enable_irq();	// global interrupts enable
}
 80044ce:	    bf00      	nop
 80044d0:	    3708      	adds	r7, #8
 80044d2:	    46bd      	mov	sp, r7
 80044d4:	    bd80      	pop	{r7, pc}
 80044d6:	    bf00      	nop
 80044d8:	    7000      	strb	r0, [r0, #0]
 80044da:	    4000      	ands	r0, r0
 80044dc:	    2800      	cmp	r0, #0
 80044de:	    4000      	ands	r0, r0
 80044e0:	    1000      	asrs	r0, r0, #32
 80044e2:	    4002      	ands	r2, r0
 80044e4:	    0400      	lsls	r0, r0, #16
 80044e6:	    4001      	ands	r1, r0

080044e8 <SDMMC_INIT>:
#include "gpio.h"


SDCard_TypeDef SDCard;                 // SD card parameters

void SDMMC_INIT(){
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af02      	add	r7, sp, #8
	gpio_init(PC8, PC8_SDMMC1_D0, Push_pull, no_pull, High_speed);
 80044ee:	2302      	movs	r3, #2
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	2300      	movs	r3, #0
 80044f4:	2200      	movs	r2, #0
 80044f6:	2110      	movs	r1, #16
 80044f8:	2029      	movs	r0, #41	; 0x29
 80044fa:	f7fd fc6d 	bl	8001dd8 <gpio_init>
	gpio_init(PC9, PC9_SDMMC1_D1, Push_pull, no_pull, High_speed);
 80044fe:	2302      	movs	r3, #2
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	2300      	movs	r3, #0
 8004504:	2200      	movs	r2, #0
 8004506:	2110      	movs	r1, #16
 8004508:	202a      	movs	r0, #42	; 0x2a
 800450a:	f7fd fc65 	bl	8001dd8 <gpio_init>
	gpio_init(PC10, PC10_SDMMC1_D2, Push_pull, no_pull, High_speed);
 800450e:	2302      	movs	r3, #2
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	2300      	movs	r3, #0
 8004514:	2200      	movs	r2, #0
 8004516:	2110      	movs	r1, #16
 8004518:	202b      	movs	r0, #43	; 0x2b
 800451a:	f7fd fc5d 	bl	8001dd8 <gpio_init>
	gpio_init(PC11, PC11_SDMMC1_D3, Push_pull, no_pull, High_speed);
 800451e:	2302      	movs	r3, #2
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	2300      	movs	r3, #0
 8004524:	2200      	movs	r2, #0
 8004526:	2110      	movs	r1, #16
 8004528:	202c      	movs	r0, #44	; 0x2c
 800452a:	f7fd fc55 	bl	8001dd8 <gpio_init>
	gpio_init(PC12, PC12_SDMMC1_CK, Push_pull, no_pull, High_speed);
 800452e:	2302      	movs	r3, #2
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	2300      	movs	r3, #0
 8004534:	2200      	movs	r2, #0
 8004536:	2110      	movs	r1, #16
 8004538:	202d      	movs	r0, #45	; 0x2d
 800453a:	f7fd fc4d 	bl	8001dd8 <gpio_init>
	gpio_init(PD2, PD2_SDMMC1_CMD, Push_pull, no_pull, High_speed);
 800453e:	2302      	movs	r3, #2
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	2300      	movs	r3, #0
 8004544:	2200      	movs	r2, #0
 8004546:	2110      	movs	r1, #16
 8004548:	2033      	movs	r0, #51	; 0x33
 800454a:	f7fd fc45 	bl	8001dd8 <gpio_init>


	RCC->APB2ENR |= RCC_APB2ENR_SDMMC1EN;
 800454e:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <SDMMC_INIT+0x9c>)
 8004550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004552:	4a0c      	ldr	r2, [pc, #48]	; (8004584 <SDMMC_INIT+0x9c>)
 8004554:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004558:	6613      	str	r3, [r2, #96]	; 0x60
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN;
 800455a:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <SDMMC_INIT+0x9c>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	4a09      	ldr	r2, [pc, #36]	; (8004584 <SDMMC_INIT+0x9c>)
 8004560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004564:	60d3      	str	r3, [r2, #12]
	RCC->CCIPR |= 2 << 26; //clock from PLLQ
 8004566:	4b07      	ldr	r3, [pc, #28]	; (8004584 <SDMMC_INIT+0x9c>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456c:	4a05      	ldr	r2, [pc, #20]	; (8004584 <SDMMC_INIT+0x9c>)
 800456e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004572:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	//clock from HSI48
	SDMMC1->CLKCR = 0x86 | SDMMC_CLKCR_CLKEN | SDMMC_CLKCR_WIDBUS_0 | SDMMC_CLKCR_HWFC_EN;
 8004576:	4b04      	ldr	r3, [pc, #16]	; (8004588 <SDMMC_INIT+0xa0>)
 8004578:	f644 1286 	movw	r2, #18822	; 0x4986
 800457c:	605a      	str	r2, [r3, #4]

//	SDMMC1->POWER = 0x03;
}
 800457e:	bf00      	nop
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	1000      	asrs	r0, r0, #32
 8004586:	4002      	ands	r2, r0
 8004588:	2800      	cmp	r0, #0
 800458a:	4001      	ands	r1, r0

0800458c <SD_Cmd>:
// input:
//   cmd - SD card command
//   arg - 32-bit argument for SD card command
//   resp_type - response type (SDMMC_RESP_xxx)
// return: SDResult value
SDResult SD_Cmd(uint8_t cmd, uint32_t arg, uint16_t resp_type) {
 800458c:	          b480      	push	{r7}
 800458e:	          b085      	sub	sp, #20
 8004590:	          af00      	add	r7, sp, #0
 8004592:	          4603      	mov	r3, r0
 8004594:	          6039      	str	r1, [r7, #0]
 8004596:	          71fb      	strb	r3, [r7, #7]
 8004598:	          4613      	mov	r3, r2
 800459a:	          80bb      	strh	r3, [r7, #4]
	uint32_t wait = SDMMC_CMD_TIMEOUT;
 800459c:	          f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045a0:	          60fb      	str	r3, [r7, #12]

	// Clear the command flags
	SDMMC1->ICR = SDMMC_ICR_CCRCFAILC | SDMMC_ICR_CTIMEOUTC | SDMMC_ICR_CMDRENDC | SDMMC_ICR_CMDSENTC;
 80045a2:	          4b22      	ldr	r3, [pc, #136]	; (800462c <SD_Cmd+0xa0>)
 80045a4:	          22c5      	movs	r2, #197	; 0xc5
 80045a6:	          639a      	str	r2, [r3, #56]	; 0x38

	// Command argument value
	SDMMC1->ARG = arg;
 80045a8:	          4a20      	ldr	r2, [pc, #128]	; (800462c <SD_Cmd+0xa0>)
 80045aa:	          683b      	ldr	r3, [r7, #0]
 80045ac:	          6093      	str	r3, [r2, #8]

	// Write to SDIO CMD
	SDMMC1->CMD = resp_type | cmd | SDMMC_CMD_CPSMEN;
 80045ae:	          88ba      	ldrh	r2, [r7, #4]
 80045b0:	          79fb      	ldrb	r3, [r7, #7]
 80045b2:	          4313      	orrs	r3, r2
 80045b4:	          4a1d      	ldr	r2, [pc, #116]	; (800462c <SD_Cmd+0xa0>)
 80045b6:	          f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045ba:	          60d3      	str	r3, [r2, #12]

	// Block till get a response
	if (resp_type == SDMMC_RESP_NONE) {
 80045bc:	          88bb      	ldrh	r3, [r7, #4]
 80045be:	          2b00      	cmp	r3, #0
 80045c0:	   /----- d10d      	bne.n	80045de <SD_Cmd+0x52>
		// Wait for timeout or CMD sent flag
		while (!(SDMMC1->STA & (SDMMC_STA_CTIMEOUT | SDMMC_STA_CMDSENT)) && --wait);
 80045c2:	   |      bf00      	nop
 80045c4:	   |  /-> 4b19      	ldr	r3, [pc, #100]	; (800462c <SD_Cmd+0xa0>)
 80045c6:	   |  |   6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c8:	   |  |   f003 0384 	and.w	r3, r3, #132	; 0x84
 80045cc:	   |  |   2b00      	cmp	r3, #0
 80045ce:	/--|--|-- d113      	bne.n	80045f8 <SD_Cmd+0x6c>
 80045d0:	|  |  |   68fb      	ldr	r3, [r7, #12]
 80045d2:	|  |  |   3b01      	subs	r3, #1
 80045d4:	|  |  |   60fb      	str	r3, [r7, #12]
 80045d6:	|  |  |   68fb      	ldr	r3, [r7, #12]
 80045d8:	|  |  |   2b00      	cmp	r3, #0
 80045da:	|  |  \-- d1f3      	bne.n	80045c4 <SD_Cmd+0x38>
 80045dc:	+--|----- e00c      	b.n	80045f8 <SD_Cmd+0x6c>
	} else {
		// Wait for CMDSENT or CRCFAIL
		while (!(SDMMC1->STA & (SDMMC_STA_CTIMEOUT | SDMMC_STA_CMDREND | SDMMC_STA_CCRCFAIL)) && --wait);
 80045de:	|  \----> bf00      	nop
 80045e0:	|     /-> 4b12      	ldr	r3, [pc, #72]	; (800462c <SD_Cmd+0xa0>)
 80045e2:	|     |   6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e4:	|     |   f003 0345 	and.w	r3, r3, #69	; 0x45
 80045e8:	|     |   2b00      	cmp	r3, #0
 80045ea:	+-----|-- d105      	bne.n	80045f8 <SD_Cmd+0x6c>
 80045ec:	|     |   68fb      	ldr	r3, [r7, #12]
 80045ee:	|     |   3b01      	subs	r3, #1
 80045f0:	|     |   60fb      	str	r3, [r7, #12]
 80045f2:	|     |   68fb      	ldr	r3, [r7, #12]
 80045f4:	|     |   2b00      	cmp	r3, #0
 80045f6:	|     \-- d1f3      	bne.n	80045e0 <SD_Cmd+0x54>
	}

	// Check response
	if ((SDMMC1->STA & SDMMC_STA_CTIMEOUT) || !wait) return SDR_Timeout;
 80045f8:	\-------> 4b0c      	ldr	r3, [pc, #48]	; (800462c <SD_Cmd+0xa0>)
 80045fa:	          6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fc:	          f003 0304 	and.w	r3, r3, #4
 8004600:	          2b00      	cmp	r3, #0
 8004602:	   /----- d102      	bne.n	800460a <SD_Cmd+0x7e>
 8004604:	   |      68fb      	ldr	r3, [r7, #12]
 8004606:	   |      2b00      	cmp	r3, #0
 8004608:	   |  /-- d101      	bne.n	800460e <SD_Cmd+0x82>
 800460a:	   \--|-> 2301      	movs	r3, #1
 800460c:	   /--|-- e008      	b.n	8004620 <SD_Cmd+0x94>
	if (SDMMC1->STA & SDMMC_STA_CCRCFAIL) return SDR_CRCError; // CRC fail will be always for R3 response
 800460e:	   |  \-> 4b07      	ldr	r3, [pc, #28]	; (800462c <SD_Cmd+0xa0>)
 8004610:	   |      6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004612:	   |      f003 0301 	and.w	r3, r3, #1
 8004616:	   |      2b00      	cmp	r3, #0
 8004618:	   |  /-- d001      	beq.n	800461e <SD_Cmd+0x92>
 800461a:	   |  |   2302      	movs	r3, #2
 800461c:	   +--|-- e000      	b.n	8004620 <SD_Cmd+0x94>

	return SDR_Success;
 800461e:	   |  \-> 2300      	movs	r3, #0
}
 8004620:	   \----> 4618      	mov	r0, r3
 8004622:	          3714      	adds	r7, #20
 8004624:	          46bd      	mov	sp, r7
 8004626:	          f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	          4770      	bx	lr
 800462c:	          2800      	cmp	r0, #0
 800462e:	          4001      	ands	r1, r0

08004630 <SD_GetError>:

// Get SDResult code from card status information
// input:
//   cs - card status (32-bit value)
// return: SDResult code
SDResult SD_GetError(uint32_t cs) {
 8004630:	       b480      	push	{r7}
 8004632:	       b085      	sub	sp, #20
 8004634:	       af00      	add	r7, sp, #0
 8004636:	       6078      	str	r0, [r7, #4]
	SDResult result = SDR_Success;
 8004638:	       2300      	movs	r3, #0
 800463a:	       73fb      	strb	r3, [r7, #15]

	if (cs & SD_CS_ERROR_BITS) {
 800463c:	       687a      	ldr	r2, [r7, #4]
 800463e:	       4b47      	ldr	r3, [pc, #284]	; (800475c <SD_GetError+0x12c>)
 8004640:	       4013      	ands	r3, r2
 8004642:	       2b00      	cmp	r3, #0
 8004644:	/----- f000 8083 	beq.w	800474e <SD_GetError+0x11e>
		if (cs & SD_CS_OUT_OF_RANGE)       result = SDR_AddrOutOfRange;
 8004648:	|      687b      	ldr	r3, [r7, #4]
 800464a:	|      2b00      	cmp	r3, #0
 800464c:	|  /-- da01      	bge.n	8004652 <SD_GetError+0x22>
 800464e:	|  |   230b      	movs	r3, #11
 8004650:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_ADDRESS_ERROR)      result = SDR_AddrMisaligned;
 8004652:	|  \-> 687b      	ldr	r3, [r7, #4]
 8004654:	|      f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004658:	|      2b00      	cmp	r3, #0
 800465a:	|  /-- d001      	beq.n	8004660 <SD_GetError+0x30>
 800465c:	|  |   2313      	movs	r3, #19
 800465e:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_BLOCK_LEN_ERROR)    result = SDR_BlockLenError;
 8004660:	|  \-> 687b      	ldr	r3, [r7, #4]
 8004662:	|      f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004666:	|      2b00      	cmp	r3, #0
 8004668:	|  /-- d001      	beq.n	800466e <SD_GetError+0x3e>
 800466a:	|  |   2314      	movs	r3, #20
 800466c:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_ERASE_SEQ_ERROR)    result = SDR_EraseSeqError;
 800466e:	|  \-> 687b      	ldr	r3, [r7, #4]
 8004670:	|      f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004674:	|      2b00      	cmp	r3, #0
 8004676:	|  /-- d001      	beq.n	800467c <SD_GetError+0x4c>
 8004678:	|  |   2315      	movs	r3, #21
 800467a:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_ERASE_PARAM)        result = SDR_EraseParam;
 800467c:	|  \-> 687b      	ldr	r3, [r7, #4]
 800467e:	|      f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004682:	|      2b00      	cmp	r3, #0
 8004684:	|  /-- d001      	beq.n	800468a <SD_GetError+0x5a>
 8004686:	|  |   2316      	movs	r3, #22
 8004688:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_WP_VIOLATION)       result = SDR_WPViolation;
 800468a:	|  \-> 687b      	ldr	r3, [r7, #4]
 800468c:	|      f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004690:	|      2b00      	cmp	r3, #0
 8004692:	|  /-- d001      	beq.n	8004698 <SD_GetError+0x68>
 8004694:	|  |   2317      	movs	r3, #23
 8004696:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_LOCK_UNLOCK_FAILED) result = SDR_LockUnlockFailed;
 8004698:	|  \-> 687b      	ldr	r3, [r7, #4]
 800469a:	|      f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800469e:	|      2b00      	cmp	r3, #0
 80046a0:	|  /-- d001      	beq.n	80046a6 <SD_GetError+0x76>
 80046a2:	|  |   2318      	movs	r3, #24
 80046a4:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_COM_CRC_ERROR)      result = SDR_ComCRCError;
 80046a6:	|  \-> 687b      	ldr	r3, [r7, #4]
 80046a8:	|      f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046ac:	|      2b00      	cmp	r3, #0
 80046ae:	|  /-- d001      	beq.n	80046b4 <SD_GetError+0x84>
 80046b0:	|  |   2319      	movs	r3, #25
 80046b2:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_ILLEGAL_COMMAND)    result = SDR_IllegalCommand;
 80046b4:	|  \-> 687b      	ldr	r3, [r7, #4]
 80046b6:	|      f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ba:	|      2b00      	cmp	r3, #0
 80046bc:	|  /-- d001      	beq.n	80046c2 <SD_GetError+0x92>
 80046be:	|  |   231a      	movs	r3, #26
 80046c0:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_CARD_ECC_FAILED)    result = SDR_CardECCFailed;
 80046c2:	|  \-> 687b      	ldr	r3, [r7, #4]
 80046c4:	|      f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c8:	|      2b00      	cmp	r3, #0
 80046ca:	|  /-- d001      	beq.n	80046d0 <SD_GetError+0xa0>
 80046cc:	|  |   231b      	movs	r3, #27
 80046ce:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_CC_ERROR)           result = SDR_CCError;
 80046d0:	|  \-> 687b      	ldr	r3, [r7, #4]
 80046d2:	|      f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046d6:	|      2b00      	cmp	r3, #0
 80046d8:	|  /-- d001      	beq.n	80046de <SD_GetError+0xae>
 80046da:	|  |   231c      	movs	r3, #28
 80046dc:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_ERROR)              result = SDR_GeneralError;
 80046de:	|  \-> 687b      	ldr	r3, [r7, #4]
 80046e0:	|      f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e4:	|      2b00      	cmp	r3, #0
 80046e6:	|  /-- d001      	beq.n	80046ec <SD_GetError+0xbc>
 80046e8:	|  |   231d      	movs	r3, #29
 80046ea:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_STREAM_R_UNDERRUN)  result = SDR_StreamUnderrun;
 80046ec:	|  \-> 687b      	ldr	r3, [r7, #4]
 80046ee:	|      f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046f2:	|      2b00      	cmp	r3, #0
 80046f4:	|  /-- d001      	beq.n	80046fa <SD_GetError+0xca>
 80046f6:	|  |   231e      	movs	r3, #30
 80046f8:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_STREAM_W_OVERRUN)   result = SDR_StreamOverrun;
 80046fa:	|  \-> 687b      	ldr	r3, [r7, #4]
 80046fc:	|      f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004700:	|      2b00      	cmp	r3, #0
 8004702:	|  /-- d001      	beq.n	8004708 <SD_GetError+0xd8>
 8004704:	|  |   231f      	movs	r3, #31
 8004706:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_CSD_OVERWRITE)      result = SDR_CSDOverwrite;
 8004708:	|  \-> 687b      	ldr	r3, [r7, #4]
 800470a:	|      f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800470e:	|      2b00      	cmp	r3, #0
 8004710:	|  /-- d001      	beq.n	8004716 <SD_GetError+0xe6>
 8004712:	|  |   2320      	movs	r3, #32
 8004714:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_WP_ERASE_SKIP)      result = SDR_WPEraseSkip;
 8004716:	|  \-> 687b      	ldr	r3, [r7, #4]
 8004718:	|      f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800471c:	|      2b00      	cmp	r3, #0
 800471e:	|  /-- d001      	beq.n	8004724 <SD_GetError+0xf4>
 8004720:	|  |   2321      	movs	r3, #33	; 0x21
 8004722:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_CARD_ECC_DISABLED)  result = SDR_ECCDisabled;
 8004724:	|  \-> 687b      	ldr	r3, [r7, #4]
 8004726:	|      f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800472a:	|      2b00      	cmp	r3, #0
 800472c:	|  /-- d001      	beq.n	8004732 <SD_GetError+0x102>
 800472e:	|  |   2322      	movs	r3, #34	; 0x22
 8004730:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_ERASE_RESET)        result = SDR_EraseReset;
 8004732:	|  \-> 687b      	ldr	r3, [r7, #4]
 8004734:	|      f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004738:	|      2b00      	cmp	r3, #0
 800473a:	|  /-- d001      	beq.n	8004740 <SD_GetError+0x110>
 800473c:	|  |   2323      	movs	r3, #35	; 0x23
 800473e:	|  |   73fb      	strb	r3, [r7, #15]
		if (cs & SD_CS_AKE_SEQ_ERROR)      result = SDR_AKESeqError;
 8004740:	|  \-> 687b      	ldr	r3, [r7, #4]
 8004742:	|      f003 0308 	and.w	r3, r3, #8
 8004746:	|      2b00      	cmp	r3, #0
 8004748:	+----- d001      	beq.n	800474e <SD_GetError+0x11e>
 800474a:	|      2324      	movs	r3, #36	; 0x24
 800474c:	|      73fb      	strb	r3, [r7, #15]
	}

	return result;
 800474e:	\----> 7bfb      	ldrb	r3, [r7, #15]
}
 8004750:	       4618      	mov	r0, r3
 8004752:	       3714      	adds	r7, #20
 8004754:	       46bd      	mov	sp, r7
 8004756:	       f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	       4770      	bx	lr
 800475c:	       e008      	b.n	8004770 <SD_Response+0x10>
 800475e:	       fdff  	ldc2l	5, cr11, [pc, #512]!	; 8004960 <SD_GetSCR+0x108>

08004760 <SD_Response>:
//     SDR_Success if no error or SDR_BadResponse in case of bad RCA response
//     pResp contains a 32-bit RCA value
//   for R7 response:
//     SDR_Success if no error or SDR_BadResponse in case of bad R7 response header
//     pResp contains a 32-bit value of R7 response
SDResult SD_Response(uint16_t resp_type, uint32_t *pResp) {
 8004760:	                b580      	push	{r7, lr}
 8004762:	                b084      	sub	sp, #16
 8004764:	                af00      	add	r7, sp, #0
 8004766:	                4603      	mov	r3, r0
 8004768:	                6039      	str	r1, [r7, #0]
 800476a:	                80fb      	strh	r3, [r7, #6]
	SDResult result = SDR_Success;
 800476c:	                2300      	movs	r3, #0
 800476e:	                73fb      	strb	r3, [r7, #15]

	// Get first 32-bit value, it similar for all types of response except R2
	*pResp = SDMMC1->RESP1;
 8004770:	                4b2e      	ldr	r3, [pc, #184]	; (800482c <SD_Response+0xcc>)
 8004772:	                695a      	ldr	r2, [r3, #20]
 8004774:	                683b      	ldr	r3, [r7, #0]
 8004776:	                601a      	str	r2, [r3, #0]

	switch (resp_type) {
 8004778:	                88fb      	ldrh	r3, [r7, #6]
 800477a:	                3b01      	subs	r3, #1
 800477c:	                2b05      	cmp	r3, #5
 800477e:	/-------------- d847      	bhi.n	8004810 <SD_Response+0xb0>
 8004780:	|               a201      	add	r2, pc, #4	; (adr r2, 8004788 <SD_Response+0x28>)
 8004782:	|               f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	|               bf00      	nop
 8004788:	|               47a1      			; <UNDEFINED> instruction: 0x47a1
 800478a:	|               0800      	lsrs	r0, r0, #32
 800478c:	|               47a1      			; <UNDEFINED> instruction: 0x47a1
 800478e:	|               0800      	lsrs	r0, r0, #32
 8004790:	|               47b1      			; <UNDEFINED> instruction: 0x47b1
 8004792:	|               0800      	lsrs	r0, r0, #32
 8004794:	|               47e7      			; <UNDEFINED> instruction: 0x47e7
 8004796:	|               0800      	lsrs	r0, r0, #32
 8004798:	|               47f5      			; <UNDEFINED> instruction: 0x47f5
 800479a:	|               0800      	lsrs	r0, r0, #32
 800479c:	|               4803      	ldr	r0, [pc, #12]	; (80047ac <SD_Response+0x4c>)
 800479e:	|               0800      	lsrs	r0, r0, #32
		case SD_R1:
		case SD_R1b:
			// RESP1 contains card status information
			// Check for error bits in card status
			result = SD_GetError(*pResp);
 80047a0:	|               683b      	ldr	r3, [r7, #0]
 80047a2:	|               681b      	ldr	r3, [r3, #0]
 80047a4:	|               4618      	mov	r0, r3
 80047a6:	|               f7ff ff43 	bl	8004630 <SD_GetError>
 80047aa:	|               4603      	mov	r3, r0
 80047ac:	|               73fb      	strb	r3, [r7, #15]
			break;
 80047ae:	|  /----------- e037      	b.n	8004820 <SD_Response+0xc0>
		case SD_R2:
			// RESP1..4 registers contain the CID/CSD register value
#ifdef __GNUC__
			// Use GCC built-in intrinsics (fastest, less code) (GCC v4.3 or later)
			*pResp++ = __builtin_bswap32(SDMMC1->RESP1);
 80047b0:	|  |            4b1e      	ldr	r3, [pc, #120]	; (800482c <SD_Response+0xcc>)
 80047b2:	|  |            695a      	ldr	r2, [r3, #20]
 80047b4:	|  |            683b      	ldr	r3, [r7, #0]
 80047b6:	|  |            1d19      	adds	r1, r3, #4
 80047b8:	|  |            6039      	str	r1, [r7, #0]
 80047ba:	|  |            ba12      	rev	r2, r2
 80047bc:	|  |            601a      	str	r2, [r3, #0]
			*pResp++ = __builtin_bswap32(SDMMC1->RESP2);
 80047be:	|  |            4b1b      	ldr	r3, [pc, #108]	; (800482c <SD_Response+0xcc>)
 80047c0:	|  |            699a      	ldr	r2, [r3, #24]
 80047c2:	|  |            683b      	ldr	r3, [r7, #0]
 80047c4:	|  |            1d19      	adds	r1, r3, #4
 80047c6:	|  |            6039      	str	r1, [r7, #0]
 80047c8:	|  |            ba12      	rev	r2, r2
 80047ca:	|  |            601a      	str	r2, [r3, #0]
			*pResp++ = __builtin_bswap32(SDMMC1->RESP3);
 80047cc:	|  |            4b17      	ldr	r3, [pc, #92]	; (800482c <SD_Response+0xcc>)
 80047ce:	|  |            69da      	ldr	r2, [r3, #28]
 80047d0:	|  |            683b      	ldr	r3, [r7, #0]
 80047d2:	|  |            1d19      	adds	r1, r3, #4
 80047d4:	|  |            6039      	str	r1, [r7, #0]
 80047d6:	|  |            ba12      	rev	r2, r2
 80047d8:	|  |            601a      	str	r2, [r3, #0]
			*pResp   = __builtin_bswap32(SDMMC1->RESP4);
 80047da:	|  |            4b14      	ldr	r3, [pc, #80]	; (800482c <SD_Response+0xcc>)
 80047dc:	|  |            6a1b      	ldr	r3, [r3, #32]
 80047de:	|  |            ba1a      	rev	r2, r3
 80047e0:	|  |            683b      	ldr	r3, [r7, #0]
 80047e2:	|  |            601a      	str	r2, [r3, #0]
//			*pResp++ = SWAP_UINT32(SDMMC1->RESP1);
//			*pResp++ = SWAP_UINT32(SDMMC1->RESP2);
//			*pResp++ = SWAP_UINT32(SDMMC1->RESP3);
//			*pResp   = SWAP_UINT32(SDMMC1->RESP4);
#endif
			break;
 80047e4:	|  +----------- e01c      	b.n	8004820 <SD_Response+0xc0>
		case SD_R3:
			// RESP1 contains the OCR register value
			// Check for correct OCR header
			if (SDMMC1->RESPCMD != 0x3f) result = SDR_BadResponse;
 80047e6:	|  |            4b11      	ldr	r3, [pc, #68]	; (800482c <SD_Response+0xcc>)
 80047e8:	|  |            691b      	ldr	r3, [r3, #16]
 80047ea:	|  |            2b3f      	cmp	r3, #63	; 0x3f
 80047ec:	|  |  /-------- d013      	beq.n	8004816 <SD_Response+0xb6>
 80047ee:	|  |  |         2307      	movs	r3, #7
 80047f0:	|  |  |         73fb      	strb	r3, [r7, #15]
			break;
 80047f2:	|  |  +-------- e010      	b.n	8004816 <SD_Response+0xb6>
		case SD_R6:
			// RESP1 contains the RCA response value
			// Only CMD3 generates R6 response, so RESPCMD must be 0x03
			if (SDMMC1->RESPCMD != 0x03) result = SDR_BadResponse;
 80047f4:	|  |  |         4b0d      	ldr	r3, [pc, #52]	; (800482c <SD_Response+0xcc>)
 80047f6:	|  |  |         691b      	ldr	r3, [r3, #16]
 80047f8:	|  |  |         2b03      	cmp	r3, #3
 80047fa:	|  |  |  /----- d00e      	beq.n	800481a <SD_Response+0xba>
 80047fc:	|  |  |  |      2307      	movs	r3, #7
 80047fe:	|  |  |  |      73fb      	strb	r3, [r7, #15]
			break;
 8004800:	|  |  |  +----- e00b      	b.n	800481a <SD_Response+0xba>
		case SD_R7:
			// RESP1 contains 'Voltage accepted' and echo-back of check pattern
			// Only CMD8 generates R7 response, so RESPCMD must be 0x08
			if (SDMMC1->RESPCMD != 0x08) result = SDR_BadResponse;
 8004802:	|  |  |  |      4b0a      	ldr	r3, [pc, #40]	; (800482c <SD_Response+0xcc>)
 8004804:	|  |  |  |      691b      	ldr	r3, [r3, #16]
 8004806:	|  |  |  |      2b08      	cmp	r3, #8
 8004808:	|  |  |  |  /-- d009      	beq.n	800481e <SD_Response+0xbe>
 800480a:	|  |  |  |  |   2307      	movs	r3, #7
 800480c:	|  |  |  |  |   73fb      	strb	r3, [r7, #15]
			break;
 800480e:	|  |  |  |  +-- e006      	b.n	800481e <SD_Response+0xbe>
		default:
			// Unknown response
			result = SDR_BadResponse;
 8004810:	\--|--|--|--|-> 2307      	movs	r3, #7
 8004812:	   |  |  |  |   73fb      	strb	r3, [r7, #15]
			break;
 8004814:	   +--|--|--|-- e004      	b.n	8004820 <SD_Response+0xc0>
			break;
 8004816:	   |  \--|--|-> bf00      	nop
 8004818:	   +-----|--|-- e002      	b.n	8004820 <SD_Response+0xc0>
			break;
 800481a:	   |     \--|-> bf00      	nop
 800481c:	   +--------|-- e000      	b.n	8004820 <SD_Response+0xc0>
			break;
 800481e:	   |        \-> bf00      	nop
	}

	return result;
 8004820:	   \----------> 7bfb      	ldrb	r3, [r7, #15]
}
 8004822:	                4618      	mov	r0, r3
 8004824:	                3710      	adds	r7, #16
 8004826:	                46bd      	mov	sp, r7
 8004828:	                bd80      	pop	{r7, pc}
 800482a:	                bf00      	nop
 800482c:	                2800      	cmp	r0, #0
 800482e:	                4001      	ands	r1, r0

08004830 <SD_SetBlockSize>:

// Set block size of the SD card
// input:
//   block_size - block length
// return: SDResult value
SDResult SD_SetBlockSize(uint32_t block_size) {
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	uint32_t response;

	// Send SET_BLOCKLEN command
	SD_Cmd(SD_CMD_SET_BLOCKLEN, 8, SDMMC_RESP_SHORT); // CMD16
 8004838:	2240      	movs	r2, #64	; 0x40
 800483a:	2108      	movs	r1, #8
 800483c:	2010      	movs	r0, #16
 800483e:	f7ff fea5 	bl	800458c <SD_Cmd>

	return SD_Response(SD_R1, &response);
 8004842:	f107 030c 	add.w	r3, r7, #12
 8004846:	4619      	mov	r1, r3
 8004848:	2001      	movs	r0, #1
 800484a:	f7ff ff89 	bl	8004760 <SD_Response>
 800484e:	4603      	mov	r3, r0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <SD_GetSCR>:
// Find the SD card SCR register value
// input:
//   pSCR - pointer to the SCR register value
// return: SDResult value
// note: card must be in transfer mode, not supported by MMC
SDResult SD_GetSCR(uint32_t *pSCR) {
 8004858:	          b580      	push	{r7, lr}
 800485a:	          b084      	sub	sp, #16
 800485c:	          af00      	add	r7, sp, #0
 800485e:	          6078      	str	r0, [r7, #4]
	SDResult cmd_res;
	uint32_t response;

	// Set block size to 8 bytes
	SD_Cmd(SD_CMD_SET_BLOCKLEN,8,SDMMC_RESP_SHORT); // CMD16
 8004860:	          2240      	movs	r2, #64	; 0x40
 8004862:	          2108      	movs	r1, #8
 8004864:	          2010      	movs	r0, #16
 8004866:	          f7ff fe91 	bl	800458c <SD_Cmd>
	cmd_res = SD_Response(SD_R1,&response);
 800486a:	          f107 0308 	add.w	r3, r7, #8
 800486e:	          4619      	mov	r1, r3
 8004870:	          2001      	movs	r0, #1
 8004872:	          f7ff ff75 	bl	8004760 <SD_Response>
 8004876:	          4603      	mov	r3, r0
 8004878:	          73fb      	strb	r3, [r7, #15]
	if (cmd_res != SDR_Success) return cmd_res;
 800487a:	          7bfb      	ldrb	r3, [r7, #15]
 800487c:	          2b00      	cmp	r3, #0
 800487e:	      /-- d001      	beq.n	8004884 <SD_GetSCR+0x2c>
 8004880:	      |   7bfb      	ldrb	r3, [r7, #15]
 8004882:	/-----|-- e06c      	b.n	800495e <SD_GetSCR+0x106>

	// Send leading command for ACMD<n> command
	SD_Cmd(SD_CMD_APP_CMD,SDCard.RCA << 16,SDMMC_RESP_SHORT); // CMD55
 8004884:	|     \-> 4b38      	ldr	r3, [pc, #224]	; (8004968 <SD_GetSCR+0x110>)
 8004886:	|         8adb      	ldrh	r3, [r3, #22]
 8004888:	|         041b      	lsls	r3, r3, #16
 800488a:	|         2240      	movs	r2, #64	; 0x40
 800488c:	|         4619      	mov	r1, r3
 800488e:	|         2037      	movs	r0, #55	; 0x37
 8004890:	|         f7ff fe7c 	bl	800458c <SD_Cmd>
	cmd_res = SD_Response(SD_R1,&response);
 8004894:	|         f107 0308 	add.w	r3, r7, #8
 8004898:	|         4619      	mov	r1, r3
 800489a:	|         2001      	movs	r0, #1
 800489c:	|         f7ff ff60 	bl	8004760 <SD_Response>
 80048a0:	|         4603      	mov	r3, r0
 80048a2:	|         73fb      	strb	r3, [r7, #15]
	if (cmd_res != SDR_Success) return cmd_res;
 80048a4:	|         7bfb      	ldrb	r3, [r7, #15]
 80048a6:	|         2b00      	cmp	r3, #0
 80048a8:	|     /-- d001      	beq.n	80048ae <SD_GetSCR+0x56>
 80048aa:	|     |   7bfb      	ldrb	r3, [r7, #15]
 80048ac:	+-----|-- e057      	b.n	800495e <SD_GetSCR+0x106>

	// Clear the data flags
	SDMMC1->ICR = SDMMC_ICR_RXOVERRC | SDMMC_ICR_DCRCFAILC | SDMMC_ICR_DTIMEOUTC | SDMMC_ICR_DBCKENDC | SDMMC_ICR_STBITERRC;
 80048ae:	|     \-> 4b2f      	ldr	r3, [pc, #188]	; (800496c <SD_GetSCR+0x114>)
 80048b0:	|         f240 622a 	movw	r2, #1578	; 0x62a
 80048b4:	|         639a      	str	r2, [r3, #56]	; 0x38

	// Configure the SDIO data transfer
	SDMMC1->DTIMER = SDMMC_DATA_R_TIMEOUT; // Data read timeout
 80048b6:	|         4b2d      	ldr	r3, [pc, #180]	; (800496c <SD_GetSCR+0x114>)
 80048b8:	|         4a2d      	ldr	r2, [pc, #180]	; (8004970 <SD_GetSCR+0x118>)
 80048ba:	|         625a      	str	r2, [r3, #36]	; 0x24
	SDMMC1->DLEN   = 8; // Data length in bytes
 80048bc:	|         4b2b      	ldr	r3, [pc, #172]	; (800496c <SD_GetSCR+0x114>)
 80048be:	|         2208      	movs	r2, #8
 80048c0:	|         629a      	str	r2, [r3, #40]	; 0x28
	// Data transfer: block, card -> controller, size: 2^3 = 8bytes, enable data transfer
	SDMMC1->DCTRL  = SDMMC_DCTRL_DTDIR | (3 << 4) | SDMMC_DCTRL_DTEN;
 80048c2:	|         4b2a      	ldr	r3, [pc, #168]	; (800496c <SD_GetSCR+0x114>)
 80048c4:	|         2233      	movs	r2, #51	; 0x33
 80048c6:	|         62da      	str	r2, [r3, #44]	; 0x2c

	// Send SEND_SCR command
	SD_Cmd(SD_CMD_SEND_SCR,0,SDMMC_RESP_SHORT); // ACMD51
 80048c8:	|         2240      	movs	r2, #64	; 0x40
 80048ca:	|         2100      	movs	r1, #0
 80048cc:	|         2033      	movs	r0, #51	; 0x33
 80048ce:	|         f7ff fe5d 	bl	800458c <SD_Cmd>
	cmd_res = SD_Response(SD_R1,&response);
 80048d2:	|         f107 0308 	add.w	r3, r7, #8
 80048d6:	|         4619      	mov	r1, r3
 80048d8:	|         2001      	movs	r0, #1
 80048da:	|         f7ff ff41 	bl	8004760 <SD_Response>
 80048de:	|         4603      	mov	r3, r0
 80048e0:	|         73fb      	strb	r3, [r7, #15]
	if (cmd_res != SDR_Success) return cmd_res;
 80048e2:	|         7bfb      	ldrb	r3, [r7, #15]
 80048e4:	|         2b00      	cmp	r3, #0
 80048e6:	|     /-- d00e      	beq.n	8004906 <SD_GetSCR+0xae>
 80048e8:	|     |   7bfb      	ldrb	r3, [r7, #15]
 80048ea:	+-----|-- e038      	b.n	800495e <SD_GetSCR+0x106>

	// Read a SCR register value from SDIO FIFO
	while (!(SDMMC1->STA & (SDMMC_STA_RXOVERR | SDMMC_STA_DCRCFAIL | SDMMC_STA_DTIMEOUT | SDMMC_STA_DBCKEND | SDMMC_STA_STBITERR))) {
		// Read word when data available in receive FIFO
		if (SDMMC1->STA & SDMMC_STA_RXDAVL) *pSCR++ = SDMMC1->FIFO;
 80048ec:	|  /--|-> 4b1f      	ldr	r3, [pc, #124]	; (800496c <SD_GetSCR+0x114>)
 80048ee:	|  |  |   6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f0:	|  |  |   f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f4:	|  |  |   2b00      	cmp	r3, #0
 80048f6:	|  |  +-- d006      	beq.n	8004906 <SD_GetSCR+0xae>
 80048f8:	|  |  |   491c      	ldr	r1, [pc, #112]	; (800496c <SD_GetSCR+0x114>)
 80048fa:	|  |  |   687b      	ldr	r3, [r7, #4]
 80048fc:	|  |  |   1d1a      	adds	r2, r3, #4
 80048fe:	|  |  |   607a      	str	r2, [r7, #4]
 8004900:	|  |  |   f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8004904:	|  |  |   601a      	str	r2, [r3, #0]
	while (!(SDMMC1->STA & (SDMMC_STA_RXOVERR | SDMMC_STA_DCRCFAIL | SDMMC_STA_DTIMEOUT | SDMMC_STA_DBCKEND | SDMMC_STA_STBITERR))) {
 8004906:	|  |  \-> 4b19      	ldr	r3, [pc, #100]	; (800496c <SD_GetSCR+0x114>)
 8004908:	|  |      6b5a      	ldr	r2, [r3, #52]	; 0x34
 800490a:	|  |      f240 632a 	movw	r3, #1578	; 0x62a
 800490e:	|  |      4013      	ands	r3, r2
 8004910:	|  |      2b00      	cmp	r3, #0
 8004912:	|  \----- d0eb      	beq.n	80048ec <SD_GetSCR+0x94>
	}

	// Check for errors
	if (SDMMC1->STA & SDMMC_STA_DTIMEOUT) cmd_res = SDR_DataTimeout;
 8004914:	|         4b15      	ldr	r3, [pc, #84]	; (800496c <SD_GetSCR+0x114>)
 8004916:	|         6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004918:	|         f003 0308 	and.w	r3, r3, #8
 800491c:	|         2b00      	cmp	r3, #0
 800491e:	|     /-- d001      	beq.n	8004924 <SD_GetSCR+0xcc>
 8004920:	|     |   230e      	movs	r3, #14
 8004922:	|     |   73fb      	strb	r3, [r7, #15]
	if (SDMMC1->STA & SDMMC_STA_DCRCFAIL) cmd_res = SDR_DataCRCFail;
 8004924:	|     \-> 4b11      	ldr	r3, [pc, #68]	; (800496c <SD_GetSCR+0x114>)
 8004926:	|         6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004928:	|         f003 0302 	and.w	r3, r3, #2
 800492c:	|         2b00      	cmp	r3, #0
 800492e:	|     /-- d001      	beq.n	8004934 <SD_GetSCR+0xdc>
 8004930:	|     |   230f      	movs	r3, #15
 8004932:	|     |   73fb      	strb	r3, [r7, #15]
	if (SDMMC1->STA & SDMMC_STA_RXOVERR)  cmd_res = SDR_RXOverrun;
 8004934:	|     \-> 4b0d      	ldr	r3, [pc, #52]	; (800496c <SD_GetSCR+0x114>)
 8004936:	|         6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004938:	|         f003 0320 	and.w	r3, r3, #32
 800493c:	|         2b00      	cmp	r3, #0
 800493e:	|     /-- d001      	beq.n	8004944 <SD_GetSCR+0xec>
 8004940:	|     |   2310      	movs	r3, #16
 8004942:	|     |   73fb      	strb	r3, [r7, #15]
	if (SDMMC1->STA & SDMMC_STA_STBITERR) cmd_res = SDR_StartBitError;
 8004944:	|     \-> 4b09      	ldr	r3, [pc, #36]	; (800496c <SD_GetSCR+0x114>)
 8004946:	|         6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004948:	|         f403 7300 	and.w	r3, r3, #512	; 0x200
 800494c:	|         2b00      	cmp	r3, #0
 800494e:	|     /-- d001      	beq.n	8004954 <SD_GetSCR+0xfc>
 8004950:	|     |   2312      	movs	r3, #18
 8004952:	|     |   73fb      	strb	r3, [r7, #15]

	// Clear the static SDIO flags
	SDMMC1->ICR = SDMMC_ICR_STATIC;
 8004954:	|     \-> 4b05      	ldr	r3, [pc, #20]	; (800496c <SD_GetSCR+0x114>)
 8004956:	|         f240 52ff 	movw	r2, #1535	; 0x5ff
 800495a:	|         639a      	str	r2, [r3, #56]	; 0x38

	return cmd_res;
 800495c:	|         7bfb      	ldrb	r3, [r7, #15]
}
 800495e:	\-------> 4618      	mov	r0, r3
 8004960:	          3710      	adds	r7, #16
 8004962:	          46bd      	mov	sp, r7
 8004964:	          bd80      	pop	{r7, pc}
 8004966:	          bf00      	nop
 8004968:	          3c1c      	subs	r4, #28
 800496a:	          2000      	movs	r0, #0
 800496c:	          2800      	cmp	r0, #0
 800496e:	          4001      	ands	r1, r0
 8004970:	          9f00      	ldr	r7, [sp, #0]
 8004972:	          0024      	movs	r4, r4

08004974 <SD_Init>:

// Initialize the SD card
// return: SDResult value
// note: SDIO peripheral clock must be on and SDIO GPIO configured
SDResult SD_Init(void) {
 8004974:	                         b580      	push	{r7, lr}
 8004976:	                         b088      	sub	sp, #32
 8004978:	                         af00      	add	r7, sp, #0
	uint32_t trials;
	uint32_t response[4];
	uint32_t sd_type = SD_STD_CAPACITY; // SD card capacity
 800497a:	                         2300      	movs	r3, #0
 800497c:	                         617b      	str	r3, [r7, #20]
	SDResult cmd_res;

	// Populate SDCard structure with default values
	SDCard.Capacity = 0;
 800497e:	                         4bab      	ldr	r3, [pc, #684]	; (8004c2c <SD_Init+0x2b8>)
 8004980:	                         2200      	movs	r2, #0
 8004982:	                         605a      	str	r2, [r3, #4]
	SDCard.MaxBusClkFreq = 0;
 8004984:	                         4ba9      	ldr	r3, [pc, #676]	; (8004c2c <SD_Init+0x2b8>)
 8004986:	                         2200      	movs	r2, #0
 8004988:	                         611a      	str	r2, [r3, #16]
	SDCard.BlockSize = 0;
 800498a:	                         4ba8      	ldr	r3, [pc, #672]	; (8004c2c <SD_Init+0x2b8>)
 800498c:	                         2200      	movs	r2, #0
 800498e:	                         60da      	str	r2, [r3, #12]
	SDCard.CSDVer = 0;
 8004990:	                         4ba6      	ldr	r3, [pc, #664]	; (8004c2c <SD_Init+0x2b8>)
 8004992:	                         2200      	movs	r2, #0
 8004994:	                         751a      	strb	r2, [r3, #20]
	SDCard.Type = SDCT_UNKNOWN;
 8004996:	                         4ba5      	ldr	r3, [pc, #660]	; (8004c2c <SD_Init+0x2b8>)
 8004998:	                         2200      	movs	r2, #0
 800499a:	                         701a      	strb	r2, [r3, #0]
	SDCard.RCA = 0;
 800499c:	                         4ba3      	ldr	r3, [pc, #652]	; (8004c2c <SD_Init+0x2b8>)
 800499e:	                         2200      	movs	r2, #0
 80049a0:	                         82da      	strh	r2, [r3, #22]

	SDMMC1->POWER = SDMMC_PWR_ON; // Enable SDIO clock
 80049a2:	                         4ba3      	ldr	r3, [pc, #652]	; (8004c30 <SD_Init+0x2bc>)
 80049a4:	                         2203      	movs	r2, #3
 80049a6:	                         601a      	str	r2, [r3, #0]

	SD_Cmd(SD_CMD_GO_IDLE_STATE, 0x00, SDMMC_RESP_NONE);
 80049a8:	                         2200      	movs	r2, #0
 80049aa:	                         2100      	movs	r1, #0
 80049ac:	                         2000      	movs	r0, #0
 80049ae:	                         f7ff fded 	bl	800458c <SD_Cmd>

	// CMD8: SEND_IF_COND. Send this command to verify SD card interface operating condition
	// Argument: - [31:12]: Reserved (shall be set to '0')
	//           - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
	//           - [7:0]: Check Pattern (recommended 0xAA)
	cmd_res = SD_Cmd(SD_CMD_HS_SEND_EXT_CSD, SD_CHECK_PATTERN, SDMMC_RESP_SHORT); // CMD8
 80049b2:	                         2240      	movs	r2, #64	; 0x40
 80049b4:	                         f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80049b8:	                         2008      	movs	r0, #8
 80049ba:	                         f7ff fde7 	bl	800458c <SD_Cmd>
 80049be:	                         4603      	mov	r3, r0
 80049c0:	                         76fb      	strb	r3, [r7, #27]
	if (cmd_res == SDR_Success) {
 80049c2:	                         7efb      	ldrb	r3, [r7, #27]
 80049c4:	                         2b00      	cmp	r3, #0
 80049c6:	         /-------------- d156      	bne.n	8004a76 <SD_Init+0x102>
		// SD v2.0 or later

		// Get and check R7 response
		if (SD_Response(SD_R7, response) != SDR_Success) return SDR_BadResponse;
 80049c8:	         |               1d3b      	adds	r3, r7, #4
 80049ca:	         |               4619      	mov	r1, r3
 80049cc:	         |               2006      	movs	r0, #6
 80049ce:	         |               f7ff fec7 	bl	8004760 <SD_Response>
 80049d2:	         |               4603      	mov	r3, r0
 80049d4:	         |               2b00      	cmp	r3, #0
 80049d6:	         |           /-- d001      	beq.n	80049dc <SD_Init+0x68>
 80049d8:	         |           |   2307      	movs	r3, #7
 80049da:	/--------|-----------|-- e17c      	b.n	8004cd6 <SD_Init+0x362>
		// Check echo-back of check pattern
		if ((response[0] & 0x01ff) != (SD_CHECK_PATTERN & 0x01ff)) return SDR_Unsupported;
 80049dc:	|        |           \-> 687b      	ldr	r3, [r7, #4]
 80049de:	|        |               f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e2:	|        |               f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
 80049e6:	|        |           /-- d001      	beq.n	80049ec <SD_Init+0x78>
 80049e8:	|        |           |   2306      	movs	r3, #6
 80049ea:	+--------|-----------|-- e174      	b.n	8004cd6 <SD_Init+0x362>
		sd_type = SD_HIGH_CAPACITY; // SD v2.0 or later
 80049ec:	|        |           \-> f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049f0:	|        |               617b      	str	r3, [r7, #20]

		// Issue ACMD41 command
		trials = SDMMC_ACMD41_TRIALS;
 80049f2:	|        |               f64f 73ff 	movw	r3, #65535	; 0xffff
 80049f6:	|        |               61fb      	str	r3, [r7, #28]
		while (--trials) {
 80049f8:	|        |     /-------- e025      	b.n	8004a46 <SD_Init+0xd2>
			// Send leading command for ACMD<n> command
			SD_Cmd(SD_CMD_APP_CMD, 0, SDMMC_RESP_SHORT); // CMD55 with RCA 0
 80049fa:	|        |  /--|-------> 2240      	movs	r2, #64	; 0x40
 80049fc:	|        |  |  |         2100      	movs	r1, #0
 80049fe:	|        |  |  |         2037      	movs	r0, #55	; 0x37
 8004a00:	|        |  |  |         f7ff fdc4 	bl	800458c <SD_Cmd>
			if (SD_Response(SD_R1, response) != SDR_Success) return SDR_BadResponse;
 8004a04:	|        |  |  |         1d3b      	adds	r3, r7, #4
 8004a06:	|        |  |  |         4619      	mov	r1, r3
 8004a08:	|        |  |  |         2001      	movs	r0, #1
 8004a0a:	|        |  |  |         f7ff fea9 	bl	8004760 <SD_Response>
 8004a0e:	|        |  |  |         4603      	mov	r3, r0
 8004a10:	|        |  |  |         2b00      	cmp	r3, #0
 8004a12:	|        |  |  |     /-- d001      	beq.n	8004a18 <SD_Init+0xa4>
 8004a14:	|        |  |  |     |   2307      	movs	r3, #7
 8004a16:	+--------|--|--|-----|-- e15e      	b.n	8004cd6 <SD_Init+0x362>
			// ACMD41 - initiate initialization process.
			// Set 3.0-3.3V voltage window (bit 20)
			// Set HCS bit (30) (Host Capacity Support) to inform card what host support high capacity
			// Set XPC bit (28) (SDXC Power Control) to use maximum performance (SDXC only)
			SD_Cmd(SD_CMD_SD_SEND_OP_COND, SD_OCR_VOLTAGE | sd_type, SDMMC_RESP_SHORT);
 8004a18:	|        |  |  |     \-> 697b      	ldr	r3, [r7, #20]
 8004a1a:	|        |  |  |         f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a1e:	|        |  |  |         f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a22:	|        |  |  |         2240      	movs	r2, #64	; 0x40
 8004a24:	|        |  |  |         4619      	mov	r1, r3
 8004a26:	|        |  |  |         2029      	movs	r0, #41	; 0x29
 8004a28:	|        |  |  |         f7ff fdb0 	bl	800458c <SD_Cmd>
			if (SD_Response(SD_R3, response) != SDR_Success) return SDR_BadResponse;
 8004a2c:	|        |  |  |         1d3b      	adds	r3, r7, #4
 8004a2e:	|        |  |  |         4619      	mov	r1, r3
 8004a30:	|        |  |  |         2004      	movs	r0, #4
 8004a32:	|        |  |  |         f7ff fe95 	bl	8004760 <SD_Response>
 8004a36:	|        |  |  |         4603      	mov	r3, r0
 8004a38:	|        |  |  |         2b00      	cmp	r3, #0
 8004a3a:	|        |  |  |     /-- d001      	beq.n	8004a40 <SD_Init+0xcc>
 8004a3c:	|        |  |  |     |   2307      	movs	r3, #7
 8004a3e:	+--------|--|--|-----|-- e14a      	b.n	8004cd6 <SD_Init+0x362>
			// Check if card finished power up routine
			if (response[0] & (1 << 31)) break;
 8004a40:	|        |  |  |     \-> 687b      	ldr	r3, [r7, #4]
 8004a42:	|        |  |  |         2b00      	cmp	r3, #0
 8004a44:	|        |  |  |  /----- db06      	blt.n	8004a54 <SD_Init+0xe0>
		while (--trials) {
 8004a46:	|        |  |  \--|----> 69fb      	ldr	r3, [r7, #28]
 8004a48:	|        |  |     |      3b01      	subs	r3, #1
 8004a4a:	|        |  |     |      61fb      	str	r3, [r7, #28]
 8004a4c:	|        |  |     |      69fb      	ldr	r3, [r7, #28]
 8004a4e:	|        |  |     |      2b00      	cmp	r3, #0
 8004a50:	|        |  \-----|----- d1d3      	bne.n	80049fa <SD_Init+0x86>
 8004a52:	|        |        |  /-- e000      	b.n	8004a56 <SD_Init+0xe2>
			if (response[0] & (1 << 31)) break;
 8004a54:	|        |        \--|-> bf00      	nop
		}
		if (!trials) return SDR_InvalidVoltage; // Unsupported voltage range
 8004a56:	|        |           \-> 69fb      	ldr	r3, [r7, #28]
 8004a58:	|        |               2b00      	cmp	r3, #0
 8004a5a:	|        |           /-- d101      	bne.n	8004a60 <SD_Init+0xec>
 8004a5c:	|        |           |   230d      	movs	r3, #13
 8004a5e:	+--------|-----------|-- e13a      	b.n	8004cd6 <SD_Init+0x362>
		// Check if card is SDHC/SDXC
		SDCard.Type = (response[0] & SD_HIGH_CAPACITY) ? SDCT_SDHC : SDCT_SDSC_V2;
 8004a60:	|        |           \-> 687b      	ldr	r3, [r7, #4]
 8004a62:	|        |               f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a66:	|        |               2b00      	cmp	r3, #0
 8004a68:	|        |        /----- d001      	beq.n	8004a6e <SD_Init+0xfa>
 8004a6a:	|        |        |      2204      	movs	r2, #4
 8004a6c:	|        |        |  /-- e000      	b.n	8004a70 <SD_Init+0xfc>
 8004a6e:	|        |        \--|-> 2202      	movs	r2, #2
 8004a70:	|        |           \-> 4b6e      	ldr	r3, [pc, #440]	; (8004c2c <SD_Init+0x2b8>)
 8004a72:	|        |               701a      	strb	r2, [r3, #0]
 8004a74:	|  /-----|-------------- e070      	b.n	8004b58 <SD_Init+0x1e4>
	} else if (cmd_res == SDR_Timeout) {
 8004a76:	|  |     \-------------> 7efb      	ldrb	r3, [r7, #27]
 8004a78:	|  |                     2b01      	cmp	r3, #1
 8004a7a:	|  |  /----------------- d16b      	bne.n	8004b54 <SD_Init+0x1e0>
		// SD v1.x or MMC

		// Issue CMD55 to reset 'Illegal command' bit of the SD card
		SD_Cmd(SD_CMD_APP_CMD, 0, SDMMC_RESP_SHORT); // CMD55 with RCA 0
 8004a7c:	|  |  |                  2240      	movs	r2, #64	; 0x40
 8004a7e:	|  |  |                  2100      	movs	r1, #0
 8004a80:	|  |  |                  2037      	movs	r0, #55	; 0x37
 8004a82:	|  |  |                  f7ff fd83 	bl	800458c <SD_Cmd>

		// Issue ACMD41 command with zero argument
		trials = SDMMC_ACMD41_TRIALS;
 8004a86:	|  |  |                  f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a8a:	|  |  |                  61fb      	str	r3, [r7, #28]
		while (--trials) {
 8004a8c:	|  |  |     /----------- e025      	b.n	8004ada <SD_Init+0x166>
			// Send leading command for ACMD<n> command
			SD_Cmd(SD_CMD_APP_CMD, 0, SDMMC_RESP_SHORT); // CMD55 with RCA 0
 8004a8e:	|  |  |  /--|----------> 2240      	movs	r2, #64	; 0x40
 8004a90:	|  |  |  |  |            2100      	movs	r1, #0
 8004a92:	|  |  |  |  |            2037      	movs	r0, #55	; 0x37
 8004a94:	|  |  |  |  |            f7ff fd7a 	bl	800458c <SD_Cmd>
			if (SD_Response(SD_R1, response) != SDR_Success) return SDR_BadResponse;
 8004a98:	|  |  |  |  |            1d3b      	adds	r3, r7, #4
 8004a9a:	|  |  |  |  |            4619      	mov	r1, r3
 8004a9c:	|  |  |  |  |            2001      	movs	r0, #1
 8004a9e:	|  |  |  |  |            f7ff fe5f 	bl	8004760 <SD_Response>
 8004aa2:	|  |  |  |  |            4603      	mov	r3, r0
 8004aa4:	|  |  |  |  |            2b00      	cmp	r3, #0
 8004aa6:	|  |  |  |  |        /-- d001      	beq.n	8004aac <SD_Init+0x138>
 8004aa8:	|  |  |  |  |        |   2307      	movs	r3, #7
 8004aaa:	+--|--|--|--|--------|-- e114      	b.n	8004cd6 <SD_Init+0x362>
			// ACMD41 - initiate initialization process (bit HCS = 0)
			// R3 response do not protected with CRC and here will be CRC error
			cmd_res = SD_Cmd(SD_CMD_SD_SEND_OP_COND, SD_OCR_VOLTAGE, SDMMC_RESP_SHORT);
 8004aac:	|  |  |  |  |        \-> 2240      	movs	r2, #64	; 0x40
 8004aae:	|  |  |  |  |            4961      	ldr	r1, [pc, #388]	; (8004c34 <SD_Init+0x2c0>)
 8004ab0:	|  |  |  |  |            2029      	movs	r0, #41	; 0x29
 8004ab2:	|  |  |  |  |            f7ff fd6b 	bl	800458c <SD_Cmd>
 8004ab6:	|  |  |  |  |            4603      	mov	r3, r0
 8004ab8:	|  |  |  |  |            76fb      	strb	r3, [r7, #27]
			if (cmd_res == SDR_Timeout) break; // MMC will not respond to this command
 8004aba:	|  |  |  |  |            7efb      	ldrb	r3, [r7, #27]
 8004abc:	|  |  |  |  |            2b01      	cmp	r3, #1
 8004abe:	|  |  |  |  |  /-------- d013      	beq.n	8004ae8 <SD_Init+0x174>
			if (SD_Response(SD_R3,response) != SDR_Success) return SDR_BadResponse;
 8004ac0:	|  |  |  |  |  |         1d3b      	adds	r3, r7, #4
 8004ac2:	|  |  |  |  |  |         4619      	mov	r1, r3
 8004ac4:	|  |  |  |  |  |         2004      	movs	r0, #4
 8004ac6:	|  |  |  |  |  |         f7ff fe4b 	bl	8004760 <SD_Response>
 8004aca:	|  |  |  |  |  |         4603      	mov	r3, r0
 8004acc:	|  |  |  |  |  |         2b00      	cmp	r3, #0
 8004ace:	|  |  |  |  |  |     /-- d001      	beq.n	8004ad4 <SD_Init+0x160>
 8004ad0:	|  |  |  |  |  |     |   2307      	movs	r3, #7
 8004ad2:	+--|--|--|--|--|-----|-- e100      	b.n	8004cd6 <SD_Init+0x362>
			// Check if card finished power up routine
			if (response[0] & (1 << 31)) break;
 8004ad4:	|  |  |  |  |  |     \-> 687b      	ldr	r3, [r7, #4]
 8004ad6:	|  |  |  |  |  |         2b00      	cmp	r3, #0
 8004ad8:	|  |  |  |  |  |  /----- db08      	blt.n	8004aec <SD_Init+0x178>
		while (--trials) {
 8004ada:	|  |  |  |  \--|--|----> 69fb      	ldr	r3, [r7, #28]
 8004adc:	|  |  |  |     |  |      3b01      	subs	r3, #1
 8004ade:	|  |  |  |     |  |      61fb      	str	r3, [r7, #28]
 8004ae0:	|  |  |  |     |  |      69fb      	ldr	r3, [r7, #28]
 8004ae2:	|  |  |  |     |  |      2b00      	cmp	r3, #0
 8004ae4:	|  |  |  \-----|--|----- d1d3      	bne.n	8004a8e <SD_Init+0x11a>
 8004ae6:	|  |  |        |  |  /-- e002      	b.n	8004aee <SD_Init+0x17a>
			if (cmd_res == SDR_Timeout) break; // MMC will not respond to this command
 8004ae8:	|  |  |        \--|--|-> bf00      	nop
 8004aea:	|  |  |           |  +-- e000      	b.n	8004aee <SD_Init+0x17a>
			if (response[0] & (1 << 31)) break;
 8004aec:	|  |  |           \--|-> bf00      	nop
		}
		if (!trials) return SDR_UnknownCard; // Unsupported card
 8004aee:	|  |  |              \-> 69fb      	ldr	r3, [r7, #28]
 8004af0:	|  |  |                  2b00      	cmp	r3, #0
 8004af2:	|  |  |              /-- d101      	bne.n	8004af8 <SD_Init+0x184>
 8004af4:	|  |  |              |   2309      	movs	r3, #9
 8004af6:	+--|--|--------------|-- e0ee      	b.n	8004cd6 <SD_Init+0x362>
		if (cmd_res != SDR_Timeout) {
 8004af8:	|  |  |              \-> 7efb      	ldrb	r3, [r7, #27]
 8004afa:	|  |  |                  2b01      	cmp	r3, #1
 8004afc:	|  |  |              /-- d003      	beq.n	8004b06 <SD_Init+0x192>
			// SD v1.x
			SDCard.Type = SDCT_SDSC_V1; // SDv1
 8004afe:	|  |  |              |   4b4b      	ldr	r3, [pc, #300]	; (8004c2c <SD_Init+0x2b8>)
 8004b00:	|  |  |              |   2201      	movs	r2, #1
 8004b02:	|  |  |              |   701a      	strb	r2, [r3, #0]
 8004b04:	|  +--|--------------|-- e028      	b.n	8004b58 <SD_Init+0x1e4>

			///////////////////////////////////////////////////////////
			// This part is not checked due to lack of MMCmicro card //
			///////////////////////////////////////////////////////////

			trials = SDMMC_ACMD41_TRIALS;
 8004b06:	|  |  |              \-> f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b0a:	|  |  |                  61fb      	str	r3, [r7, #28]
			while (--trials) {
 8004b0c:	|  |  |        /-------- e011      	b.n	8004b32 <SD_Init+0x1be>
				// Issue CMD1: initiate initialization process.
				SD_Cmd(SD_CMD_SEND_OP_COND, SD_OCR_VOLTAGE, SDMMC_RESP_SHORT); // CMD1
 8004b0e:	|  |  |     /--|-------> 2240      	movs	r2, #64	; 0x40
 8004b10:	|  |  |     |  |         4948      	ldr	r1, [pc, #288]	; (8004c34 <SD_Init+0x2c0>)
 8004b12:	|  |  |     |  |         2001      	movs	r0, #1
 8004b14:	|  |  |     |  |         f7ff fd3a 	bl	800458c <SD_Cmd>
				if (SD_Response(SD_R3, response) != SDR_Success) return SDR_BadResponse;
 8004b18:	|  |  |     |  |         1d3b      	adds	r3, r7, #4
 8004b1a:	|  |  |     |  |         4619      	mov	r1, r3
 8004b1c:	|  |  |     |  |         2004      	movs	r0, #4
 8004b1e:	|  |  |     |  |         f7ff fe1f 	bl	8004760 <SD_Response>
 8004b22:	|  |  |     |  |         4603      	mov	r3, r0
 8004b24:	|  |  |     |  |         2b00      	cmp	r3, #0
 8004b26:	|  |  |     |  |     /-- d001      	beq.n	8004b2c <SD_Init+0x1b8>
 8004b28:	|  |  |     |  |     |   2307      	movs	r3, #7
 8004b2a:	+--|--|-----|--|-----|-- e0d4      	b.n	8004cd6 <SD_Init+0x362>
				// Check if card finished power up routine
				if (response[0] & (1 << 31)) break;
 8004b2c:	|  |  |     |  |     \-> 687b      	ldr	r3, [r7, #4]
 8004b2e:	|  |  |     |  |         2b00      	cmp	r3, #0
 8004b30:	|  |  |     |  |  /----- db06      	blt.n	8004b40 <SD_Init+0x1cc>
			while (--trials) {
 8004b32:	|  |  |     |  \--|----> 69fb      	ldr	r3, [r7, #28]
 8004b34:	|  |  |     |     |      3b01      	subs	r3, #1
 8004b36:	|  |  |     |     |      61fb      	str	r3, [r7, #28]
 8004b38:	|  |  |     |     |      69fb      	ldr	r3, [r7, #28]
 8004b3a:	|  |  |     |     |      2b00      	cmp	r3, #0
 8004b3c:	|  |  |     \-----|----- d1e7      	bne.n	8004b0e <SD_Init+0x19a>
 8004b3e:	|  |  |           |  /-- e000      	b.n	8004b42 <SD_Init+0x1ce>
				if (response[0] & (1 << 31)) break;
 8004b40:	|  |  |           \--|-> bf00      	nop
			}
			if (!trials) return SDR_UnknownCard;
 8004b42:	|  |  |              \-> 69fb      	ldr	r3, [r7, #28]
 8004b44:	|  |  |                  2b00      	cmp	r3, #0
 8004b46:	|  |  |              /-- d101      	bne.n	8004b4c <SD_Init+0x1d8>
 8004b48:	|  |  |              |   2309      	movs	r3, #9
 8004b4a:	+--|--|--------------|-- e0c4      	b.n	8004cd6 <SD_Init+0x362>
			SDCard.Type = SDCT_MMC; // MMC
 8004b4c:	|  |  |              \-> 4b37      	ldr	r3, [pc, #220]	; (8004c2c <SD_Init+0x2b8>)
 8004b4e:	|  |  |                  2203      	movs	r2, #3
 8004b50:	|  |  |                  701a      	strb	r2, [r3, #0]
 8004b52:	|  +--|----------------- e001      	b.n	8004b58 <SD_Init+0x1e4>
		}
	} else return cmd_res;
 8004b54:	|  |  \----------------> 7efb      	ldrb	r3, [r7, #27]
 8004b56:	+--|-------------------- e0be      	b.n	8004cd6 <SD_Init+0x362>

	// Now the CMD2 and CMD3 commands should be issued in cycle until timeout to enumerate all cards on the bus.
	// Since this module suitable to work with single card, issue this commands one time only.

	// Send ALL_SEND_CID command
	cmd_res = SD_Cmd(SD_CMD_ALL_SEND_CID, 0, SDMMC_RESP_LONG); // CMD2
 8004b58:	|  \-------------------> 22c0      	movs	r2, #192	; 0xc0
 8004b5a:	|                        2100      	movs	r1, #0
 8004b5c:	|                        2002      	movs	r0, #2
 8004b5e:	|                        f7ff fd15 	bl	800458c <SD_Cmd>
 8004b62:	|                        4603      	mov	r3, r0
 8004b64:	|                        76fb      	strb	r3, [r7, #27]
	if (cmd_res != SDR_Success) return cmd_res;
 8004b66:	|                        7efb      	ldrb	r3, [r7, #27]
 8004b68:	|                        2b00      	cmp	r3, #0
 8004b6a:	|                    /-- d001      	beq.n	8004b70 <SD_Init+0x1fc>
 8004b6c:	|                    |   7efb      	ldrb	r3, [r7, #27]
 8004b6e:	+--------------------|-- e0b2      	b.n	8004cd6 <SD_Init+0x362>
	SD_Response(SD_R2, (uint32_t *)SDCard.CID); // Retrieve CID register from the card
 8004b70:	|                    \-> 4931      	ldr	r1, [pc, #196]	; (8004c38 <SD_Init+0x2c4>)
 8004b72:	|                        2003      	movs	r0, #3
 8004b74:	|                        f7ff fdf4 	bl	8004760 <SD_Response>

	// Send SEND_REL_ADDR command (ask the card to publish a new RCA (Relative Card Address)
	// Once the RCA is received the card state changes to the stand-by state
	if (SDCard.Type != SDCT_MMC) {
 8004b78:	|                        4b2c      	ldr	r3, [pc, #176]	; (8004c2c <SD_Init+0x2b8>)
 8004b7a:	|                        781b      	ldrb	r3, [r3, #0]
 8004b7c:	|                        2b03      	cmp	r3, #3
 8004b7e:	|                 /----- d011      	beq.n	8004ba4 <SD_Init+0x230>
		// SD
		cmd_res = SD_Cmd(SD_CMD_SEND_REL_ADDR, 0, SDMMC_RESP_SHORT); // CMD3
 8004b80:	|                 |      2240      	movs	r2, #64	; 0x40
 8004b82:	|                 |      2100      	movs	r1, #0
 8004b84:	|                 |      2003      	movs	r0, #3
 8004b86:	|                 |      f7ff fd01 	bl	800458c <SD_Cmd>
 8004b8a:	|                 |      4603      	mov	r3, r0
 8004b8c:	|                 |      76fb      	strb	r3, [r7, #27]
		if (cmd_res != SDR_Success) return cmd_res;
 8004b8e:	|                 |      7efb      	ldrb	r3, [r7, #27]
 8004b90:	|                 |      2b00      	cmp	r3, #0
 8004b92:	|                 |  /-- d001      	beq.n	8004b98 <SD_Init+0x224>
 8004b94:	|                 |  |   7efb      	ldrb	r3, [r7, #27]
 8004b96:	+-----------------|--|-- e09e      	b.n	8004cd6 <SD_Init+0x362>
		SD_Response(SD_R6,response);
 8004b98:	|                 |  \-> 1d3b      	adds	r3, r7, #4
 8004b9a:	|                 |      4619      	mov	r1, r3
 8004b9c:	|                 |      2005      	movs	r0, #5
 8004b9e:	|                 |      f7ff fddf 	bl	8004760 <SD_Response>
 8004ba2:	|              /--|----- e011      	b.n	8004bc8 <SD_Init+0x254>
	} else {
		// MMC
		cmd_res = SD_Cmd(SD_CMD_SEND_REL_ADDR, 1 << 16, SDMMC_RESP_SHORT); // CMD3
 8004ba4:	|              |  \----> 2240      	movs	r2, #64	; 0x40
 8004ba6:	|              |         f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004baa:	|              |         2003      	movs	r0, #3
 8004bac:	|              |         f7ff fcee 	bl	800458c <SD_Cmd>
 8004bb0:	|              |         4603      	mov	r3, r0
 8004bb2:	|              |         76fb      	strb	r3, [r7, #27]
		if (cmd_res != SDR_Success) return cmd_res;
 8004bb4:	|              |         7efb      	ldrb	r3, [r7, #27]
 8004bb6:	|              |         2b00      	cmp	r3, #0
 8004bb8:	|              |     /-- d001      	beq.n	8004bbe <SD_Init+0x24a>
 8004bba:	|              |     |   7efb      	ldrb	r3, [r7, #27]
 8004bbc:	+--------------|-----|-- e08b      	b.n	8004cd6 <SD_Init+0x362>
		SD_Response(SD_R2, response);
 8004bbe:	|              |     \-> 1d3b      	adds	r3, r7, #4
 8004bc0:	|              |         4619      	mov	r1, r3
 8004bc2:	|              |         2003      	movs	r0, #3
 8004bc4:	|              |         f7ff fdcc 	bl	8004760 <SD_Response>
	}
	SDCard.RCA = response[0] >> 16;
 8004bc8:	|              \-------> 687b      	ldr	r3, [r7, #4]
 8004bca:	|                        0c1b      	lsrs	r3, r3, #16
 8004bcc:	|                        b29a      	uxth	r2, r3
 8004bce:	|                        4b17      	ldr	r3, [pc, #92]	; (8004c2c <SD_Init+0x2b8>)
 8004bd0:	|                        82da      	strh	r2, [r3, #22]

	// Send SEND_CSD command
	cmd_res = SD_Cmd(SD_CMD_SEND_CSD, SDCard.RCA << 16, SDMMC_RESP_LONG); // CMD9
 8004bd2:	|                        4b16      	ldr	r3, [pc, #88]	; (8004c2c <SD_Init+0x2b8>)
 8004bd4:	|                        8adb      	ldrh	r3, [r3, #22]
 8004bd6:	|                        041b      	lsls	r3, r3, #16
 8004bd8:	|                        22c0      	movs	r2, #192	; 0xc0
 8004bda:	|                        4619      	mov	r1, r3
 8004bdc:	|                        2009      	movs	r0, #9
 8004bde:	|                        f7ff fcd5 	bl	800458c <SD_Cmd>
 8004be2:	|                        4603      	mov	r3, r0
 8004be4:	|                        76fb      	strb	r3, [r7, #27]
	if (cmd_res != SDR_Success) return cmd_res;
 8004be6:	|                        7efb      	ldrb	r3, [r7, #27]
 8004be8:	|                        2b00      	cmp	r3, #0
 8004bea:	|                    /-- d001      	beq.n	8004bf0 <SD_Init+0x27c>
 8004bec:	|                    |   7efb      	ldrb	r3, [r7, #27]
 8004bee:	+--------------------|-- e072      	b.n	8004cd6 <SD_Init+0x362>
	SD_Response(SD_R2, (uint32_t *)SDCard.CSD); // Retrieve CSD register from the card
 8004bf0:	|                    \-> 4912      	ldr	r1, [pc, #72]	; (8004c3c <SD_Init+0x2c8>)
 8004bf2:	|                        2003      	movs	r0, #3
 8004bf4:	|                        f7ff fdb4 	bl	8004760 <SD_Response>

	// Parse CID/CSD registers
	SD_GetCardInfo();
 8004bf8:	|                        f000 f8d6 	bl	8004da8 <SD_GetCardInfo>

	// Configure SDIO peripheral clock
	// HW flow control disabled, Rising edge of SDIOCLK, 1-bit bus, Power saving disabled, SDIOCLK bypass disabled
//	SDMMC1->CLKCR = SD_BUS_1BIT | SDMMC_CLK_DIV_TRAN | SDMMC_CLKCR_CLKEN; // 1-bit bus, data transfer speed, clock enabled
	// HW flow control disabled, Rising edge of SDIOCLK, 1-bit bus, Power saving enabled, SDIOCLK bypass disabled
	SDMMC1->CLKCR = SD_BUS_1BIT | SDMMC_CLK_DIV_TRAN | SDMMC_CLKCR_CLKEN | SDMMC_CLKCR_PWRSAV;
 8004bfc:	|                        4b0c      	ldr	r3, [pc, #48]	; (8004c30 <SD_Init+0x2bc>)
 8004bfe:	|                        f44f 7240 	mov.w	r2, #768	; 0x300
 8004c02:	|                        605a      	str	r2, [r3, #4]

	// Put the SD card in transfer mode
	SD_Cmd(SD_CMD_SEL_DESEL_CARD, SDCard.RCA << 16, SDMMC_RESP_SHORT); // CMD7
 8004c04:	|                        4b09      	ldr	r3, [pc, #36]	; (8004c2c <SD_Init+0x2b8>)
 8004c06:	|                        8adb      	ldrh	r3, [r3, #22]
 8004c08:	|                        041b      	lsls	r3, r3, #16
 8004c0a:	|                        2240      	movs	r2, #64	; 0x40
 8004c0c:	|                        4619      	mov	r1, r3
 8004c0e:	|                        2007      	movs	r0, #7
 8004c10:	|                        f7ff fcbc 	bl	800458c <SD_Cmd>
	cmd_res = SD_Response(SD_R1b, response);
 8004c14:	|                        1d3b      	adds	r3, r7, #4
 8004c16:	|                        4619      	mov	r1, r3
 8004c18:	|                        2002      	movs	r0, #2
 8004c1a:	|                        f7ff fda1 	bl	8004760 <SD_Response>
 8004c1e:	|                        4603      	mov	r3, r0
 8004c20:	|                        76fb      	strb	r3, [r7, #27]
	if (cmd_res != SDR_Success) return cmd_res;
 8004c22:	|                        7efb      	ldrb	r3, [r7, #27]
 8004c24:	|                        2b00      	cmp	r3, #0
 8004c26:	|                    /-- d00b      	beq.n	8004c40 <SD_Init+0x2cc>
 8004c28:	|                    |   7efb      	ldrb	r3, [r7, #27]
 8004c2a:	+--------------------|-- e054      	b.n	8004cd6 <SD_Init+0x362>
 8004c2c:	|                    |   3c1c      	subs	r4, #28
 8004c2e:	|                    |   2000      	movs	r0, #0
 8004c30:	|                    |   2800      	cmp	r0, #0
 8004c32:	|                    |   4001      	ands	r1, r0
 8004c34:	|                    |   0000      	movs	r0, r0
 8004c36:	|                    |   8010      	strh	r0, [r2, #0]
 8004c38:	|                    |   3c56      	subs	r4, #86	; 0x56
 8004c3a:	|                    |   2000      	movs	r0, #0
 8004c3c:	|                    |   3c46      	subs	r4, #70	; 0x46
 8004c3e:	|                    |   2000      	movs	r0, #0

	// Disable the pull-up resistor on CD/DAT3 pin of card
	// Send leading command for ACMD<n> command
	SD_Cmd(SD_CMD_APP_CMD, SDCard.RCA << 16, SDMMC_RESP_SHORT); // CMD55
 8004c40:	|                    \-> 4b27      	ldr	r3, [pc, #156]	; (8004ce0 <SD_Init+0x36c>)
 8004c42:	|                        8adb      	ldrh	r3, [r3, #22]
 8004c44:	|                        041b      	lsls	r3, r3, #16
 8004c46:	|                        2240      	movs	r2, #64	; 0x40
 8004c48:	|                        4619      	mov	r1, r3
 8004c4a:	|                        2037      	movs	r0, #55	; 0x37
 8004c4c:	|                        f7ff fc9e 	bl	800458c <SD_Cmd>
	cmd_res = SD_Response(SD_R1, response);
 8004c50:	|                        1d3b      	adds	r3, r7, #4
 8004c52:	|                        4619      	mov	r1, r3
 8004c54:	|                        2001      	movs	r0, #1
 8004c56:	|                        f7ff fd83 	bl	8004760 <SD_Response>
 8004c5a:	|                        4603      	mov	r3, r0
 8004c5c:	|                        76fb      	strb	r3, [r7, #27]
	if (cmd_res != SDR_Success) return cmd_res;
 8004c5e:	|                        7efb      	ldrb	r3, [r7, #27]
 8004c60:	|                        2b00      	cmp	r3, #0
 8004c62:	|                    /-- d001      	beq.n	8004c68 <SD_Init+0x2f4>
 8004c64:	|                    |   7efb      	ldrb	r3, [r7, #27]
 8004c66:	+--------------------|-- e036      	b.n	8004cd6 <SD_Init+0x362>
	// Send SET_CLR_CARD_DETECT command
	SD_Cmd(SD_CMD_SET_CLR_CARD_DETECT, 0, SDMMC_RESP_SHORT); // ACMD42
 8004c68:	|                    \-> 2240      	movs	r2, #64	; 0x40
 8004c6a:	|                        2100      	movs	r1, #0
 8004c6c:	|                        202a      	movs	r0, #42	; 0x2a
 8004c6e:	|                        f7ff fc8d 	bl	800458c <SD_Cmd>
	cmd_res = SD_Response(SD_R1, response);
 8004c72:	|                        1d3b      	adds	r3, r7, #4
 8004c74:	|                        4619      	mov	r1, r3
 8004c76:	|                        2001      	movs	r0, #1
 8004c78:	|                        f7ff fd72 	bl	8004760 <SD_Response>
 8004c7c:	|                        4603      	mov	r3, r0
 8004c7e:	|                        76fb      	strb	r3, [r7, #27]
	if (cmd_res != SDR_Success) return cmd_res;
 8004c80:	|                        7efb      	ldrb	r3, [r7, #27]
 8004c82:	|                        2b00      	cmp	r3, #0
 8004c84:	|                    /-- d001      	beq.n	8004c8a <SD_Init+0x316>
 8004c86:	|                    |   7efb      	ldrb	r3, [r7, #27]
 8004c88:	+--------------------|-- e025      	b.n	8004cd6 <SD_Init+0x362>

	// Read the SCR register
	if (SDCard.Type != SDCT_MMC) {
 8004c8a:	|                    \-> 4b15      	ldr	r3, [pc, #84]	; (8004ce0 <SD_Init+0x36c>)
 8004c8c:	|                        781b      	ldrb	r3, [r3, #0]
 8004c8e:	|                        2b03      	cmp	r3, #3
 8004c90:	|                    /-- d002      	beq.n	8004c98 <SD_Init+0x324>
		// MMC card doesn't support this feature
		// Warning: this function set block size to 8 bytes
		SD_GetSCR((uint32_t *)SDCard.SCR);
 8004c92:	|                    |   4814      	ldr	r0, [pc, #80]	; (8004ce4 <SD_Init+0x370>)
 8004c94:	|                    |   f7ff fde0 	bl	8004858 <SD_GetSCR>

	}

	// For SDv1,SDv2 and MMC card must set block size (SDHC/SDXC always have fixed size 512bytes)
	if ((SDCard.Type == SDCT_SDSC_V1) || (SDCard.Type == SDCT_SDSC_V2) || (SDCard.Type == SDCT_MMC)) {
 8004c98:	|                    \-> 4b11      	ldr	r3, [pc, #68]	; (8004ce0 <SD_Init+0x36c>)
 8004c9a:	|                        781b      	ldrb	r3, [r3, #0]
 8004c9c:	|                        2b01      	cmp	r3, #1
 8004c9e:	|                    /-- d007      	beq.n	8004cb0 <SD_Init+0x33c>
 8004ca0:	|                    |   4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <SD_Init+0x36c>)
 8004ca2:	|                    |   781b      	ldrb	r3, [r3, #0]
 8004ca4:	|                    |   2b02      	cmp	r3, #2
 8004ca6:	|                    +-- d003      	beq.n	8004cb0 <SD_Init+0x33c>
 8004ca8:	|                    |   4b0d      	ldr	r3, [pc, #52]	; (8004ce0 <SD_Init+0x36c>)
 8004caa:	|                    |   781b      	ldrb	r3, [r3, #0]
 8004cac:	|                    |   2b03      	cmp	r3, #3
 8004cae:	|                 /--|-- d111      	bne.n	8004cd4 <SD_Init+0x360>
		SD_Cmd(SD_CMD_SET_BLOCKLEN, 512, SDMMC_RESP_SHORT); // CMD16
 8004cb0:	|                 |  \-> 2240      	movs	r2, #64	; 0x40
 8004cb2:	|                 |      f44f 7100 	mov.w	r1, #512	; 0x200
 8004cb6:	|                 |      2010      	movs	r0, #16
 8004cb8:	|                 |      f7ff fc68 	bl	800458c <SD_Cmd>
		cmd_res = SD_Response(SD_R1, response);
 8004cbc:	|                 |      1d3b      	adds	r3, r7, #4
 8004cbe:	|                 |      4619      	mov	r1, r3
 8004cc0:	|                 |      2001      	movs	r0, #1
 8004cc2:	|                 |      f7ff fd4d 	bl	8004760 <SD_Response>
 8004cc6:	|                 |      4603      	mov	r3, r0
 8004cc8:	|                 |      76fb      	strb	r3, [r7, #27]
		if (cmd_res != SDR_Success) return SDR_SetBlockSizeFailed;
 8004cca:	|                 |      7efb      	ldrb	r3, [r7, #27]
 8004ccc:	|                 |      2b00      	cmp	r3, #0
 8004cce:	|                 +----- d001      	beq.n	8004cd4 <SD_Init+0x360>
 8004cd0:	|                 |      2308      	movs	r3, #8
 8004cd2:	+-----------------|----- e000      	b.n	8004cd6 <SD_Init+0x362>
	SD_Cmd(SD_CMD_CRC_ON_OFF,0,SD_R1,resp); // CMD59
	// Turn on CRC checks
	SD_Cmd(SD_CMD_CRC_ON_OFF,1,SD_R1,resp); // CMD59
*/

	return SDR_Success;
 8004cd4:	|                 \----> 2300      	movs	r3, #0
}
 8004cd6:	\----------------------> 4618      	mov	r0, r3
 8004cd8:	                         3720      	adds	r7, #32
 8004cda:	                         46bd      	mov	sp, r7
 8004cdc:	                         bd80      	pop	{r7, pc}
 8004cde:	                         bf00      	nop
 8004ce0:	                         3c1c      	subs	r4, #28
 8004ce2:	                         2000      	movs	r0, #0
 8004ce4:	                         3c66      	subs	r4, #102	; 0x66
 8004ce6:	                         2000      	movs	r0, #0

08004ce8 <SD_SetBusWidth>:
// Set SDIO bus width
// input:
//   BW - bus width (one of SDMMC_BUS_xBIT constants)
// return: SDResult
// note: card must be in TRAN state and not locked, otherwise it will respond with 'illegal command'
SDResult SD_SetBusWidth(uint32_t BW) {
 8004ce8:	             b580      	push	{r7, lr}
 8004cea:	             b084      	sub	sp, #16
 8004cec:	             af00      	add	r7, sp, #0
 8004cee:	             6078      	str	r0, [r7, #4]
	SDResult cmd_res = SDR_Success;
 8004cf0:	             2300      	movs	r3, #0
 8004cf2:	             73fb      	strb	r3, [r7, #15]
	uint32_t reg;

	if (SDCard.Type != SDCT_MMC) {
 8004cf4:	             4b1f      	ldr	r3, [pc, #124]	; (8004d74 <SD_SetBusWidth+0x8c>)
 8004cf6:	             781b      	ldrb	r3, [r3, #0]
 8004cf8:	             2b03      	cmp	r3, #3
 8004cfa:	/----------- d02c      	beq.n	8004d56 <SD_SetBusWidth+0x6e>
		// Send leading command for ACMD<n> command
		SD_Cmd(SD_CMD_APP_CMD,SDCard.RCA << 16, SDMMC_RESP_SHORT); // CMD55
 8004cfc:	|            4b1d      	ldr	r3, [pc, #116]	; (8004d74 <SD_SetBusWidth+0x8c>)
 8004cfe:	|            8adb      	ldrh	r3, [r3, #22]
 8004d00:	|            041b      	lsls	r3, r3, #16
 8004d02:	|            2240      	movs	r2, #64	; 0x40
 8004d04:	|            4619      	mov	r1, r3
 8004d06:	|            2037      	movs	r0, #55	; 0x37
 8004d08:	|            f7ff fc40 	bl	800458c <SD_Cmd>
		cmd_res = SD_Response(SD_R1,&reg);
 8004d0c:	|            f107 0308 	add.w	r3, r7, #8
 8004d10:	|            4619      	mov	r1, r3
 8004d12:	|            2001      	movs	r0, #1
 8004d14:	|            f7ff fd24 	bl	8004760 <SD_Response>
 8004d18:	|            4603      	mov	r3, r0
 8004d1a:	|            73fb      	strb	r3, [r7, #15]
		if (cmd_res != SDR_Success) return cmd_res;
 8004d1c:	|            7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	|            2b00      	cmp	r3, #0
 8004d20:	|        /-- d001      	beq.n	8004d26 <SD_SetBusWidth+0x3e>
 8004d22:	|        |   7bfb      	ldrb	r3, [r7, #15]
 8004d24:	|  /-----|-- e022      	b.n	8004d6c <SD_SetBusWidth+0x84>

		// Set SET_BUS_WIDTH command
		SD_Cmd(SD_CMD_SET_BUS_WIDTH, (BW == SD_BUS_1BIT) ? 0x00000000 : 0x00000002, SDMMC_RESP_SHORT); // ACMD6
 8004d26:	|  |     \-> 687b      	ldr	r3, [r7, #4]
 8004d28:	|  |         2b00      	cmp	r3, #0
 8004d2a:	|  |  /----- d101      	bne.n	8004d30 <SD_SetBusWidth+0x48>
 8004d2c:	|  |  |      2300      	movs	r3, #0
 8004d2e:	|  |  |  /-- e000      	b.n	8004d32 <SD_SetBusWidth+0x4a>
 8004d30:	|  |  \--|-> 2302      	movs	r3, #2
 8004d32:	|  |     \-> 2240      	movs	r2, #64	; 0x40
 8004d34:	|  |         4619      	mov	r1, r3
 8004d36:	|  |         2006      	movs	r0, #6
 8004d38:	|  |         f7ff fc28 	bl	800458c <SD_Cmd>
		cmd_res = SD_Response(SD_R1, &reg);
 8004d3c:	|  |         f107 0308 	add.w	r3, r7, #8
 8004d40:	|  |         4619      	mov	r1, r3
 8004d42:	|  |         2001      	movs	r0, #1
 8004d44:	|  |         f7ff fd0c 	bl	8004760 <SD_Response>
 8004d48:	|  |         4603      	mov	r3, r0
 8004d4a:	|  |         73fb      	strb	r3, [r7, #15]
		if (cmd_res != SDR_Success) return cmd_res;
 8004d4c:	|  |         7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	|  |         2b00      	cmp	r3, #0
 8004d50:	+--|-------- d001      	beq.n	8004d56 <SD_SetBusWidth+0x6e>
 8004d52:	|  |         7bfb      	ldrb	r3, [r7, #15]
 8004d54:	|  +-------- e00a      	b.n	8004d6c <SD_SetBusWidth+0x84>
	} else {
		// MMC supports only 8-bit ?
	}

	// Clear bus width bits
	reg = SDMMC1->CLKCR & ~SDMMC_CLKCR_WIDBUS;
 8004d56:	\--|-------> 4b08      	ldr	r3, [pc, #32]	; (8004d78 <SD_SetBusWidth+0x90>)
 8004d58:	   |         685b      	ldr	r3, [r3, #4]
 8004d5a:	   |         f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8004d5e:	   |         60bb      	str	r3, [r7, #8]

	// Configure bus width
	SDMMC1->CLKCR = reg | BW;
 8004d60:	   |         68ba      	ldr	r2, [r7, #8]
 8004d62:	   |         4905      	ldr	r1, [pc, #20]	; (8004d78 <SD_SetBusWidth+0x90>)
 8004d64:	   |         687b      	ldr	r3, [r7, #4]
 8004d66:	   |         4313      	orrs	r3, r2
 8004d68:	   |         604b      	str	r3, [r1, #4]

//	printf("------> BUS WIDTH %s-BIT <------\r\n",BW == SD_BUS_1BIT ? "1" : "4");

	return cmd_res;
 8004d6a:	   |         7bfb      	ldrb	r3, [r7, #15]
}
 8004d6c:	   \-------> 4618      	mov	r0, r3
 8004d6e:	             3710      	adds	r7, #16
 8004d70:	             46bd      	mov	sp, r7
 8004d72:	             bd80      	pop	{r7, pc}
 8004d74:	             3c1c      	subs	r4, #28
 8004d76:	             2000      	movs	r0, #0
 8004d78:	             2800      	cmp	r0, #0
 8004d7a:	             4001      	ands	r1, r0

08004d7c <SD_SetBusClock>:

// Set SDIO bus clock
// input:
//   clk_div - bus clock divider (0x00..0xff -> bus_clock = SDIOCLK / (clk_div + 2))
void SD_SetBusClock(uint32_t clk_div) {
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
	uint32_t reg;

	// Clear clock divider
	reg = SDMMC1->CLKCR & 0xffffff00;
 8004d84:	4b07      	ldr	r3, [pc, #28]	; (8004da4 <SD_SetBusClock+0x28>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d8c:	60fb      	str	r3, [r7, #12]

	// Set new clock divider
	SDMMC1->CLKCR = reg | clk_div;
 8004d8e:	4905      	ldr	r1, [pc, #20]	; (8004da4 <SD_SetBusClock+0x28>)
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	604b      	str	r3, [r1, #4]
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	2800      	cmp	r0, #0
 8004da6:	4001      	ands	r1, r0

08004da8 <SD_GetCardInfo>:

// Parse information about specific card
// note: CSD/CID register values already must be in the SDCard structure
void SD_GetCardInfo(void) {
 8004da8:	          b480      	push	{r7}
 8004daa:	          b085      	sub	sp, #20
 8004dac:	          af00      	add	r7, sp, #0
	uint32_t dev_size, dev_size_mul, rd_block_len;

	// Parse the CSD register
	SDCard.CSDVer = SDCard.CSD[0] >> 6; // CSD version
 8004dae:	          4ba4      	ldr	r3, [pc, #656]	; (8005040 <SD_GetCardInfo+0x298>)
 8004db0:	          f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004db4:	          099b      	lsrs	r3, r3, #6
 8004db6:	          b2da      	uxtb	r2, r3
 8004db8:	          4ba1      	ldr	r3, [pc, #644]	; (8005040 <SD_GetCardInfo+0x298>)
 8004dba:	          751a      	strb	r2, [r3, #20]
	if (SDCard.Type != SDCT_MMC) {
 8004dbc:	          4ba0      	ldr	r3, [pc, #640]	; (8005040 <SD_GetCardInfo+0x298>)
 8004dbe:	          781b      	ldrb	r3, [r3, #0]
 8004dc0:	          2b03      	cmp	r3, #3
 8004dc2:	/-------- d071      	beq.n	8004ea8 <SD_GetCardInfo+0x100>
		// SD
		SDCard.MaxBusClkFreq = SDCard.CSD[3];
 8004dc4:	|         4b9e      	ldr	r3, [pc, #632]	; (8005040 <SD_GetCardInfo+0x298>)
 8004dc6:	|         f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004dca:	|         461a      	mov	r2, r3
 8004dcc:	|         4b9c      	ldr	r3, [pc, #624]	; (8005040 <SD_GetCardInfo+0x298>)
 8004dce:	|         611a      	str	r2, [r3, #16]
		rd_block_len = SDCard.CSD[5] & 0x0f; // Max. read data block length
 8004dd0:	|         4b9b      	ldr	r3, [pc, #620]	; (8005040 <SD_GetCardInfo+0x298>)
 8004dd2:	|         f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004dd6:	|         f003 030f 	and.w	r3, r3, #15
 8004dda:	|         607b      	str	r3, [r7, #4]
		if (SDCard.CSDVer == 0) {
 8004ddc:	|         4b98      	ldr	r3, [pc, #608]	; (8005040 <SD_GetCardInfo+0x298>)
 8004dde:	|         7d1b      	ldrb	r3, [r3, #20]
 8004de0:	|         2b00      	cmp	r3, #0
 8004de2:	|  /----- d13a      	bne.n	8004e5a <SD_GetCardInfo+0xb2>
			// CSD v1.00 (SDSCv1, SDSCv2)
			dev_size  = (uint32_t)(SDCard.CSD[6] & 0x03) << 10; // Device size
 8004de4:	|  |      4b96      	ldr	r3, [pc, #600]	; (8005040 <SD_GetCardInfo+0x298>)
 8004de6:	|  |      f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004dea:	|  |      029b      	lsls	r3, r3, #10
 8004dec:	|  |      f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004df0:	|  |      60fb      	str	r3, [r7, #12]
			dev_size |= (uint32_t)SDCard.CSD[7] << 2;
 8004df2:	|  |      4b93      	ldr	r3, [pc, #588]	; (8005040 <SD_GetCardInfo+0x298>)
 8004df4:	|  |      f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004df8:	|  |      009b      	lsls	r3, r3, #2
 8004dfa:	|  |      68fa      	ldr	r2, [r7, #12]
 8004dfc:	|  |      4313      	orrs	r3, r2
 8004dfe:	|  |      60fb      	str	r3, [r7, #12]
			dev_size |= (SDCard.CSD[8] & 0xc0) >> 6;
 8004e00:	|  |      4b8f      	ldr	r3, [pc, #572]	; (8005040 <SD_GetCardInfo+0x298>)
 8004e02:	|  |      f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004e06:	|  |      099b      	lsrs	r3, r3, #6
 8004e08:	|  |      b2db      	uxtb	r3, r3
 8004e0a:	|  |      461a      	mov	r2, r3
 8004e0c:	|  |      68fb      	ldr	r3, [r7, #12]
 8004e0e:	|  |      4313      	orrs	r3, r2
 8004e10:	|  |      60fb      	str	r3, [r7, #12]
			dev_size_mul  = (SDCard.CSD[ 9] & 0x03) << 1; // Device size multiplier
 8004e12:	|  |      4b8b      	ldr	r3, [pc, #556]	; (8005040 <SD_GetCardInfo+0x298>)
 8004e14:	|  |      f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004e18:	|  |      005b      	lsls	r3, r3, #1
 8004e1a:	|  |      f003 0306 	and.w	r3, r3, #6
 8004e1e:	|  |      60bb      	str	r3, [r7, #8]
			dev_size_mul |= (SDCard.CSD[10] & 0x80) >> 7;
 8004e20:	|  |      4b87      	ldr	r3, [pc, #540]	; (8005040 <SD_GetCardInfo+0x298>)
 8004e22:	|  |      f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e26:	|  |      09db      	lsrs	r3, r3, #7
 8004e28:	|  |      b2db      	uxtb	r3, r3
 8004e2a:	|  |      461a      	mov	r2, r3
 8004e2c:	|  |      68bb      	ldr	r3, [r7, #8]
 8004e2e:	|  |      4313      	orrs	r3, r2
 8004e30:	|  |      60bb      	str	r3, [r7, #8]
			SDCard.BlockCount  = (dev_size + 1);
 8004e32:	|  |      68fb      	ldr	r3, [r7, #12]
 8004e34:	|  |      3301      	adds	r3, #1
 8004e36:	|  |      4a82      	ldr	r2, [pc, #520]	; (8005040 <SD_GetCardInfo+0x298>)
 8004e38:	|  |      6093      	str	r3, [r2, #8]
			SDCard.BlockCount *= (1 << (dev_size_mul + 2));
 8004e3a:	|  |      4b81      	ldr	r3, [pc, #516]	; (8005040 <SD_GetCardInfo+0x298>)
 8004e3c:	|  |      689a      	ldr	r2, [r3, #8]
 8004e3e:	|  |      68bb      	ldr	r3, [r7, #8]
 8004e40:	|  |      3302      	adds	r3, #2
 8004e42:	|  |      fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	|  |      4a7e      	ldr	r2, [pc, #504]	; (8005040 <SD_GetCardInfo+0x298>)
 8004e48:	|  |      6093      	str	r3, [r2, #8]
			SDCard.BlockSize =  1 << (rd_block_len);
 8004e4a:	|  |      2201      	movs	r2, #1
 8004e4c:	|  |      687b      	ldr	r3, [r7, #4]
 8004e4e:	|  |      fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	|  |      461a      	mov	r2, r3
 8004e54:	|  |      4b7a      	ldr	r3, [pc, #488]	; (8005040 <SD_GetCardInfo+0x298>)
 8004e56:	|  |      60da      	str	r2, [r3, #12]
 8004e58:	|  |  /-- e01d      	b.n	8004e96 <SD_GetCardInfo+0xee>
		} else {
			// CSD v2.00 (SDHC, SDXC)
			dev_size  = (SDCard.CSD[7] & 0x3f) << 16;
 8004e5a:	|  \--|-> 4b79      	ldr	r3, [pc, #484]	; (8005040 <SD_GetCardInfo+0x298>)
 8004e5c:	|     |   f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e60:	|     |   041b      	lsls	r3, r3, #16
 8004e62:	|     |   f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004e66:	|     |   60fb      	str	r3, [r7, #12]
			dev_size |=  SDCard.CSD[8] << 8;
 8004e68:	|     |   4b75      	ldr	r3, [pc, #468]	; (8005040 <SD_GetCardInfo+0x298>)
 8004e6a:	|     |   f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004e6e:	|     |   021b      	lsls	r3, r3, #8
 8004e70:	|     |   461a      	mov	r2, r3
 8004e72:	|     |   68fb      	ldr	r3, [r7, #12]
 8004e74:	|     |   4313      	orrs	r3, r2
 8004e76:	|     |   60fb      	str	r3, [r7, #12]
			dev_size |=  SDCard.CSD[9];
 8004e78:	|     |   4b71      	ldr	r3, [pc, #452]	; (8005040 <SD_GetCardInfo+0x298>)
 8004e7a:	|     |   f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004e7e:	|     |   461a      	mov	r2, r3
 8004e80:	|     |   68fb      	ldr	r3, [r7, #12]
 8004e82:	|     |   4313      	orrs	r3, r2
 8004e84:	|     |   60fb      	str	r3, [r7, #12]
			SDCard.BlockSize = 512;
 8004e86:	|     |   4b6e      	ldr	r3, [pc, #440]	; (8005040 <SD_GetCardInfo+0x298>)
 8004e88:	|     |   f44f 7200 	mov.w	r2, #512	; 0x200
 8004e8c:	|     |   60da      	str	r2, [r3, #12]
			SDCard.BlockCount = dev_size + 1;
 8004e8e:	|     |   68fb      	ldr	r3, [r7, #12]
 8004e90:	|     |   3301      	adds	r3, #1
 8004e92:	|     |   4a6b      	ldr	r2, [pc, #428]	; (8005040 <SD_GetCardInfo+0x298>)
 8004e94:	|     |   6093      	str	r3, [r2, #8]
		}
		SDCard.Capacity = SDCard.BlockCount * SDCard.BlockSize;
 8004e96:	|     \-> 4b6a      	ldr	r3, [pc, #424]	; (8005040 <SD_GetCardInfo+0x298>)
 8004e98:	|         689b      	ldr	r3, [r3, #8]
 8004e9a:	|         4a69      	ldr	r2, [pc, #420]	; (8005040 <SD_GetCardInfo+0x298>)
 8004e9c:	|         68d2      	ldr	r2, [r2, #12]
 8004e9e:	|         fb02 f303 	mul.w	r3, r2, r3
 8004ea2:	|         4a67      	ldr	r2, [pc, #412]	; (8005040 <SD_GetCardInfo+0x298>)
 8004ea4:	|         6053      	str	r3, [r2, #4]
 8004ea6:	|     /-- e047      	b.n	8004f38 <SD_GetCardInfo+0x190>
	} else {
		// MMC
		SDCard.MaxBusClkFreq = SDCard.CSD[3];
 8004ea8:	\-----|-> 4b65      	ldr	r3, [pc, #404]	; (8005040 <SD_GetCardInfo+0x298>)
 8004eaa:	      |   f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004eae:	      |   461a      	mov	r2, r3
 8004eb0:	      |   4b63      	ldr	r3, [pc, #396]	; (8005040 <SD_GetCardInfo+0x298>)
 8004eb2:	      |   611a      	str	r2, [r3, #16]
		dev_size  = (uint32_t)(SDCard.CSD[6] & 0x03) << 8; // C_SIZE
 8004eb4:	      |   4b62      	ldr	r3, [pc, #392]	; (8005040 <SD_GetCardInfo+0x298>)
 8004eb6:	      |   f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004eba:	      |   021b      	lsls	r3, r3, #8
 8004ebc:	      |   f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec0:	      |   60fb      	str	r3, [r7, #12]
		dev_size += (uint32_t)SDCard.CSD[7];
 8004ec2:	      |   4b5f      	ldr	r3, [pc, #380]	; (8005040 <SD_GetCardInfo+0x298>)
 8004ec4:	      |   f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004ec8:	      |   461a      	mov	r2, r3
 8004eca:	      |   68fb      	ldr	r3, [r7, #12]
 8004ecc:	      |   4413      	add	r3, r2
 8004ece:	      |   60fb      	str	r3, [r7, #12]
		dev_size <<= 2;
 8004ed0:	      |   68fb      	ldr	r3, [r7, #12]
 8004ed2:	      |   009b      	lsls	r3, r3, #2
 8004ed4:	      |   60fb      	str	r3, [r7, #12]
		dev_size += SDCard.CSD[8] >> 6;
 8004ed6:	      |   4b5a      	ldr	r3, [pc, #360]	; (8005040 <SD_GetCardInfo+0x298>)
 8004ed8:	      |   f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004edc:	      |   099b      	lsrs	r3, r3, #6
 8004ede:	      |   b2db      	uxtb	r3, r3
 8004ee0:	      |   461a      	mov	r2, r3
 8004ee2:	      |   68fb      	ldr	r3, [r7, #12]
 8004ee4:	      |   4413      	add	r3, r2
 8004ee6:	      |   60fb      	str	r3, [r7, #12]
		SDCard.BlockSize = 1 << (SDCard.CSD[5] & 0x0f); // MMC read block length
 8004ee8:	      |   4b55      	ldr	r3, [pc, #340]	; (8005040 <SD_GetCardInfo+0x298>)
 8004eea:	      |   f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004eee:	      |   f003 030f 	and.w	r3, r3, #15
 8004ef2:	      |   2201      	movs	r2, #1
 8004ef4:	      |   fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	      |   461a      	mov	r2, r3
 8004efa:	      |   4b51      	ldr	r3, [pc, #324]	; (8005040 <SD_GetCardInfo+0x298>)
 8004efc:	      |   60da      	str	r2, [r3, #12]
		dev_size_mul = ((SDCard.CSD[9] & 0x03) << 1) + ((SDCard.CSD[10] & 0x80) >> 7);
 8004efe:	      |   4b50      	ldr	r3, [pc, #320]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f00:	      |   f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004f04:	      |   005b      	lsls	r3, r3, #1
 8004f06:	      |   f003 0306 	and.w	r3, r3, #6
 8004f0a:	      |   4a4d      	ldr	r2, [pc, #308]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f0c:	      |   f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004f10:	      |   09d2      	lsrs	r2, r2, #7
 8004f12:	      |   b2d2      	uxtb	r2, r2
 8004f14:	      |   4413      	add	r3, r2
 8004f16:	      |   60bb      	str	r3, [r7, #8]
		SDCard.BlockCount = (dev_size + 1) * (1 << (dev_size_mul + 2));
 8004f18:	      |   68fb      	ldr	r3, [r7, #12]
 8004f1a:	      |   1c5a      	adds	r2, r3, #1
 8004f1c:	      |   68bb      	ldr	r3, [r7, #8]
 8004f1e:	      |   3302      	adds	r3, #2
 8004f20:	      |   fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	      |   4a46      	ldr	r2, [pc, #280]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f26:	      |   6093      	str	r3, [r2, #8]
		SDCard.Capacity = SDCard.BlockCount * SDCard.BlockSize;
 8004f28:	      |   4b45      	ldr	r3, [pc, #276]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f2a:	      |   689b      	ldr	r3, [r3, #8]
 8004f2c:	      |   4a44      	ldr	r2, [pc, #272]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f2e:	      |   68d2      	ldr	r2, [r2, #12]
 8004f30:	      |   fb02 f303 	mul.w	r3, r2, r3
 8004f34:	      |   4a42      	ldr	r2, [pc, #264]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f36:	      |   6053      	str	r3, [r2, #4]
	}

	// Parse the CID register
	if (SDCard.Type != SDCT_MMC) {
 8004f38:	      \-> 4b41      	ldr	r3, [pc, #260]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f3a:	          781b      	ldrb	r3, [r3, #0]
 8004f3c:	          2b03      	cmp	r3, #3
 8004f3e:	   /----- d059      	beq.n	8004ff4 <SD_GetCardInfo+0x24c>
		// SD card
		SDCard.MID = SDCard.CID[0];
 8004f40:	   |      4b3f      	ldr	r3, [pc, #252]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f42:	   |      f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8004f46:	   |      4b3e      	ldr	r3, [pc, #248]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f48:	   |      761a      	strb	r2, [r3, #24]
		SDCard.OID = (SDCard.CID[1] << 8) | SDCard.CID[2];
 8004f4a:	   |      4b3d      	ldr	r3, [pc, #244]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f4c:	   |      f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004f50:	   |      021b      	lsls	r3, r3, #8
 8004f52:	   |      b21a      	sxth	r2, r3
 8004f54:	   |      4b3a      	ldr	r3, [pc, #232]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f56:	   |      f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f5a:	   |      b21b      	sxth	r3, r3
 8004f5c:	   |      4313      	orrs	r3, r2
 8004f5e:	   |      b21b      	sxth	r3, r3
 8004f60:	   |      b29a      	uxth	r2, r3
 8004f62:	   |      4b37      	ldr	r3, [pc, #220]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f64:	   |      835a      	strh	r2, [r3, #26]
		SDCard.PNM[0] = SDCard.CID[3];
 8004f66:	   |      4b36      	ldr	r3, [pc, #216]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f68:	   |      f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8004f6c:	   |      4b34      	ldr	r3, [pc, #208]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f6e:	   |      771a      	strb	r2, [r3, #28]
		SDCard.PNM[1] = SDCard.CID[4];
 8004f70:	   |      4b33      	ldr	r3, [pc, #204]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f72:	   |      f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8004f76:	   |      4b32      	ldr	r3, [pc, #200]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f78:	   |      775a      	strb	r2, [r3, #29]
		SDCard.PNM[2] = SDCard.CID[5];
 8004f7a:	   |      4b31      	ldr	r3, [pc, #196]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f7c:	   |      f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8004f80:	   |      4b2f      	ldr	r3, [pc, #188]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f82:	   |      779a      	strb	r2, [r3, #30]
		SDCard.PNM[3] = SDCard.CID[6];
 8004f84:	   |      4b2e      	ldr	r3, [pc, #184]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f86:	   |      f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004f8a:	   |      4b2d      	ldr	r3, [pc, #180]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f8c:	   |      77da      	strb	r2, [r3, #31]
		SDCard.PNM[4] = SDCard.CID[7];
 8004f8e:	   |      4b2c      	ldr	r3, [pc, #176]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f90:	   |      f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8004f94:	   |      4b2a      	ldr	r3, [pc, #168]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f96:	   |      f883 2020 	strb.w	r2, [r3, #32]
		SDCard.PRV = SDCard.CID[8];
 8004f9a:	   |      4b29      	ldr	r3, [pc, #164]	; (8005040 <SD_GetCardInfo+0x298>)
 8004f9c:	   |      f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8004fa0:	   |      4b27      	ldr	r3, [pc, #156]	; (8005040 <SD_GetCardInfo+0x298>)
 8004fa2:	   |      f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		SDCard.PSN = (SDCard.CID[9] << 24) | (SDCard.CID[10] << 16) | (SDCard.CID[11] << 8) | SDCard.CID[12];
 8004fa6:	   |      4b26      	ldr	r3, [pc, #152]	; (8005040 <SD_GetCardInfo+0x298>)
 8004fa8:	   |      f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fac:	   |      061a      	lsls	r2, r3, #24
 8004fae:	   |      4b24      	ldr	r3, [pc, #144]	; (8005040 <SD_GetCardInfo+0x298>)
 8004fb0:	   |      f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fb4:	   |      041b      	lsls	r3, r3, #16
 8004fb6:	   |      431a      	orrs	r2, r3
 8004fb8:	   |      4b21      	ldr	r3, [pc, #132]	; (8005040 <SD_GetCardInfo+0x298>)
 8004fba:	   |      f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fbe:	   |      021b      	lsls	r3, r3, #8
 8004fc0:	   |      4313      	orrs	r3, r2
 8004fc2:	   |      4a1f      	ldr	r2, [pc, #124]	; (8005040 <SD_GetCardInfo+0x298>)
 8004fc4:	   |      f892 2046 	ldrb.w	r2, [r2, #70]	; 0x46
 8004fc8:	   |      4313      	orrs	r3, r2
 8004fca:	   |      461a      	mov	r2, r3
 8004fcc:	   |      4b1c      	ldr	r3, [pc, #112]	; (8005040 <SD_GetCardInfo+0x298>)
 8004fce:	   |      625a      	str	r2, [r3, #36]	; 0x24
		SDCard.MDT = ((SDCard.CID[13] << 8) | SDCard.CID[14]) & 0x0fff;
 8004fd0:	   |      4b1b      	ldr	r3, [pc, #108]	; (8005040 <SD_GetCardInfo+0x298>)
 8004fd2:	   |      f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004fd6:	   |      021b      	lsls	r3, r3, #8
 8004fd8:	   |      b21a      	sxth	r2, r3
 8004fda:	   |      4b19      	ldr	r3, [pc, #100]	; (8005040 <SD_GetCardInfo+0x298>)
 8004fdc:	   |      f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004fe0:	   |      b21b      	sxth	r3, r3
 8004fe2:	   |      4313      	orrs	r3, r2
 8004fe4:	   |      b21b      	sxth	r3, r3
 8004fe6:	   |      b29b      	uxth	r3, r3
 8004fe8:	   |      f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fec:	   |      b29a      	uxth	r2, r3
 8004fee:	   |      4b14      	ldr	r3, [pc, #80]	; (8005040 <SD_GetCardInfo+0x298>)
 8004ff0:	   |      851a      	strh	r2, [r3, #40]	; 0x28
		SDCard.PNM[4] = '*';
		SDCard.PRV = 0;
		SDCard.PSN = 0x00000000;
		SDCard.MDT = 0x0000;
	}
}
 8004ff2:	   |  /-- e01f      	b.n	8005034 <SD_GetCardInfo+0x28c>
		SDCard.MID = 0x00;
 8004ff4:	   \--|-> 4b12      	ldr	r3, [pc, #72]	; (8005040 <SD_GetCardInfo+0x298>)
 8004ff6:	      |   2200      	movs	r2, #0
 8004ff8:	      |   761a      	strb	r2, [r3, #24]
		SDCard.OID = 0x0000;
 8004ffa:	      |   4b11      	ldr	r3, [pc, #68]	; (8005040 <SD_GetCardInfo+0x298>)
 8004ffc:	      |   2200      	movs	r2, #0
 8004ffe:	      |   835a      	strh	r2, [r3, #26]
		SDCard.PNM[0] = '*';
 8005000:	      |   4b0f      	ldr	r3, [pc, #60]	; (8005040 <SD_GetCardInfo+0x298>)
 8005002:	      |   222a      	movs	r2, #42	; 0x2a
 8005004:	      |   771a      	strb	r2, [r3, #28]
		SDCard.PNM[1] = 'M';
 8005006:	      |   4b0e      	ldr	r3, [pc, #56]	; (8005040 <SD_GetCardInfo+0x298>)
 8005008:	      |   224d      	movs	r2, #77	; 0x4d
 800500a:	      |   775a      	strb	r2, [r3, #29]
		SDCard.PNM[2] = 'M';
 800500c:	      |   4b0c      	ldr	r3, [pc, #48]	; (8005040 <SD_GetCardInfo+0x298>)
 800500e:	      |   224d      	movs	r2, #77	; 0x4d
 8005010:	      |   779a      	strb	r2, [r3, #30]
		SDCard.PNM[3] = 'C';
 8005012:	      |   4b0b      	ldr	r3, [pc, #44]	; (8005040 <SD_GetCardInfo+0x298>)
 8005014:	      |   2243      	movs	r2, #67	; 0x43
 8005016:	      |   77da      	strb	r2, [r3, #31]
		SDCard.PNM[4] = '*';
 8005018:	      |   4b09      	ldr	r3, [pc, #36]	; (8005040 <SD_GetCardInfo+0x298>)
 800501a:	      |   222a      	movs	r2, #42	; 0x2a
 800501c:	      |   f883 2020 	strb.w	r2, [r3, #32]
		SDCard.PRV = 0;
 8005020:	      |   4b07      	ldr	r3, [pc, #28]	; (8005040 <SD_GetCardInfo+0x298>)
 8005022:	      |   2200      	movs	r2, #0
 8005024:	      |   f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		SDCard.PSN = 0x00000000;
 8005028:	      |   4b05      	ldr	r3, [pc, #20]	; (8005040 <SD_GetCardInfo+0x298>)
 800502a:	      |   2200      	movs	r2, #0
 800502c:	      |   625a      	str	r2, [r3, #36]	; 0x24
		SDCard.MDT = 0x0000;
 800502e:	      |   4b04      	ldr	r3, [pc, #16]	; (8005040 <SD_GetCardInfo+0x298>)
 8005030:	      |   2200      	movs	r2, #0
 8005032:	      |   851a      	strh	r2, [r3, #40]	; 0x28
}
 8005034:	      \-> bf00      	nop
 8005036:	          3714      	adds	r7, #20
 8005038:	          46bd      	mov	sp, r7
 800503a:	          f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	          4770      	bx	lr
 8005040:	          3c1c      	subs	r4, #28
 8005042:	          2000      	movs	r0, #0

08005044 <SD_StopTransfer>:

// Abort an ongoing data transfer
// return: SDResult value
SDResult SD_StopTransfer(void) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
	uint32_t response;

	// Send STOP_TRANSMISSION command
	SD_Cmd(SD_CMD_STOP_TRANSMISSION, 0, SDMMC_RESP_SHORT); // CMD12
 800504a:	2240      	movs	r2, #64	; 0x40
 800504c:	2100      	movs	r1, #0
 800504e:	200c      	movs	r0, #12
 8005050:	f7ff fa9c 	bl	800458c <SD_Cmd>

	return SD_Response(SD_R1, &response);
 8005054:	1d3b      	adds	r3, r7, #4
 8005056:	4619      	mov	r1, r3
 8005058:	2001      	movs	r0, #1
 800505a:	f7ff fb81 	bl	8004760 <SD_Response>
 800505e:	4603      	mov	r3, r0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <SD_GetCardState>:

// Get current SD card state
// input:
//   pStatus - pointer to the variable for current card status (SD_CS_XXX values)
// return: SDResult value
SDResult SD_GetCardState(uint8_t *pStatus) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
	uint32_t response;

	// Send SEND_STATUS command
	SD_Cmd(SD_CMD_SEND_STATUS,SDCard.RCA << 16,SDMMC_RESP_SHORT); // CMD13
 8005070:	4b0f      	ldr	r3, [pc, #60]	; (80050b0 <SD_GetCardState+0x48>)
 8005072:	8adb      	ldrh	r3, [r3, #22]
 8005074:	041b      	lsls	r3, r3, #16
 8005076:	2240      	movs	r2, #64	; 0x40
 8005078:	4619      	mov	r1, r3
 800507a:	200d      	movs	r0, #13
 800507c:	f7ff fa86 	bl	800458c <SD_Cmd>
	SD_Response(SD_R1,&response);
 8005080:	f107 030c 	add.w	r3, r7, #12
 8005084:	4619      	mov	r1, r3
 8005086:	2001      	movs	r0, #1
 8005088:	f7ff fb6a 	bl	8004760 <SD_Response>

	// Find out card status
	*pStatus = (response & 0x1e00) >> 9;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	0a5b      	lsrs	r3, r3, #9
 8005090:	b2db      	uxtb	r3, r3
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	b2da      	uxtb	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	701a      	strb	r2, [r3, #0]

	// Check for errors
	return SD_GetError(response);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff fac6 	bl	8004630 <SD_GetError>
 80050a4:	4603      	mov	r3, r0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	3c1c      	subs	r4, #28
 80050b2:	2000      	movs	r0, #0

080050b4 <SD_ReadBlock>:
// input:
//   addr - address of the block to be read
//   pBuf - pointer to the buffer that will contain the received data
//   length - buffer length (must be multiple of 512)
// return: SDResult value
SDResult SD_ReadBlock(uint32_t addr, uint32_t *pBuf, uint32_t length) {
 80050b4:	          b590      	push	{r4, r7, lr}
 80050b6:	          b089      	sub	sp, #36	; 0x24
 80050b8:	          af00      	add	r7, sp, #0
 80050ba:	          60f8      	str	r0, [r7, #12]
 80050bc:	          60b9      	str	r1, [r7, #8]
 80050be:	          607a      	str	r2, [r7, #4]
	SDResult cmd_res = SDR_Success;
 80050c0:	          2300      	movs	r3, #0
 80050c2:	          77fb      	strb	r3, [r7, #31]
	uint32_t response;
	uint32_t blk_count = length / 512; // Sectors in block
 80050c4:	          687b      	ldr	r3, [r7, #4]
 80050c6:	          0a5b      	lsrs	r3, r3, #9
 80050c8:	          617b      	str	r3, [r7, #20]
	register uint32_t STA; // to speed up SDIO flags checking
	uint32_t STA_mask; // mask for SDIO flags checking

	// Initialize the data control register
	SDMMC1->DCTRL = 0;
 80050ca:	          4b5a      	ldr	r3, [pc, #360]	; (8005234 <SD_ReadBlock+0x180>)
 80050cc:	          2200      	movs	r2, #0
 80050ce:	          62da      	str	r2, [r3, #44]	; 0x2c

	// SDSC card uses byte unit address and
	// SDHC/SDXC cards use block unit address (1 unit = 512 bytes)
	// For SDHC card addr must be converted to block unit address
	if (SDCard.Type == SDCT_SDHC) addr >>= 9;
 80050d0:	          4b59      	ldr	r3, [pc, #356]	; (8005238 <SD_ReadBlock+0x184>)
 80050d2:	          781b      	ldrb	r3, [r3, #0]
 80050d4:	          2b04      	cmp	r3, #4
 80050d6:	      /-- d102      	bne.n	80050de <SD_ReadBlock+0x2a>
 80050d8:	      |   68fb      	ldr	r3, [r7, #12]
 80050da:	      |   0a5b      	lsrs	r3, r3, #9
 80050dc:	      |   60fb      	str	r3, [r7, #12]

	// Clear the static SDIO flags
	SDMMC1->ICR = SDMMC_ICR_STATIC;
 80050de:	      \-> 4b55      	ldr	r3, [pc, #340]	; (8005234 <SD_ReadBlock+0x180>)
 80050e0:	          f240 52ff 	movw	r2, #1535	; 0x5ff
 80050e4:	          639a      	str	r2, [r3, #56]	; 0x38

	if (blk_count > 1) {
 80050e6:	          697b      	ldr	r3, [r7, #20]
 80050e8:	          2b01      	cmp	r3, #1
 80050ea:	   /----- d908      	bls.n	80050fe <SD_ReadBlock+0x4a>
		// Send READ_MULT_BLOCK command
		SD_Cmd(SD_CMD_READ_MULT_BLOCK, addr, SDMMC_RESP_SHORT); // CMD18
 80050ec:	   |      2240      	movs	r2, #64	; 0x40
 80050ee:	   |      68f9      	ldr	r1, [r7, #12]
 80050f0:	   |      2012      	movs	r0, #18
 80050f2:	   |      f7ff fa4b 	bl	800458c <SD_Cmd>
		// Prepare bit checking variable for multiple block transfer
		STA_mask = SDMMC_STA_RXOVERR | SDMMC_STA_DCRCFAIL | SDMMC_STA_DTIMEOUT | SDMMC_STA_STBITERR | SDMMC_STA_DATAEND;
 80050f6:	   |      f240 332a 	movw	r3, #810	; 0x32a
 80050fa:	   |      61bb      	str	r3, [r7, #24]
 80050fc:	   |  /-- e007      	b.n	800510e <SD_ReadBlock+0x5a>
	} else {
		// Send READ_SINGLE_BLOCK command
		SD_Cmd(SD_CMD_READ_SINGLE_BLOCK,addr,SDMMC_RESP_SHORT); // CMD17
 80050fe:	   \--|-> 2240      	movs	r2, #64	; 0x40
 8005100:	      |   68f9      	ldr	r1, [r7, #12]
 8005102:	      |   2011      	movs	r0, #17
 8005104:	      |   f7ff fa42 	bl	800458c <SD_Cmd>
		// Prepare bit checking variable for single block transfer
		STA_mask = SDMMC_STA_RXOVERR | SDMMC_STA_DCRCFAIL | SDMMC_STA_DTIMEOUT | SDMMC_STA_STBITERR | SDMMC_STA_DBCKEND;
 8005108:	      |   f240 632a 	movw	r3, #1578	; 0x62a
 800510c:	      |   61bb      	str	r3, [r7, #24]
	}
	cmd_res = SD_Response(SD_R1, &response);
 800510e:	      \-> f107 0310 	add.w	r3, r7, #16
 8005112:	          4619      	mov	r1, r3
 8005114:	          2001      	movs	r0, #1
 8005116:	          f7ff fb23 	bl	8004760 <SD_Response>
 800511a:	          4603      	mov	r3, r0
 800511c:	          77fb      	strb	r3, [r7, #31]
	if (cmd_res != SDR_Success) return cmd_res;
 800511e:	          7ffb      	ldrb	r3, [r7, #31]
 8005120:	          2b00      	cmp	r3, #0
 8005122:	      /-- d001      	beq.n	8005128 <SD_ReadBlock+0x74>
 8005124:	      |   7ffb      	ldrb	r3, [r7, #31]
 8005126:	/-----|-- e080      	b.n	800522a <SD_ReadBlock+0x176>

	// Configure the SDIO data transfer
	SDMMC1->DTIMER = SDMMC_DATA_R_TIMEOUT; // Data read timeout
 8005128:	|     \-> 4b42      	ldr	r3, [pc, #264]	; (8005234 <SD_ReadBlock+0x180>)
 800512a:	|         4a44      	ldr	r2, [pc, #272]	; (800523c <SD_ReadBlock+0x188>)
 800512c:	|         625a      	str	r2, [r3, #36]	; 0x24
	SDMMC1->DLEN   = length; // Data length
 800512e:	|         4a41      	ldr	r2, [pc, #260]	; (8005234 <SD_ReadBlock+0x180>)
 8005130:	|         687b      	ldr	r3, [r7, #4]
 8005132:	|         6293      	str	r3, [r2, #40]	; 0x28
	// Data transfer: block, card -> controller, size: 2^9 = 512bytes, enable transfer
	SDMMC1->DCTRL  = SDMMC_DCTRL_DTDIR | (9 << 4) | SDMMC_DCTRL_DTEN;
 8005134:	|         4b3f      	ldr	r3, [pc, #252]	; (8005234 <SD_ReadBlock+0x180>)
 8005136:	|         2293      	movs	r2, #147	; 0x93
 8005138:	|         62da      	str	r2, [r3, #44]	; 0x2c

	// Receive a data block from the SDIO
	// ----> TIME CRITICAL SECTION BEGIN <----
	do {
		STA = SDMMC1->STA;
 800513a:	|  /----> 4b3e      	ldr	r3, [pc, #248]	; (8005234 <SD_ReadBlock+0x180>)
 800513c:	|  |      6b5c      	ldr	r4, [r3, #52]	; 0x34
		if (STA & SDMMC_STA_RXFIFOHF) {
 800513e:	|  |      f404 4300 	and.w	r3, r4, #32768	; 0x8000
 8005142:	|  |      2b00      	cmp	r3, #0
 8005144:	|  |  /-- d037      	beq.n	80051b6 <SD_ReadBlock+0x102>
			// Receive FIFO half full, there are at least 8 words in it
			// This code is 80 bytes more than the 'for' loop, but faster
			*pBuf++ = SDMMC1->FIFO;
 8005146:	|  |  |   493b      	ldr	r1, [pc, #236]	; (8005234 <SD_ReadBlock+0x180>)
 8005148:	|  |  |   68bb      	ldr	r3, [r7, #8]
 800514a:	|  |  |   1d1a      	adds	r2, r3, #4
 800514c:	|  |  |   60ba      	str	r2, [r7, #8]
 800514e:	|  |  |   f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8005152:	|  |  |   601a      	str	r2, [r3, #0]
			*pBuf++ = SDMMC1->FIFO;
 8005154:	|  |  |   4937      	ldr	r1, [pc, #220]	; (8005234 <SD_ReadBlock+0x180>)
 8005156:	|  |  |   68bb      	ldr	r3, [r7, #8]
 8005158:	|  |  |   1d1a      	adds	r2, r3, #4
 800515a:	|  |  |   60ba      	str	r2, [r7, #8]
 800515c:	|  |  |   f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8005160:	|  |  |   601a      	str	r2, [r3, #0]
			*pBuf++ = SDMMC1->FIFO;
 8005162:	|  |  |   4934      	ldr	r1, [pc, #208]	; (8005234 <SD_ReadBlock+0x180>)
 8005164:	|  |  |   68bb      	ldr	r3, [r7, #8]
 8005166:	|  |  |   1d1a      	adds	r2, r3, #4
 8005168:	|  |  |   60ba      	str	r2, [r7, #8]
 800516a:	|  |  |   f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 800516e:	|  |  |   601a      	str	r2, [r3, #0]
			*pBuf++ = SDMMC1->FIFO;
 8005170:	|  |  |   4930      	ldr	r1, [pc, #192]	; (8005234 <SD_ReadBlock+0x180>)
 8005172:	|  |  |   68bb      	ldr	r3, [r7, #8]
 8005174:	|  |  |   1d1a      	adds	r2, r3, #4
 8005176:	|  |  |   60ba      	str	r2, [r7, #8]
 8005178:	|  |  |   f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 800517c:	|  |  |   601a      	str	r2, [r3, #0]
			*pBuf++ = SDMMC1->FIFO;
 800517e:	|  |  |   492d      	ldr	r1, [pc, #180]	; (8005234 <SD_ReadBlock+0x180>)
 8005180:	|  |  |   68bb      	ldr	r3, [r7, #8]
 8005182:	|  |  |   1d1a      	adds	r2, r3, #4
 8005184:	|  |  |   60ba      	str	r2, [r7, #8]
 8005186:	|  |  |   f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 800518a:	|  |  |   601a      	str	r2, [r3, #0]
			*pBuf++ = SDMMC1->FIFO;
 800518c:	|  |  |   4929      	ldr	r1, [pc, #164]	; (8005234 <SD_ReadBlock+0x180>)
 800518e:	|  |  |   68bb      	ldr	r3, [r7, #8]
 8005190:	|  |  |   1d1a      	adds	r2, r3, #4
 8005192:	|  |  |   60ba      	str	r2, [r7, #8]
 8005194:	|  |  |   f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8005198:	|  |  |   601a      	str	r2, [r3, #0]
			*pBuf++ = SDMMC1->FIFO;
 800519a:	|  |  |   4926      	ldr	r1, [pc, #152]	; (8005234 <SD_ReadBlock+0x180>)
 800519c:	|  |  |   68bb      	ldr	r3, [r7, #8]
 800519e:	|  |  |   1d1a      	adds	r2, r3, #4
 80051a0:	|  |  |   60ba      	str	r2, [r7, #8]
 80051a2:	|  |  |   f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 80051a6:	|  |  |   601a      	str	r2, [r3, #0]
			*pBuf++ = SDMMC1->FIFO;
 80051a8:	|  |  |   4922      	ldr	r1, [pc, #136]	; (8005234 <SD_ReadBlock+0x180>)
 80051aa:	|  |  |   68bb      	ldr	r3, [r7, #8]
 80051ac:	|  |  |   1d1a      	adds	r2, r3, #4
 80051ae:	|  |  |   60ba      	str	r2, [r7, #8]
 80051b0:	|  |  |   f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 80051b4:	|  |  |   601a      	str	r2, [r3, #0]
		}
	} while (!(STA & STA_mask));
 80051b6:	|  |  \-> 69bb      	ldr	r3, [r7, #24]
 80051b8:	|  |      4023      	ands	r3, r4
 80051ba:	|  |      2b00      	cmp	r3, #0
 80051bc:	|  \----- d0bd      	beq.n	800513a <SD_ReadBlock+0x86>
	// <---- TIME CRITICAL SECTION END ---->

	// Send stop transmission command in case of multiple block transfer
	if ((SDCard.Type != SDCT_MMC) && (blk_count > 1)) cmd_res = SD_StopTransfer();
 80051be:	|         4b1e      	ldr	r3, [pc, #120]	; (8005238 <SD_ReadBlock+0x184>)
 80051c0:	|         781b      	ldrb	r3, [r3, #0]
 80051c2:	|         2b03      	cmp	r3, #3
 80051c4:	|     /-- d006      	beq.n	80051d4 <SD_ReadBlock+0x120>
 80051c6:	|     |   697b      	ldr	r3, [r7, #20]
 80051c8:	|     |   2b01      	cmp	r3, #1
 80051ca:	|     +-- d903      	bls.n	80051d4 <SD_ReadBlock+0x120>
 80051cc:	|     |   f7ff ff3a 	bl	8005044 <SD_StopTransfer>
 80051d0:	|     |   4603      	mov	r3, r0
 80051d2:	|     |   77fb      	strb	r3, [r7, #31]

	// Check for errors
	if (STA & SDMMC_STA_DTIMEOUT) cmd_res = SDR_DataTimeout;
 80051d4:	|     \-> f004 0308 	and.w	r3, r4, #8
 80051d8:	|         2b00      	cmp	r3, #0
 80051da:	|     /-- d001      	beq.n	80051e0 <SD_ReadBlock+0x12c>
 80051dc:	|     |   230e      	movs	r3, #14
 80051de:	|     |   77fb      	strb	r3, [r7, #31]
	if (STA & SDMMC_STA_DCRCFAIL) cmd_res = SDR_DataCRCFail;
 80051e0:	|     \-> f004 0302 	and.w	r3, r4, #2
 80051e4:	|         2b00      	cmp	r3, #0
 80051e6:	|     /-- d001      	beq.n	80051ec <SD_ReadBlock+0x138>
 80051e8:	|     |   230f      	movs	r3, #15
 80051ea:	|     |   77fb      	strb	r3, [r7, #31]
	if (STA & SDMMC_STA_RXOVERR)  cmd_res = SDR_RXOverrun;
 80051ec:	|     \-> f004 0320 	and.w	r3, r4, #32
 80051f0:	|         2b00      	cmp	r3, #0
 80051f2:	|     /-- d001      	beq.n	80051f8 <SD_ReadBlock+0x144>
 80051f4:	|     |   2310      	movs	r3, #16
 80051f6:	|     |   77fb      	strb	r3, [r7, #31]
	if (STA & SDMMC_STA_STBITERR) cmd_res = SDR_StartBitError;
 80051f8:	|     \-> f404 7300 	and.w	r3, r4, #512	; 0x200
 80051fc:	|         2b00      	cmp	r3, #0
 80051fe:	|     /-- d009      	beq.n	8005214 <SD_ReadBlock+0x160>
 8005200:	|     |   2312      	movs	r3, #18
 8005202:	|     |   77fb      	strb	r3, [r7, #31]

	// Read data remnant from RX FIFO (if there is still any data)
	while (SDMMC1->STA & SDMMC_STA_RXDAVL) *pBuf++ = SDMMC1->FIFO;
 8005204:	|     +-- e006      	b.n	8005214 <SD_ReadBlock+0x160>
 8005206:	|  /--|-> 490b      	ldr	r1, [pc, #44]	; (8005234 <SD_ReadBlock+0x180>)
 8005208:	|  |  |   68bb      	ldr	r3, [r7, #8]
 800520a:	|  |  |   1d1a      	adds	r2, r3, #4
 800520c:	|  |  |   60ba      	str	r2, [r7, #8]
 800520e:	|  |  |   f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8005212:	|  |  |   601a      	str	r2, [r3, #0]
 8005214:	|  |  \-> 4b07      	ldr	r3, [pc, #28]	; (8005234 <SD_ReadBlock+0x180>)
 8005216:	|  |      6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005218:	|  |      f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800521c:	|  |      2b00      	cmp	r3, #0
 800521e:	|  \----- d1f2      	bne.n	8005206 <SD_ReadBlock+0x152>

	// Clear the static SDIO flags
	SDMMC1->ICR = SDMMC_ICR_STATIC;
 8005220:	|         4b04      	ldr	r3, [pc, #16]	; (8005234 <SD_ReadBlock+0x180>)
 8005222:	|         f240 52ff 	movw	r2, #1535	; 0x5ff
 8005226:	|         639a      	str	r2, [r3, #56]	; 0x38

	return cmd_res;
 8005228:	|         7ffb      	ldrb	r3, [r7, #31]
}
 800522a:	\-------> 4618      	mov	r0, r3
 800522c:	          3724      	adds	r7, #36	; 0x24
 800522e:	          46bd      	mov	sp, r7
 8005230:	          bd90      	pop	{r4, r7, pc}
 8005232:	          bf00      	nop
 8005234:	          2800      	cmp	r0, #0
 8005236:	          4001      	ands	r1, r0
 8005238:	          3c1c      	subs	r4, #28
 800523a:	          2000      	movs	r0, #0
 800523c:	          9f00      	ldr	r7, [sp, #0]
 800523e:	          0024      	movs	r4, r4

08005240 <SD_WriteBlock>:
// input:
//   addr - address of the block to be written
//   pBuf - pointer to the buffer that will contain the received data
//   length - buffer length (must be multiple of 512)
// return: SDResult value
SDResult SD_WriteBlock(uint32_t addr, uint32_t *pBuf, uint32_t length) {
 8005240:	                      b590      	push	{r4, r7, lr}
 8005242:	                      b08d      	sub	sp, #52	; 0x34
 8005244:	                      af00      	add	r7, sp, #0
 8005246:	                      60f8      	str	r0, [r7, #12]
 8005248:	                      60b9      	str	r1, [r7, #8]
 800524a:	                      607a      	str	r2, [r7, #4]
	SDResult cmd_res = SDR_Success;
 800524c:	                      2300      	movs	r3, #0
 800524e:	                      f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t response; // SDIO command response
	uint32_t blk_count = length / 512; // Sectors in block
 8005252:	                      687b      	ldr	r3, [r7, #4]
 8005254:	                      0a5b      	lsrs	r3, r3, #9
 8005256:	                      61fb      	str	r3, [r7, #28]
	register uint32_t STA; // To speed up SDIO flags checking
	uint32_t STA_mask; // Mask for SDIO flags checking
	uint32_t bsent = 0; // Counter of transferred bytes
 8005258:	                      2300      	movs	r3, #0
 800525a:	                      627b      	str	r3, [r7, #36]	; 0x24
	uint32_t w_left; // Words counter in last portion of data
	uint8_t card_state; // Card state
	uint32_t cntr;

	// Initialize the data control register
	SDMMC1->DCTRL = 0;
 800525c:	                      4ba1      	ldr	r3, [pc, #644]	; (80054e4 <SD_WriteBlock+0x2a4>)
 800525e:	                      2200      	movs	r2, #0
 8005260:	                      62da      	str	r2, [r3, #44]	; 0x2c

	// SDSC card uses byte unit address and
	// SDHC/SDXC cards use block unit address (1 unit = 512 bytes)
	// For SDHC card addr must be converted to block unit address
	if (SDCard.Type == SDCT_SDHC) addr >>= 9;
 8005262:	                      4ba1      	ldr	r3, [pc, #644]	; (80054e8 <SD_WriteBlock+0x2a8>)
 8005264:	                      781b      	ldrb	r3, [r3, #0]
 8005266:	                      2b04      	cmp	r3, #4
 8005268:	                  /-- d102      	bne.n	8005270 <SD_WriteBlock+0x30>
 800526a:	                  |   68fb      	ldr	r3, [r7, #12]
 800526c:	                  |   0a5b      	lsrs	r3, r3, #9
 800526e:	                  |   60fb      	str	r3, [r7, #12]

	if (blk_count > 1) {
 8005270:	                  \-> 69fb      	ldr	r3, [r7, #28]
 8005272:	                      2b01      	cmp	r3, #1
 8005274:	               /----- d908      	bls.n	8005288 <SD_WriteBlock+0x48>
		// Send WRITE_MULTIPLE_BLOCK command
		SD_Cmd(SD_CMD_WRITE_MULTIPLE_BLOCK,addr,SDMMC_RESP_SHORT); // CMD25
 8005276:	               |      2240      	movs	r2, #64	; 0x40
 8005278:	               |      68f9      	ldr	r1, [r7, #12]
 800527a:	               |      2019      	movs	r0, #25
 800527c:	               |      f7ff f986 	bl	800458c <SD_Cmd>
		// Prepare bit checking variable for multiple block transfer
		STA_mask = SDMMC_STA_TXUNDERR | SDMMC_STA_DCRCFAIL | SDMMC_STA_DTIMEOUT | SDMMC_STA_STBITERR | SDMMC_STA_DATAEND;
 8005280:	               |      f240 331a 	movw	r3, #794	; 0x31a
 8005284:	               |      62bb      	str	r3, [r7, #40]	; 0x28
 8005286:	               |  /-- e007      	b.n	8005298 <SD_WriteBlock+0x58>
	} else {
		// Send WRITE_BLOCK command
		SD_Cmd(SD_CMD_WRITE_BLOCK,addr,SDMMC_RESP_SHORT); // CMD24
 8005288:	               \--|-> 2240      	movs	r2, #64	; 0x40
 800528a:	                  |   68f9      	ldr	r1, [r7, #12]
 800528c:	                  |   2018      	movs	r0, #24
 800528e:	                  |   f7ff f97d 	bl	800458c <SD_Cmd>
		// Prepare bit checking variable for single block transfer
		STA_mask = SDMMC_STA_TXUNDERR | SDMMC_STA_DCRCFAIL | SDMMC_STA_DTIMEOUT | SDMMC_STA_STBITERR | SDMMC_STA_DBCKEND;
 8005292:	                  |   f240 631a 	movw	r3, #1562	; 0x61a
 8005296:	                  |   62bb      	str	r3, [r7, #40]	; 0x28
	}
	cmd_res = SD_Response(SD_R1,&response);
 8005298:	                  \-> f107 0314 	add.w	r3, r7, #20
 800529c:	                      4619      	mov	r1, r3
 800529e:	                      2001      	movs	r0, #1
 80052a0:	                      f7ff fa5e 	bl	8004760 <SD_Response>
 80052a4:	                      4603      	mov	r3, r0
 80052a6:	                      f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (cmd_res != SDR_Success) return cmd_res;
 80052aa:	                      f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052ae:	                      2b00      	cmp	r3, #0
 80052b0:	                  /-- d002      	beq.n	80052b8 <SD_WriteBlock+0x78>
 80052b2:	                  |   f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052b6:	/-----------------|-- e110      	b.n	80054da <SD_WriteBlock+0x29a>

	// Clear the static SDIO flags
	SDMMC1->ICR = SDMMC_ICR_STATIC;
 80052b8:	|                 \-> 4b8a      	ldr	r3, [pc, #552]	; (80054e4 <SD_WriteBlock+0x2a4>)
 80052ba:	|                     f240 52ff 	movw	r2, #1535	; 0x5ff
 80052be:	|                     639a      	str	r2, [r3, #56]	; 0x38

	// Configure the SDIO data transfer
	SDMMC1->DTIMER = SDMMC_DATA_W_TIMEOUT; // Data write timeout
 80052c0:	|                     4b88      	ldr	r3, [pc, #544]	; (80054e4 <SD_WriteBlock+0x2a4>)
 80052c2:	|                     4a8a      	ldr	r2, [pc, #552]	; (80054ec <SD_WriteBlock+0x2ac>)
 80052c4:	|                     625a      	str	r2, [r3, #36]	; 0x24
	SDMMC1->DLEN   = length; // Data length
 80052c6:	|                     4a87      	ldr	r2, [pc, #540]	; (80054e4 <SD_WriteBlock+0x2a4>)
 80052c8:	|                     687b      	ldr	r3, [r7, #4]
 80052ca:	|                     6293      	str	r3, [r2, #40]	; 0x28
	// Data transfer: block, controller -> card, size: 2^9 = 512bytes, enable transfer
	SDMMC1->DCTRL  = (9 << 4) | SDMMC_DCTRL_DTEN;
 80052cc:	|                     4b85      	ldr	r3, [pc, #532]	; (80054e4 <SD_WriteBlock+0x2a4>)
 80052ce:	|                     2291      	movs	r2, #145	; 0x91
 80052d0:	|                     62da      	str	r2, [r3, #44]	; 0x2c

	// Transfer data block to the SDIO
	// ----> TIME CRITICAL SECTION BEGIN <----
	if (!(length % 32)) {
 80052d2:	|                     687b      	ldr	r3, [r7, #4]
 80052d4:	|                     f003 031f 	and.w	r3, r3, #31
 80052d8:	|                     2b00      	cmp	r3, #0
 80052da:	|  /----------------- d149      	bne.n	8005370 <SD_WriteBlock+0x130>
		// The block length is multiple of 32, use simplified and faster transfer
		do {
			STA = SDMMC1->STA;
 80052dc:	|  |           /----> 4b81      	ldr	r3, [pc, #516]	; (80054e4 <SD_WriteBlock+0x2a4>)
 80052de:	|  |           |      6b5c      	ldr	r4, [r3, #52]	; 0x34
			if ((STA & SDMMC_STA_TXFIFOHE) && (bsent < length)) {
 80052e0:	|  |           |      f404 4380 	and.w	r3, r4, #16384	; 0x4000
 80052e4:	|  |           |      2b00      	cmp	r3, #0
 80052e6:	|  |           |  /-- d03e      	beq.n	8005366 <SD_WriteBlock+0x126>
 80052e8:	|  |           |  |   6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ea:	|  |           |  |   687b      	ldr	r3, [r7, #4]
 80052ec:	|  |           |  |   429a      	cmp	r2, r3
 80052ee:	|  |           |  +-- d23a      	bcs.n	8005366 <SD_WriteBlock+0x126>
				// TX FIFO half empty, at least 8 words can be written
				SDMMC1->FIFO = *pBuf++;
 80052f0:	|  |           |  |   68bb      	ldr	r3, [r7, #8]
 80052f2:	|  |           |  |   1d1a      	adds	r2, r3, #4
 80052f4:	|  |           |  |   60ba      	str	r2, [r7, #8]
 80052f6:	|  |           |  |   4a7b      	ldr	r2, [pc, #492]	; (80054e4 <SD_WriteBlock+0x2a4>)
 80052f8:	|  |           |  |   681b      	ldr	r3, [r3, #0]
 80052fa:	|  |           |  |   f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
				SDMMC1->FIFO = *pBuf++;
 80052fe:	|  |           |  |   68bb      	ldr	r3, [r7, #8]
 8005300:	|  |           |  |   1d1a      	adds	r2, r3, #4
 8005302:	|  |           |  |   60ba      	str	r2, [r7, #8]
 8005304:	|  |           |  |   4a77      	ldr	r2, [pc, #476]	; (80054e4 <SD_WriteBlock+0x2a4>)
 8005306:	|  |           |  |   681b      	ldr	r3, [r3, #0]
 8005308:	|  |           |  |   f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
				SDMMC1->FIFO = *pBuf++;
 800530c:	|  |           |  |   68bb      	ldr	r3, [r7, #8]
 800530e:	|  |           |  |   1d1a      	adds	r2, r3, #4
 8005310:	|  |           |  |   60ba      	str	r2, [r7, #8]
 8005312:	|  |           |  |   4a74      	ldr	r2, [pc, #464]	; (80054e4 <SD_WriteBlock+0x2a4>)
 8005314:	|  |           |  |   681b      	ldr	r3, [r3, #0]
 8005316:	|  |           |  |   f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
				SDMMC1->FIFO = *pBuf++;
 800531a:	|  |           |  |   68bb      	ldr	r3, [r7, #8]
 800531c:	|  |           |  |   1d1a      	adds	r2, r3, #4
 800531e:	|  |           |  |   60ba      	str	r2, [r7, #8]
 8005320:	|  |           |  |   4a70      	ldr	r2, [pc, #448]	; (80054e4 <SD_WriteBlock+0x2a4>)
 8005322:	|  |           |  |   681b      	ldr	r3, [r3, #0]
 8005324:	|  |           |  |   f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
				SDMMC1->FIFO = *pBuf++;
 8005328:	|  |           |  |   68bb      	ldr	r3, [r7, #8]
 800532a:	|  |           |  |   1d1a      	adds	r2, r3, #4
 800532c:	|  |           |  |   60ba      	str	r2, [r7, #8]
 800532e:	|  |           |  |   4a6d      	ldr	r2, [pc, #436]	; (80054e4 <SD_WriteBlock+0x2a4>)
 8005330:	|  |           |  |   681b      	ldr	r3, [r3, #0]
 8005332:	|  |           |  |   f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
				SDMMC1->FIFO = *pBuf++;
 8005336:	|  |           |  |   68bb      	ldr	r3, [r7, #8]
 8005338:	|  |           |  |   1d1a      	adds	r2, r3, #4
 800533a:	|  |           |  |   60ba      	str	r2, [r7, #8]
 800533c:	|  |           |  |   4a69      	ldr	r2, [pc, #420]	; (80054e4 <SD_WriteBlock+0x2a4>)
 800533e:	|  |           |  |   681b      	ldr	r3, [r3, #0]
 8005340:	|  |           |  |   f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
				SDMMC1->FIFO = *pBuf++;
 8005344:	|  |           |  |   68bb      	ldr	r3, [r7, #8]
 8005346:	|  |           |  |   1d1a      	adds	r2, r3, #4
 8005348:	|  |           |  |   60ba      	str	r2, [r7, #8]
 800534a:	|  |           |  |   4a66      	ldr	r2, [pc, #408]	; (80054e4 <SD_WriteBlock+0x2a4>)
 800534c:	|  |           |  |   681b      	ldr	r3, [r3, #0]
 800534e:	|  |           |  |   f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
				SDMMC1->FIFO = *pBuf++;
 8005352:	|  |           |  |   68bb      	ldr	r3, [r7, #8]
 8005354:	|  |           |  |   1d1a      	adds	r2, r3, #4
 8005356:	|  |           |  |   60ba      	str	r2, [r7, #8]
 8005358:	|  |           |  |   4a62      	ldr	r2, [pc, #392]	; (80054e4 <SD_WriteBlock+0x2a4>)
 800535a:	|  |           |  |   681b      	ldr	r3, [r3, #0]
 800535c:	|  |           |  |   f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
				bsent += 32;
 8005360:	|  |           |  |   6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	|  |           |  |   3320      	adds	r3, #32
 8005364:	|  |           |  |   627b      	str	r3, [r7, #36]	; 0x24
			}
		} while (!(STA & STA_mask));
 8005366:	|  |           |  \-> 6abb      	ldr	r3, [r7, #40]	; 0x28
 8005368:	|  |           |      4023      	ands	r3, r4
 800536a:	|  |           |      2b00      	cmp	r3, #0
 800536c:	|  |           \----- d0b6      	beq.n	80052dc <SD_WriteBlock+0x9c>
 800536e:	|  |  /-------------- e076      	b.n	800545e <SD_WriteBlock+0x21e>
	} else {
		// The block length is not a multiple of 32, so it is necessary to apply additional calculations
		do {
			STA = SDMMC1->STA;
 8005370:	|  >--|-------------> 4b5c      	ldr	r3, [pc, #368]	; (80054e4 <SD_WriteBlock+0x2a4>)
 8005372:	|  |  |               6b5c      	ldr	r4, [r3, #52]	; 0x34
			if ((STA & SDMMC_STA_TXFIFOHE) && (bsent < length)) {
 8005374:	|  |  |               f404 4380 	and.w	r3, r4, #16384	; 0x4000
 8005378:	|  |  |               2b00      	cmp	r3, #0
 800537a:	|  |  |  /----------- d06c      	beq.n	8005456 <SD_WriteBlock+0x216>
 800537c:	|  |  |  |            6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537e:	|  |  |  |            687b      	ldr	r3, [r7, #4]
 8005380:	|  |  |  |            429a      	cmp	r2, r3
 8005382:	|  |  |  +----------- d268      	bcs.n	8005456 <SD_WriteBlock+0x216>
				// TX FIFO half empty, at least 8 words can be written
				if (length - bsent < 32) {
 8005384:	|  |  |  |            687a      	ldr	r2, [r7, #4]
 8005386:	|  |  |  |            6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	|  |  |  |            1ad3      	subs	r3, r2, r3
 800538a:	|  |  |  |            2b1f      	cmp	r3, #31
 800538c:	|  |  |  |  /-------- d828      	bhi.n	80053e0 <SD_WriteBlock+0x1a0>
					// Write last portion of data to the TX FIFO
					w_left = ((length - bsent) % 4 == 0) ? ((length - bsent) >> 2) : (((length - bsent) >> 2) + 1);
 800538e:	|  |  |  |  |         687a      	ldr	r2, [r7, #4]
 8005390:	|  |  |  |  |         6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	|  |  |  |  |         1ad3      	subs	r3, r2, r3
 8005394:	|  |  |  |  |         f003 0303 	and.w	r3, r3, #3
 8005398:	|  |  |  |  |         2b00      	cmp	r3, #0
 800539a:	|  |  |  |  |     /-- d104      	bne.n	80053a6 <SD_WriteBlock+0x166>
 800539c:	|  |  |  |  |     |   687a      	ldr	r2, [r7, #4]
 800539e:	|  |  |  |  |     |   6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	|  |  |  |  |     |   1ad3      	subs	r3, r2, r3
 80053a2:	|  |  |  |  |     |   089b      	lsrs	r3, r3, #2
 80053a4:	|  |  |  |  |  /--|-- e004      	b.n	80053b0 <SD_WriteBlock+0x170>
 80053a6:	|  |  |  |  |  |  \-> 687a      	ldr	r2, [r7, #4]
 80053a8:	|  |  |  |  |  |      6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	|  |  |  |  |  |      1ad3      	subs	r3, r2, r3
 80053ac:	|  |  |  |  |  |      089b      	lsrs	r3, r3, #2
 80053ae:	|  |  |  |  |  |      3301      	adds	r3, #1
 80053b0:	|  |  |  |  |  \----> 61bb      	str	r3, [r7, #24]
					for (cntr = 0; cntr < w_left; cntr++) SDMMC1->FIFO = *pBuf++;
 80053b2:	|  |  |  |  |         2300      	movs	r3, #0
 80053b4:	|  |  |  |  |         623b      	str	r3, [r7, #32]
 80053b6:	|  |  |  |  |     /-- e009      	b.n	80053cc <SD_WriteBlock+0x18c>
 80053b8:	|  |  |  |  |  /--|-> 68bb      	ldr	r3, [r7, #8]
 80053ba:	|  |  |  |  |  |  |   1d1a      	adds	r2, r3, #4
 80053bc:	|  |  |  |  |  |  |   60ba      	str	r2, [r7, #8]
 80053be:	|  |  |  |  |  |  |   4a49      	ldr	r2, [pc, #292]	; (80054e4 <SD_WriteBlock+0x2a4>)
 80053c0:	|  |  |  |  |  |  |   681b      	ldr	r3, [r3, #0]
 80053c2:	|  |  |  |  |  |  |   f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80053c6:	|  |  |  |  |  |  |   6a3b      	ldr	r3, [r7, #32]
 80053c8:	|  |  |  |  |  |  |   3301      	adds	r3, #1
 80053ca:	|  |  |  |  |  |  |   623b      	str	r3, [r7, #32]
 80053cc:	|  |  |  |  |  |  \-> 6a3a      	ldr	r2, [r7, #32]
 80053ce:	|  |  |  |  |  |      69bb      	ldr	r3, [r7, #24]
 80053d0:	|  |  |  |  |  |      429a      	cmp	r2, r3
 80053d2:	|  |  |  |  |  \----- d3f1      	bcc.n	80053b8 <SD_WriteBlock+0x178>
					bsent += w_left << 2;
 80053d4:	|  |  |  |  |         69bb      	ldr	r3, [r7, #24]
 80053d6:	|  |  |  |  |         009b      	lsls	r3, r3, #2
 80053d8:	|  |  |  |  |         6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053da:	|  |  |  |  |         4413      	add	r3, r2
 80053dc:	|  |  |  |  |         627b      	str	r3, [r7, #36]	; 0x24
 80053de:	|  |  |  +--|-------- e03a      	b.n	8005456 <SD_WriteBlock+0x216>
				} else {
					// Write 8 words to the TX FIFO
					SDMMC1->FIFO = *pBuf++;
 80053e0:	|  |  |  |  \-------> 68bb      	ldr	r3, [r7, #8]
 80053e2:	|  |  |  |            1d1a      	adds	r2, r3, #4
 80053e4:	|  |  |  |            60ba      	str	r2, [r7, #8]
 80053e6:	|  |  |  |            4a3f      	ldr	r2, [pc, #252]	; (80054e4 <SD_WriteBlock+0x2a4>)
 80053e8:	|  |  |  |            681b      	ldr	r3, [r3, #0]
 80053ea:	|  |  |  |            f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
					SDMMC1->FIFO = *pBuf++;
 80053ee:	|  |  |  |            68bb      	ldr	r3, [r7, #8]
 80053f0:	|  |  |  |            1d1a      	adds	r2, r3, #4
 80053f2:	|  |  |  |            60ba      	str	r2, [r7, #8]
 80053f4:	|  |  |  |            4a3b      	ldr	r2, [pc, #236]	; (80054e4 <SD_WriteBlock+0x2a4>)
 80053f6:	|  |  |  |            681b      	ldr	r3, [r3, #0]
 80053f8:	|  |  |  |            f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
					SDMMC1->FIFO = *pBuf++;
 80053fc:	|  |  |  |            68bb      	ldr	r3, [r7, #8]
 80053fe:	|  |  |  |            1d1a      	adds	r2, r3, #4
 8005400:	|  |  |  |            60ba      	str	r2, [r7, #8]
 8005402:	|  |  |  |            4a38      	ldr	r2, [pc, #224]	; (80054e4 <SD_WriteBlock+0x2a4>)
 8005404:	|  |  |  |            681b      	ldr	r3, [r3, #0]
 8005406:	|  |  |  |            f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
					SDMMC1->FIFO = *pBuf++;
 800540a:	|  |  |  |            68bb      	ldr	r3, [r7, #8]
 800540c:	|  |  |  |            1d1a      	adds	r2, r3, #4
 800540e:	|  |  |  |            60ba      	str	r2, [r7, #8]
 8005410:	|  |  |  |            4a34      	ldr	r2, [pc, #208]	; (80054e4 <SD_WriteBlock+0x2a4>)
 8005412:	|  |  |  |            681b      	ldr	r3, [r3, #0]
 8005414:	|  |  |  |            f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
					SDMMC1->FIFO = *pBuf++;
 8005418:	|  |  |  |            68bb      	ldr	r3, [r7, #8]
 800541a:	|  |  |  |            1d1a      	adds	r2, r3, #4
 800541c:	|  |  |  |            60ba      	str	r2, [r7, #8]
 800541e:	|  |  |  |            4a31      	ldr	r2, [pc, #196]	; (80054e4 <SD_WriteBlock+0x2a4>)
 8005420:	|  |  |  |            681b      	ldr	r3, [r3, #0]
 8005422:	|  |  |  |            f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
					SDMMC1->FIFO = *pBuf++;
 8005426:	|  |  |  |            68bb      	ldr	r3, [r7, #8]
 8005428:	|  |  |  |            1d1a      	adds	r2, r3, #4
 800542a:	|  |  |  |            60ba      	str	r2, [r7, #8]
 800542c:	|  |  |  |            4a2d      	ldr	r2, [pc, #180]	; (80054e4 <SD_WriteBlock+0x2a4>)
 800542e:	|  |  |  |            681b      	ldr	r3, [r3, #0]
 8005430:	|  |  |  |            f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
					SDMMC1->FIFO = *pBuf++;
 8005434:	|  |  |  |            68bb      	ldr	r3, [r7, #8]
 8005436:	|  |  |  |            1d1a      	adds	r2, r3, #4
 8005438:	|  |  |  |            60ba      	str	r2, [r7, #8]
 800543a:	|  |  |  |            4a2a      	ldr	r2, [pc, #168]	; (80054e4 <SD_WriteBlock+0x2a4>)
 800543c:	|  |  |  |            681b      	ldr	r3, [r3, #0]
 800543e:	|  |  |  |            f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
					SDMMC1->FIFO = *pBuf++;
 8005442:	|  |  |  |            68bb      	ldr	r3, [r7, #8]
 8005444:	|  |  |  |            1d1a      	adds	r2, r3, #4
 8005446:	|  |  |  |            60ba      	str	r2, [r7, #8]
 8005448:	|  |  |  |            4a26      	ldr	r2, [pc, #152]	; (80054e4 <SD_WriteBlock+0x2a4>)
 800544a:	|  |  |  |            681b      	ldr	r3, [r3, #0]
 800544c:	|  |  |  |            f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
					bsent += 32;
 8005450:	|  |  |  |            6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	|  |  |  |            3320      	adds	r3, #32
 8005454:	|  |  |  |            627b      	str	r3, [r7, #36]	; 0x24
				}
			}
		} while (!(STA & STA_mask));
 8005456:	|  |  |  \----------> 6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	|  |  |               4023      	ands	r3, r4
 800545a:	|  |  |               2b00      	cmp	r3, #0
 800545c:	|  \--|-------------- d088      	beq.n	8005370 <SD_WriteBlock+0x130>
	}
	// <---- TIME CRITICAL SECTION END ---->

	// Send stop transmission command in case of multiple block transfer
	if ((SDCard.Type != SDCT_MMC) && (blk_count > 1)) cmd_res = SD_StopTransfer();
 800545e:	|     \-------------> 4b22      	ldr	r3, [pc, #136]	; (80054e8 <SD_WriteBlock+0x2a8>)
 8005460:	|                     781b      	ldrb	r3, [r3, #0]
 8005462:	|                     2b03      	cmp	r3, #3
 8005464:	|                 /-- d007      	beq.n	8005476 <SD_WriteBlock+0x236>
 8005466:	|                 |   69fb      	ldr	r3, [r7, #28]
 8005468:	|                 |   2b01      	cmp	r3, #1
 800546a:	|                 +-- d904      	bls.n	8005476 <SD_WriteBlock+0x236>
 800546c:	|                 |   f7ff fdea 	bl	8005044 <SD_StopTransfer>
 8005470:	|                 |   4603      	mov	r3, r0
 8005472:	|                 |   f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	// Check for errors
	if (STA & SDMMC_STA_DTIMEOUT) cmd_res = SDR_DataTimeout;
 8005476:	|                 \-> f004 0308 	and.w	r3, r4, #8
 800547a:	|                     2b00      	cmp	r3, #0
 800547c:	|                 /-- d002      	beq.n	8005484 <SD_WriteBlock+0x244>
 800547e:	|                 |   230e      	movs	r3, #14
 8005480:	|                 |   f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (STA & SDMMC_STA_DCRCFAIL) cmd_res = SDR_DataCRCFail;
 8005484:	|                 \-> f004 0302 	and.w	r3, r4, #2
 8005488:	|                     2b00      	cmp	r3, #0
 800548a:	|                 /-- d002      	beq.n	8005492 <SD_WriteBlock+0x252>
 800548c:	|                 |   230f      	movs	r3, #15
 800548e:	|                 |   f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (STA & SDMMC_STA_TXUNDERR) cmd_res = SDR_TXUnderrun;
 8005492:	|                 \-> f004 0310 	and.w	r3, r4, #16
 8005496:	|                     2b00      	cmp	r3, #0
 8005498:	|                 /-- d002      	beq.n	80054a0 <SD_WriteBlock+0x260>
 800549a:	|                 |   2311      	movs	r3, #17
 800549c:	|                 |   f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (STA & SDMMC_STA_STBITERR) cmd_res = SDR_StartBitError;
 80054a0:	|                 \-> f404 7300 	and.w	r3, r4, #512	; 0x200
 80054a4:	|                     2b00      	cmp	r3, #0
 80054a6:	|                 /-- d002      	beq.n	80054ae <SD_WriteBlock+0x26e>
 80054a8:	|                 |   2312      	movs	r3, #18
 80054aa:	|                 |   f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	// Wait till the card is in programming state
	do {
		if (SD_GetCardState(&card_state) != SDR_Success) break;
 80054ae:	|                 >-> f107 0313 	add.w	r3, r7, #19
 80054b2:	|                 |   4618      	mov	r0, r3
 80054b4:	|                 |   f7ff fdd8 	bl	8005068 <SD_GetCardState>
 80054b8:	|                 |   4603      	mov	r3, r0
 80054ba:	|                 |   2b00      	cmp	r3, #0
 80054bc:	|              /--|-- d106      	bne.n	80054cc <SD_WriteBlock+0x28c>
	} while ((card_state == SD_STATE_PRG) || (card_state == SD_STATE_RCV));
 80054be:	|              |  |   7cfb      	ldrb	r3, [r7, #19]
 80054c0:	|              |  |   2b07      	cmp	r3, #7
 80054c2:	|              |  +-- d0f4      	beq.n	80054ae <SD_WriteBlock+0x26e>
 80054c4:	|              |  |   7cfb      	ldrb	r3, [r7, #19]
 80054c6:	|              |  |   2b06      	cmp	r3, #6
 80054c8:	|              |  \-- d0f1      	beq.n	80054ae <SD_WriteBlock+0x26e>
 80054ca:	|              |  /-- e000      	b.n	80054ce <SD_WriteBlock+0x28e>
		if (SD_GetCardState(&card_state) != SDR_Success) break;
 80054cc:	|              \--|-> bf00      	nop

	// Clear the static SDIO flags
	SDMMC1->ICR = SDMMC_ICR_STATIC;
 80054ce:	|                 \-> 4b05      	ldr	r3, [pc, #20]	; (80054e4 <SD_WriteBlock+0x2a4>)
 80054d0:	|                     f240 52ff 	movw	r2, #1535	; 0x5ff
 80054d4:	|                     639a      	str	r2, [r3, #56]	; 0x38

	return cmd_res;
 80054d6:	|                     f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80054da:	\-------------------> 4618      	mov	r0, r3
 80054dc:	                      3734      	adds	r7, #52	; 0x34
 80054de:	                      46bd      	mov	sp, r7
 80054e0:	                      bd90      	pop	{r4, r7, pc}
 80054e2:	                      bf00      	nop
 80054e4:	                      2800      	cmp	r0, #0
 80054e6:	                      4001      	ands	r1, r0
 80054e8:	                      3c1c      	subs	r4, #28
 80054ea:	                      2000      	movs	r0, #0
 80054ec:	                      8d80      	ldrh	r0, [r0, #44]	; 0x2c
 80054ee:	                      005b      	lsls	r3, r3, #1

080054f0 <spi_init>:
#include "stm32l4xx.h"

void spi_init(SPI_TypeDef *SPIx, int speed_div_, int mode_, int data_length_, int first_bit_){
 80054f0:	       b480      	push	{r7}
 80054f2:	       b085      	sub	sp, #20
 80054f4:	       af00      	add	r7, sp, #0
 80054f6:	       60f8      	str	r0, [r7, #12]
 80054f8:	       60b9      	str	r1, [r7, #8]
 80054fa:	       607a      	str	r2, [r7, #4]
 80054fc:	       603b      	str	r3, [r7, #0]
	 *  Mode 0 - CPOL=0; CPHA=0
	 *  Mode 1 - CPOL=0; CPHA=1
	 *  Mode 2 - CPOL=1; CPHA=0
	 *  Mode 3 - CPOL=1; CPHA=1
	 */
	if(SPIx == SPI1){
 80054fe:	       68fb      	ldr	r3, [r7, #12]
 8005500:	       4a29      	ldr	r2, [pc, #164]	; (80055a8 <spi_init+0xb8>)
 8005502:	       4293      	cmp	r3, r2
 8005504:	   /-- d106      	bne.n	8005514 <spi_init+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8005506:	   |   4b29      	ldr	r3, [pc, #164]	; (80055ac <spi_init+0xbc>)
 8005508:	   |   6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550a:	   |   4a28      	ldr	r2, [pc, #160]	; (80055ac <spi_init+0xbc>)
 800550c:	   |   f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005510:	   |   6613      	str	r3, [r2, #96]	; 0x60
 8005512:	/--|-- e014      	b.n	800553e <spi_init+0x4e>
	}
	else if(SPIx == SPI2){
 8005514:	|  \-> 68fb      	ldr	r3, [r7, #12]
 8005516:	|      4a26      	ldr	r2, [pc, #152]	; (80055b0 <spi_init+0xc0>)
 8005518:	|      4293      	cmp	r3, r2
 800551a:	|  /-- d106      	bne.n	800552a <spi_init+0x3a>
		RCC->APB1ENR1 |= RCC_APB1ENR1_SPI2EN;
 800551c:	|  |   4b23      	ldr	r3, [pc, #140]	; (80055ac <spi_init+0xbc>)
 800551e:	|  |   6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005520:	|  |   4a22      	ldr	r2, [pc, #136]	; (80055ac <spi_init+0xbc>)
 8005522:	|  |   f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005526:	|  |   6593      	str	r3, [r2, #88]	; 0x58
 8005528:	+--|-- e009      	b.n	800553e <spi_init+0x4e>
	}
	else if(SPIx == SPI3){
 800552a:	|  \-> 68fb      	ldr	r3, [r7, #12]
 800552c:	|      4a21      	ldr	r2, [pc, #132]	; (80055b4 <spi_init+0xc4>)
 800552e:	|      4293      	cmp	r3, r2
 8005530:	+----- d105      	bne.n	800553e <spi_init+0x4e>
		RCC->APB1ENR1 |= RCC_APB1ENR1_SPI3EN;
 8005532:	|      4b1e      	ldr	r3, [pc, #120]	; (80055ac <spi_init+0xbc>)
 8005534:	|      6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	|      4a1d      	ldr	r2, [pc, #116]	; (80055ac <spi_init+0xbc>)
 8005538:	|      f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553c:	|      6593      	str	r3, [r2, #88]	; 0x58
	}

	SPIx->CR1 |= speed_div_ << 3;
 800553e:	\----> 68fb      	ldr	r3, [r7, #12]
 8005540:	       681b      	ldr	r3, [r3, #0]
 8005542:	       68ba      	ldr	r2, [r7, #8]
 8005544:	       00d2      	lsls	r2, r2, #3
 8005546:	       431a      	orrs	r2, r3
 8005548:	       68fb      	ldr	r3, [r7, #12]
 800554a:	       601a      	str	r2, [r3, #0]
	SPIx->CR1 |= mode_ << 0;
 800554c:	       68fb      	ldr	r3, [r7, #12]
 800554e:	       681a      	ldr	r2, [r3, #0]
 8005550:	       687b      	ldr	r3, [r7, #4]
 8005552:	       431a      	orrs	r2, r3
 8005554:	       68fb      	ldr	r3, [r7, #12]
 8005556:	       601a      	str	r2, [r3, #0]
	SPIx->CR1 |= first_bit_ << 7;
 8005558:	       68fb      	ldr	r3, [r7, #12]
 800555a:	       681b      	ldr	r3, [r3, #0]
 800555c:	       69ba      	ldr	r2, [r7, #24]
 800555e:	       01d2      	lsls	r2, r2, #7
 8005560:	       431a      	orrs	r2, r3
 8005562:	       68fb      	ldr	r3, [r7, #12]
 8005564:	       601a      	str	r2, [r3, #0]
	SPIx->CR1 |= SPI_CR1_MSTR;  //Mode Master
 8005566:	       68fb      	ldr	r3, [r7, #12]
 8005568:	       681b      	ldr	r3, [r3, #0]
 800556a:	       f043 0204 	orr.w	r2, r3, #4
 800556e:	       68fb      	ldr	r3, [r7, #12]
 8005570:	       601a      	str	r2, [r3, #0]
	SPIx->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI; //Software slave management & Internal slave select
 8005572:	       68fb      	ldr	r3, [r7, #12]
 8005574:	       681b      	ldr	r3, [r3, #0]
 8005576:	       f443 7240 	orr.w	r2, r3, #768	; 0x300
 800557a:	       68fb      	ldr	r3, [r7, #12]
 800557c:	       601a      	str	r2, [r3, #0]

//	SPIx->CR1 |= 0x01 << 14;
	SPIx->CR1 |= 0x00 << 11;
 800557e:	       68fb      	ldr	r3, [r7, #12]
 8005580:	       681a      	ldr	r2, [r3, #0]
 8005582:	       68fb      	ldr	r3, [r7, #12]
 8005584:	       601a      	str	r2, [r3, #0]
	SPIx->CR2 = (0x07 << SPI_CR2_DS_Pos) | SPI_CR2_FRXTH; // важно
 8005586:	       68fb      	ldr	r3, [r7, #12]
 8005588:	       f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800558c:	       605a      	str	r2, [r3, #4]
	SPIx->CR1 |= SPI_CR1_SPE; //Enable SPI1
 800558e:	       68fb      	ldr	r3, [r7, #12]
 8005590:	       681b      	ldr	r3, [r3, #0]
 8005592:	       f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005596:	       68fb      	ldr	r3, [r7, #12]
 8005598:	       601a      	str	r2, [r3, #0]
}
 800559a:	       bf00      	nop
 800559c:	       3714      	adds	r7, #20
 800559e:	       46bd      	mov	sp, r7
 80055a0:	       f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	       4770      	bx	lr
 80055a6:	       bf00      	nop
 80055a8:	       3000      	adds	r0, #0
 80055aa:	       4001      	ands	r1, r0
 80055ac:	       1000      	asrs	r0, r0, #32
 80055ae:	       4002      	ands	r2, r0
 80055b0:	       3800      	subs	r0, #0
 80055b2:	       4000      	ands	r0, r0
 80055b4:	       3c00      	subs	r4, #0
 80055b6:	       4000      	ands	r0, r0

080055b8 <spi_write>:
void spi_write(SPI_TypeDef *SPIx, uint8_t data)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	70fb      	strb	r3, [r7, #3]
	/* Write data (8 or 16 bits, depending on DFF) into DR. */
	SPIx->DR = data;
 80055c4:	78fa      	ldrb	r2, [r7, #3]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	60da      	str	r2, [r3, #12]
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <spi_xfer>:
uint8_t spi_xfer(SPI_TypeDef *SPIx, uint8_t data)
{
 80055d6:	    b580      	push	{r7, lr}
 80055d8:	    b082      	sub	sp, #8
 80055da:	    af00      	add	r7, sp, #0
 80055dc:	    6078      	str	r0, [r7, #4]
 80055de:	    460b      	mov	r3, r1
 80055e0:	    70fb      	strb	r3, [r7, #3]
	spi_write(SPIx, data);
 80055e2:	    78fb      	ldrb	r3, [r7, #3]
 80055e4:	    4619      	mov	r1, r3
 80055e6:	    6878      	ldr	r0, [r7, #4]
 80055e8:	    f7ff ffe6 	bl	80055b8 <spi_write>

	/* Wait for transfer finished. */
	while (!(SPIx->SR & SPI_SR_RXNE));
 80055ec:	    bf00      	nop
 80055ee:	/-> 687b      	ldr	r3, [r7, #4]
 80055f0:	|   689b      	ldr	r3, [r3, #8]
 80055f2:	|   f003 0301 	and.w	r3, r3, #1
 80055f6:	|   2b00      	cmp	r3, #0
 80055f8:	\-- d0f9      	beq.n	80055ee <spi_xfer+0x18>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPIx->DR;
 80055fa:	    687b      	ldr	r3, [r7, #4]
 80055fc:	    68db      	ldr	r3, [r3, #12]
 80055fe:	    b2db      	uxtb	r3, r3
}
 8005600:	    4618      	mov	r0, r3
 8005602:	    3708      	adds	r7, #8
 8005604:	    46bd      	mov	sp, r7
 8005606:	    bd80      	pop	{r7, pc}

08005608 <spi_txrx>:
uint8_t spi_txrx(SPI_TypeDef *SPIx, uint8_t data)
{
 8005608:	    b480      	push	{r7}
 800560a:	    b083      	sub	sp, #12
 800560c:	    af00      	add	r7, sp, #0
 800560e:	    6078      	str	r0, [r7, #4]
 8005610:	    460b      	mov	r3, r1
 8005612:	    70fb      	strb	r3, [r7, #3]
	while(!(SPIx->SR & SPI_SR_TXE));
 8005614:	    bf00      	nop
 8005616:	/-> 687b      	ldr	r3, [r7, #4]
 8005618:	|   689b      	ldr	r3, [r3, #8]
 800561a:	|   f003 0302 	and.w	r3, r3, #2
 800561e:	|   2b00      	cmp	r3, #0
 8005620:	\-- d0f9      	beq.n	8005616 <spi_txrx+0xe>
	*(__IO uint8_t*)&(SPIx->DR) = data;
 8005622:	    687b      	ldr	r3, [r7, #4]
 8005624:	    330c      	adds	r3, #12
 8005626:	    78fa      	ldrb	r2, [r7, #3]
 8005628:	    701a      	strb	r2, [r3, #0]
	while ((SPIx->SR & SPI_SR_RXNE) == 0);
 800562a:	    bf00      	nop
 800562c:	/-> 687b      	ldr	r3, [r7, #4]
 800562e:	|   689b      	ldr	r3, [r3, #8]
 8005630:	|   f003 0301 	and.w	r3, r3, #1
 8005634:	|   2b00      	cmp	r3, #0
 8005636:	\-- d0f9      	beq.n	800562c <spi_txrx+0x24>
	while (SPI1->SR & SPI_SR_BSY);
 8005638:	    bf00      	nop
 800563a:	/-> 4b08      	ldr	r3, [pc, #32]	; (800565c <spi_txrx+0x54>)
 800563c:	|   689b      	ldr	r3, [r3, #8]
 800563e:	|   f003 0380 	and.w	r3, r3, #128	; 0x80
 8005642:	|   2b00      	cmp	r3, #0
 8005644:	\-- d1f9      	bne.n	800563a <spi_txrx+0x32>

	return *(__IO uint8_t*)&(SPIx->DR);
 8005646:	    687b      	ldr	r3, [r7, #4]
 8005648:	    330c      	adds	r3, #12
 800564a:	    781b      	ldrb	r3, [r3, #0]
 800564c:	    b2db      	uxtb	r3, r3
}
 800564e:	    4618      	mov	r0, r3
 8005650:	    370c      	adds	r7, #12
 8005652:	    46bd      	mov	sp, r7
 8005654:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	    4770      	bx	lr
 800565a:	    bf00      	nop
 800565c:	    3000      	adds	r0, #0
 800565e:	    4001      	ands	r1, r0

08005660 <spi_send8>:
void spi_send8(SPI_TypeDef *SPIx, uint8_t data){
 8005660:	    b480      	push	{r7}
 8005662:	    b083      	sub	sp, #12
 8005664:	    af00      	add	r7, sp, #0
 8005666:	    6078      	str	r0, [r7, #4]
 8005668:	    460b      	mov	r3, r1
 800566a:	    70fb      	strb	r3, [r7, #3]
	while(!(SPIx->SR & SPI_SR_TXE));
 800566c:	    bf00      	nop
 800566e:	/-> 687b      	ldr	r3, [r7, #4]
 8005670:	|   689b      	ldr	r3, [r3, #8]
 8005672:	|   f003 0302 	and.w	r3, r3, #2
 8005676:	|   2b00      	cmp	r3, #0
 8005678:	\-- d0f9      	beq.n	800566e <spi_send8+0xe>
	*(__IO uint8_t *)(&SPIx->DR) = data;
 800567a:	    687b      	ldr	r3, [r7, #4]
 800567c:	    330c      	adds	r3, #12
 800567e:	    78fa      	ldrb	r2, [r7, #3]
 8005680:	    701a      	strb	r2, [r3, #0]
	// while((!(*((__IO uint8_t *)&SPIx->SR) & SPI_SR_RXNE)) == SPI_SR_RXNE) {}
	(void) SPIx->DR;
 8005682:	    687b      	ldr	r3, [r7, #4]
 8005684:	    68db      	ldr	r3, [r3, #12]
	(void) SPIx->SR;
 8005686:	    687b      	ldr	r3, [r7, #4]
 8005688:	    689b      	ldr	r3, [r3, #8]
}
 800568a:	    bf00      	nop
 800568c:	    370c      	adds	r7, #12
 800568e:	    46bd      	mov	sp, r7
 8005690:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	    4770      	bx	lr

08005696 <spi_recieve8>:
uint8_t spi_recieve8(SPI_TypeDef *SPIx){
 8005696:	             b480      	push	{r7}
 8005698:	             b085      	sub	sp, #20
 800569a:	             af00      	add	r7, sp, #0
 800569c:	             6078      	str	r0, [r7, #4]
	/* Set RX Fifo threshold according the reception data length: 8bit */
	while(!(SPIx->SR & SPI_SR_TXE)); // waiting while transmit buffer is not empty
 800569e:	             bf00      	nop
 80056a0:	         /-> 687b      	ldr	r3, [r7, #4]
 80056a2:	         |   689b      	ldr	r3, [r3, #8]
 80056a4:	         |   f003 0302 	and.w	r3, r3, #2
 80056a8:	         |   2b00      	cmp	r3, #0
 80056aa:	         \-- d0f9      	beq.n	80056a0 <spi_recieve8+0xa>
	*(__IO uint8_t *)(&SPIx->DR) = 0x00;
 80056ac:	             687b      	ldr	r3, [r7, #4]
 80056ae:	             330c      	adds	r3, #12
 80056b0:	             2200      	movs	r2, #0
 80056b2:	             701a      	strb	r2, [r3, #0]

	volatile uint32_t counter = 0;
 80056b4:	             2300      	movs	r3, #0
 80056b6:	             60fb      	str	r3, [r7, #12]
	volatile uint8_t data = 0;
 80056b8:	             2300      	movs	r3, #0
 80056ba:	             72fb      	strb	r3, [r7, #11]
	volatile uint8_t status = 1;
 80056bc:	             2301      	movs	r3, #1
 80056be:	             72bb      	strb	r3, [r7, #10]
	// if(SPIx->SR & SPI_SR_FRLVL == 0){
	// 	data = *((__IO uint8_t *)&SPIx->DR);
	// }
	while(1){
		if((SPIx->SR & SPI_SR_RXNE) == SPI_SR_RXNE){  // if recieve buffer is not empty then read it
 80056c0:	/----------> 687b      	ldr	r3, [r7, #4]
 80056c2:	|            689b      	ldr	r3, [r3, #8]
 80056c4:	|            f003 0301 	and.w	r3, r3, #1
 80056c8:	|            2b01      	cmp	r3, #1
 80056ca:	|        /-- d113      	bne.n	80056f4 <spi_recieve8+0x5e>
			status = (SPIx->SR >> SPI_SR_FRLVL_Pos) & 0x03;
 80056cc:	|        |   687b      	ldr	r3, [r7, #4]
 80056ce:	|        |   689b      	ldr	r3, [r3, #8]
 80056d0:	|        |   0a5b      	lsrs	r3, r3, #9
 80056d2:	|        |   b2db      	uxtb	r3, r3
 80056d4:	|        |   f003 0303 	and.w	r3, r3, #3
 80056d8:	|        |   b2db      	uxtb	r3, r3
 80056da:	|        |   72bb      	strb	r3, [r7, #10]
			data = *(__IO uint8_t *)(&SPIx->DR);
 80056dc:	|        |   687b      	ldr	r3, [r7, #4]
 80056de:	|        |   330c      	adds	r3, #12
 80056e0:	|        |   781b      	ldrb	r3, [r3, #0]
 80056e2:	|        |   b2db      	uxtb	r3, r3
 80056e4:	|        |   72fb      	strb	r3, [r7, #11]
			if(status == 0){
 80056e6:	|        |   7abb      	ldrb	r3, [r7, #10]
 80056e8:	|        |   b2db      	uxtb	r3, r3
 80056ea:	|        |   2b00      	cmp	r3, #0
 80056ec:	|     /--|-- d109      	bne.n	8005702 <spi_recieve8+0x6c>
				return data;
 80056ee:	|     |  |   7afb      	ldrb	r3, [r7, #11]
 80056f0:	|     |  |   b2db      	uxtb	r3, r3
 80056f2:	|  /--|--|-- e010      	b.n	8005716 <spi_recieve8+0x80>
			}
		}
		else{
			counter += 1;
 80056f4:	|  |  |  \-> 68fb      	ldr	r3, [r7, #12]
 80056f6:	|  |  |      3301      	adds	r3, #1
 80056f8:	|  |  |      60fb      	str	r3, [r7, #12]
			if(counter > 150000){
 80056fa:	|  |  |      68fb      	ldr	r3, [r7, #12]
 80056fc:	|  |  |      4a09      	ldr	r2, [pc, #36]	; (8005724 <spi_recieve8+0x8e>)
 80056fe:	|  |  |      4293      	cmp	r3, r2
 8005700:	|  |  |  /-- d804      	bhi.n	800570c <spi_recieve8+0x76>
				break;
			}
		}
		if(status == 0){
 8005702:	|  |  \--|-> 7abb      	ldrb	r3, [r7, #10]
 8005704:	|  |     |   b2db      	uxtb	r3, r3
 8005706:	|  |     |   2b00      	cmp	r3, #0
 8005708:	|  |  /--|-- d002      	beq.n	8005710 <spi_recieve8+0x7a>
		if((SPIx->SR & SPI_SR_RXNE) == SPI_SR_RXNE){  // if recieve buffer is not empty then read it
 800570a:	\--|--|--|-- e7d9      	b.n	80056c0 <spi_recieve8+0x2a>
				break;
 800570c:	   |  |  \-> bf00      	nop
 800570e:	   |  |  /-- e000      	b.n	8005712 <spi_recieve8+0x7c>
			break;
 8005710:	   |  \--|-> bf00      	nop
		}
	}
	// while(!(SPIx->SR & SPI_SR_RXNE));
	// data = *((__IO uint8_t *)&SPIx->DR);

	return data;
 8005712:	   |     \-> 7afb      	ldrb	r3, [r7, #11]
 8005714:	   |         b2db      	uxtb	r3, r3
}
 8005716:	   \-------> 4618      	mov	r0, r3
 8005718:	             3714      	adds	r7, #20
 800571a:	             46bd      	mov	sp, r7
 800571c:	             f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	             4770      	bx	lr
 8005722:	             bf00      	nop
 8005724:	             49f0      	ldr	r1, [pc, #960]	; (8005ae8 <UART_init+0x150>)
 8005726:	             0002      	movs	r2, r0

08005728 <spi_send_array>:
void spi_send_array(SPI_TypeDef *SPIx, uint8_t *data, uint8_t size){
 8005728:	       b580      	push	{r7, lr}
 800572a:	       b086      	sub	sp, #24
 800572c:	       af00      	add	r7, sp, #0
 800572e:	       60f8      	str	r0, [r7, #12]
 8005730:	       60b9      	str	r1, [r7, #8]
 8005732:	       4613      	mov	r3, r2
 8005734:	       71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < size; i++){
 8005736:	       2300      	movs	r3, #0
 8005738:	       617b      	str	r3, [r7, #20]
 800573a:	   /-- e00a      	b.n	8005752 <spi_send_array+0x2a>
		spi_send8(SPIx, (uint8_t)data[i]);
 800573c:	/--|-> 697b      	ldr	r3, [r7, #20]
 800573e:	|  |   68ba      	ldr	r2, [r7, #8]
 8005740:	|  |   4413      	add	r3, r2
 8005742:	|  |   781b      	ldrb	r3, [r3, #0]
 8005744:	|  |   4619      	mov	r1, r3
 8005746:	|  |   68f8      	ldr	r0, [r7, #12]
 8005748:	|  |   f7ff ff8a 	bl	8005660 <spi_send8>
	for(int i = 0; i < size; i++){
 800574c:	|  |   697b      	ldr	r3, [r7, #20]
 800574e:	|  |   3301      	adds	r3, #1
 8005750:	|  |   617b      	str	r3, [r7, #20]
 8005752:	|  \-> 79fb      	ldrb	r3, [r7, #7]
 8005754:	|      697a      	ldr	r2, [r7, #20]
 8005756:	|      429a      	cmp	r2, r3
 8005758:	\----- dbf0      	blt.n	800573c <spi_send_array+0x14>
	}
}
 800575a:	       bf00      	nop
 800575c:	       bf00      	nop
 800575e:	       3718      	adds	r7, #24
 8005760:	       46bd      	mov	sp, r7
 8005762:	       bd80      	pop	{r7, pc}

08005764 <spi_send16>:
void spi_send16(SPI_TypeDef *SPIx, uint16_t data){
 8005764:	    b480      	push	{r7}
 8005766:	    b085      	sub	sp, #20
 8005768:	    af00      	add	r7, sp, #0
 800576a:	    6078      	str	r0, [r7, #4]
 800576c:	    460b      	mov	r3, r1
 800576e:	    807b      	strh	r3, [r7, #2]
	uint8_t littleByte = data & 0xFF;
 8005770:	    887b      	ldrh	r3, [r7, #2]
 8005772:	    73fb      	strb	r3, [r7, #15]
	uint8_t bigByte = (data>>8) & 0xFF;
 8005774:	    887b      	ldrh	r3, [r7, #2]
 8005776:	    0a1b      	lsrs	r3, r3, #8
 8005778:	    b29b      	uxth	r3, r3
 800577a:	    73bb      	strb	r3, [r7, #14]

	while(!(SPIx->SR & SPI_SR_TXE));
 800577c:	    bf00      	nop
 800577e:	/-> 687b      	ldr	r3, [r7, #4]
 8005780:	|   689b      	ldr	r3, [r3, #8]
 8005782:	|   f003 0302 	and.w	r3, r3, #2
 8005786:	|   2b00      	cmp	r3, #0
 8005788:	\-- d0f9      	beq.n	800577e <spi_send16+0x1a>
	SPIx->DR = bigByte;
 800578a:	    7bba      	ldrb	r2, [r7, #14]
 800578c:	    687b      	ldr	r3, [r7, #4]
 800578e:	    60da      	str	r2, [r3, #12]
	while(!(SPIx->SR & SPI_SR_TXE));
 8005790:	    bf00      	nop
 8005792:	/-> 687b      	ldr	r3, [r7, #4]
 8005794:	|   689b      	ldr	r3, [r3, #8]
 8005796:	|   f003 0302 	and.w	r3, r3, #2
 800579a:	|   2b00      	cmp	r3, #0
 800579c:	\-- d0f9      	beq.n	8005792 <spi_send16+0x2e>
	SPIx->DR = littleByte;
 800579e:	    7bfa      	ldrb	r2, [r7, #15]
 80057a0:	    687b      	ldr	r3, [r7, #4]
 80057a2:	    60da      	str	r2, [r3, #12]

}
 80057a4:	    bf00      	nop
 80057a6:	    3714      	adds	r7, #20
 80057a8:	    46bd      	mov	sp, r7
 80057aa:	    f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	    4770      	bx	lr

080057b0 <spi_waiting_read8>:
uint8_t spi_waiting_read8(SPI_TypeDef *SPIx){
 80057b0:	    b480      	push	{r7}
 80057b2:	    b083      	sub	sp, #12
 80057b4:	    af00      	add	r7, sp, #0
 80057b6:	    6078      	str	r0, [r7, #4]
	SPIx->DR = 0;
 80057b8:	    687b      	ldr	r3, [r7, #4]
 80057ba:	    2200      	movs	r2, #0
 80057bc:	    60da      	str	r2, [r3, #12]
	while(!(SPIx->SR & SPI_SR_RXNE));
 80057be:	    bf00      	nop
 80057c0:	/-> 687b      	ldr	r3, [r7, #4]
 80057c2:	|   689b      	ldr	r3, [r3, #8]
 80057c4:	|   f003 0301 	and.w	r3, r3, #1
 80057c8:	|   2b00      	cmp	r3, #0
 80057ca:	\-- d0f9      	beq.n	80057c0 <spi_waiting_read8+0x10>
	return SPIx->DR;
 80057cc:	    687b      	ldr	r3, [r7, #4]
 80057ce:	    68db      	ldr	r3, [r3, #12]
 80057d0:	    b2db      	uxtb	r3, r3
}
 80057d2:	    4618      	mov	r0, r3
 80057d4:	    370c      	adds	r7, #12
 80057d6:	    46bd      	mov	sp, r7
 80057d8:	    f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	    4770      	bx	lr

080057de <spi_request_read8>:
uint8_t spi_request_read8(SPI_TypeDef *SPIx){
 80057de:	    b480      	push	{r7}
 80057e0:	    b083      	sub	sp, #12
 80057e2:	    af00      	add	r7, sp, #0
 80057e4:	    6078      	str	r0, [r7, #4]
	SPIx->DR = 0;
 80057e6:	    687b      	ldr	r3, [r7, #4]
 80057e8:	    2200      	movs	r2, #0
 80057ea:	    60da      	str	r2, [r3, #12]
	while(!(SPIx->SR & SPI_SR_RXNE));
 80057ec:	    bf00      	nop
 80057ee:	/-> 687b      	ldr	r3, [r7, #4]
 80057f0:	|   689b      	ldr	r3, [r3, #8]
 80057f2:	|   f003 0301 	and.w	r3, r3, #1
 80057f6:	|   2b00      	cmp	r3, #0
 80057f8:	\-- d0f9      	beq.n	80057ee <spi_request_read8+0x10>
	return SPIx->DR;
 80057fa:	    687b      	ldr	r3, [r7, #4]
 80057fc:	    68db      	ldr	r3, [r3, #12]
 80057fe:	    b2db      	uxtb	r3, r3
}
 8005800:	    4618      	mov	r0, r3
 8005802:	    370c      	adds	r7, #12
 8005804:	    46bd      	mov	sp, r7
 8005806:	    f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	    4770      	bx	lr

0800580c <__NVIC_EnableIRQ>:
{
 800580c:	    b480      	push	{r7}
 800580e:	    b083      	sub	sp, #12
 8005810:	    af00      	add	r7, sp, #0
 8005812:	    4603      	mov	r3, r0
 8005814:	    71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005816:	    f997 3007 	ldrsb.w	r3, [r7, #7]
 800581a:	    2b00      	cmp	r3, #0
 800581c:	/-- db0b      	blt.n	8005836 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800581e:	|   79fb      	ldrb	r3, [r7, #7]
 8005820:	|   f003 021f 	and.w	r2, r3, #31
 8005824:	|   4907      	ldr	r1, [pc, #28]	; (8005844 <__NVIC_EnableIRQ+0x38>)
 8005826:	|   f997 3007 	ldrsb.w	r3, [r7, #7]
 800582a:	|   095b      	lsrs	r3, r3, #5
 800582c:	|   2001      	movs	r0, #1
 800582e:	|   fa00 f202 	lsl.w	r2, r0, r2
 8005832:	|   f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005836:	\-> bf00      	nop
 8005838:	    370c      	adds	r7, #12
 800583a:	    46bd      	mov	sp, r7
 800583c:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	    4770      	bx	lr
 8005842:	    bf00      	nop
 8005844:	    e100      	b.n	8005a48 <UART_init+0xb0>
 8005846:	    e000      	b.n	800584a <TIM_init+0x2>

08005848 <TIM_init>:
#include "tim.h"

void TIM_init(TIM_TypeDef *TIMx, uint32_t delay, uint8_t loop_mode){
 8005848:	          b580      	push	{r7, lr}
 800584a:	          b086      	sub	sp, #24
 800584c:	          af00      	add	r7, sp, #0
 800584e:	          60f8      	str	r0, [r7, #12]
 8005850:	          60b9      	str	r1, [r7, #8]
 8005852:	          4613      	mov	r3, r2
 8005854:	          71fb      	strb	r3, [r7, #7]

    if(TIMx == TIM2){
 8005856:	          68fb      	ldr	r3, [r7, #12]
 8005858:	          f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585c:	      /-- d106      	bne.n	800586c <TIM_init+0x24>
        RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 800585e:	      |   4b3b      	ldr	r3, [pc, #236]	; (800594c <TIM_init+0x104>)
 8005860:	      |   6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005862:	      |   4a3a      	ldr	r2, [pc, #232]	; (800594c <TIM_init+0x104>)
 8005864:	      |   f043 0301 	orr.w	r3, r3, #1
 8005868:	      |   6593      	str	r3, [r2, #88]	; 0x58
 800586a:	   /--|-- e01f      	b.n	80058ac <TIM_init+0x64>
    }
    else if(TIMx == TIM15){
 800586c:	   |  \-> 68fb      	ldr	r3, [r7, #12]
 800586e:	   |      4a38      	ldr	r2, [pc, #224]	; (8005950 <TIM_init+0x108>)
 8005870:	   |      4293      	cmp	r3, r2
 8005872:	   |  /-- d106      	bne.n	8005882 <TIM_init+0x3a>
    	RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;
 8005874:	   |  |   4b35      	ldr	r3, [pc, #212]	; (800594c <TIM_init+0x104>)
 8005876:	   |  |   6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005878:	   |  |   4a34      	ldr	r2, [pc, #208]	; (800594c <TIM_init+0x104>)
 800587a:	   |  |   f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800587e:	   |  |   6613      	str	r3, [r2, #96]	; 0x60
 8005880:	   +--|-- e014      	b.n	80058ac <TIM_init+0x64>
    }
    else if(TIMx == TIM16){
 8005882:	   |  \-> 68fb      	ldr	r3, [r7, #12]
 8005884:	   |      4a33      	ldr	r2, [pc, #204]	; (8005954 <TIM_init+0x10c>)
 8005886:	   |      4293      	cmp	r3, r2
 8005888:	   |  /-- d106      	bne.n	8005898 <TIM_init+0x50>
    	RCC->APB2ENR |= RCC_APB2ENR_TIM16EN;
 800588a:	   |  |   4b30      	ldr	r3, [pc, #192]	; (800594c <TIM_init+0x104>)
 800588c:	   |  |   6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588e:	   |  |   4a2f      	ldr	r2, [pc, #188]	; (800594c <TIM_init+0x104>)
 8005890:	   |  |   f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005894:	   |  |   6613      	str	r3, [r2, #96]	; 0x60
 8005896:	   +--|-- e009      	b.n	80058ac <TIM_init+0x64>
    }
    else if(TIMx == TIM7){
 8005898:	   |  \-> 68fb      	ldr	r3, [r7, #12]
 800589a:	   |      4a2f      	ldr	r2, [pc, #188]	; (8005958 <TIM_init+0x110>)
 800589c:	   |      4293      	cmp	r3, r2
 800589e:	   +----- d105      	bne.n	80058ac <TIM_init+0x64>
    	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM7EN;
 80058a0:	   |      4b2a      	ldr	r3, [pc, #168]	; (800594c <TIM_init+0x104>)
 80058a2:	   |      6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a4:	   |      4a29      	ldr	r2, [pc, #164]	; (800594c <TIM_init+0x104>)
 80058a6:	   |      f043 0320 	orr.w	r3, r3, #32
 80058aa:	   |      6593      	str	r3, [r2, #88]	; 0x58
    }

    // (PSC + 1) * ARR = (AHB_freq / 1000) (for 1 milli)    (AHB_freq = 80MHz)
    TIMx->PSC = 39999;
 80058ac:	   \----> 68fb      	ldr	r3, [r7, #12]
 80058ae:	          f649 423f 	movw	r2, #39999	; 0x9c3f
 80058b2:	          629a      	str	r2, [r3, #40]	; 0x28
    TIMx->ARR = 2 * delay;
 80058b4:	          68bb      	ldr	r3, [r7, #8]
 80058b6:	          005a      	lsls	r2, r3, #1
 80058b8:	          68fb      	ldr	r3, [r7, #12]
 80058ba:	          62da      	str	r2, [r3, #44]	; 0x2c

    if(!loop_mode){
 80058bc:	          79fb      	ldrb	r3, [r7, #7]
 80058be:	          2b00      	cmp	r3, #0
 80058c0:	      /-- d111      	bne.n	80058e6 <TIM_init+0x9e>
    	TIMx->CR1 |= TIM_CR1_OPM;
 80058c2:	      |   68fb      	ldr	r3, [r7, #12]
 80058c4:	      |   681b      	ldr	r3, [r3, #0]
 80058c6:	      |   f043 0208 	orr.w	r2, r3, #8
 80058ca:	      |   68fb      	ldr	r3, [r7, #12]
 80058cc:	      |   601a      	str	r2, [r3, #0]
        TIMx->EGR |= TIM_EGR_UG;
 80058ce:	      |   68fb      	ldr	r3, [r7, #12]
 80058d0:	      |   695b      	ldr	r3, [r3, #20]
 80058d2:	      |   f043 0201 	orr.w	r2, r3, #1
 80058d6:	      |   68fb      	ldr	r3, [r7, #12]
 80058d8:	      |   615a      	str	r2, [r3, #20]
        TIMx->SR &= ~TIM_SR_UIF;
 80058da:	      |   68fb      	ldr	r3, [r7, #12]
 80058dc:	      |   691b      	ldr	r3, [r3, #16]
 80058de:	      |   f023 0201 	bic.w	r2, r3, #1
 80058e2:	      |   68fb      	ldr	r3, [r7, #12]
 80058e4:	      |   611a      	str	r2, [r3, #16]
    }

    TIMx->DIER |= TIM_DIER_UIE;
 80058e6:	      \-> 68fb      	ldr	r3, [r7, #12]
 80058e8:	          68db      	ldr	r3, [r3, #12]
 80058ea:	          f043 0201 	orr.w	r2, r3, #1
 80058ee:	          68fb      	ldr	r3, [r7, #12]
 80058f0:	          60da      	str	r2, [r3, #12]

    if(TIMx == TIM2){
 80058f2:	          68fb      	ldr	r3, [r7, #12]
 80058f4:	          f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f8:	      /-- d103      	bne.n	8005902 <TIM_init+0xba>
        NVIC_EnableIRQ(TIM2_IRQn);
 80058fa:	      |   201c      	movs	r0, #28
 80058fc:	      |   f7ff ff86 	bl	800580c <__NVIC_EnableIRQ>
 8005900:	   /--|-- e006      	b.n	8005910 <TIM_init+0xc8>
    }
    else if(TIMx == TIM7){
 8005902:	   |  \-> 68fb      	ldr	r3, [r7, #12]
 8005904:	   |      4a14      	ldr	r2, [pc, #80]	; (8005958 <TIM_init+0x110>)
 8005906:	   |      4293      	cmp	r3, r2
 8005908:	   +----- d102      	bne.n	8005910 <TIM_init+0xc8>
        NVIC_EnableIRQ(TIM7_IRQn);
 800590a:	   |      2037      	movs	r0, #55	; 0x37
 800590c:	   |      f7ff ff7e 	bl	800580c <__NVIC_EnableIRQ>
    }
    TIMx->CR1 |= TIM_CR1_CEN;
 8005910:	   \----> 68fb      	ldr	r3, [r7, #12]
 8005912:	          681b      	ldr	r3, [r3, #0]
 8005914:	          f043 0201 	orr.w	r2, r3, #1
 8005918:	          68fb      	ldr	r3, [r7, #12]
 800591a:	          601a      	str	r2, [r3, #0]

    if(TIMx == TIM15 || TIMx == TIM16){
 800591c:	          68fb      	ldr	r3, [r7, #12]
 800591e:	          4a0c      	ldr	r2, [pc, #48]	; (8005950 <TIM_init+0x108>)
 8005920:	          4293      	cmp	r3, r2
 8005922:	      /-- d003      	beq.n	800592c <TIM_init+0xe4>
 8005924:	      |   68fb      	ldr	r3, [r7, #12]
 8005926:	      |   4a0b      	ldr	r2, [pc, #44]	; (8005954 <TIM_init+0x10c>)
 8005928:	      |   4293      	cmp	r3, r2
 800592a:	/-----|-- d10a      	bne.n	8005942 <TIM_init+0xfa>
        for(uint16_t i = 0; i < 30000; i++);
 800592c:	|     \-> 2300      	movs	r3, #0
 800592e:	|         82fb      	strh	r3, [r7, #22]
 8005930:	|     /-- e002      	b.n	8005938 <TIM_init+0xf0>
 8005932:	|  /--|-> 8afb      	ldrh	r3, [r7, #22]
 8005934:	|  |  |   3301      	adds	r3, #1
 8005936:	|  |  |   82fb      	strh	r3, [r7, #22]
 8005938:	|  |  \-> 8afb      	ldrh	r3, [r7, #22]
 800593a:	|  |      f247 522f 	movw	r2, #29999	; 0x752f
 800593e:	|  |      4293      	cmp	r3, r2
 8005940:	|  \----- d9f7      	bls.n	8005932 <TIM_init+0xea>
    }
}
 8005942:	\-------> bf00      	nop
 8005944:	          3718      	adds	r7, #24
 8005946:	          46bd      	mov	sp, r7
 8005948:	          bd80      	pop	{r7, pc}
 800594a:	          bf00      	nop
 800594c:	          1000      	asrs	r0, r0, #32
 800594e:	          4002      	ands	r2, r0
 8005950:	          4000      	ands	r0, r0
 8005952:	          4001      	ands	r1, r0
 8005954:	          4400      	add	r0, r0
 8005956:	          4001      	ands	r1, r0
 8005958:	          1400      	asrs	r0, r0, #16
 800595a:	          4000      	ands	r0, r0

0800595c <__NVIC_EnableIRQ>:
{
 800595c:	    b480      	push	{r7}
 800595e:	    b083      	sub	sp, #12
 8005960:	    af00      	add	r7, sp, #0
 8005962:	    4603      	mov	r3, r0
 8005964:	    71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005966:	    f997 3007 	ldrsb.w	r3, [r7, #7]
 800596a:	    2b00      	cmp	r3, #0
 800596c:	/-- db0b      	blt.n	8005986 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800596e:	|   79fb      	ldrb	r3, [r7, #7]
 8005970:	|   f003 021f 	and.w	r2, r3, #31
 8005974:	|   4907      	ldr	r1, [pc, #28]	; (8005994 <__NVIC_EnableIRQ+0x38>)
 8005976:	|   f997 3007 	ldrsb.w	r3, [r7, #7]
 800597a:	|   095b      	lsrs	r3, r3, #5
 800597c:	|   2001      	movs	r0, #1
 800597e:	|   fa00 f202 	lsl.w	r2, r0, r2
 8005982:	|   f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005986:	\-> bf00      	nop
 8005988:	    370c      	adds	r7, #12
 800598a:	    46bd      	mov	sp, r7
 800598c:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	    4770      	bx	lr
 8005992:	    bf00      	nop
 8005994:	    e100      	b.n	8005b98 <UART_tx_string+0x2c>
 8005996:	    e000      	b.n	800599a <UART_init+0x2>

08005998 <UART_init>:

#define APB2_CLK 4000000
#define APB1_CLK 4000000
// TODO: добавить в библиотеку rcc.h расчет тактовой частоты RCC_GetPCLK1Freq() RCC_GetPCLK2Freq()
// путем вычитывания значений множителей регистров тактирования
void UART_init(USART_TypeDef *USARTx, uint32_t baudrate, uint8_t duplex_mode){
 8005998:	          b580      	push	{r7, lr}
 800599a:	          b084      	sub	sp, #16
 800599c:	          af00      	add	r7, sp, #0
 800599e:	          60f8      	str	r0, [r7, #12]
 80059a0:	          60b9      	str	r1, [r7, #8]
 80059a2:	          4613      	mov	r3, r2
 80059a4:	          71fb      	strb	r3, [r7, #7]
	/* gpio init example
	gpio_init(USART1_RX, PA10_USART1_RX, Open_drain, no_pull, Input);
	gpio_init(USART1_TX, PA9_USART1_TX, Push_pull, no_pull, High_speed);
	*/
	USARTx->CR1 = 0;
 80059a6:	          68fb      	ldr	r3, [r7, #12]
 80059a8:	          2200      	movs	r2, #0
 80059aa:	          601a      	str	r2, [r3, #0]
	USARTx->CR2 = 0;
 80059ac:	          68fb      	ldr	r3, [r7, #12]
 80059ae:	          2200      	movs	r2, #0
 80059b0:	          605a      	str	r2, [r3, #4]
	USARTx->CR3 = 0;
 80059b2:	          68fb      	ldr	r3, [r7, #12]
 80059b4:	          2200      	movs	r2, #0
 80059b6:	          609a      	str	r2, [r3, #8]
    USARTx->ICR = 0xFFFF;
 80059b8:	          68fb      	ldr	r3, [r7, #12]
 80059ba:	          f64f 72ff 	movw	r2, #65535	; 0xffff
 80059be:	          621a      	str	r2, [r3, #32]


	if(USARTx == USART1){
 80059c0:	          68fb      	ldr	r3, [r7, #12]
 80059c2:	          4a53      	ldr	r2, [pc, #332]	; (8005b10 <UART_init+0x178>)
 80059c4:	          4293      	cmp	r3, r2
 80059c6:	      /-- d10f      	bne.n	80059e8 <UART_init+0x50>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80059c8:	      |   4b52      	ldr	r3, [pc, #328]	; (8005b14 <UART_init+0x17c>)
 80059ca:	      |   6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059cc:	      |   4a51      	ldr	r2, [pc, #324]	; (8005b14 <UART_init+0x17c>)
 80059ce:	      |   f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059d2:	      |   6613      	str	r3, [r2, #96]	; 0x60
		NVIC_EnableIRQ(USART1_IRQn);
 80059d4:	      |   2025      	movs	r0, #37	; 0x25
 80059d6:	      |   f7ff ffc1 	bl	800595c <__NVIC_EnableIRQ>
		USARTx->BRR = APB2_CLK / baudrate;
 80059da:	      |   4a4f      	ldr	r2, [pc, #316]	; (8005b18 <UART_init+0x180>)
 80059dc:	      |   68bb      	ldr	r3, [r7, #8]
 80059de:	      |   fbb2 f2f3 	udiv	r2, r2, r3
 80059e2:	      |   68fb      	ldr	r3, [r7, #12]
 80059e4:	      |   60da      	str	r2, [r3, #12]
 80059e6:	   /--|-- e03a      	b.n	8005a5e <UART_init+0xc6>
	}
	else if(USARTx == USART2){
 80059e8:	   |  \-> 68fb      	ldr	r3, [r7, #12]
 80059ea:	   |      4a4c      	ldr	r2, [pc, #304]	; (8005b1c <UART_init+0x184>)
 80059ec:	   |      4293      	cmp	r3, r2
 80059ee:	   |  /-- d10f      	bne.n	8005a10 <UART_init+0x78>
		RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 80059f0:	   |  |   4b48      	ldr	r3, [pc, #288]	; (8005b14 <UART_init+0x17c>)
 80059f2:	   |  |   6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f4:	   |  |   4a47      	ldr	r2, [pc, #284]	; (8005b14 <UART_init+0x17c>)
 80059f6:	   |  |   f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059fa:	   |  |   6593      	str	r3, [r2, #88]	; 0x58
		NVIC_EnableIRQ(USART2_IRQn);
 80059fc:	   |  |   2026      	movs	r0, #38	; 0x26
 80059fe:	   |  |   f7ff ffad 	bl	800595c <__NVIC_EnableIRQ>
		USARTx->BRR = APB1_CLK / baudrate;
 8005a02:	   |  |   4a45      	ldr	r2, [pc, #276]	; (8005b18 <UART_init+0x180>)
 8005a04:	   |  |   68bb      	ldr	r3, [r7, #8]
 8005a06:	   |  |   fbb2 f2f3 	udiv	r2, r2, r3
 8005a0a:	   |  |   68fb      	ldr	r3, [r7, #12]
 8005a0c:	   |  |   60da      	str	r2, [r3, #12]
 8005a0e:	   +--|-- e026      	b.n	8005a5e <UART_init+0xc6>
	}
	else if(USARTx == USART3){
 8005a10:	   |  \-> 68fb      	ldr	r3, [r7, #12]
 8005a12:	   |      4a43      	ldr	r2, [pc, #268]	; (8005b20 <UART_init+0x188>)
 8005a14:	   |      4293      	cmp	r3, r2
 8005a16:	   |  /-- d10f      	bne.n	8005a38 <UART_init+0xa0>
		RCC->APB1ENR1 |= RCC_APB1ENR1_USART3EN;
 8005a18:	   |  |   4b3e      	ldr	r3, [pc, #248]	; (8005b14 <UART_init+0x17c>)
 8005a1a:	   |  |   6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1c:	   |  |   4a3d      	ldr	r2, [pc, #244]	; (8005b14 <UART_init+0x17c>)
 8005a1e:	   |  |   f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a22:	   |  |   6593      	str	r3, [r2, #88]	; 0x58
		NVIC_EnableIRQ(USART3_IRQn);
 8005a24:	   |  |   2027      	movs	r0, #39	; 0x27
 8005a26:	   |  |   f7ff ff99 	bl	800595c <__NVIC_EnableIRQ>
		USARTx->BRR = APB1_CLK / baudrate;
 8005a2a:	   |  |   4a3b      	ldr	r2, [pc, #236]	; (8005b18 <UART_init+0x180>)
 8005a2c:	   |  |   68bb      	ldr	r3, [r7, #8]
 8005a2e:	   |  |   fbb2 f2f3 	udiv	r2, r2, r3
 8005a32:	   |  |   68fb      	ldr	r3, [r7, #12]
 8005a34:	   |  |   60da      	str	r2, [r3, #12]
 8005a36:	   +--|-- e012      	b.n	8005a5e <UART_init+0xc6>
	}
	else if(USARTx == LPUART1){
 8005a38:	   |  \-> 68fb      	ldr	r3, [r7, #12]
 8005a3a:	   |      4a3a      	ldr	r2, [pc, #232]	; (8005b24 <UART_init+0x18c>)
 8005a3c:	   |      4293      	cmp	r3, r2
 8005a3e:	/--|----- d162      	bne.n	8005b06 <UART_init+0x16e>
		RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN;
 8005a40:	|  |      4b34      	ldr	r3, [pc, #208]	; (8005b14 <UART_init+0x17c>)
 8005a42:	|  |      6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a44:	|  |      4a33      	ldr	r2, [pc, #204]	; (8005b14 <UART_init+0x17c>)
 8005a46:	|  |      f043 0301 	orr.w	r3, r3, #1
 8005a4a:	|  |      65d3      	str	r3, [r2, #92]	; 0x5c
		NVIC_EnableIRQ(LPUART1_IRQn);
 8005a4c:	|  |      2046      	movs	r0, #70	; 0x46
 8005a4e:	|  |      f7ff ff85 	bl	800595c <__NVIC_EnableIRQ>
		USARTx->BRR = APB1_CLK / baudrate;
 8005a52:	|  |      4a31      	ldr	r2, [pc, #196]	; (8005b18 <UART_init+0x180>)
 8005a54:	|  |      68bb      	ldr	r3, [r7, #8]
 8005a56:	|  |      fbb2 f2f3 	udiv	r2, r2, r3
 8005a5a:	|  |      68fb      	ldr	r3, [r7, #12]
 8005a5c:	|  |      60da      	str	r2, [r3, #12]
	}
	else return;

	USARTx->CR1 &= ~(0x01 << 28); //word length 8 bit
 8005a5e:	|  \----> 68fb      	ldr	r3, [r7, #12]
 8005a60:	|         681b      	ldr	r3, [r3, #0]
 8005a62:	|         f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a66:	|         68fb      	ldr	r3, [r7, #12]
 8005a68:	|         601a      	str	r2, [r3, #0]
	USARTx->CR1 &= ~(0x01 << 12); //word length 8 bit
 8005a6a:	|         68fb      	ldr	r3, [r7, #12]
 8005a6c:	|         681b      	ldr	r3, [r3, #0]
 8005a6e:	|         f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a72:	|         68fb      	ldr	r3, [r7, #12]
 8005a74:	|         601a      	str	r2, [r3, #0]

	USARTx->CR1 &= ~(0x01 << 10); //parity disable
 8005a76:	|         68fb      	ldr	r3, [r7, #12]
 8005a78:	|         681b      	ldr	r3, [r3, #0]
 8005a7a:	|         f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a7e:	|         68fb      	ldr	r3, [r7, #12]
 8005a80:	|         601a      	str	r2, [r3, #0]
//	USARTx->CR1 |= parity_control_ << 10;

	USARTx->CR2 &= ~(0x03 << 12); //1 stop bit
 8005a82:	|         68fb      	ldr	r3, [r7, #12]
 8005a84:	|         685b      	ldr	r3, [r3, #4]
 8005a86:	|         f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a8a:	|         68fb      	ldr	r3, [r7, #12]
 8005a8c:	|         605a      	str	r2, [r3, #4]
//	USARTx->CR2 |= stop_bits_ << 12;
	if(duplex_mode==HALF_DUPLEX){
 8005a8e:	|         79fb      	ldrb	r3, [r7, #7]
 8005a90:	|         2b01      	cmp	r3, #1
 8005a92:	|  /----- d125      	bne.n	8005ae0 <UART_init+0x148>
		// SCEN, LINEN, SCEN, IREN must be reset
		USARTx->CR2 &= ~(0x01 << USART_CR2_LINEN_Pos);
 8005a94:	|  |      68fb      	ldr	r3, [r7, #12]
 8005a96:	|  |      685b      	ldr	r3, [r3, #4]
 8005a98:	|  |      f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a9c:	|  |      68fb      	ldr	r3, [r7, #12]
 8005a9e:	|  |      605a      	str	r2, [r3, #4]
		USARTx->CR2 &= ~(0x01 << USART_CR2_CLKEN_Pos);
 8005aa0:	|  |      68fb      	ldr	r3, [r7, #12]
 8005aa2:	|  |      685b      	ldr	r3, [r3, #4]
 8005aa4:	|  |      f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005aa8:	|  |      68fb      	ldr	r3, [r7, #12]
 8005aaa:	|  |      605a      	str	r2, [r3, #4]
		USARTx->CR3 &= ~(0x01 << USART_CR3_SCEN_Pos);
 8005aac:	|  |      68fb      	ldr	r3, [r7, #12]
 8005aae:	|  |      689b      	ldr	r3, [r3, #8]
 8005ab0:	|  |      f023 0220 	bic.w	r2, r3, #32
 8005ab4:	|  |      68fb      	ldr	r3, [r7, #12]
 8005ab6:	|  |      609a      	str	r2, [r3, #8]
		USARTx->CR3 &= ~(0x01 << USART_CR3_IREN_Pos);
 8005ab8:	|  |      68fb      	ldr	r3, [r7, #12]
 8005aba:	|  |      689b      	ldr	r3, [r3, #8]
 8005abc:	|  |      f023 0202 	bic.w	r2, r3, #2
 8005ac0:	|  |      68fb      	ldr	r3, [r7, #12]
 8005ac2:	|  |      609a      	str	r2, [r3, #8]
		// set duplex mode
		USARTx->CR3 &= ~(0x01 << USART_CR3_HDSEL_Pos);
 8005ac4:	|  |      68fb      	ldr	r3, [r7, #12]
 8005ac6:	|  |      689b      	ldr	r3, [r3, #8]
 8005ac8:	|  |      f023 0208 	bic.w	r2, r3, #8
 8005acc:	|  |      68fb      	ldr	r3, [r7, #12]
 8005ace:	|  |      609a      	str	r2, [r3, #8]
		USARTx->CR3 |= duplex_mode << USART_CR3_HDSEL_Pos;
 8005ad0:	|  |      68fb      	ldr	r3, [r7, #12]
 8005ad2:	|  |      689b      	ldr	r3, [r3, #8]
 8005ad4:	|  |      79fa      	ldrb	r2, [r7, #7]
 8005ad6:	|  |      00d2      	lsls	r2, r2, #3
 8005ad8:	|  |      431a      	orrs	r2, r3
 8005ada:	|  |      68fb      	ldr	r3, [r7, #12]
 8005adc:	|  |      609a      	str	r2, [r3, #8]
 8005ade:	|  |  /-- e005      	b.n	8005aec <UART_init+0x154>
	}
	else{
		USARTx->CR1 |= USART_CR1_RXNEIE; // RXNE interrupt ON
 8005ae0:	|  \--|-> 68fb      	ldr	r3, [r7, #12]
 8005ae2:	|     |   681b      	ldr	r3, [r3, #0]
 8005ae4:	|     |   f043 0220 	orr.w	r2, r3, #32
 8005ae8:	|     |   68fb      	ldr	r3, [r7, #12]
 8005aea:	|     |   601a      	str	r2, [r3, #0]
	}
    USARTx->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8005aec:	|     \-> 68fb      	ldr	r3, [r7, #12]
 8005aee:	|         681b      	ldr	r3, [r3, #0]
 8005af0:	|         f043 020c 	orr.w	r2, r3, #12
 8005af4:	|         68fb      	ldr	r3, [r7, #12]
 8005af6:	|         601a      	str	r2, [r3, #0]
	USARTx->CR1 |= USART_CR1_UE; // enable USART
 8005af8:	|         68fb      	ldr	r3, [r7, #12]
 8005afa:	|         681b      	ldr	r3, [r3, #0]
 8005afc:	|         f043 0201 	orr.w	r2, r3, #1
 8005b00:	|         68fb      	ldr	r3, [r7, #12]
 8005b02:	|         601a      	str	r2, [r3, #0]
 8005b04:	|     /-- e000      	b.n	8005b08 <UART_init+0x170>
	else return;
 8005b06:	\-----|-> bf00      	nop

}
 8005b08:	      \-> 3710      	adds	r7, #16
 8005b0a:	          46bd      	mov	sp, r7
 8005b0c:	          bd80      	pop	{r7, pc}
 8005b0e:	          bf00      	nop
 8005b10:	          3800      	subs	r0, #0
 8005b12:	          4001      	ands	r1, r0
 8005b14:	          1000      	asrs	r0, r0, #32
 8005b16:	          4002      	ands	r2, r0
 8005b18:	          0900      	lsrs	r0, r0, #4
 8005b1a:	          003d      	movs	r5, r7
 8005b1c:	          4400      	add	r0, r0
 8005b1e:	          4000      	ands	r0, r0
 8005b20:	          4800      	ldr	r0, [pc, #0]	; (8005b24 <UART_init+0x18c>)
 8005b22:	          4000      	ands	r0, r0
 8005b24:	          8000      	strh	r0, [r0, #0]
 8005b26:	          4000      	ands	r0, r0

08005b28 <UART_tx>:
void UART_tx(USART_TypeDef *USARTx, uint8_t data){
 8005b28:	       b480      	push	{r7}
 8005b2a:	       b085      	sub	sp, #20
 8005b2c:	       af00      	add	r7, sp, #0
 8005b2e:	       6078      	str	r0, [r7, #4]
 8005b30:	       460b      	mov	r3, r1
 8005b32:	       70fb      	strb	r3, [r7, #3]
    int16_t timeout = 10000;
 8005b34:	       f242 7310 	movw	r3, #10000	; 0x2710
 8005b38:	       81fb      	strh	r3, [r7, #14]
	while(!(USARTx->ISR & USART_ISR_TC) && timeout--);
 8005b3a:	       bf00      	nop
 8005b3c:	/----> 687b      	ldr	r3, [r7, #4]
 8005b3e:	|      69db      	ldr	r3, [r3, #28]
 8005b40:	|      f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b44:	|      2b00      	cmp	r3, #0
 8005b46:	|  /-- d107      	bne.n	8005b58 <UART_tx+0x30>
 8005b48:	|  |   f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b4c:	|  |   b29a      	uxth	r2, r3
 8005b4e:	|  |   3a01      	subs	r2, #1
 8005b50:	|  |   b292      	uxth	r2, r2
 8005b52:	|  |   81fa      	strh	r2, [r7, #14]
 8005b54:	|  |   2b00      	cmp	r3, #0
 8005b56:	\--|-- d1f1      	bne.n	8005b3c <UART_tx+0x14>
	USARTx->TDR = data;
 8005b58:	   \-> 78fb      	ldrb	r3, [r7, #3]
 8005b5a:	       b29a      	uxth	r2, r3
 8005b5c:	       687b      	ldr	r3, [r7, #4]
 8005b5e:	       851a      	strh	r2, [r3, #40]	; 0x28
}
 8005b60:	       bf00      	nop
 8005b62:	       3714      	adds	r7, #20
 8005b64:	       46bd      	mov	sp, r7
 8005b66:	       f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	       4770      	bx	lr

08005b6c <UART_tx_string>:

void UART_tx_string(USART_TypeDef *USARTx, char *array){
 8005b6c:	       b580      	push	{r7, lr}
 8005b6e:	       b084      	sub	sp, #16
 8005b70:	       af00      	add	r7, sp, #0
 8005b72:	       6078      	str	r0, [r7, #4]
 8005b74:	       6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; array[i] != '\0'; i++) {
 8005b76:	       2300      	movs	r3, #0
 8005b78:	       73fb      	strb	r3, [r7, #15]
 8005b7a:	   /-- e00a      	b.n	8005b92 <UART_tx_string+0x26>
		UART_tx(USARTx, array[i]);
 8005b7c:	/--|-> 7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	|  |   683a      	ldr	r2, [r7, #0]
 8005b80:	|  |   4413      	add	r3, r2
 8005b82:	|  |   781b      	ldrb	r3, [r3, #0]
 8005b84:	|  |   4619      	mov	r1, r3
 8005b86:	|  |   6878      	ldr	r0, [r7, #4]
 8005b88:	|  |   f7ff ffce 	bl	8005b28 <UART_tx>
	for(uint8_t i = 0; array[i] != '\0'; i++) {
 8005b8c:	|  |   7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	|  |   3301      	adds	r3, #1
 8005b90:	|  |   73fb      	strb	r3, [r7, #15]
 8005b92:	|  \-> 7bfb      	ldrb	r3, [r7, #15]
 8005b94:	|      683a      	ldr	r2, [r7, #0]
 8005b96:	|      4413      	add	r3, r2
 8005b98:	|      781b      	ldrb	r3, [r3, #0]
 8005b9a:	|      2b00      	cmp	r3, #0
 8005b9c:	\----- d1ee      	bne.n	8005b7c <UART_tx_string+0x10>
	}
}
 8005b9e:	       bf00      	nop
 8005ba0:	       bf00      	nop
 8005ba2:	       3710      	adds	r7, #16
 8005ba4:	       46bd      	mov	sp, r7
 8005ba6:	       bd80      	pop	{r7, pc}

08005ba8 <SysTick_Handler>:
#include "delay.h"

volatile static uint32_t count = 0;
volatile static uint32_t delay_count = 0;
void SysTick_Handler(){
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
	count++;
 8005bac:	4b07      	ldr	r3, [pc, #28]	; (8005bcc <SysTick_Handler+0x24>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	4a06      	ldr	r2, [pc, #24]	; (8005bcc <SysTick_Handler+0x24>)
 8005bb4:	6013      	str	r3, [r2, #0]
	delay_count++;
 8005bb6:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <SysTick_Handler+0x28>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	4a04      	ldr	r2, [pc, #16]	; (8005bd0 <SysTick_Handler+0x28>)
 8005bbe:	6013      	str	r3, [r2, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	3c74      	subs	r4, #116	; 0x74
 8005bce:	2000      	movs	r0, #0
 8005bd0:	3c78      	subs	r4, #120	; 0x78
 8005bd2:	2000      	movs	r0, #0

08005bd4 <Delay>:
void Delay(int milli){
 8005bd4:	    b480      	push	{r7}
 8005bd6:	    b083      	sub	sp, #12
 8005bd8:	    af00      	add	r7, sp, #0
 8005bda:	    6078      	str	r0, [r7, #4]
	delay_count = 0;
 8005bdc:	    4b08      	ldr	r3, [pc, #32]	; (8005c00 <Delay+0x2c>)
 8005bde:	    2200      	movs	r2, #0
 8005be0:	    601a      	str	r2, [r3, #0]
	while(delay_count < milli);
 8005be2:	    bf00      	nop
 8005be4:	/-> 4b06      	ldr	r3, [pc, #24]	; (8005c00 <Delay+0x2c>)
 8005be6:	|   681a      	ldr	r2, [r3, #0]
 8005be8:	|   687b      	ldr	r3, [r7, #4]
 8005bea:	|   429a      	cmp	r2, r3
 8005bec:	\-- d3fa      	bcc.n	8005be4 <Delay+0x10>
	delay_count = 0;
 8005bee:	    4b04      	ldr	r3, [pc, #16]	; (8005c00 <Delay+0x2c>)
 8005bf0:	    2200      	movs	r2, #0
 8005bf2:	    601a      	str	r2, [r3, #0]
}
 8005bf4:	    bf00      	nop
 8005bf6:	    370c      	adds	r7, #12
 8005bf8:	    46bd      	mov	sp, r7
 8005bfa:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	    4770      	bx	lr
 8005c00:	    3c78      	subs	r4, #120	; 0x78
 8005c02:	    2000      	movs	r0, #0

08005c04 <Freeze_delay>:
void Freeze_delay(int milli){
 8005c04:	       b480      	push	{r7}
 8005c06:	       b085      	sub	sp, #20
 8005c08:	       af00      	add	r7, sp, #0
 8005c0a:	       6078      	str	r0, [r7, #4]
	for(int counter = 8000 * milli; counter != 0; counter--);
 8005c0c:	       687b      	ldr	r3, [r7, #4]
 8005c0e:	       f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005c12:	       fb02 f303 	mul.w	r3, r2, r3
 8005c16:	       60fb      	str	r3, [r7, #12]
 8005c18:	   /-- e002      	b.n	8005c20 <Freeze_delay+0x1c>
 8005c1a:	/--|-> 68fb      	ldr	r3, [r7, #12]
 8005c1c:	|  |   3b01      	subs	r3, #1
 8005c1e:	|  |   60fb      	str	r3, [r7, #12]
 8005c20:	|  \-> 68fb      	ldr	r3, [r7, #12]
 8005c22:	|      2b00      	cmp	r3, #0
 8005c24:	\----- d1f9      	bne.n	8005c1a <Freeze_delay+0x16>
}
 8005c26:	       bf00      	nop
 8005c28:	       bf00      	nop
 8005c2a:	       3714      	adds	r7, #20
 8005c2c:	       46bd      	mov	sp, r7
 8005c2e:	       f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	       4770      	bx	lr

08005c34 <GetMicro>:
uint32_t GetMicro(){
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
	return count;
 8005c38:	4b03      	ldr	r3, [pc, #12]	; (8005c48 <GetMicro+0x14>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	3c74      	subs	r4, #116	; 0x74
 8005c4a:	2000      	movs	r0, #0

08005c4c <GetMili>:
uint32_t GetMili(){
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
	return count;
 8005c50:	4b03      	ldr	r3, [pc, #12]	; (8005c60 <GetMili+0x14>)
 8005c52:	681b      	ldr	r3, [r3, #0]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	3c74      	subs	r4, #116	; 0x74
 8005c62:	2000      	movs	r0, #0

08005c64 <delay_action>:

void delay_action(uint32_t milli, uint8_t process_num, void (*do_action)()){
 8005c64:	       b590      	push	{r4, r7, lr}
 8005c66:	       b085      	sub	sp, #20
 8005c68:	       af00      	add	r7, sp, #0
 8005c6a:	       60f8      	str	r0, [r7, #12]
 8005c6c:	       460b      	mov	r3, r1
 8005c6e:	       607a      	str	r2, [r7, #4]
 8005c70:	       72fb      	strb	r3, [r7, #11]
	static uint8_t flag[8] = {0};
	static uint32_t counter[8] = {0};

	if(!flag[process_num]){
 8005c72:	       7afb      	ldrb	r3, [r7, #11]
 8005c74:	       4a15      	ldr	r2, [pc, #84]	; (8005ccc <delay_action+0x68>)
 8005c76:	       5cd3      	ldrb	r3, [r2, r3]
 8005c78:	       2b00      	cmp	r3, #0
 8005c7a:	   /-- d10b      	bne.n	8005c94 <delay_action+0x30>
		counter[process_num] = GetMili();
 8005c7c:	   |   7afc      	ldrb	r4, [r7, #11]
 8005c7e:	   |   f7ff ffe5 	bl	8005c4c <GetMili>
 8005c82:	   |   4603      	mov	r3, r0
 8005c84:	   |   4a12      	ldr	r2, [pc, #72]	; (8005cd0 <delay_action+0x6c>)
 8005c86:	   |   f842 3024 	str.w	r3, [r2, r4, lsl #2]
		flag[process_num] = 1;
 8005c8a:	   |   7afb      	ldrb	r3, [r7, #11]
 8005c8c:	   |   4a0f      	ldr	r2, [pc, #60]	; (8005ccc <delay_action+0x68>)
 8005c8e:	   |   2101      	movs	r1, #1
 8005c90:	   |   54d1      	strb	r1, [r2, r3]
			do_action();
			flag[process_num] = 0;
		}
	}

}
 8005c92:	/--|-- e017      	b.n	8005cc4 <delay_action+0x60>
		if(GetMili() - counter[process_num] > milli){
 8005c94:	|  \-> f7ff ffda 	bl	8005c4c <GetMili>
 8005c98:	|      4602      	mov	r2, r0
 8005c9a:	|      7afb      	ldrb	r3, [r7, #11]
 8005c9c:	|      490c      	ldr	r1, [pc, #48]	; (8005cd0 <delay_action+0x6c>)
 8005c9e:	|      f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ca2:	|      1ad3      	subs	r3, r2, r3
 8005ca4:	|      68fa      	ldr	r2, [r7, #12]
 8005ca6:	|      429a      	cmp	r2, r3
 8005ca8:	+----- d20c      	bcs.n	8005cc4 <delay_action+0x60>
			counter[process_num] = GetMili();
 8005caa:	|      7afc      	ldrb	r4, [r7, #11]
 8005cac:	|      f7ff ffce 	bl	8005c4c <GetMili>
 8005cb0:	|      4603      	mov	r3, r0
 8005cb2:	|      4a07      	ldr	r2, [pc, #28]	; (8005cd0 <delay_action+0x6c>)
 8005cb4:	|      f842 3024 	str.w	r3, [r2, r4, lsl #2]
			do_action();
 8005cb8:	|      687b      	ldr	r3, [r7, #4]
 8005cba:	|      4798      	blx	r3
			flag[process_num] = 0;
 8005cbc:	|      7afb      	ldrb	r3, [r7, #11]
 8005cbe:	|      4a03      	ldr	r2, [pc, #12]	; (8005ccc <delay_action+0x68>)
 8005cc0:	|      2100      	movs	r1, #0
 8005cc2:	|      54d1      	strb	r1, [r2, r3]
}
 8005cc4:	\----> bf00      	nop
 8005cc6:	       3714      	adds	r7, #20
 8005cc8:	       46bd      	mov	sp, r7
 8005cca:	       bd90      	pop	{r4, r7, pc}
 8005ccc:	       3c7c      	subs	r4, #124	; 0x7c
 8005cce:	       2000      	movs	r0, #0
 8005cd0:	       3c84      	subs	r4, #132	; 0x84
 8005cd2:	       2000      	movs	r0, #0

08005cd4 <DWT_GetDelta>:
#include "dwt.h"

uint32_t DWT_GetDelta(uint32_t t0) {
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
    return DWT->CYCCNT - t0;
 8005cdc:	4b04      	ldr	r3, [pc, #16]	; (8005cf0 <DWT_GetDelta+0x1c>)
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	1ad3      	subs	r3, r2, r3
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	1000      	asrs	r0, r0, #32
 8005cf2:	e000      	b.n	8005cf6 <DWT_GetMicro+0x2>

08005cf4 <DWT_GetMicro>:

uint32_t DWT_GetMicro() {
 8005cf4:	    b480      	push	{r7}
 8005cf6:	    af00      	add	r7, sp, #0
    return DWT->CYCCNT / 80;
 8005cf8:	    4b05      	ldr	r3, [pc, #20]	; (8005d10 <DWT_GetMicro+0x1c>)
 8005cfa:	    685b      	ldr	r3, [r3, #4]
 8005cfc:	    4a05      	ldr	r2, [pc, #20]	; (8005d14 <DWT_GetMicro+0x20>)
 8005cfe:	    fba2 2303 	umull	r2, r3, r2, r3
 8005d02:	    099b      	lsrs	r3, r3, #6
}
 8005d04:	    4618      	mov	r0, r3
 8005d06:	    46bd      	mov	sp, r7
 8005d08:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	    4770      	bx	lr
 8005d0e:	    bf00      	nop
 8005d10:	    1000      	asrs	r0, r0, #32
 8005d12:	/-- e000      	b.n	8005d16 <DWT_GetMicro+0x22>
 8005d14:	|   cccd      	ldmia	r4!, {r0, r2, r3, r6, r7}
 8005d16:	\-> cccc      	ldmia	r4!, {r2, r3, r6, r7}

08005d18 <DWT_Get_Current_Tick>:

uint32_t DWT_Get_Current_Tick() {
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 8005d1c:	4b03      	ldr	r3, [pc, #12]	; (8005d2c <DWT_Get_Current_Tick+0x14>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	1000      	asrs	r0, r0, #32
 8005d2e:	e000      	b.n	8005d32 <DWT_Elapsed_Tick+0x2>

08005d30 <DWT_Elapsed_Tick>:


uint32_t DWT_Elapsed_Tick(uint32_t t0) {
 8005d30:	       b480      	push	{r7}
 8005d32:	       b083      	sub	sp, #12
 8005d34:	       af00      	add	r7, sp, #0
 8005d36:	       6078      	str	r0, [r7, #4]
    if (DWT->CYCCNT > t0)
 8005d38:	       4b09      	ldr	r3, [pc, #36]	; (8005d60 <DWT_Elapsed_Tick+0x30>)
 8005d3a:	       685b      	ldr	r3, [r3, #4]
 8005d3c:	       687a      	ldr	r2, [r7, #4]
 8005d3e:	       429a      	cmp	r2, r3
 8005d40:	/----- d204      	bcs.n	8005d4c <DWT_Elapsed_Tick+0x1c>
        return DWT->CYCCNT - t0;
 8005d42:	|      4b07      	ldr	r3, [pc, #28]	; (8005d60 <DWT_Elapsed_Tick+0x30>)
 8005d44:	|      685a      	ldr	r2, [r3, #4]
 8005d46:	|      687b      	ldr	r3, [r7, #4]
 8005d48:	|      1ad3      	subs	r3, r2, r3
 8005d4a:	|  /-- e003      	b.n	8005d54 <DWT_Elapsed_Tick+0x24>

    return (uint32_t) ((((uint64_t) 0x100000000) + DWT->CYCCNT) - t0);
 8005d4c:	\--|-> 4b04      	ldr	r3, [pc, #16]	; (8005d60 <DWT_Elapsed_Tick+0x30>)
 8005d4e:	   |   685a      	ldr	r2, [r3, #4]
 8005d50:	   |   687b      	ldr	r3, [r7, #4]
 8005d52:	   |   1ad3      	subs	r3, r2, r3
}
 8005d54:	   \-> 4618      	mov	r0, r3
 8005d56:	       370c      	adds	r7, #12
 8005d58:	       46bd      	mov	sp, r7
 8005d5a:	       f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	       4770      	bx	lr
 8005d60:	       1000      	asrs	r0, r0, #32
 8005d62:	       e000      	b.n	8005d66 <DWT_Init+0x2>

08005d64 <DWT_Init>:


void DWT_Init() {
 8005d64:	    b480      	push	{r7}
 8005d66:	    af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8005d68:	    4b0c      	ldr	r3, [pc, #48]	; (8005d9c <DWT_Init+0x38>)
 8005d6a:	    68db      	ldr	r3, [r3, #12]
 8005d6c:	    f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d70:	    2b00      	cmp	r3, #0
 8005d72:	/-- d10e      	bne.n	8005d92 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005d74:	|   4b09      	ldr	r3, [pc, #36]	; (8005d9c <DWT_Init+0x38>)
 8005d76:	|   68db      	ldr	r3, [r3, #12]
 8005d78:	|   4a08      	ldr	r2, [pc, #32]	; (8005d9c <DWT_Init+0x38>)
 8005d7a:	|   f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d7e:	|   60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8005d80:	|   4b07      	ldr	r3, [pc, #28]	; (8005da0 <DWT_Init+0x3c>)
 8005d82:	|   2200      	movs	r2, #0
 8005d84:	|   605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005d86:	|   4b06      	ldr	r3, [pc, #24]	; (8005da0 <DWT_Init+0x3c>)
 8005d88:	|   681b      	ldr	r3, [r3, #0]
 8005d8a:	|   4a05      	ldr	r2, [pc, #20]	; (8005da0 <DWT_Init+0x3c>)
 8005d8c:	|   f043 0301 	orr.w	r3, r3, #1
 8005d90:	|   6013      	str	r3, [r2, #0]
    }
}
 8005d92:	\-> bf00      	nop
 8005d94:	    46bd      	mov	sp, r7
 8005d96:	    f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	    4770      	bx	lr
 8005d9c:	    edf0 e000 	ldcl	0, cr14, [r0]
 8005da0:	    1000      	asrs	r0, r0, #32
 8005da2:	    e000      	b.n	8005da6 <DWT_Delay_us+0x2>

08005da4 <DWT_Delay_us>:


void DWT_Delay_us(uint32_t us) { // microseconds
 8005da4:	    b580      	push	{r7, lr}
 8005da6:	    b084      	sub	sp, #16
 8005da8:	    af00      	add	r7, sp, #0
 8005daa:	    6078      	str	r0, [r7, #4]
    uint32_t t0 = DWT->CYCCNT;
 8005dac:	    4b09      	ldr	r3, [pc, #36]	; (8005dd4 <DWT_Delay_us+0x30>)
 8005dae:	    685b      	ldr	r3, [r3, #4]
 8005db0:	    60fb      	str	r3, [r7, #12]
    uint32_t delta = us * DWT_IN_MICROSEC;
 8005db2:	    687b      	ldr	r3, [r7, #4]
 8005db4:	    009b      	lsls	r3, r3, #2
 8005db6:	    60bb      	str	r3, [r7, #8]

    while (DWT_GetDelta(t0) < delta) {}
 8005db8:	    bf00      	nop
 8005dba:	/-> 68f8      	ldr	r0, [r7, #12]
 8005dbc:	|   f7ff ff8a 	bl	8005cd4 <DWT_GetDelta>
 8005dc0:	|   4602      	mov	r2, r0
 8005dc2:	|   68bb      	ldr	r3, [r7, #8]
 8005dc4:	|   4293      	cmp	r3, r2
 8005dc6:	\-- d8f8      	bhi.n	8005dba <DWT_Delay_us+0x16>
}
 8005dc8:	    bf00      	nop
 8005dca:	    bf00      	nop
 8005dcc:	    3710      	adds	r7, #16
 8005dce:	    46bd      	mov	sp, r7
 8005dd0:	    bd80      	pop	{r7, pc}
 8005dd2:	    bf00      	nop
 8005dd4:	    1000      	asrs	r0, r0, #32
 8005dd6:	    e000      	b.n	8005dda <DWT_Delay_ms+0x2>

08005dd8 <DWT_Delay_ms>:


inline void DWT_Delay_ms(uint32_t ms) { // milliseconds
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
    DWT_Delay_us(ms * 1000);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff ffda 	bl	8005da4 <DWT_Delay_us>
}
 8005df0:	bf00      	nop
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <DWT_Delay_With_Action>:


void DWT_Delay_With_Action(uint32_t us, int (*cond)(), void (*act)()) { // microseconds
 8005df8:	          b580      	push	{r7, lr}
 8005dfa:	          b086      	sub	sp, #24
 8005dfc:	          af00      	add	r7, sp, #0
 8005dfe:	          60f8      	str	r0, [r7, #12]
 8005e00:	          60b9      	str	r1, [r7, #8]
 8005e02:	          607a      	str	r2, [r7, #4]
    uint32_t t0 = DWT->CYCCNT;
 8005e04:	          4b14      	ldr	r3, [pc, #80]	; (8005e58 <DWT_Delay_With_Action+0x60>)
 8005e06:	          685b      	ldr	r3, [r3, #4]
 8005e08:	          617b      	str	r3, [r7, #20]
    uint32_t delta = us * DWT_IN_MICROSEC;
 8005e0a:	          68fb      	ldr	r3, [r7, #12]
 8005e0c:	          009b      	lsls	r3, r3, #2
 8005e0e:	          613b      	str	r3, [r7, #16]
    static uint32_t trigger = 0;

    while (DWT_GetDelta(t0) < delta) {
 8005e10:	   /----- e016      	b.n	8005e40 <DWT_Delay_With_Action+0x48>
        if (trigger == 1) {
 8005e12:	/--|----> 4b12      	ldr	r3, [pc, #72]	; (8005e5c <DWT_Delay_With_Action+0x64>)
 8005e14:	|  |      681b      	ldr	r3, [r3, #0]
 8005e16:	|  |      2b01      	cmp	r3, #1
 8005e18:	|  |  /-- d108      	bne.n	8005e2c <DWT_Delay_With_Action+0x34>
            if (cond() == 0)
 8005e1a:	|  |  |   68bb      	ldr	r3, [r7, #8]
 8005e1c:	|  |  |   4798      	blx	r3
 8005e1e:	|  |  |   4603      	mov	r3, r0
 8005e20:	|  |  |   2b00      	cmp	r3, #0
 8005e22:	|  +--|-- d10d      	bne.n	8005e40 <DWT_Delay_With_Action+0x48>
                trigger = 0;
 8005e24:	|  |  |   4b0d      	ldr	r3, [pc, #52]	; (8005e5c <DWT_Delay_With_Action+0x64>)
 8005e26:	|  |  |   2200      	movs	r2, #0
 8005e28:	|  |  |   601a      	str	r2, [r3, #0]
 8005e2a:	|  +--|-- e009      	b.n	8005e40 <DWT_Delay_With_Action+0x48>
        } else {
            if (cond() == 1) {
 8005e2c:	|  |  \-> 68bb      	ldr	r3, [r7, #8]
 8005e2e:	|  |      4798      	blx	r3
 8005e30:	|  |      4603      	mov	r3, r0
 8005e32:	|  |      2b01      	cmp	r3, #1
 8005e34:	|  +----- d104      	bne.n	8005e40 <DWT_Delay_With_Action+0x48>
                trigger = 1;
 8005e36:	|  |      4b09      	ldr	r3, [pc, #36]	; (8005e5c <DWT_Delay_With_Action+0x64>)
 8005e38:	|  |      2201      	movs	r2, #1
 8005e3a:	|  |      601a      	str	r2, [r3, #0]
                act();
 8005e3c:	|  |      687b      	ldr	r3, [r7, #4]
 8005e3e:	|  |      4798      	blx	r3
    while (DWT_GetDelta(t0) < delta) {
 8005e40:	|  \----> 6978      	ldr	r0, [r7, #20]
 8005e42:	|         f7ff ff47 	bl	8005cd4 <DWT_GetDelta>
 8005e46:	|         4602      	mov	r2, r0
 8005e48:	|         693b      	ldr	r3, [r7, #16]
 8005e4a:	|         4293      	cmp	r3, r2
 8005e4c:	\-------- d8e1      	bhi.n	8005e12 <DWT_Delay_With_Action+0x1a>
            }
        }
    }
}
 8005e4e:	          bf00      	nop
 8005e50:	          bf00      	nop
 8005e52:	          3718      	adds	r7, #24
 8005e54:	          46bd      	mov	sp, r7
 8005e56:	          bd80      	pop	{r7, pc}
 8005e58:	          1000      	asrs	r0, r0, #32
 8005e5a:	      /-- e000      	b.n	8005e5e <DWT_Delay_With_Action+0x66>
 8005e5c:	      |   3ca4      	subs	r4, #164	; 0xa4
 8005e5e:	      \-> 2000      	movs	r0, #0

08005e60 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8005e60:	          b480      	push	{r7}
 8005e62:	          b083      	sub	sp, #12
 8005e64:	          af00      	add	r7, sp, #0
 8005e66:	          6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005e68:	          f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005e6c:	          f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8005e70:	          f003 0301 	and.w	r3, r3, #1
 8005e74:	          2b00      	cmp	r3, #0
 8005e76:	/-------- d013      	beq.n	8005ea0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8005e78:	|         f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005e7c:	|         f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8005e80:	|         f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005e84:	|         2b00      	cmp	r3, #0
 8005e86:	+-------- d00b      	beq.n	8005ea0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8005e88:	|     /-- e000      	b.n	8005e8c <ITM_SendChar+0x2c>
    {
      __NOP();
 8005e8a:	|  /--|-> bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8005e8c:	|  |  \-> f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005e90:	|  |      681b      	ldr	r3, [r3, #0]
 8005e92:	|  |      2b00      	cmp	r3, #0
 8005e94:	|  \----- d0f9      	beq.n	8005e8a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005e96:	|         f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005e9a:	|         687a      	ldr	r2, [r7, #4]
 8005e9c:	|         b2d2      	uxtb	r2, r2
 8005e9e:	|         701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8005ea0:	\-------> 687b      	ldr	r3, [r7, #4]
}
 8005ea2:	          4618      	mov	r0, r3
 8005ea4:	          370c      	adds	r7, #12
 8005ea6:	          46bd      	mov	sp, r7
 8005ea8:	          f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	          4770      	bx	lr

08005eae <_write>:
#include "formating_output.h"

int _write(int file, char *ptr, int len)
{
 8005eae:	       b580      	push	{r7, lr}
 8005eb0:	       b086      	sub	sp, #24
 8005eb2:	       af00      	add	r7, sp, #0
 8005eb4:	       60f8      	str	r0, [r7, #12]
 8005eb6:	       60b9      	str	r1, [r7, #8]
 8005eb8:	       607a      	str	r2, [r7, #4]
	for(int i = 0 ; i < len ; i++)
 8005eba:	       2300      	movs	r3, #0
 8005ebc:	       617b      	str	r3, [r7, #20]
 8005ebe:	   /-- e009      	b.n	8005ed4 <_write+0x26>
		ITM_SendChar((*ptr++));
 8005ec0:	/--|-> 68bb      	ldr	r3, [r7, #8]
 8005ec2:	|  |   1c5a      	adds	r2, r3, #1
 8005ec4:	|  |   60ba      	str	r2, [r7, #8]
 8005ec6:	|  |   781b      	ldrb	r3, [r3, #0]
 8005ec8:	|  |   4618      	mov	r0, r3
 8005eca:	|  |   f7ff ffc9 	bl	8005e60 <ITM_SendChar>
	for(int i = 0 ; i < len ; i++)
 8005ece:	|  |   697b      	ldr	r3, [r7, #20]
 8005ed0:	|  |   3301      	adds	r3, #1
 8005ed2:	|  |   617b      	str	r3, [r7, #20]
 8005ed4:	|  \-> 697a      	ldr	r2, [r7, #20]
 8005ed6:	|      687b      	ldr	r3, [r7, #4]
 8005ed8:	|      429a      	cmp	r2, r3
 8005eda:	\----- dbf1      	blt.n	8005ec0 <_write+0x12>
//		UART_tx((*ptr++));
	return len;
 8005edc:	       687b      	ldr	r3, [r7, #4]
}
 8005ede:	       4618      	mov	r0, r3
 8005ee0:	       3718      	adds	r7, #24
 8005ee2:	       46bd      	mov	sp, r7
 8005ee4:	       bd80      	pop	{r7, pc}

08005ee6 <print_arr>:

void print_arr(char *arr){
 8005ee6:	       b580      	push	{r7, lr}
 8005ee8:	       b084      	sub	sp, #16
 8005eea:	       af00      	add	r7, sp, #0
 8005eec:	       6078      	str	r0, [r7, #4]
	for(int i = 0; arr[i] != '\0'; i++){
 8005eee:	       2300      	movs	r3, #0
 8005ef0:	       60fb      	str	r3, [r7, #12]
 8005ef2:	   /-- e009      	b.n	8005f08 <print_arr+0x22>
		ITM_SendChar(arr[i]);
 8005ef4:	/--|-> 68fb      	ldr	r3, [r7, #12]
 8005ef6:	|  |   687a      	ldr	r2, [r7, #4]
 8005ef8:	|  |   4413      	add	r3, r2
 8005efa:	|  |   781b      	ldrb	r3, [r3, #0]
 8005efc:	|  |   4618      	mov	r0, r3
 8005efe:	|  |   f7ff ffaf 	bl	8005e60 <ITM_SendChar>
	for(int i = 0; arr[i] != '\0'; i++){
 8005f02:	|  |   68fb      	ldr	r3, [r7, #12]
 8005f04:	|  |   3301      	adds	r3, #1
 8005f06:	|  |   60fb      	str	r3, [r7, #12]
 8005f08:	|  \-> 68fb      	ldr	r3, [r7, #12]
 8005f0a:	|      687a      	ldr	r2, [r7, #4]
 8005f0c:	|      4413      	add	r3, r2
 8005f0e:	|      781b      	ldrb	r3, [r3, #0]
 8005f10:	|      2b00      	cmp	r3, #0
 8005f12:	\----- d1ef      	bne.n	8005ef4 <print_arr+0xe>
	}
}
 8005f14:	       bf00      	nop
 8005f16:	       bf00      	nop
 8005f18:	       3710      	adds	r7, #16
 8005f1a:	       46bd      	mov	sp, r7
 8005f1c:	       bd80      	pop	{r7, pc}
	...

08005f20 <stop_cortex>:
#include "low_power.h"
#include "delay.h"

void stop_cortex(void){
 8005f20:	    b580      	push	{r7, lr}
 8005f22:	    af00      	add	r7, sp, #0
    if(!(RCC->APB1ENR1 & RCC_APB1ENR1_PWREN)){
 8005f24:	    4b23      	ldr	r3, [pc, #140]	; (8005fb4 <stop_cortex+0x94>)
 8005f26:	    6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f28:	    f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2c:	    2b00      	cmp	r3, #0
 8005f2e:	/-- d105      	bne.n	8005f3c <stop_cortex+0x1c>
        RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;
 8005f30:	|   4b20      	ldr	r3, [pc, #128]	; (8005fb4 <stop_cortex+0x94>)
 8005f32:	|   6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f34:	|   4a1f      	ldr	r2, [pc, #124]	; (8005fb4 <stop_cortex+0x94>)
 8005f36:	|   f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f3a:	|   6593      	str	r3, [r2, #88]	; 0x58
    }
        /* флаг PDDS определяет выбор между Stop и Standby, его надо сбросить */
    PWR->CR1 |= PWR_CR1_LPMS_SHUTDOWN;
 8005f3c:	\-> 4b1e      	ldr	r3, [pc, #120]	; (8005fb8 <stop_cortex+0x98>)
 8005f3e:	    681b      	ldr	r3, [r3, #0]
 8005f40:	    4a1d      	ldr	r2, [pc, #116]	; (8005fb8 <stop_cortex+0x98>)
 8005f42:	    f043 0304 	orr.w	r3, r3, #4
 8005f46:	    6013      	str	r3, [r2, #0]
    // EXTI->PR1 |= 0x0DFFFFF; //clear all interrupt flags
    // EXTI->PR2 |= 0x00000F0;
    /* флаг Wakeup должн быть очищен, иначе есть шанс проснуться немедленно */
    // PWR->CR3 &= ~PWR_CR3_EIWUL;
    PWR->SCR |= 0x9F; //clear all wakeup flags
 8005f48:	    4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <stop_cortex+0x98>)
 8005f4a:	    699b      	ldr	r3, [r3, #24]
 8005f4c:	    4a1a      	ldr	r2, [pc, #104]	; (8005fb8 <stop_cortex+0x98>)
 8005f4e:	    f043 039f 	orr.w	r3, r3, #159	; 0x9f
 8005f52:	    6193      	str	r3, [r2, #24]
    PWR->PDCRB |= PWR_PDCRB_PB13 | PWR_PDCRB_PB15;  // MOSI and SCL pull down
 8005f54:	    4b18      	ldr	r3, [pc, #96]	; (8005fb8 <stop_cortex+0x98>)
 8005f56:	    6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	    4a17      	ldr	r2, [pc, #92]	; (8005fb8 <stop_cortex+0x98>)
 8005f5a:	    f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8005f5e:	    62d3      	str	r3, [r2, #44]	; 0x2c
    PWR->PDCRC |= PWR_PUCRC_PC6; // NSS pull up
 8005f60:	    4b15      	ldr	r3, [pc, #84]	; (8005fb8 <stop_cortex+0x98>)
 8005f62:	    6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f64:	    4a14      	ldr	r2, [pc, #80]	; (8005fb8 <stop_cortex+0x98>)
 8005f66:	    f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f6a:	    6353      	str	r3, [r2, #52]	; 0x34
    PWR->PDCRC |= PWR_PDCRC_PC7;  // soil sensor power pull down
 8005f6c:	    4b12      	ldr	r3, [pc, #72]	; (8005fb8 <stop_cortex+0x98>)
 8005f6e:	    6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f70:	    4a11      	ldr	r2, [pc, #68]	; (8005fb8 <stop_cortex+0x98>)
 8005f72:	    f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f76:	    6353      	str	r3, [r2, #52]	; 0x34
    PWR->PDCRA |= PWR_PUCRA_PA15;  // LoRa Reset pull up
 8005f78:	    4b0f      	ldr	r3, [pc, #60]	; (8005fb8 <stop_cortex+0x98>)
 8005f7a:	    6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	    4a0e      	ldr	r2, [pc, #56]	; (8005fb8 <stop_cortex+0x98>)
 8005f7e:	    f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f82:	    6253      	str	r3, [r2, #36]	; 0x24
    PWR->PDCRA |= PWR_PDCRA_PA8;  // temp sensor power pull down
 8005f84:	    4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <stop_cortex+0x98>)
 8005f86:	    6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	    4a0b      	ldr	r2, [pc, #44]	; (8005fb8 <stop_cortex+0x98>)
 8005f8a:	    f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f8e:	    6253      	str	r3, [r2, #36]	; 0x24
    /* источник опорного напряжения Vref выключить автоматически */
    // PWR->CR2 &= ~PWR_CR2_PVDE;

    /* с точки зрения ядра Cortex-M, что Stop, что Standby - это режим Deep Sleep */
    /* поэтому надо в ядре включить Deep Sleep */
    SCB->SCR |=  (SCB_SCR_SLEEPDEEP_Msk);
 8005f90:	    4b0a      	ldr	r3, [pc, #40]	; (8005fbc <stop_cortex+0x9c>)
 8005f92:	    691b      	ldr	r3, [r3, #16]
 8005f94:	    4a09      	ldr	r2, [pc, #36]	; (8005fbc <stop_cortex+0x9c>)
 8005f96:	    f043 0304 	orr.w	r3, r3, #4
 8005f9a:	    6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f9c:	    b672      	cpsid	i
}
 8005f9e:	    bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8005fa0:	    f3bf 8f4f 	dsb	sy
}
 8005fa4:	    bf00      	nop
    __DSB();

    // Delay(1000);
    /* заснули */

    __WFI();
 8005fa6:	    bf30      	wfi
    Delay(10);
 8005fa8:	    200a      	movs	r0, #10
 8005faa:	    f7ff fe13 	bl	8005bd4 <Delay>

 8005fae:	    bf00      	nop
 8005fb0:	    bd80      	pop	{r7, pc}
 8005fb2:	    bf00      	nop
 8005fb4:	    1000      	asrs	r0, r0, #32
 8005fb6:	    4002      	ands	r2, r0
 8005fb8:	    7000      	strb	r0, [r0, #0]
 8005fba:	    4000      	ands	r0, r0
 8005fbc:	    ed00 e000 	stc	0, cr14, [r0, #-0]

08005fc0 <FAT32_init>:
 *      Author: Gandalf
 */

#include "fat32.h"
#include "sdio.h"
void FAT32_init(){
 8005fc0:	          b580      	push	{r7, lr}
 8005fc2:	          f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005fc6:	          af00      	add	r7, sp, #0
	uint8_t write_buf[512];
	sd_last_result = SD_ReadBlock(0, (uint32_t *)sd_read_buf, 512);
 8005fc8:	          f44f 7200 	mov.w	r2, #512	; 0x200
 8005fcc:	          498b      	ldr	r1, [pc, #556]	; (80061fc <FAT32_init+0x23c>)
 8005fce:	          2000      	movs	r0, #0
 8005fd0:	          f7ff f870 	bl	80050b4 <SD_ReadBlock>
 8005fd4:	          4603      	mov	r3, r0
 8005fd6:	          461a      	mov	r2, r3
 8005fd8:	          4b89      	ldr	r3, [pc, #548]	; (8006200 <FAT32_init+0x240>)
 8005fda:	          701a      	strb	r2, [r3, #0]
	if(sd_read_buf[0] == 0 && sd_read_buf[1] == 0 && sd_read_buf[2] == 0 && SDCard.Type == SDCT_SDHC){
 8005fdc:	          4b87      	ldr	r3, [pc, #540]	; (80061fc <FAT32_init+0x23c>)
 8005fde:	          781b      	ldrb	r3, [r3, #0]
 8005fe0:	          2b00      	cmp	r3, #0
 8005fe2:	/-------- f040 8106 	bne.w	80061f2 <FAT32_init+0x232>
 8005fe6:	|         4b85      	ldr	r3, [pc, #532]	; (80061fc <FAT32_init+0x23c>)
 8005fe8:	|         785b      	ldrb	r3, [r3, #1]
 8005fea:	|         2b00      	cmp	r3, #0
 8005fec:	+-------- f040 8101 	bne.w	80061f2 <FAT32_init+0x232>
 8005ff0:	|         4b82      	ldr	r3, [pc, #520]	; (80061fc <FAT32_init+0x23c>)
 8005ff2:	|         789b      	ldrb	r3, [r3, #2]
 8005ff4:	|         2b00      	cmp	r3, #0
 8005ff6:	+-------- f040 80fc 	bne.w	80061f2 <FAT32_init+0x232>
 8005ffa:	|         4b82      	ldr	r3, [pc, #520]	; (8006204 <FAT32_init+0x244>)
 8005ffc:	|         781b      	ldrb	r3, [r3, #0]
 8005ffe:	|         2b04      	cmp	r3, #4
 8006000:	+-------- f040 80f7 	bne.w	80061f2 <FAT32_init+0x232>
		if(sd_read_buf[0x1C7] != 0){
 8006004:	|         4b7d      	ldr	r3, [pc, #500]	; (80061fc <FAT32_init+0x23c>)
 8006006:	|         f893 31c7 	ldrb.w	r3, [r3, #455]	; 0x1c7
 800600a:	|         2b00      	cmp	r3, #0
 800600c:	+-------- f000 80f1 	beq.w	80061f2 <FAT32_init+0x232>
			uint16_t boot_addr = (sd_read_buf[0x1C7] << 8 | sd_read_buf[0x1C6]);
 8006010:	|         4b7a      	ldr	r3, [pc, #488]	; (80061fc <FAT32_init+0x23c>)
 8006012:	|         f893 31c7 	ldrb.w	r3, [r3, #455]	; 0x1c7
 8006016:	|         021b      	lsls	r3, r3, #8
 8006018:	|         b21a      	sxth	r2, r3
 800601a:	|         4b78      	ldr	r3, [pc, #480]	; (80061fc <FAT32_init+0x23c>)
 800601c:	|         f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 8006020:	|         b21b      	sxth	r3, r3
 8006022:	|         4313      	orrs	r3, r2
 8006024:	|         b21b      	sxth	r3, r3
 8006026:	|         f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
			sd_last_result = SD_ReadBlock(boot_addr * 512, (uint32_t *)sd_read_buf, 512);
 800602a:	|         f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 800602e:	|         025b      	lsls	r3, r3, #9
 8006030:	|         f44f 7200 	mov.w	r2, #512	; 0x200
 8006034:	|         4971      	ldr	r1, [pc, #452]	; (80061fc <FAT32_init+0x23c>)
 8006036:	|         4618      	mov	r0, r3
 8006038:	|         f7ff f83c 	bl	80050b4 <SD_ReadBlock>
 800603c:	|         4603      	mov	r3, r0
 800603e:	|         461a      	mov	r2, r3
 8006040:	|         4b6f      	ldr	r3, [pc, #444]	; (8006200 <FAT32_init+0x240>)
 8006042:	|         701a      	strb	r2, [r3, #0]
			BPB_BytsPerSec = (uint16_t)sd_read_buf[11] + ((uint16_t)sd_read_buf[12] << 8);
 8006044:	|         4b6d      	ldr	r3, [pc, #436]	; (80061fc <FAT32_init+0x23c>)
 8006046:	|         7adb      	ldrb	r3, [r3, #11]
 8006048:	|         b29a      	uxth	r2, r3
 800604a:	|         4b6c      	ldr	r3, [pc, #432]	; (80061fc <FAT32_init+0x23c>)
 800604c:	|         7b1b      	ldrb	r3, [r3, #12]
 800604e:	|         b29b      	uxth	r3, r3
 8006050:	|         021b      	lsls	r3, r3, #8
 8006052:	|         b29b      	uxth	r3, r3
 8006054:	|         4413      	add	r3, r2
 8006056:	|         b29a      	uxth	r2, r3
 8006058:	|         4b6b      	ldr	r3, [pc, #428]	; (8006208 <FAT32_init+0x248>)
 800605a:	|         801a      	strh	r2, [r3, #0]
			BPB_SecPerClus = sd_read_buf[13];
 800605c:	|         4b67      	ldr	r3, [pc, #412]	; (80061fc <FAT32_init+0x23c>)
 800605e:	|         7b5a      	ldrb	r2, [r3, #13]
 8006060:	|         4b6a      	ldr	r3, [pc, #424]	; (800620c <FAT32_init+0x24c>)
 8006062:	|         701a      	strb	r2, [r3, #0]
			BPB_RsvdSecCnt = (uint16_t)sd_read_buf[14] + ((uint16_t)sd_read_buf[15] << 8);
 8006064:	|         4b65      	ldr	r3, [pc, #404]	; (80061fc <FAT32_init+0x23c>)
 8006066:	|         7b9b      	ldrb	r3, [r3, #14]
 8006068:	|         b29a      	uxth	r2, r3
 800606a:	|         4b64      	ldr	r3, [pc, #400]	; (80061fc <FAT32_init+0x23c>)
 800606c:	|         7bdb      	ldrb	r3, [r3, #15]
 800606e:	|         b29b      	uxth	r3, r3
 8006070:	|         021b      	lsls	r3, r3, #8
 8006072:	|         b29b      	uxth	r3, r3
 8006074:	|         4413      	add	r3, r2
 8006076:	|         b29a      	uxth	r2, r3
 8006078:	|         4b65      	ldr	r3, [pc, #404]	; (8006210 <FAT32_init+0x250>)
 800607a:	|         801a      	strh	r2, [r3, #0]
			BPB_NumFATs = sd_read_buf[16];
 800607c:	|         4b5f      	ldr	r3, [pc, #380]	; (80061fc <FAT32_init+0x23c>)
 800607e:	|         7c1a      	ldrb	r2, [r3, #16]
 8006080:	|         4b64      	ldr	r3, [pc, #400]	; (8006214 <FAT32_init+0x254>)
 8006082:	|         701a      	strb	r2, [r3, #0]
			BPB_FATSz32 = (uint32_t)sd_read_buf[36] + ((uint32_t)sd_read_buf[37] << 8) + ((uint32_t)sd_read_buf[38] << 16) + ((uint32_t)sd_read_buf[39] << 24);
 8006084:	|         4b5d      	ldr	r3, [pc, #372]	; (80061fc <FAT32_init+0x23c>)
 8006086:	|         f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800608a:	|         461a      	mov	r2, r3
 800608c:	|         4b5b      	ldr	r3, [pc, #364]	; (80061fc <FAT32_init+0x23c>)
 800608e:	|         f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006092:	|         021b      	lsls	r3, r3, #8
 8006094:	|         441a      	add	r2, r3
 8006096:	|         4b59      	ldr	r3, [pc, #356]	; (80061fc <FAT32_init+0x23c>)
 8006098:	|         f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800609c:	|         041b      	lsls	r3, r3, #16
 800609e:	|         441a      	add	r2, r3
 80060a0:	|         4b56      	ldr	r3, [pc, #344]	; (80061fc <FAT32_init+0x23c>)
 80060a2:	|         f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80060a6:	|         061b      	lsls	r3, r3, #24
 80060a8:	|         4413      	add	r3, r2
 80060aa:	|         4a5b      	ldr	r2, [pc, #364]	; (8006218 <FAT32_init+0x258>)
 80060ac:	|         6013      	str	r3, [r2, #0]
			BPB_RootClus = (uint32_t)sd_read_buf[44] + ((uint32_t)sd_read_buf[45] << 8) + ((uint32_t)sd_read_buf[46] << 16) + ((uint32_t)sd_read_buf[47] << 24);
 80060ae:	|         4b53      	ldr	r3, [pc, #332]	; (80061fc <FAT32_init+0x23c>)
 80060b0:	|         f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80060b4:	|         461a      	mov	r2, r3
 80060b6:	|         4b51      	ldr	r3, [pc, #324]	; (80061fc <FAT32_init+0x23c>)
 80060b8:	|         f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80060bc:	|         021b      	lsls	r3, r3, #8
 80060be:	|         441a      	add	r2, r3
 80060c0:	|         4b4e      	ldr	r3, [pc, #312]	; (80061fc <FAT32_init+0x23c>)
 80060c2:	|         f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80060c6:	|         041b      	lsls	r3, r3, #16
 80060c8:	|         441a      	add	r2, r3
 80060ca:	|         4b4c      	ldr	r3, [pc, #304]	; (80061fc <FAT32_init+0x23c>)
 80060cc:	|         f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80060d0:	|         061b      	lsls	r3, r3, #24
 80060d2:	|         4413      	add	r3, r2
 80060d4:	|         4a51      	ldr	r2, [pc, #324]	; (800621c <FAT32_init+0x25c>)
 80060d6:	|         6013      	str	r3, [r2, #0]
			root_dir_addr = boot_addr + BPB_FATSz32 * BPB_NumFATs + BPB_RsvdSecCnt;
 80060d8:	|         f8b7 2202 	ldrh.w	r2, [r7, #514]	; 0x202
 80060dc:	|         4b4d      	ldr	r3, [pc, #308]	; (8006214 <FAT32_init+0x254>)
 80060de:	|         781b      	ldrb	r3, [r3, #0]
 80060e0:	|         4619      	mov	r1, r3
 80060e2:	|         4b4d      	ldr	r3, [pc, #308]	; (8006218 <FAT32_init+0x258>)
 80060e4:	|         681b      	ldr	r3, [r3, #0]
 80060e6:	|         fb01 f303 	mul.w	r3, r1, r3
 80060ea:	|         4413      	add	r3, r2
 80060ec:	|         4a48      	ldr	r2, [pc, #288]	; (8006210 <FAT32_init+0x250>)
 80060ee:	|         8812      	ldrh	r2, [r2, #0]
 80060f0:	|         4413      	add	r3, r2
 80060f2:	|         4a4b      	ldr	r2, [pc, #300]	; (8006220 <FAT32_init+0x260>)
 80060f4:	|         6013      	str	r3, [r2, #0]
			fat_table_addr = boot_addr + BPB_RsvdSecCnt;
 80060f6:	|         f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 80060fa:	|         4a45      	ldr	r2, [pc, #276]	; (8006210 <FAT32_init+0x250>)
 80060fc:	|         8812      	ldrh	r2, [r2, #0]
 80060fe:	|         4413      	add	r3, r2
 8006100:	|         461a      	mov	r2, r3
 8006102:	|         4b48      	ldr	r3, [pc, #288]	; (8006224 <FAT32_init+0x264>)
 8006104:	|         601a      	str	r2, [r3, #0]
			sd_last_result = SD_ReadBlock(root_dir_addr * 512, (uint32_t *)sd_read_buf, 512);
 8006106:	|         4b46      	ldr	r3, [pc, #280]	; (8006220 <FAT32_init+0x260>)
 8006108:	|         681b      	ldr	r3, [r3, #0]
 800610a:	|         025b      	lsls	r3, r3, #9
 800610c:	|         f44f 7200 	mov.w	r2, #512	; 0x200
 8006110:	|         493a      	ldr	r1, [pc, #232]	; (80061fc <FAT32_init+0x23c>)
 8006112:	|         4618      	mov	r0, r3
 8006114:	|         f7fe ffce 	bl	80050b4 <SD_ReadBlock>
 8006118:	|         4603      	mov	r3, r0
 800611a:	|         461a      	mov	r2, r3
 800611c:	|         4b38      	ldr	r3, [pc, #224]	; (8006200 <FAT32_init+0x240>)
 800611e:	|         701a      	strb	r2, [r3, #0]

			int16_t file_start_cluster = FAT32_get_file_start_cluster("DATA    .TXT");
 8006120:	|         4841      	ldr	r0, [pc, #260]	; (8006228 <FAT32_init+0x268>)
 8006122:	|         f000 f885 	bl	8006230 <FAT32_get_file_start_cluster>
 8006126:	|         4603      	mov	r3, r0
 8006128:	|         f8a7 3200 	strh.w	r3, [r7, #512]	; 0x200
			if(file_start_cluster != -1){
 800612c:	|         f9b7 3200 	ldrsh.w	r3, [r7, #512]	; 0x200
 8006130:	|         f1b3 3fff 	cmp.w	r3, #4294967295
 8006134:	+-------- d05d      	beq.n	80061f2 <FAT32_init+0x232>
				sd_last_result = SD_ReadBlock(fat_table_addr * 512, (uint32_t *)sd_read_buf, 512);
 8006136:	|         4b3b      	ldr	r3, [pc, #236]	; (8006224 <FAT32_init+0x264>)
 8006138:	|         681b      	ldr	r3, [r3, #0]
 800613a:	|         025b      	lsls	r3, r3, #9
 800613c:	|         f44f 7200 	mov.w	r2, #512	; 0x200
 8006140:	|         492e      	ldr	r1, [pc, #184]	; (80061fc <FAT32_init+0x23c>)
 8006142:	|         4618      	mov	r0, r3
 8006144:	|         f7fe ffb6 	bl	80050b4 <SD_ReadBlock>
 8006148:	|         4603      	mov	r3, r0
 800614a:	|         461a      	mov	r2, r3
 800614c:	|         4b2c      	ldr	r3, [pc, #176]	; (8006200 <FAT32_init+0x240>)
 800614e:	|         701a      	strb	r2, [r3, #0]
				file_addr = BPB_SecPerClus * (file_start_cluster - 2) + root_dir_addr;
 8006150:	|         4b2e      	ldr	r3, [pc, #184]	; (800620c <FAT32_init+0x24c>)
 8006152:	|         781b      	ldrb	r3, [r3, #0]
 8006154:	|         461a      	mov	r2, r3
 8006156:	|         f9b7 3200 	ldrsh.w	r3, [r7, #512]	; 0x200
 800615a:	|         3b02      	subs	r3, #2
 800615c:	|         fb02 f303 	mul.w	r3, r2, r3
 8006160:	|         461a      	mov	r2, r3
 8006162:	|         4b2f      	ldr	r3, [pc, #188]	; (8006220 <FAT32_init+0x260>)
 8006164:	|         681b      	ldr	r3, [r3, #0]
 8006166:	|         4413      	add	r3, r2
 8006168:	|         4a30      	ldr	r2, [pc, #192]	; (800622c <FAT32_init+0x26c>)
 800616a:	|         6013      	str	r3, [r2, #0]
				sd_last_result = SD_ReadBlock(file_addr * 512, (uint32_t *)sd_read_buf, 512);
 800616c:	|         4b2f      	ldr	r3, [pc, #188]	; (800622c <FAT32_init+0x26c>)
 800616e:	|         681b      	ldr	r3, [r3, #0]
 8006170:	|         025b      	lsls	r3, r3, #9
 8006172:	|         f44f 7200 	mov.w	r2, #512	; 0x200
 8006176:	|         4921      	ldr	r1, [pc, #132]	; (80061fc <FAT32_init+0x23c>)
 8006178:	|         4618      	mov	r0, r3
 800617a:	|         f7fe ff9b 	bl	80050b4 <SD_ReadBlock>
 800617e:	|         4603      	mov	r3, r0
 8006180:	|         461a      	mov	r2, r3
 8006182:	|         4b1f      	ldr	r3, [pc, #124]	; (8006200 <FAT32_init+0x240>)
 8006184:	|         701a      	strb	r2, [r3, #0]
				for(uint16_t i = 0; i < 512; i++){
 8006186:	|         2300      	movs	r3, #0
 8006188:	|         f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 800618c:	|     /-- e00e      	b.n	80061ac <FAT32_init+0x1ec>
					write_buf[i] = i;
 800618e:	|  /--|-> f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8006192:	|  |  |   f8b7 2206 	ldrh.w	r2, [r7, #518]	; 0x206
 8006196:	|  |  |   b2d1      	uxtb	r1, r2
 8006198:	|  |  |   f507 7202 	add.w	r2, r7, #520	; 0x208
 800619c:	|  |  |   f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80061a0:	|  |  |   54d1      	strb	r1, [r2, r3]
				for(uint16_t i = 0; i < 512; i++){
 80061a2:	|  |  |   f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 80061a6:	|  |  |   3301      	adds	r3, #1
 80061a8:	|  |  |   f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 80061ac:	|  |  \-> f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 80061b0:	|  |      f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b4:	|  \----- d3eb      	bcc.n	800618e <FAT32_init+0x1ce>
				}
				for(uint16_t i = 0; i < 16; i++){
 80061b6:	|         2300      	movs	r3, #0
 80061b8:	|         f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
 80061bc:	|     /-- e015      	b.n	80061ea <FAT32_init+0x22a>
					sd_last_result = SD_WriteBlock(file_addr * 512 + i * 512, (uint32_t *)write_buf, 512);
 80061be:	|  /--|-> 4b1b      	ldr	r3, [pc, #108]	; (800622c <FAT32_init+0x26c>)
 80061c0:	|  |  |   681b      	ldr	r3, [r3, #0]
 80061c2:	|  |  |   025b      	lsls	r3, r3, #9
 80061c4:	|  |  |   f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 80061c8:	|  |  |   0252      	lsls	r2, r2, #9
 80061ca:	|  |  |   4413      	add	r3, r2
 80061cc:	|  |  |   4639      	mov	r1, r7
 80061ce:	|  |  |   f44f 7200 	mov.w	r2, #512	; 0x200
 80061d2:	|  |  |   4618      	mov	r0, r3
 80061d4:	|  |  |   f7ff f834 	bl	8005240 <SD_WriteBlock>
 80061d8:	|  |  |   4603      	mov	r3, r0
 80061da:	|  |  |   461a      	mov	r2, r3
 80061dc:	|  |  |   4b08      	ldr	r3, [pc, #32]	; (8006200 <FAT32_init+0x240>)
 80061de:	|  |  |   701a      	strb	r2, [r3, #0]
				for(uint16_t i = 0; i < 16; i++){
 80061e0:	|  |  |   f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 80061e4:	|  |  |   3301      	adds	r3, #1
 80061e6:	|  |  |   f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
 80061ea:	|  |  \-> f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 80061ee:	|  |      2b0f      	cmp	r3, #15
 80061f0:	|  \----- d9e5      	bls.n	80061be <FAT32_init+0x1fe>
		}
		else{
			//some shit
		}
	}
}
 80061f2:	\-------> bf00      	nop
 80061f4:	          f507 7702 	add.w	r7, r7, #520	; 0x208
 80061f8:	          46bd      	mov	sp, r7
 80061fa:	          bd80      	pop	{r7, pc}
 80061fc:	          3cc8      	subs	r4, #200	; 0xc8
 80061fe:	          2000      	movs	r0, #0
 8006200:	          3c18      	subs	r4, #24
 8006202:	          2000      	movs	r0, #0
 8006204:	          3c1c      	subs	r4, #28
 8006206:	          2000      	movs	r0, #0
 8006208:	          3ca8      	subs	r4, #168	; 0xa8
 800620a:	          2000      	movs	r0, #0
 800620c:	          3caa      	subs	r4, #170	; 0xaa
 800620e:	          2000      	movs	r0, #0
 8006210:	          3cac      	subs	r4, #172	; 0xac
 8006212:	          2000      	movs	r0, #0
 8006214:	          3cae      	subs	r4, #174	; 0xae
 8006216:	          2000      	movs	r0, #0
 8006218:	          3cb0      	subs	r4, #176	; 0xb0
 800621a:	          2000      	movs	r0, #0
 800621c:	          3cb4      	subs	r4, #180	; 0xb4
 800621e:	          2000      	movs	r0, #0
 8006220:	          3cb8      	subs	r4, #184	; 0xb8
 8006222:	          2000      	movs	r0, #0
 8006224:	          3cc4      	subs	r4, #196	; 0xc4
 8006226:	          2000      	movs	r0, #0
 8006228:	          af04      	add	r7, sp, #16
 800622a:	          0800      	lsrs	r0, r0, #32
 800622c:	          3cc0      	subs	r4, #192	; 0xc0
 800622e:	          2000      	movs	r0, #0

08006230 <FAT32_get_file_start_cluster>:

int16_t FAT32_get_file_start_cluster(char* file_name){ //file name in format 8.3
 8006230:	             b480      	push	{r7}
 8006232:	             b085      	sub	sp, #20
 8006234:	             af00      	add	r7, sp, #0
 8006236:	             6078      	str	r0, [r7, #4]
	for(uint16_t i = 0x70; i < 502; i += 16){
 8006238:	             2370      	movs	r3, #112	; 0x70
 800623a:	             81fb      	strh	r3, [r7, #14]
 800623c:	   /-------- e069      	b.n	8006312 <FAT32_get_file_start_cluster+0xe2>
		if((sd_read_buf[i] == file_name[0]) && (sd_read_buf[i+1] == file_name[1]) &&
 800623e:	/--|-------> 89fb      	ldrh	r3, [r7, #14]
 8006240:	|  |         4a3a      	ldr	r2, [pc, #232]	; (800632c <FAT32_get_file_start_cluster+0xfc>)
 8006242:	|  |         5cd2      	ldrb	r2, [r2, r3]
 8006244:	|  |         687b      	ldr	r3, [r7, #4]
 8006246:	|  |         781b      	ldrb	r3, [r3, #0]
 8006248:	|  |         429a      	cmp	r2, r3
 800624a:	|  |  /----- d15f      	bne.n	800630c <FAT32_get_file_start_cluster+0xdc>
 800624c:	|  |  |      89fb      	ldrh	r3, [r7, #14]
 800624e:	|  |  |      3301      	adds	r3, #1
 8006250:	|  |  |      4a36      	ldr	r2, [pc, #216]	; (800632c <FAT32_get_file_start_cluster+0xfc>)
 8006252:	|  |  |      5cd2      	ldrb	r2, [r2, r3]
 8006254:	|  |  |      687b      	ldr	r3, [r7, #4]
 8006256:	|  |  |      3301      	adds	r3, #1
 8006258:	|  |  |      781b      	ldrb	r3, [r3, #0]
 800625a:	|  |  |      429a      	cmp	r2, r3
 800625c:	|  |  +----- d156      	bne.n	800630c <FAT32_get_file_start_cluster+0xdc>
		   (sd_read_buf[i+2] == file_name[2]) && (sd_read_buf[i+3] == file_name[3]) &&
 800625e:	|  |  |      89fb      	ldrh	r3, [r7, #14]
 8006260:	|  |  |      3302      	adds	r3, #2
 8006262:	|  |  |      4a32      	ldr	r2, [pc, #200]	; (800632c <FAT32_get_file_start_cluster+0xfc>)
 8006264:	|  |  |      5cd2      	ldrb	r2, [r2, r3]
 8006266:	|  |  |      687b      	ldr	r3, [r7, #4]
 8006268:	|  |  |      3302      	adds	r3, #2
 800626a:	|  |  |      781b      	ldrb	r3, [r3, #0]
		if((sd_read_buf[i] == file_name[0]) && (sd_read_buf[i+1] == file_name[1]) &&
 800626c:	|  |  |      429a      	cmp	r2, r3
 800626e:	|  |  +----- d14d      	bne.n	800630c <FAT32_get_file_start_cluster+0xdc>
		   (sd_read_buf[i+2] == file_name[2]) && (sd_read_buf[i+3] == file_name[3]) &&
 8006270:	|  |  |      89fb      	ldrh	r3, [r7, #14]
 8006272:	|  |  |      3303      	adds	r3, #3
 8006274:	|  |  |      4a2d      	ldr	r2, [pc, #180]	; (800632c <FAT32_get_file_start_cluster+0xfc>)
 8006276:	|  |  |      5cd2      	ldrb	r2, [r2, r3]
 8006278:	|  |  |      687b      	ldr	r3, [r7, #4]
 800627a:	|  |  |      3303      	adds	r3, #3
 800627c:	|  |  |      781b      	ldrb	r3, [r3, #0]
 800627e:	|  |  |      429a      	cmp	r2, r3
 8006280:	|  |  +----- d144      	bne.n	800630c <FAT32_get_file_start_cluster+0xdc>
		   (sd_read_buf[i+4] == file_name[4]) && (sd_read_buf[i+5] == file_name[5]) &&
 8006282:	|  |  |      89fb      	ldrh	r3, [r7, #14]
 8006284:	|  |  |      3304      	adds	r3, #4
 8006286:	|  |  |      4a29      	ldr	r2, [pc, #164]	; (800632c <FAT32_get_file_start_cluster+0xfc>)
 8006288:	|  |  |      5cd2      	ldrb	r2, [r2, r3]
 800628a:	|  |  |      687b      	ldr	r3, [r7, #4]
 800628c:	|  |  |      3304      	adds	r3, #4
 800628e:	|  |  |      781b      	ldrb	r3, [r3, #0]
		   (sd_read_buf[i+2] == file_name[2]) && (sd_read_buf[i+3] == file_name[3]) &&
 8006290:	|  |  |      429a      	cmp	r2, r3
 8006292:	|  |  +----- d13b      	bne.n	800630c <FAT32_get_file_start_cluster+0xdc>
		   (sd_read_buf[i+4] == file_name[4]) && (sd_read_buf[i+5] == file_name[5]) &&
 8006294:	|  |  |      89fb      	ldrh	r3, [r7, #14]
 8006296:	|  |  |      3305      	adds	r3, #5
 8006298:	|  |  |      4a24      	ldr	r2, [pc, #144]	; (800632c <FAT32_get_file_start_cluster+0xfc>)
 800629a:	|  |  |      5cd2      	ldrb	r2, [r2, r3]
 800629c:	|  |  |      687b      	ldr	r3, [r7, #4]
 800629e:	|  |  |      3305      	adds	r3, #5
 80062a0:	|  |  |      781b      	ldrb	r3, [r3, #0]
 80062a2:	|  |  |      429a      	cmp	r2, r3
 80062a4:	|  |  +----- d132      	bne.n	800630c <FAT32_get_file_start_cluster+0xdc>
		   (sd_read_buf[i+6] == file_name[6]) && (sd_read_buf[i+7] == file_name[7]) &&
 80062a6:	|  |  |      89fb      	ldrh	r3, [r7, #14]
 80062a8:	|  |  |      3306      	adds	r3, #6
 80062aa:	|  |  |      4a20      	ldr	r2, [pc, #128]	; (800632c <FAT32_get_file_start_cluster+0xfc>)
 80062ac:	|  |  |      5cd2      	ldrb	r2, [r2, r3]
 80062ae:	|  |  |      687b      	ldr	r3, [r7, #4]
 80062b0:	|  |  |      3306      	adds	r3, #6
 80062b2:	|  |  |      781b      	ldrb	r3, [r3, #0]
		   (sd_read_buf[i+4] == file_name[4]) && (sd_read_buf[i+5] == file_name[5]) &&
 80062b4:	|  |  |      429a      	cmp	r2, r3
 80062b6:	|  |  +----- d129      	bne.n	800630c <FAT32_get_file_start_cluster+0xdc>
		   (sd_read_buf[i+6] == file_name[6]) && (sd_read_buf[i+7] == file_name[7]) &&
 80062b8:	|  |  |      89fb      	ldrh	r3, [r7, #14]
 80062ba:	|  |  |      3307      	adds	r3, #7
 80062bc:	|  |  |      4a1b      	ldr	r2, [pc, #108]	; (800632c <FAT32_get_file_start_cluster+0xfc>)
 80062be:	|  |  |      5cd2      	ldrb	r2, [r2, r3]
 80062c0:	|  |  |      687b      	ldr	r3, [r7, #4]
 80062c2:	|  |  |      3307      	adds	r3, #7
 80062c4:	|  |  |      781b      	ldrb	r3, [r3, #0]
 80062c6:	|  |  |      429a      	cmp	r2, r3
 80062c8:	|  |  +----- d120      	bne.n	800630c <FAT32_get_file_start_cluster+0xdc>
		   (sd_read_buf[i+8] == file_name[9]) && (sd_read_buf[i+9] == file_name[10]) &&
 80062ca:	|  |  |      89fb      	ldrh	r3, [r7, #14]
 80062cc:	|  |  |      3308      	adds	r3, #8
 80062ce:	|  |  |      4a17      	ldr	r2, [pc, #92]	; (800632c <FAT32_get_file_start_cluster+0xfc>)
 80062d0:	|  |  |      5cd2      	ldrb	r2, [r2, r3]
 80062d2:	|  |  |      687b      	ldr	r3, [r7, #4]
 80062d4:	|  |  |      3309      	adds	r3, #9
 80062d6:	|  |  |      781b      	ldrb	r3, [r3, #0]
		   (sd_read_buf[i+6] == file_name[6]) && (sd_read_buf[i+7] == file_name[7]) &&
 80062d8:	|  |  |      429a      	cmp	r2, r3
 80062da:	|  |  +----- d117      	bne.n	800630c <FAT32_get_file_start_cluster+0xdc>
		   (sd_read_buf[i+8] == file_name[9]) && (sd_read_buf[i+9] == file_name[10]) &&
 80062dc:	|  |  |      89fb      	ldrh	r3, [r7, #14]
 80062de:	|  |  |      3309      	adds	r3, #9
 80062e0:	|  |  |      4a12      	ldr	r2, [pc, #72]	; (800632c <FAT32_get_file_start_cluster+0xfc>)
 80062e2:	|  |  |      5cd2      	ldrb	r2, [r2, r3]
 80062e4:	|  |  |      687b      	ldr	r3, [r7, #4]
 80062e6:	|  |  |      330a      	adds	r3, #10
 80062e8:	|  |  |      781b      	ldrb	r3, [r3, #0]
 80062ea:	|  |  |      429a      	cmp	r2, r3
 80062ec:	|  |  +----- d10e      	bne.n	800630c <FAT32_get_file_start_cluster+0xdc>
		   (sd_read_buf[i+10] == file_name[11])){
 80062ee:	|  |  |      89fb      	ldrh	r3, [r7, #14]
 80062f0:	|  |  |      330a      	adds	r3, #10
 80062f2:	|  |  |      4a0e      	ldr	r2, [pc, #56]	; (800632c <FAT32_get_file_start_cluster+0xfc>)
 80062f4:	|  |  |      5cd2      	ldrb	r2, [r2, r3]
 80062f6:	|  |  |      687b      	ldr	r3, [r7, #4]
 80062f8:	|  |  |      330b      	adds	r3, #11
 80062fa:	|  |  |      781b      	ldrb	r3, [r3, #0]
		   (sd_read_buf[i+8] == file_name[9]) && (sd_read_buf[i+9] == file_name[10]) &&
 80062fc:	|  |  |      429a      	cmp	r2, r3
 80062fe:	|  |  +----- d105      	bne.n	800630c <FAT32_get_file_start_cluster+0xdc>
			return sd_read_buf[i + 0x1A];
 8006300:	|  |  |      89fb      	ldrh	r3, [r7, #14]
 8006302:	|  |  |      331a      	adds	r3, #26
 8006304:	|  |  |      4a09      	ldr	r2, [pc, #36]	; (800632c <FAT32_get_file_start_cluster+0xfc>)
 8006306:	|  |  |      5cd3      	ldrb	r3, [r2, r3]
 8006308:	|  |  |      b21b      	sxth	r3, r3
 800630a:	|  |  |  /-- e008      	b.n	800631e <FAT32_get_file_start_cluster+0xee>
	for(uint16_t i = 0x70; i < 502; i += 16){
 800630c:	|  |  \--|-> 89fb      	ldrh	r3, [r7, #14]
 800630e:	|  |     |   3310      	adds	r3, #16
 8006310:	|  |     |   81fb      	strh	r3, [r7, #14]
 8006312:	|  \-----|-> 89fb      	ldrh	r3, [r7, #14]
 8006314:	|        |   f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8006318:	\--------|-- d391      	bcc.n	800623e <FAT32_get_file_start_cluster+0xe>
		}
	}
	return -1;
 800631a:	         |   f04f 33ff 	mov.w	r3, #4294967295
}
 800631e:	         \-> 4618      	mov	r0, r3
 8006320:	             3714      	adds	r7, #20
 8006322:	             46bd      	mov	sp, r7
 8006324:	             f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	             4770      	bx	lr
 800632a:	             bf00      	nop
 800632c:	             3cc8      	subs	r4, #200	; 0xc8
 800632e:	             2000      	movs	r0, #0

08006330 <FAT32_check_file_next_cluster>:

uint32_t FAT32_check_file_next_cluster(uint32_t current_cluster){
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
	return (uint32_t)sd_read_buf[BPB_RsvdSecCnt + current_cluster * 4];
 8006338:	4b06      	ldr	r3, [pc, #24]	; (8006354 <FAT32_check_file_next_cluster+0x24>)
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	4a04      	ldr	r2, [pc, #16]	; (8006358 <FAT32_check_file_next_cluster+0x28>)
 8006346:	5cd3      	ldrb	r3, [r2, r3]
}
 8006348:	4618      	mov	r0, r3
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	3cac      	subs	r4, #172	; 0xac
 8006356:	2000      	movs	r0, #0
 8006358:	3cc8      	subs	r4, #200	; 0xc8
 800635a:	2000      	movs	r0, #0

0800635c <DS18B20_StartTempMeas>:
#include "ds18b20.h"
#include "delay.h"



uint8_t DS18B20_StartTempMeas(OneWire *ow){
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
    OneWire_Reset(ow);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7fc fcae 	bl	8002cc6 <OneWire_Reset>
    OneWire_Write(ow, DS18B20_SKIP_ROM);
 800636a:	21cc      	movs	r1, #204	; 0xcc
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7fc fd0e 	bl	8002d8e <OneWire_Write>
    // OneWire_MatchRom(ow, rom);
    OneWire_Write(ow, DS18B20_CONVERT_TEMP);
 8006372:	2144      	movs	r1, #68	; 0x44
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7fc fd0a 	bl	8002d8e <OneWire_Write>
    uint8_t answer = 0;
 800637a:	2300      	movs	r3, #0
 800637c:	73fb      	strb	r3, [r7, #15]
    uint8_t timeout_ms_counter = 0;
 800637e:	2300      	movs	r3, #0
 8006380:	73bb      	strb	r3, [r7, #14]
    //     answer = OneWire_SendBit(ow, 0);
    //     timeout_ms_counter = GetMili();
    // }

    // if(answer > 0) return 0;
    Delay(300);
 8006382:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006386:	f7ff fc25 	bl	8005bd4 <Delay>
    return 0;
 800638a:	2300      	movs	r3, #0
    // return 1;
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <DS18B20_ReadScratchpad>:

uint8_t DS18B20_ReadScratchpad(DS18B20 *sensor){
 8006394:	    b580      	push	{r7, lr}
 8006396:	    b084      	sub	sp, #16
 8006398:	    af00      	add	r7, sp, #0
 800639a:	    6078      	str	r0, [r7, #4]
    OneWireStatus status = OneWire_MatchRom(sensor->ow, sensor->serialNumber);
 800639c:	    687b      	ldr	r3, [r7, #4]
 800639e:	    681a      	ldr	r2, [r3, #0]
 80063a0:	    687b      	ldr	r3, [r7, #4]
 80063a2:	    689b      	ldr	r3, [r3, #8]
 80063a4:	    4619      	mov	r1, r3
 80063a6:	    4610      	mov	r0, r2
 80063a8:	    f7fc fea8 	bl	80030fc <OneWire_MatchRom>
 80063ac:	    4603      	mov	r3, r0
 80063ae:	    73fb      	strb	r3, [r7, #15]
    if(status == ONE_WIRE_OK){
 80063b0:	    7bfb      	ldrb	r3, [r7, #15]
 80063b2:	    2b00      	cmp	r3, #0
 80063b4:	/-- d120      	bne.n	80063f8 <DS18B20_ReadScratchpad+0x64>
        OneWire_Write(sensor->ow, DS18B20_READ_SCRATCHPAD);
 80063b6:	|   687b      	ldr	r3, [r7, #4]
 80063b8:	|   681b      	ldr	r3, [r3, #0]
 80063ba:	|   21be      	movs	r1, #190	; 0xbe
 80063bc:	|   4618      	mov	r0, r3
 80063be:	|   f7fc fce6 	bl	8002d8e <OneWire_Write>
        OneWire_ReadArray(sensor->ow, (uint8_t *)(&(sensor->scratchpad)), 9);
 80063c2:	|   687b      	ldr	r3, [r7, #4]
 80063c4:	|   6818      	ldr	r0, [r3, #0]
 80063c6:	|   687b      	ldr	r3, [r7, #4]
 80063c8:	|   330c      	adds	r3, #12
 80063ca:	|   2209      	movs	r2, #9
 80063cc:	|   4619      	mov	r1, r3
 80063ce:	|   f7fc fcc0 	bl	8002d52 <OneWire_ReadArray>
        sensor->temperature = (uint32_t)(sensor->scratchpad.temperature) * 0.0625;
 80063d2:	|   687b      	ldr	r3, [r7, #4]
 80063d4:	|   899b      	ldrh	r3, [r3, #12]
 80063d6:	|   4618      	mov	r0, r3
 80063d8:	|   f002 ff4c 	bl	8009274 <__aeabi_ui2d>
 80063dc:	|   f04f 0200 	mov.w	r2, #0
 80063e0:	|   4b08      	ldr	r3, [pc, #32]	; (8006404 <DS18B20_ReadScratchpad+0x70>)
 80063e2:	|   f002 ffc1 	bl	8009368 <__aeabi_dmul>
 80063e6:	|   4602      	mov	r2, r0
 80063e8:	|   460b      	mov	r3, r1
 80063ea:	|   4610      	mov	r0, r2
 80063ec:	|   4619      	mov	r1, r3
 80063ee:	|   f003 fa15 	bl	800981c <__aeabi_d2f>
 80063f2:	|   4602      	mov	r2, r0
 80063f4:	|   687b      	ldr	r3, [r7, #4]
 80063f6:	|   619a      	str	r2, [r3, #24]
    }
    return status;
 80063f8:	\-> 7bfb      	ldrb	r3, [r7, #15]
}
 80063fa:	    4618      	mov	r0, r3
 80063fc:	    3710      	adds	r7, #16
 80063fe:	    46bd      	mov	sp, r7
 8006400:	    bd80      	pop	{r7, pc}
 8006402:	    bf00      	nop
 8006404:	    0000      	movs	r0, r0
 8006406:	    3fb0      	subs	r7, #176	; 0xb0

08006408 <DS18B20_Init>:

uint8_t DS18B20_Init(DS18B20 *sensor, OneWire *ow){
 8006408:	             b580      	push	{r7, lr}
 800640a:	             b084      	sub	sp, #16
 800640c:	             af00      	add	r7, sp, #0
 800640e:	             6078      	str	r0, [r7, #4]
 8006410:	             6039      	str	r1, [r7, #0]
    int8_t devices_on_bus = OneWire_SearchDevices(ow);
 8006412:	             6838      	ldr	r0, [r7, #0]
 8006414:	             f7fc fe1f 	bl	8003056 <OneWire_SearchDevices>
 8006418:	             4603      	mov	r3, r0
 800641a:	             73bb      	strb	r3, [r7, #14]
    if(devices_on_bus > 0){
 800641c:	             f997 300e 	ldrsb.w	r3, [r7, #14]
 8006420:	             2b00      	cmp	r3, #0
 8006422:	/----------- dd35      	ble.n	8006490 <DS18B20_Init+0x88>
        for(uint8_t i = 0; i < MAXDEVICES_ON_THE_BUS; i++){
 8006424:	|            2300      	movs	r3, #0
 8006426:	|            73fb      	strb	r3, [r7, #15]
 8006428:	|        /-- e02b      	b.n	8006482 <DS18B20_Init+0x7a>
            if(ow->ids[i].family != 0){
 800642a:	|  /-----|-> 7bfb      	ldrb	r3, [r7, #15]
 800642c:	|  |     |   683a      	ldr	r2, [r7, #0]
 800642e:	|  |     |   00db      	lsls	r3, r3, #3
 8006430:	|  |     |   4413      	add	r3, r2
 8006432:	|  |     |   791b      	ldrb	r3, [r3, #4]
 8006434:	|  |     |   2b00      	cmp	r3, #0
 8006436:	|  |  /--|-- d028      	beq.n	800648a <DS18B20_Init+0x82>
                sensor[i].ow = ow;
 8006438:	|  |  |  |   7bfa      	ldrb	r2, [r7, #15]
 800643a:	|  |  |  |   4613      	mov	r3, r2
 800643c:	|  |  |  |   00db      	lsls	r3, r3, #3
 800643e:	|  |  |  |   1a9b      	subs	r3, r3, r2
 8006440:	|  |  |  |   009b      	lsls	r3, r3, #2
 8006442:	|  |  |  |   461a      	mov	r2, r3
 8006444:	|  |  |  |   687b      	ldr	r3, [r7, #4]
 8006446:	|  |  |  |   4413      	add	r3, r2
 8006448:	|  |  |  |   683a      	ldr	r2, [r7, #0]
 800644a:	|  |  |  |   601a      	str	r2, [r3, #0]
                sensor[i].isConnected = 1;
 800644c:	|  |  |  |   7bfa      	ldrb	r2, [r7, #15]
 800644e:	|  |  |  |   4613      	mov	r3, r2
 8006450:	|  |  |  |   00db      	lsls	r3, r3, #3
 8006452:	|  |  |  |   1a9b      	subs	r3, r3, r2
 8006454:	|  |  |  |   009b      	lsls	r3, r3, #2
 8006456:	|  |  |  |   461a      	mov	r2, r3
 8006458:	|  |  |  |   687b      	ldr	r3, [r7, #4]
 800645a:	|  |  |  |   4413      	add	r3, r2
 800645c:	|  |  |  |   2201      	movs	r2, #1
 800645e:	|  |  |  |   711a      	strb	r2, [r3, #4]
                sensor[i].serialNumber = &ow->ids[i];  // копируем адрес первого байта ROM
 8006460:	|  |  |  |   7bf9      	ldrb	r1, [r7, #15]
 8006462:	|  |  |  |   7bfa      	ldrb	r2, [r7, #15]
 8006464:	|  |  |  |   4613      	mov	r3, r2
 8006466:	|  |  |  |   00db      	lsls	r3, r3, #3
 8006468:	|  |  |  |   1a9b      	subs	r3, r3, r2
 800646a:	|  |  |  |   009b      	lsls	r3, r3, #2
 800646c:	|  |  |  |   461a      	mov	r2, r3
 800646e:	|  |  |  |   687b      	ldr	r3, [r7, #4]
 8006470:	|  |  |  |   4413      	add	r3, r2
 8006472:	|  |  |  |   00ca      	lsls	r2, r1, #3
 8006474:	|  |  |  |   6839      	ldr	r1, [r7, #0]
 8006476:	|  |  |  |   440a      	add	r2, r1
 8006478:	|  |  |  |   3204      	adds	r2, #4
 800647a:	|  |  |  |   609a      	str	r2, [r3, #8]
        for(uint8_t i = 0; i < MAXDEVICES_ON_THE_BUS; i++){
 800647c:	|  |  |  |   7bfb      	ldrb	r3, [r7, #15]
 800647e:	|  |  |  |   3301      	adds	r3, #1
 8006480:	|  |  |  |   73fb      	strb	r3, [r7, #15]
 8006482:	|  |  |  \-> 7bfb      	ldrb	r3, [r7, #15]
 8006484:	|  |  |      2b13      	cmp	r3, #19
 8006486:	|  \--|----- d9d0      	bls.n	800642a <DS18B20_Init+0x22>
 8006488:	|     |  /-- e000      	b.n	800648c <DS18B20_Init+0x84>
            }
            else break;
 800648a:	|     \--|-> bf00      	nop
        }
        return 1;
 800648c:	|        \-> 2301      	movs	r3, #1
 800648e:	|        /-- e000      	b.n	8006492 <DS18B20_Init+0x8a>
    }
    return 0;
 8006490:	\--------|-> 2300      	movs	r3, #0
}
 8006492:	         \-> 4618      	mov	r0, r3
 8006494:	             3710      	adds	r7, #16
 8006496:	             46bd      	mov	sp, r7
 8006498:	             bd80      	pop	{r7, pc}

0800649a <DS18B20_ReadROM>:

void DS18B20_ReadROM(DS18B20 *sensor){
 800649a:	       b580      	push	{r7, lr}
 800649c:	       b082      	sub	sp, #8
 800649e:	       af00      	add	r7, sp, #0
 80064a0:	       6078      	str	r0, [r7, #4]
    if(OneWire_Reset(sensor->ow) == ONE_WIRE_EMPTY_BUS) return;
 80064a2:	       687b      	ldr	r3, [r7, #4]
 80064a4:	       681b      	ldr	r3, [r3, #0]
 80064a6:	       4618      	mov	r0, r3
 80064a8:	       f7fc fc0d 	bl	8002cc6 <OneWire_Reset>
 80064ac:	       4603      	mov	r3, r0
 80064ae:	       2b01      	cmp	r3, #1
 80064b0:	/----- d00e      	beq.n	80064d0 <DS18B20_ReadROM+0x36>
    OneWire_Write(sensor->ow, DS18B20_READ_ROM);
 80064b2:	|      687b      	ldr	r3, [r7, #4]
 80064b4:	|      681b      	ldr	r3, [r3, #0]
 80064b6:	|      2133      	movs	r1, #51	; 0x33
 80064b8:	|      4618      	mov	r0, r3
 80064ba:	|      f7fc fc68 	bl	8002d8e <OneWire_Write>
    OneWire_ReadArray(sensor->ow, (uint8_t *)(&sensor->serialNumber), 8);
 80064be:	|      687b      	ldr	r3, [r7, #4]
 80064c0:	|      6818      	ldr	r0, [r3, #0]
 80064c2:	|      687b      	ldr	r3, [r7, #4]
 80064c4:	|      3308      	adds	r3, #8
 80064c6:	|      2208      	movs	r2, #8
 80064c8:	|      4619      	mov	r1, r3
 80064ca:	|      f7fc fc42 	bl	8002d52 <OneWire_ReadArray>
 80064ce:	|  /-- e000      	b.n	80064d2 <DS18B20_ReadROM+0x38>
    if(OneWire_Reset(sensor->ow) == ONE_WIRE_EMPTY_BUS) return;
 80064d0:	\--|-> bf00      	nop
}
 80064d2:	   \-> 3708      	adds	r7, #8
 80064d4:	       46bd      	mov	sp, r7
 80064d6:	       bd80      	pop	{r7, pc}

080064d8 <DS18B20_ReadTemperature>:

uint16_t DS18B20_ReadTemperature(DS18B20 *sensor){
 80064d8:	    b580      	push	{r7, lr}
 80064da:	    b084      	sub	sp, #16
 80064dc:	    af00      	add	r7, sp, #0
 80064de:	    6078      	str	r0, [r7, #4]
    OneWireStatus status = OneWire_MatchRom(sensor->ow, sensor->serialNumber);
 80064e0:	    687b      	ldr	r3, [r7, #4]
 80064e2:	    681a      	ldr	r2, [r3, #0]
 80064e4:	    687b      	ldr	r3, [r7, #4]
 80064e6:	    689b      	ldr	r3, [r3, #8]
 80064e8:	    4619      	mov	r1, r3
 80064ea:	    4610      	mov	r0, r2
 80064ec:	    f7fc fe06 	bl	80030fc <OneWire_MatchRom>
 80064f0:	    4603      	mov	r3, r0
 80064f2:	    73fb      	strb	r3, [r7, #15]
    if(status == ONE_WIRE_OK){
 80064f4:	    7bfb      	ldrb	r3, [r7, #15]
 80064f6:	    2b00      	cmp	r3, #0
 80064f8:	/-- d118      	bne.n	800652c <DS18B20_ReadTemperature+0x54>
        OneWire_Write(sensor->ow, DS18B20_READ_SCRATCHPAD);
 80064fa:	|   687b      	ldr	r3, [r7, #4]
 80064fc:	|   681b      	ldr	r3, [r3, #0]
 80064fe:	|   21be      	movs	r1, #190	; 0xbe
 8006500:	|   4618      	mov	r0, r3
 8006502:	|   f7fc fc44 	bl	8002d8e <OneWire_Write>
        OneWire_ReadArray(sensor->ow, (uint8_t *)(&(sensor->scratchpad)), 2);
 8006506:	|   687b      	ldr	r3, [r7, #4]
 8006508:	|   6818      	ldr	r0, [r3, #0]
 800650a:	|   687b      	ldr	r3, [r7, #4]
 800650c:	|   330c      	adds	r3, #12
 800650e:	|   2202      	movs	r2, #2
 8006510:	|   4619      	mov	r1, r3
 8006512:	|   f7fc fc1e 	bl	8002d52 <OneWire_ReadArray>
        sensor->temperature = (float)(sensor->scratchpad.temperature >> 4);
 8006516:	|   687b      	ldr	r3, [r7, #4]
 8006518:	|   899b      	ldrh	r3, [r3, #12]
 800651a:	|   091b      	lsrs	r3, r3, #4
 800651c:	|   b29b      	uxth	r3, r3
 800651e:	|   ee07 3a90 	vmov	s15, r3
 8006522:	|   eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006526:	|   687b      	ldr	r3, [r7, #4]
 8006528:	|   edc3 7a06 	vstr	s15, [r3, #24]
    }
    return (uint16_t)(sensor->scratchpad.temperature);
 800652c:	\-> 687b      	ldr	r3, [r7, #4]
 800652e:	    899b      	ldrh	r3, [r3, #12]
 8006530:	    4618      	mov	r0, r3
 8006532:	    3710      	adds	r7, #16
 8006534:	    46bd      	mov	sp, r7
 8006536:	    bd80      	pop	{r7, pc}

08006538 <GSM_Init>:
#include "delay.h"
#include "string.h"
#include "stdlib.h"
#include "sx126x.h"

uint8_t GSM_Init(GSM *driver){
 8006538:	       b580      	push	{r7, lr}
 800653a:	       b084      	sub	sp, #16
 800653c:	       af02      	add	r7, sp, #8
 800653e:	       6078      	str	r0, [r7, #4]
    gpio_init(driver->gpio.tx, driver->gpio.__tx_af_pin, Push_pull, no_pull, Very_high_speed);
 8006540:	       687b      	ldr	r3, [r7, #4]
 8006542:	       7858      	ldrb	r0, [r3, #1]
 8006544:	       687b      	ldr	r3, [r7, #4]
 8006546:	       7a59      	ldrb	r1, [r3, #9]
 8006548:	       2303      	movs	r3, #3
 800654a:	       9300      	str	r3, [sp, #0]
 800654c:	       2300      	movs	r3, #0
 800654e:	       2200      	movs	r2, #0
 8006550:	       f7fb fc42 	bl	8001dd8 <gpio_init>
    gpio_init(driver->gpio.rx, driver->gpio.__rx_af_pin, Open_drain, no_pull, Input);
 8006554:	       687b      	ldr	r3, [r7, #4]
 8006556:	       7818      	ldrb	r0, [r3, #0]
 8006558:	       687b      	ldr	r3, [r7, #4]
 800655a:	       7a99      	ldrb	r1, [r3, #10]
 800655c:	       2304      	movs	r3, #4
 800655e:	       9300      	str	r3, [sp, #0]
 8006560:	       2300      	movs	r3, #0
 8006562:	       2201      	movs	r2, #1
 8006564:	       f7fb fc38 	bl	8001dd8 <gpio_init>
    gpio_init(driver->gpio.pwr, General_output, Push_pull, pull_up, Low_speed);
 8006568:	       687b      	ldr	r3, [r7, #4]
 800656a:	       79d8      	ldrb	r0, [r3, #7]
 800656c:	       2300      	movs	r3, #0
 800656e:	       9300      	str	r3, [sp, #0]
 8006570:	       2301      	movs	r3, #1
 8006572:	       2200      	movs	r2, #0
 8006574:	       2101      	movs	r1, #1
 8006576:	       f7fb fc2f 	bl	8001dd8 <gpio_init>

    UART_init(driver->uart, 9600, FULL_DUPLEX);
 800657a:	       687b      	ldr	r3, [r7, #4]
 800657c:	       691b      	ldr	r3, [r3, #16]
 800657e:	       2200      	movs	r2, #0
 8006580:	       f44f 5116 	mov.w	r1, #9600	; 0x2580
 8006584:	       4618      	mov	r0, r3
 8006586:	       f7ff fa07 	bl	8005998 <UART_init>
    driver->uart->CR1 |= USART_CR1_IDLEIE;
 800658a:	       687b      	ldr	r3, [r7, #4]
 800658c:	       691b      	ldr	r3, [r3, #16]
 800658e:	       681a      	ldr	r2, [r3, #0]
 8006590:	       687b      	ldr	r3, [r7, #4]
 8006592:	       691b      	ldr	r3, [r3, #16]
 8006594:	       f042 0210 	orr.w	r2, r2, #16
 8006598:	       601a      	str	r2, [r3, #0]
    Delay(100);
 800659a:	       2064      	movs	r0, #100	; 0x64
 800659c:	       f7ff fb1a 	bl	8005bd4 <Delay>
    if(sim7000g.frame_error_counter > 0)
 80065a0:	       4b28      	ldr	r3, [pc, #160]	; (8006644 <GSM_Init+0x10c>)
 80065a2:	       f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80065a6:	       2b00      	cmp	r3, #0
 80065a8:	   /-- d002      	beq.n	80065b0 <GSM_Init+0x78>
        GSM_TogglePower(&sim7000g);
 80065aa:	   |   4826      	ldr	r0, [pc, #152]	; (8006644 <GSM_Init+0x10c>)
 80065ac:	   |   f000 f91c 	bl	80067e8 <GSM_TogglePower>
    Delay(10000);
 80065b0:	   \-> f242 7010 	movw	r0, #10000	; 0x2710
 80065b4:	       f7ff fb0e 	bl	8005bd4 <Delay>
    memset(sim7000g.rx_buf, 0, sizeof(sim7000g.rx_buf));
 80065b8:	       2240      	movs	r2, #64	; 0x40
 80065ba:	       2100      	movs	r1, #0
 80065bc:	       4822      	ldr	r0, [pc, #136]	; (8006648 <GSM_Init+0x110>)
 80065be:	       f003 fa0f 	bl	80099e0 <memset>
    if(GSM_isAlive(driver) != 0){
 80065c2:	       6878      	ldr	r0, [r7, #4]
 80065c4:	       f000 f8e0 	bl	8006788 <GSM_isAlive>
 80065c8:	       4603      	mov	r3, r0
 80065ca:	       2b00      	cmp	r3, #0
 80065cc:	   /-- d006      	beq.n	80065dc <GSM_Init+0xa4>
        Delay(1000);
 80065ce:	   |   f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065d2:	   |   f7ff faff 	bl	8005bd4 <Delay>
        GSM_isAlive(driver);
 80065d6:	   |   6878      	ldr	r0, [r7, #4]
 80065d8:	   |   f000 f8d6 	bl	8006788 <GSM_isAlive>
    }
    if(driver->status.pwr_status){
 80065dc:	   \-> 687b      	ldr	r3, [r7, #4]
 80065de:	       f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80065e2:	       f003 0310 	and.w	r3, r3, #16
 80065e6:	       b2db      	uxtb	r3, r3
 80065e8:	       2b00      	cmp	r3, #0
 80065ea:	/----- d025      	beq.n	8006638 <GSM_Init+0x100>
        Delay(500);
 80065ec:	|      f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80065f0:	|      f7ff faf0 	bl	8005bd4 <Delay>
        GSM_CheckSIM(driver);
 80065f4:	|      6878      	ldr	r0, [r7, #4]
 80065f6:	|      f000 fb13 	bl	8006c20 <GSM_CheckSIM>
        Delay(500);
 80065fa:	|      f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80065fe:	|      f7ff fae9 	bl	8005bd4 <Delay>
        GSM_CheckGSM(driver);
 8006602:	|      6878      	ldr	r0, [r7, #4]
 8006604:	|      f000 fb1a 	bl	8006c3c <GSM_CheckGSM>
        Delay(200);
 8006608:	|      20c8      	movs	r0, #200	; 0xc8
 800660a:	|      f7ff fae3 	bl	8005bd4 <Delay>
        GSM_DisableEcho(driver);
 800660e:	|      6878      	ldr	r0, [r7, #4]
 8006610:	|      f000 faea 	bl	8006be8 <GSM_DisableEcho>
        if(driver->status.gsm_reg_status && driver->status.sim_status)
 8006614:	|      687b      	ldr	r3, [r7, #4]
 8006616:	|      f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800661a:	|      f003 030e 	and.w	r3, r3, #14
 800661e:	|      b2db      	uxtb	r3, r3
 8006620:	|      2b00      	cmp	r3, #0
 8006622:	+----- d009      	beq.n	8006638 <GSM_Init+0x100>
 8006624:	|      687b      	ldr	r3, [r7, #4]
 8006626:	|      f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800662a:	|      f003 0308 	and.w	r3, r3, #8
 800662e:	|      b2db      	uxtb	r3, r3
 8006630:	|      2b00      	cmp	r3, #0
 8006632:	+----- d001      	beq.n	8006638 <GSM_Init+0x100>
            return 0;
 8006634:	|      2300      	movs	r3, #0
 8006636:	|  /-- e000      	b.n	800663a <GSM_Init+0x102>
    }
    return 1;
 8006638:	\--|-> 2301      	movs	r3, #1
}
 800663a:	   \-> 4618      	mov	r0, r3
 800663c:	       3708      	adds	r7, #8
 800663e:	       46bd      	mov	sp, r7
 8006640:	       bd80      	pop	{r7, pc}
 8006642:	       bf00      	nop
 8006644:	       0948      	lsrs	r0, r1, #5
 8006646:	       2000      	movs	r0, #0
 8006648:	       0978      	lsrs	r0, r7, #5
 800664a:	       2000      	movs	r0, #0

0800664c <GSM_wait_for_answer>:
void GSM_wait_for_answer(GSM *driver, int32_t timeout_ms){
 800664c:	       b580      	push	{r7, lr}
 800664e:	       b082      	sub	sp, #8
 8006650:	       af00      	add	r7, sp, #0
 8006652:	       6078      	str	r0, [r7, #4]
 8006654:	       6039      	str	r1, [r7, #0]
    while((timeout_ms--) && (driver->status.waiting_for_answer))
 8006656:	   /-- e002      	b.n	800665e <GSM_wait_for_answer+0x12>
        Delay(1);
 8006658:	/--|-> 2001      	movs	r0, #1
 800665a:	|  |   f7ff fabb 	bl	8005bd4 <Delay>
    while((timeout_ms--) && (driver->status.waiting_for_answer))
 800665e:	|  \-> 683b      	ldr	r3, [r7, #0]
 8006660:	|      1e5a      	subs	r2, r3, #1
 8006662:	|      603a      	str	r2, [r7, #0]
 8006664:	|      2b00      	cmp	r3, #0
 8006666:	|  /-- d007      	beq.n	8006678 <GSM_wait_for_answer+0x2c>
 8006668:	|  |   687b      	ldr	r3, [r7, #4]
 800666a:	|  |   f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800666e:	|  |   f003 0301 	and.w	r3, r3, #1
 8006672:	|  |   b2db      	uxtb	r3, r3
 8006674:	|  |   2b00      	cmp	r3, #0
 8006676:	\--|-- d1ef      	bne.n	8006658 <GSM_wait_for_answer+0xc>
    if(timeout_ms == 0) driver->status.timeout_event = 1;
 8006678:	   \-> 683b      	ldr	r3, [r7, #0]
 800667a:	       2b00      	cmp	r3, #0
 800667c:	   /-- d106      	bne.n	800668c <GSM_wait_for_answer+0x40>
 800667e:	   |   687a      	ldr	r2, [r7, #4]
 8006680:	   |   f892 3072 	ldrb.w	r3, [r2, #114]	; 0x72
 8006684:	   |   f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006688:	   |   f882 3072 	strb.w	r3, [r2, #114]	; 0x72
}
 800668c:	   \-> bf00      	nop
 800668e:	       3708      	adds	r7, #8
 8006690:	       46bd      	mov	sp, r7
 8006692:	       bd80      	pop	{r7, pc}

08006694 <GSM_SendCMD>:

void GSM_SendCMD(GSM *driver, char *cmd){
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
    UART_tx_string(driver->uart, cmd);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff fa61 	bl	8005b6c <UART_tx_string>
    UART_tx(driver->uart, '\r');
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	210d      	movs	r1, #13
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7ff fa39 	bl	8005b28 <UART_tx>
    driver->tx_counter++;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 80066bc:	3301      	adds	r3, #1
 80066be:	b29a      	uxth	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
    driver->status.waiting_for_answer = 1;
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 80066cc:	f043 0301 	orr.w	r3, r3, #1
 80066d0:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
    GSM_wait_for_answer(driver, 2000);
 80066d4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff ffb7 	bl	800664c <GSM_wait_for_answer>
}
 80066de:	bf00      	nop
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <GSM_SetAPN>:

void GSM_SetAPN(GSM *driver, char *apn){
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b082      	sub	sp, #8
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	6039      	str	r1, [r7, #0]
    // memcpy(buf, cmd, cmd_len);
    // memcpy(buf + cmd_len, apn, apn_len);
    // memcpy(buf + cmd_len + apn_len, "\"", 2);
    // GSM_SendCMD(driver, buf);
    // free(buf);
    UART_tx_string(driver->uart, "AT+CSTT=\"");
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	4913      	ldr	r1, [pc, #76]	; (8006744 <GSM_SetAPN+0x5e>)
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff fa38 	bl	8005b6c <UART_tx_string>
    UART_tx_string(driver->uart, apn);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	4618      	mov	r0, r3
 8006704:	f7ff fa32 	bl	8005b6c <UART_tx_string>
    UART_tx_string(driver->uart, "\"\r");
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	490e      	ldr	r1, [pc, #56]	; (8006748 <GSM_SetAPN+0x62>)
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff fa2c 	bl	8005b6c <UART_tx_string>
    driver->tx_counter++;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800671a:	3301      	adds	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
    driver->status.waiting_for_answer = 1;
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 800672a:	f043 0301 	orr.w	r3, r3, #1
 800672e:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
    GSM_wait_for_answer(driver, 2000);
 8006732:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff ff88 	bl	800664c <GSM_wait_for_answer>
}
 800673c:	bf00      	nop
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	af14      	add	r7, sp, #80	; 0x50
 8006746:	0800      	lsrs	r0, r0, #32
 8006748:	af20      	add	r7, sp, #128	; 0x80
 800674a:	0800      	lsrs	r0, r0, #32

0800674c <GSM_CheckSignal>:

void GSM_CheckSignal(GSM *driver){
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
    GSM_SendCMD(driver, "AT+CSQ");
 8006754:	4903      	ldr	r1, [pc, #12]	; (8006764 <GSM_CheckSignal+0x18>)
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff ff9c 	bl	8006694 <GSM_SendCMD>
}
 800675c:	bf00      	nop
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	af24      	add	r7, sp, #144	; 0x90
 8006766:	0800      	lsrs	r0, r0, #32

08006768 <GSM_GetVBAT>:

uint16_t GSM_GetVBAT(GSM *driver){
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
    GSM_SendCMD(driver, "AT+CBC");
 8006770:	4904      	ldr	r1, [pc, #16]	; (8006784 <GSM_GetVBAT+0x1c>)
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff ff8e 	bl	8006694 <GSM_SendCMD>
    return driver->vbat;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	8bdb      	ldrh	r3, [r3, #30]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	af2c      	add	r7, sp, #176	; 0xb0
 8006786:	0800      	lsrs	r0, r0, #32

08006788 <GSM_isAlive>:
uint8_t GSM_isAlive(GSM *driver){
 8006788:	       b580      	push	{r7, lr}
 800678a:	       b082      	sub	sp, #8
 800678c:	       af00      	add	r7, sp, #0
 800678e:	       6078      	str	r0, [r7, #4]
    GSM_SendCMD(driver, "AT");
 8006790:	       4914      	ldr	r1, [pc, #80]	; (80067e4 <GSM_isAlive+0x5c>)
 8006792:	       6878      	ldr	r0, [r7, #4]
 8006794:	       f7ff ff7e 	bl	8006694 <GSM_SendCMD>
    if(driver->status.timeout_event){
 8006798:	       687b      	ldr	r3, [r7, #4]
 800679a:	       f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800679e:	       f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	       b2db      	uxtb	r3, r3
 80067a4:	       2b00      	cmp	r3, #0
 80067a6:	   /-- d008      	beq.n	80067ba <GSM_isAlive+0x32>
        driver->status.pwr_status = 0;
 80067a8:	   |   687a      	ldr	r2, [r7, #4]
 80067aa:	   |   f892 3072 	ldrb.w	r3, [r2, #114]	; 0x72
 80067ae:	   |   f36f 1304 	bfc	r3, #4, #1
 80067b2:	   |   f882 3072 	strb.w	r3, [r2, #114]	; 0x72
        return 1;
 80067b6:	   |   2301      	movs	r3, #1
 80067b8:	/--|-- e00f      	b.n	80067da <GSM_isAlive+0x52>
    }
    if(driver->status.last_answer == 0)
 80067ba:	|  \-> 687b      	ldr	r3, [r7, #4]
 80067bc:	|      f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80067c0:	|      f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067c4:	|      b2db      	uxtb	r3, r3
 80067c6:	|      2b00      	cmp	r3, #0
 80067c8:	|  /-- d106      	bne.n	80067d8 <GSM_isAlive+0x50>
        driver->status.pwr_status = 1;
 80067ca:	|  |   687a      	ldr	r2, [r7, #4]
 80067cc:	|  |   f892 3072 	ldrb.w	r3, [r2, #114]	; 0x72
 80067d0:	|  |   f043 0310 	orr.w	r3, r3, #16
 80067d4:	|  |   f882 3072 	strb.w	r3, [r2, #114]	; 0x72
    return 0;
 80067d8:	|  \-> 2300      	movs	r3, #0
}
 80067da:	\----> 4618      	mov	r0, r3
 80067dc:	       3708      	adds	r7, #8
 80067de:	       46bd      	mov	sp, r7
 80067e0:	       bd80      	pop	{r7, pc}
 80067e2:	       bf00      	nop
 80067e4:	       af34      	add	r7, sp, #208	; 0xd0
 80067e6:	       0800      	lsrs	r0, r0, #32

080067e8 <GSM_TogglePower>:
void GSM_TogglePower(GSM *driver){
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
    gpio_state(driver->gpio.pwr, LOW);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	79db      	ldrb	r3, [r3, #7]
 80067f4:	2100      	movs	r1, #0
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fb fbd2 	bl	8001fa0 <gpio_state>
    Delay(900);
 80067fc:	f44f 7061 	mov.w	r0, #900	; 0x384
 8006800:	f7ff f9e8 	bl	8005bd4 <Delay>
    gpio_state(driver->gpio.pwr, HIGH);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	79db      	ldrb	r3, [r3, #7]
 8006808:	2101      	movs	r1, #1
 800680a:	4618      	mov	r0, r3
 800680c:	f7fb fbc8 	bl	8001fa0 <gpio_state>
    Delay(5000);
 8006810:	f241 3088 	movw	r0, #5000	; 0x1388
 8006814:	f7ff f9de 	bl	8005bd4 <Delay>
}
 8006818:	bf00      	nop
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <GSM_PowerOFF>:
void GSM_PowerOFF(GSM *driver){
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
    GSM_SendCMD(driver, "AT+CPOWD=1");
 8006828:	4903      	ldr	r1, [pc, #12]	; (8006838 <GSM_PowerOFF+0x18>)
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff ff32 	bl	8006694 <GSM_SendCMD>
}
 8006830:	bf00      	nop
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	af38      	add	r7, sp, #224	; 0xe0
 800683a:	0800      	lsrs	r0, r0, #32

0800683c <GSM_InitGPRS>:
uint8_t GSM_InitGPRS(GSM *driver){
 800683c:	       b580      	push	{r7, lr}
 800683e:	       b082      	sub	sp, #8
 8006840:	       af00      	add	r7, sp, #0
 8006842:	       6078      	str	r0, [r7, #4]
    GSM_CheckGPRS(driver);
 8006844:	       6878      	ldr	r0, [r7, #4]
 8006846:	       f000 fa07 	bl	8006c58 <GSM_CheckGPRS>
    if(driver->status.gprs_connected && driver->status.gsm_reg_status){
 800684a:	       687b      	ldr	r3, [r7, #4]
 800684c:	       f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8006850:	       f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006854:	       b2db      	uxtb	r3, r3
 8006856:	       2b00      	cmp	r3, #0
 8006858:	/----- d041      	beq.n	80068de <GSM_InitGPRS+0xa2>
 800685a:	|      687b      	ldr	r3, [r7, #4]
 800685c:	|      f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8006860:	|      f003 030e 	and.w	r3, r3, #14
 8006864:	|      b2db      	uxtb	r3, r3
 8006866:	|      2b00      	cmp	r3, #0
 8006868:	+----- d039      	beq.n	80068de <GSM_InitGPRS+0xa2>
        GSM_CheckIPstatus(driver);
 800686a:	|      6878      	ldr	r0, [r7, #4]
 800686c:	|      f000 fa26 	bl	8006cbc <GSM_CheckIPstatus>
        if(driver->ip_status == GPRS_INITIAL){
 8006870:	|      687b      	ldr	r3, [r7, #4]
 8006872:	|      f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006876:	|      2b01      	cmp	r3, #1
 8006878:	+----- d131      	bne.n	80068de <GSM_InitGPRS+0xa2>
            GSM_SetAPN(driver, "internet.tele2.ru");
 800687a:	|      491b      	ldr	r1, [pc, #108]	; (80068e8 <GSM_InitGPRS+0xac>)
 800687c:	|      6878      	ldr	r0, [r7, #4]
 800687e:	|      f7ff ff32 	bl	80066e6 <GSM_SetAPN>
            Delay(500);
 8006882:	|      f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006886:	|      f7ff f9a5 	bl	8005bd4 <Delay>
            GSM_CheckIPstatus(driver);
 800688a:	|      6878      	ldr	r0, [r7, #4]
 800688c:	|      f000 fa16 	bl	8006cbc <GSM_CheckIPstatus>
            if(driver->ip_status == GPRS_START){
 8006890:	|      687b      	ldr	r3, [r7, #4]
 8006892:	|      f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006896:	|      2b02      	cmp	r3, #2
 8006898:	+----- d121      	bne.n	80068de <GSM_InitGPRS+0xa2>
                GSM_SendCMD(driver, "AT+CIICR");
 800689a:	|      4914      	ldr	r1, [pc, #80]	; (80068ec <GSM_InitGPRS+0xb0>)
 800689c:	|      6878      	ldr	r0, [r7, #4]
 800689e:	|      f7ff fef9 	bl	8006694 <GSM_SendCMD>
                Delay(600);
 80068a2:	|      f44f 7016 	mov.w	r0, #600	; 0x258
 80068a6:	|      f7ff f995 	bl	8005bd4 <Delay>
                GSM_CheckIPstatus(driver);
 80068aa:	|      6878      	ldr	r0, [r7, #4]
 80068ac:	|      f000 fa06 	bl	8006cbc <GSM_CheckIPstatus>
                if(driver->ip_status == GPRS_GPRSACT){
 80068b0:	|      687b      	ldr	r3, [r7, #4]
 80068b2:	|      f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80068b6:	|      2b03      	cmp	r3, #3
 80068b8:	+----- d111      	bne.n	80068de <GSM_InitGPRS+0xa2>
                    GSM_SendCMD(driver, "AT+CIFSR");
 80068ba:	|      490d      	ldr	r1, [pc, #52]	; (80068f0 <GSM_InitGPRS+0xb4>)
 80068bc:	|      6878      	ldr	r0, [r7, #4]
 80068be:	|      f7ff fee9 	bl	8006694 <GSM_SendCMD>
                    Delay(500);
 80068c2:	|      f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80068c6:	|      f7ff f985 	bl	8005bd4 <Delay>
                    GSM_CheckIPstatus(driver);
 80068ca:	|      6878      	ldr	r0, [r7, #4]
 80068cc:	|      f000 f9f6 	bl	8006cbc <GSM_CheckIPstatus>
                    if(driver->ip_status == GPRS_STATUS){
 80068d0:	|      687b      	ldr	r3, [r7, #4]
 80068d2:	|      f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80068d6:	|      2b04      	cmp	r3, #4
 80068d8:	+----- d101      	bne.n	80068de <GSM_InitGPRS+0xa2>
                        return 0;  // можно открывать TCP соединение
 80068da:	|      2300      	movs	r3, #0
 80068dc:	|  /-- e000      	b.n	80068e0 <GSM_InitGPRS+0xa4>
                    }
                }
            }
        }
    }
    return 1;
 80068de:	\--|-> 2301      	movs	r3, #1
}
 80068e0:	   \-> 4618      	mov	r0, r3
 80068e2:	       3708      	adds	r7, #8
 80068e4:	       46bd      	mov	sp, r7
 80068e6:	       bd80      	pop	{r7, pc}
 80068e8:	       af44      	add	r7, sp, #272	; 0x110
 80068ea:	       0800      	lsrs	r0, r0, #32
 80068ec:	       af58      	add	r7, sp, #352	; 0x160
 80068ee:	       0800      	lsrs	r0, r0, #32
 80068f0:	       af64      	add	r7, sp, #400	; 0x190
 80068f2:	       0800      	lsrs	r0, r0, #32

080068f4 <GSM_SendSMS>:

void GSM_SendSMS(GSM *driver, char *data, char *phone_num){
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08a      	sub	sp, #40	; 0x28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
    GSM_SendCMD(driver, "AT+CMGF=1");
 8006900:	4923      	ldr	r1, [pc, #140]	; (8006990 <GSM_SendSMS+0x9c>)
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7ff fec6 	bl	8006694 <GSM_SendCMD>
    char *cmd = "AT+CMGS=\"";
 8006908:	4b22      	ldr	r3, [pc, #136]	; (8006994 <GSM_SendSMS+0xa0>)
 800690a:	627b      	str	r3, [r7, #36]	; 0x24
    size_t cmd_len = strlen(cmd);
 800690c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800690e:	f002 ffd5 	bl	80098bc <strlen>
 8006912:	6238      	str	r0, [r7, #32]
    size_t phone_len = strlen(phone_num);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f002 ffd1 	bl	80098bc <strlen>
 800691a:	61f8      	str	r0, [r7, #28]

    char *buf = malloc(phone_len + cmd_len + 2);
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	4413      	add	r3, r2
 8006922:	3302      	adds	r3, #2
 8006924:	4618      	mov	r0, r3
 8006926:	f003 f88b 	bl	8009a40 <malloc>
 800692a:	4603      	mov	r3, r0
 800692c:	61bb      	str	r3, [r7, #24]
    memcpy(buf, cmd, cmd_len);
 800692e:	6a3a      	ldr	r2, [r7, #32]
 8006930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006932:	69b8      	ldr	r0, [r7, #24]
 8006934:	f003 f894 	bl	8009a60 <memcpy>
    memcpy(buf + cmd_len, phone_num, phone_len);
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	4413      	add	r3, r2
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	4618      	mov	r0, r3
 8006944:	f003 f88c 	bl	8009a60 <memcpy>
    memcpy(buf + cmd_len + phone_len, "\"", 2);
 8006948:	6a3a      	ldr	r2, [r7, #32]
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	4413      	add	r3, r2
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	4413      	add	r3, r2
 8006952:	2202      	movs	r2, #2
 8006954:	4910      	ldr	r1, [pc, #64]	; (8006998 <GSM_SendSMS+0xa4>)
 8006956:	4618      	mov	r0, r3
 8006958:	f003 f882 	bl	8009a60 <memcpy>
    GSM_SendCMD(driver, buf);
 800695c:	69b9      	ldr	r1, [r7, #24]
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f7ff fe98 	bl	8006694 <GSM_SendCMD>
    UART_tx_string(driver->uart, data);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	68b9      	ldr	r1, [r7, #8]
 800696a:	4618      	mov	r0, r3
 800696c:	f7ff f8fe 	bl	8005b6c <UART_tx_string>
    char end[2] = {0x1A, 0x00};
 8006970:	231a      	movs	r3, #26
 8006972:	82bb      	strh	r3, [r7, #20]
    GSM_SendCMD(driver, end);
 8006974:	f107 0314 	add.w	r3, r7, #20
 8006978:	4619      	mov	r1, r3
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f7ff fe8a 	bl	8006694 <GSM_SendCMD>
    free(buf);
 8006980:	69b8      	ldr	r0, [r7, #24]
 8006982:	f003 f865 	bl	8009a50 <free>
}
 8006986:	bf00      	nop
 8006988:	3728      	adds	r7, #40	; 0x28
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	af70      	add	r7, sp, #448	; 0x1c0
 8006992:	0800      	lsrs	r0, r0, #32
 8006994:	af7c      	add	r7, sp, #496	; 0x1f0
 8006996:	0800      	lsrs	r0, r0, #32
 8006998:	af88      	add	r7, sp, #544	; 0x220
 800699a:	0800      	lsrs	r0, r0, #32

0800699c <GSM_OpenConnection>:

void GSM_OpenConnection(GSM *driver, char *ip, char *port){
 800699c:	    b580      	push	{r7, lr}
 800699e:	    b084      	sub	sp, #16
 80069a0:	    af00      	add	r7, sp, #0
 80069a2:	    60f8      	str	r0, [r7, #12]
 80069a4:	    60b9      	str	r1, [r7, #8]
 80069a6:	    607a      	str	r2, [r7, #4]
    if(driver->ip_status == GPRS_STATUS){
 80069a8:	    68fb      	ldr	r3, [r7, #12]
 80069aa:	    f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80069ae:	    2b04      	cmp	r3, #4
 80069b0:	/-- d13e      	bne.n	8006a30 <GSM_OpenConnection+0x94>
        // memcpy(buf + cmd_len, ip, ip_len);
        // memcpy(buf + cmd_len + ip_len, "\"", 1);
        // memcpy(buf + cmd_len + ip_len + 1, port, port_len + 1);
        // GSM_SendCMD(driver, buf);
        // free(buf);
        UART_tx_string(driver->uart, "AT+CIPSTART=\"TCP\",\"");
 80069b2:	|   68fb      	ldr	r3, [r7, #12]
 80069b4:	|   691b      	ldr	r3, [r3, #16]
 80069b6:	|   4920      	ldr	r1, [pc, #128]	; (8006a38 <GSM_OpenConnection+0x9c>)
 80069b8:	|   4618      	mov	r0, r3
 80069ba:	|   f7ff f8d7 	bl	8005b6c <UART_tx_string>
        UART_tx_string(driver->uart, ip);
 80069be:	|   68fb      	ldr	r3, [r7, #12]
 80069c0:	|   691b      	ldr	r3, [r3, #16]
 80069c2:	|   68b9      	ldr	r1, [r7, #8]
 80069c4:	|   4618      	mov	r0, r3
 80069c6:	|   f7ff f8d1 	bl	8005b6c <UART_tx_string>
        UART_tx_string(driver->uart, "\",");
 80069ca:	|   68fb      	ldr	r3, [r7, #12]
 80069cc:	|   691b      	ldr	r3, [r3, #16]
 80069ce:	|   491b      	ldr	r1, [pc, #108]	; (8006a3c <GSM_OpenConnection+0xa0>)
 80069d0:	|   4618      	mov	r0, r3
 80069d2:	|   f7ff f8cb 	bl	8005b6c <UART_tx_string>
        UART_tx_string(driver->uart, port);
 80069d6:	|   68fb      	ldr	r3, [r7, #12]
 80069d8:	|   691b      	ldr	r3, [r3, #16]
 80069da:	|   6879      	ldr	r1, [r7, #4]
 80069dc:	|   4618      	mov	r0, r3
 80069de:	|   f7ff f8c5 	bl	8005b6c <UART_tx_string>
        UART_tx(driver->uart, '\r');
 80069e2:	|   68fb      	ldr	r3, [r7, #12]
 80069e4:	|   691b      	ldr	r3, [r3, #16]
 80069e6:	|   210d      	movs	r1, #13
 80069e8:	|   4618      	mov	r0, r3
 80069ea:	|   f7ff f89d 	bl	8005b28 <UART_tx>
        driver->tx_counter++;
 80069ee:	|   68fb      	ldr	r3, [r7, #12]
 80069f0:	|   f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 80069f4:	|   3301      	adds	r3, #1
 80069f6:	|   b29a      	uxth	r2, r3
 80069f8:	|   68fb      	ldr	r3, [r7, #12]
 80069fa:	|   f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        driver->status.waiting_for_answer = 1;
 80069fe:	|   68fa      	ldr	r2, [r7, #12]
 8006a00:	|   f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 8006a04:	|   f043 0301 	orr.w	r3, r3, #1
 8006a08:	|   f882 3071 	strb.w	r3, [r2, #113]	; 0x71
        driver->status.tcp_server_answer = 0;
 8006a0c:	|   68fa      	ldr	r2, [r7, #12]
 8006a0e:	|   f892 3073 	ldrb.w	r3, [r2, #115]	; 0x73
 8006a12:	|   f36f 0300 	bfc	r3, #0, #1
 8006a16:	|   f882 3073 	strb.w	r3, [r2, #115]	; 0x73
        GSM_wait_for_answer(driver, 2000);
 8006a1a:	|   f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006a1e:	|   68f8      	ldr	r0, [r7, #12]
 8006a20:	|   f7ff fe14 	bl	800664c <GSM_wait_for_answer>
        Delay(250);
 8006a24:	|   20fa      	movs	r0, #250	; 0xfa
 8006a26:	|   f7ff f8d5 	bl	8005bd4 <Delay>
        GSM_CheckIPstatus(driver);
 8006a2a:	|   68f8      	ldr	r0, [r7, #12]
 8006a2c:	|   f000 f946 	bl	8006cbc <GSM_CheckIPstatus>
    }
}
 8006a30:	\-> bf00      	nop
 8006a32:	    3710      	adds	r7, #16
 8006a34:	    46bd      	mov	sp, r7
 8006a36:	    bd80      	pop	{r7, pc}
 8006a38:	    af8c      	add	r7, sp, #560	; 0x230
 8006a3a:	    0800      	lsrs	r0, r0, #32
 8006a3c:	    afa0      	add	r7, sp, #640	; 0x280
 8006a3e:	    0800      	lsrs	r0, r0, #32

08006a40 <GSM_SendTCP>:

void GSM_SendTCP(GSM *driver, char *data, uint16_t data_len){
 8006a40:	       b580      	push	{r7, lr}
 8006a42:	       b086      	sub	sp, #24
 8006a44:	       af00      	add	r7, sp, #0
 8006a46:	       60f8      	str	r0, [r7, #12]
 8006a48:	       60b9      	str	r1, [r7, #8]
 8006a4a:	       4613      	mov	r3, r2
 8006a4c:	       80fb      	strh	r3, [r7, #6]
    UART_tx_string(driver->uart, "AT+CIPSEND");
 8006a4e:	       68fb      	ldr	r3, [r7, #12]
 8006a50:	       691b      	ldr	r3, [r3, #16]
 8006a52:	       491b      	ldr	r1, [pc, #108]	; (8006ac0 <GSM_SendTCP+0x80>)
 8006a54:	       4618      	mov	r0, r3
 8006a56:	       f7ff f889 	bl	8005b6c <UART_tx_string>
    UART_tx(driver->uart, '\r');
 8006a5a:	       68fb      	ldr	r3, [r7, #12]
 8006a5c:	       691b      	ldr	r3, [r3, #16]
 8006a5e:	       210d      	movs	r1, #13
 8006a60:	       4618      	mov	r0, r3
 8006a62:	       f7ff f861 	bl	8005b28 <UART_tx>
    Delay(500);
 8006a66:	       f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a6a:	       f7ff f8b3 	bl	8005bd4 <Delay>
    for(uint16_t i = 0; i < data_len; i++){
 8006a6e:	       2300      	movs	r3, #0
 8006a70:	       82fb      	strh	r3, [r7, #22]
 8006a72:	   /-- e00b      	b.n	8006a8c <GSM_SendTCP+0x4c>
        UART_tx(driver->uart, data[i]);
 8006a74:	/--|-> 68fb      	ldr	r3, [r7, #12]
 8006a76:	|  |   6918      	ldr	r0, [r3, #16]
 8006a78:	|  |   8afb      	ldrh	r3, [r7, #22]
 8006a7a:	|  |   68ba      	ldr	r2, [r7, #8]
 8006a7c:	|  |   4413      	add	r3, r2
 8006a7e:	|  |   781b      	ldrb	r3, [r3, #0]
 8006a80:	|  |   4619      	mov	r1, r3
 8006a82:	|  |   f7ff f851 	bl	8005b28 <UART_tx>
    for(uint16_t i = 0; i < data_len; i++){
 8006a86:	|  |   8afb      	ldrh	r3, [r7, #22]
 8006a88:	|  |   3301      	adds	r3, #1
 8006a8a:	|  |   82fb      	strh	r3, [r7, #22]
 8006a8c:	|  \-> 8afa      	ldrh	r2, [r7, #22]
 8006a8e:	|      88fb      	ldrh	r3, [r7, #6]
 8006a90:	|      429a      	cmp	r2, r3
 8006a92:	\----- d3ef      	bcc.n	8006a74 <GSM_SendTCP+0x34>
    }
    UART_tx(driver->uart, 0x1A);
 8006a94:	       68fb      	ldr	r3, [r7, #12]
 8006a96:	       691b      	ldr	r3, [r3, #16]
 8006a98:	       211a      	movs	r1, #26
 8006a9a:	       4618      	mov	r0, r3
 8006a9c:	       f7ff f844 	bl	8005b28 <UART_tx>
    UART_tx(driver->uart, '\r');
 8006aa0:	       68fb      	ldr	r3, [r7, #12]
 8006aa2:	       691b      	ldr	r3, [r3, #16]
 8006aa4:	       210d      	movs	r1, #13
 8006aa6:	       4618      	mov	r0, r3
 8006aa8:	       f7ff f83e 	bl	8005b28 <UART_tx>
    GSM_wait_for_answer(driver, 2000);
 8006aac:	       f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006ab0:	       68f8      	ldr	r0, [r7, #12]
 8006ab2:	       f7ff fdcb 	bl	800664c <GSM_wait_for_answer>
}
 8006ab6:	       bf00      	nop
 8006ab8:	       3718      	adds	r7, #24
 8006aba:	       46bd      	mov	sp, r7
 8006abc:	       bd80      	pop	{r7, pc}
 8006abe:	       bf00      	nop
 8006ac0:	       afa4      	add	r7, sp, #656	; 0x290
 8006ac2:	       0800      	lsrs	r0, r0, #32

08006ac4 <GSM_SetDNS>:

void GSM_SetDNS(GSM *driver){
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
    GSM_SendCMD(driver, "AT+CDNSCFG=\"8.8.8.8\",\"8.8.4.4\"");
 8006acc:	4903      	ldr	r1, [pc, #12]	; (8006adc <GSM_SetDNS+0x18>)
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff fde0 	bl	8006694 <GSM_SendCMD>
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	afb0      	add	r7, sp, #704	; 0x2c0
 8006ade:	0800      	lsrs	r0, r0, #32

08006ae0 <GSM_CloseConnections>:

void GSM_CloseConnections(GSM *driver){
 8006ae0:	    b580      	push	{r7, lr}
 8006ae2:	    b082      	sub	sp, #8
 8006ae4:	    af00      	add	r7, sp, #0
 8006ae6:	    6078      	str	r0, [r7, #4]
    GSM_SendCMD(driver, "AT+CIPCLOSE");
 8006ae8:	    4917      	ldr	r1, [pc, #92]	; (8006b48 <GSM_CloseConnections+0x68>)
 8006aea:	    6878      	ldr	r0, [r7, #4]
 8006aec:	    f7ff fdd2 	bl	8006694 <GSM_SendCMD>
    Delay(50);
 8006af0:	    2032      	movs	r0, #50	; 0x32
 8006af2:	    f7ff f86f 	bl	8005bd4 <Delay>
    GSM_CheckIPstatus(driver);
 8006af6:	    6878      	ldr	r0, [r7, #4]
 8006af8:	    f000 f8e0 	bl	8006cbc <GSM_CheckIPstatus>
    if(driver->ip_status == GPRS_CLOSED){
 8006afc:	    687b      	ldr	r3, [r7, #4]
 8006afe:	    f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006b02:	    2b06      	cmp	r3, #6
 8006b04:	/-- d103      	bne.n	8006b0e <GSM_CloseConnections+0x2e>
        GSM_SendCMD(driver, "AT+CIPSHUT");
 8006b06:	|   4911      	ldr	r1, [pc, #68]	; (8006b4c <GSM_CloseConnections+0x6c>)
 8006b08:	|   6878      	ldr	r0, [r7, #4]
 8006b0a:	|   f7ff fdc3 	bl	8006694 <GSM_SendCMD>
    }
    GSM_CheckIPstatus(driver);
 8006b0e:	\-> 6878      	ldr	r0, [r7, #4]
 8006b10:	    f000 f8d4 	bl	8006cbc <GSM_CheckIPstatus>
    driver->status.gprs_connected = 0;
 8006b14:	    687a      	ldr	r2, [r7, #4]
 8006b16:	    f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 8006b1a:	    f36f 13c7 	bfc	r3, #7, #1
 8006b1e:	    f882 3071 	strb.w	r3, [r2, #113]	; 0x71
    driver->status.tcp_server_answer = 0;
 8006b22:	    687a      	ldr	r2, [r7, #4]
 8006b24:	    f892 3073 	ldrb.w	r3, [r2, #115]	; 0x73
 8006b28:	    f36f 0300 	bfc	r3, #0, #1
 8006b2c:	    f882 3073 	strb.w	r3, [r2, #115]	; 0x73
    driver->status.tcp_server_connected = 0;
 8006b30:	    687a      	ldr	r2, [r7, #4]
 8006b32:	    f892 3073 	ldrb.w	r3, [r2, #115]	; 0x73
 8006b36:	    f36f 0341 	bfc	r3, #1, #1
 8006b3a:	    f882 3073 	strb.w	r3, [r2, #115]	; 0x73
}
 8006b3e:	    bf00      	nop
 8006b40:	    3708      	adds	r7, #8
 8006b42:	    46bd      	mov	sp, r7
 8006b44:	    bd80      	pop	{r7, pc}
 8006b46:	    bf00      	nop
 8006b48:	    afd0      	add	r7, sp, #832	; 0x340
 8006b4a:	    0800      	lsrs	r0, r0, #32
 8006b4c:	    afdc      	add	r7, sp, #880	; 0x370
 8006b4e:	    0800      	lsrs	r0, r0, #32

08006b50 <GSM_WaitTCPServerAcknowledge>:
uint8_t GSM_WaitTCPServerAcknowledge(GSM *driver, uint16_t timeout_ms){
 8006b50:	       b580      	push	{r7, lr}
 8006b52:	       b084      	sub	sp, #16
 8006b54:	       af00      	add	r7, sp, #0
 8006b56:	       6078      	str	r0, [r7, #4]
 8006b58:	       460b      	mov	r3, r1
 8006b5a:	       807b      	strh	r3, [r7, #2]
    uint16_t timeout = timeout_ms;
 8006b5c:	       887b      	ldrh	r3, [r7, #2]
 8006b5e:	       81fb      	strh	r3, [r7, #14]
    while(!sim7000g.status.tcp_server_answer && timeout > 0) {
 8006b60:	   /-- e005      	b.n	8006b6e <GSM_WaitTCPServerAcknowledge+0x1e>
        Delay(1);
 8006b62:	/--|-> 2001      	movs	r0, #1
 8006b64:	|  |   f7ff f836 	bl	8005bd4 <Delay>
        timeout--;
 8006b68:	|  |   89fb      	ldrh	r3, [r7, #14]
 8006b6a:	|  |   3b01      	subs	r3, #1
 8006b6c:	|  |   81fb      	strh	r3, [r7, #14]
    while(!sim7000g.status.tcp_server_answer && timeout > 0) {
 8006b6e:	|  \-> 4b0a      	ldr	r3, [pc, #40]	; (8006b98 <GSM_WaitTCPServerAcknowledge+0x48>)
 8006b70:	|      f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8006b74:	|      f003 0301 	and.w	r3, r3, #1
 8006b78:	|      b2db      	uxtb	r3, r3
 8006b7a:	|      2b00      	cmp	r3, #0
 8006b7c:	|  /-- d102      	bne.n	8006b84 <GSM_WaitTCPServerAcknowledge+0x34>
 8006b7e:	|  |   89fb      	ldrh	r3, [r7, #14]
 8006b80:	|  |   2b00      	cmp	r3, #0
 8006b82:	\--|-- d1ee      	bne.n	8006b62 <GSM_WaitTCPServerAcknowledge+0x12>
    }
    if(timeout == 0) return 1;
 8006b84:	   \-> 89fb      	ldrh	r3, [r7, #14]
 8006b86:	       2b00      	cmp	r3, #0
 8006b88:	/----- d101      	bne.n	8006b8e <GSM_WaitTCPServerAcknowledge+0x3e>
 8006b8a:	|      2301      	movs	r3, #1
 8006b8c:	|  /-- e000      	b.n	8006b90 <GSM_WaitTCPServerAcknowledge+0x40>
    return 0;
 8006b8e:	\--|-> 2300      	movs	r3, #0
}
 8006b90:	   \-> 4618      	mov	r0, r3
 8006b92:	       3710      	adds	r7, #16
 8006b94:	       46bd      	mov	sp, r7
 8006b96:	       bd80      	pop	{r7, pc}
 8006b98:	       0948      	lsrs	r0, r1, #5
 8006b9a:	       2000      	movs	r0, #0

08006b9c <GSM_WaitTCPServerConnection>:
uint8_t GSM_WaitTCPServerConnection(GSM *driver, uint16_t timeout_ms){
 8006b9c:	       b580      	push	{r7, lr}
 8006b9e:	       b084      	sub	sp, #16
 8006ba0:	       af00      	add	r7, sp, #0
 8006ba2:	       6078      	str	r0, [r7, #4]
 8006ba4:	       460b      	mov	r3, r1
 8006ba6:	       807b      	strh	r3, [r7, #2]
    uint16_t timeout = timeout_ms;
 8006ba8:	       887b      	ldrh	r3, [r7, #2]
 8006baa:	       81fb      	strh	r3, [r7, #14]
    while(!sim7000g.status.tcp_server_connected && timeout > 0) {
 8006bac:	   /-- e005      	b.n	8006bba <GSM_WaitTCPServerConnection+0x1e>
        Delay(1);
 8006bae:	/--|-> 2001      	movs	r0, #1
 8006bb0:	|  |   f7ff f810 	bl	8005bd4 <Delay>
        timeout--;
 8006bb4:	|  |   89fb      	ldrh	r3, [r7, #14]
 8006bb6:	|  |   3b01      	subs	r3, #1
 8006bb8:	|  |   81fb      	strh	r3, [r7, #14]
    while(!sim7000g.status.tcp_server_connected && timeout > 0) {
 8006bba:	|  \-> 4b0a      	ldr	r3, [pc, #40]	; (8006be4 <GSM_WaitTCPServerConnection+0x48>)
 8006bbc:	|      f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8006bc0:	|      f003 0302 	and.w	r3, r3, #2
 8006bc4:	|      b2db      	uxtb	r3, r3
 8006bc6:	|      2b00      	cmp	r3, #0
 8006bc8:	|  /-- d102      	bne.n	8006bd0 <GSM_WaitTCPServerConnection+0x34>
 8006bca:	|  |   89fb      	ldrh	r3, [r7, #14]
 8006bcc:	|  |   2b00      	cmp	r3, #0
 8006bce:	\--|-- d1ee      	bne.n	8006bae <GSM_WaitTCPServerConnection+0x12>
    }
    if(timeout == 0) return 1;
 8006bd0:	   \-> 89fb      	ldrh	r3, [r7, #14]
 8006bd2:	       2b00      	cmp	r3, #0
 8006bd4:	/----- d101      	bne.n	8006bda <GSM_WaitTCPServerConnection+0x3e>
 8006bd6:	|      2301      	movs	r3, #1
 8006bd8:	|  /-- e000      	b.n	8006bdc <GSM_WaitTCPServerConnection+0x40>
    return 0;
 8006bda:	\--|-> 2300      	movs	r3, #0
}
 8006bdc:	   \-> 4618      	mov	r0, r3
 8006bde:	       3710      	adds	r7, #16
 8006be0:	       46bd      	mov	sp, r7
 8006be2:	       bd80      	pop	{r7, pc}
 8006be4:	       0948      	lsrs	r0, r1, #5
 8006be6:	       2000      	movs	r0, #0

08006be8 <GSM_DisableEcho>:
// void GSM_SetTime(GSM *driver, char *time_data){
//     char *buf[20] = {"AT+CCLK="};
//     GSM_SendCMD(driver, buf);
// }
void GSM_DisableEcho(GSM *driver){
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
    GSM_SendCMD(driver, "ATE0");
 8006bf0:	4903      	ldr	r1, [pc, #12]	; (8006c00 <GSM_DisableEcho+0x18>)
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff fd4e 	bl	8006694 <GSM_SendCMD>
}
 8006bf8:	bf00      	nop
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	afe8      	add	r7, sp, #928	; 0x3a0
 8006c02:	0800      	lsrs	r0, r0, #32

08006c04 <GSM_SaveSettings>:
void GSM_SaveSettings(GSM *driver){
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
    GSM_SendCMD(driver, "AT&W");
 8006c0c:	4903      	ldr	r1, [pc, #12]	; (8006c1c <GSM_SaveSettings+0x18>)
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff fd40 	bl	8006694 <GSM_SendCMD>
}
 8006c14:	bf00      	nop
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	aff0      	add	r7, sp, #960	; 0x3c0
 8006c1e:	0800      	lsrs	r0, r0, #32

08006c20 <GSM_CheckSIM>:
void GSM_CheckSIM(GSM *driver){
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
    GSM_SendCMD(driver, "AT+CPIN?");
 8006c28:	4903      	ldr	r1, [pc, #12]	; (8006c38 <GSM_CheckSIM+0x18>)
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7ff fd32 	bl	8006694 <GSM_SendCMD>
}
 8006c30:	bf00      	nop
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	aff8      	add	r7, sp, #992	; 0x3e0
 8006c3a:	0800      	lsrs	r0, r0, #32

08006c3c <GSM_CheckGSM>:

void GSM_CheckGSM(GSM *driver){
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
    GSM_SendCMD(driver, "AT+CREG?");
 8006c44:	4903      	ldr	r1, [pc, #12]	; (8006c54 <GSM_CheckGSM+0x18>)
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7ff fd24 	bl	8006694 <GSM_SendCMD>
}
 8006c4c:	bf00      	nop
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	b004      	add	sp, #16
 8006c56:	0800      	lsrs	r0, r0, #32

08006c58 <GSM_CheckGPRS>:

void GSM_CheckGPRS(GSM *driver){
 8006c58:	    b580      	push	{r7, lr}
 8006c5a:	    b082      	sub	sp, #8
 8006c5c:	    af00      	add	r7, sp, #0
 8006c5e:	    6078      	str	r0, [r7, #4]
    GSM_SendCMD(driver, "AT+CGREG?");
 8006c60:	    4913      	ldr	r1, [pc, #76]	; (8006cb0 <GSM_CheckGPRS+0x58>)
 8006c62:	    6878      	ldr	r0, [r7, #4]
 8006c64:	    f7ff fd16 	bl	8006694 <GSM_SendCMD>
    Delay(300);
 8006c68:	    f44f 7096 	mov.w	r0, #300	; 0x12c
 8006c6c:	    f7fe ffb2 	bl	8005bd4 <Delay>
    GSM_SendCMD(driver, "AT+CGATT?");
 8006c70:	    4910      	ldr	r1, [pc, #64]	; (8006cb4 <GSM_CheckGPRS+0x5c>)
 8006c72:	    6878      	ldr	r0, [r7, #4]
 8006c74:	    f7ff fd0e 	bl	8006694 <GSM_SendCMD>
    if(!driver->status.gprs_connected){
 8006c78:	    687b      	ldr	r3, [r7, #4]
 8006c7a:	    f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8006c7e:	    f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c82:	    b2db      	uxtb	r3, r3
 8006c84:	    2b00      	cmp	r3, #0
 8006c86:	/-- d10e      	bne.n	8006ca6 <GSM_CheckGPRS+0x4e>
        GSM_SendCMD(driver, "AT+CGATT=1");
 8006c88:	|   490b      	ldr	r1, [pc, #44]	; (8006cb8 <GSM_CheckGPRS+0x60>)
 8006c8a:	|   6878      	ldr	r0, [r7, #4]
 8006c8c:	|   f7ff fd02 	bl	8006694 <GSM_SendCMD>
        Delay(500);
 8006c90:	|   f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c94:	|   f7fe ff9e 	bl	8005bd4 <Delay>
        GSM_SendCMD(driver, "AT+CGATT?");
 8006c98:	|   4906      	ldr	r1, [pc, #24]	; (8006cb4 <GSM_CheckGPRS+0x5c>)
 8006c9a:	|   6878      	ldr	r0, [r7, #4]
 8006c9c:	|   f7ff fcfa 	bl	8006694 <GSM_SendCMD>
        Delay(200);
 8006ca0:	|   20c8      	movs	r0, #200	; 0xc8
 8006ca2:	|   f7fe ff97 	bl	8005bd4 <Delay>
    }
}
 8006ca6:	\-> bf00      	nop
 8006ca8:	    3708      	adds	r7, #8
 8006caa:	    46bd      	mov	sp, r7
 8006cac:	    bd80      	pop	{r7, pc}
 8006cae:	    bf00      	nop
 8006cb0:	    b010      	add	sp, #64	; 0x40
 8006cb2:	    0800      	lsrs	r0, r0, #32
 8006cb4:	    b01c      	add	sp, #112	; 0x70
 8006cb6:	    0800      	lsrs	r0, r0, #32
 8006cb8:	    b028      	add	sp, #160	; 0xa0
 8006cba:	    0800      	lsrs	r0, r0, #32

08006cbc <GSM_CheckIPstatus>:

void GSM_CheckIPstatus(GSM *driver){
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
    GSM_SendCMD(driver, "AT+CIPSTATUS");
 8006cc4:	4903      	ldr	r1, [pc, #12]	; (8006cd4 <GSM_CheckIPstatus+0x18>)
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff fce4 	bl	8006694 <GSM_SendCMD>
}
 8006ccc:	bf00      	nop
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	b034      	add	sp, #208	; 0xd0
 8006cd6:	0800      	lsrs	r0, r0, #32

08006cd8 <GSM_ActivateContext>:

void GSM_ActivateContext(GSM *driver){
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
    GSM_SendCMD(driver, "AT+CIICR");
 8006ce0:	4903      	ldr	r1, [pc, #12]	; (8006cf0 <GSM_ActivateContext+0x18>)
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7ff fcd6 	bl	8006694 <GSM_SendCMD>
}
 8006ce8:	bf00      	nop
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	af58      	add	r7, sp, #352	; 0x160
 8006cf2:	0800      	lsrs	r0, r0, #32

08006cf4 <GSM_RequestIP>:
void GSM_RequestIP(GSM *driver){
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
    GSM_SendCMD(driver, "AT+CIFSR");
 8006cfc:	4903      	ldr	r1, [pc, #12]	; (8006d0c <GSM_RequestIP+0x18>)
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff fcc8 	bl	8006694 <GSM_SendCMD>
}
 8006d04:	bf00      	nop
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	af64      	add	r7, sp, #400	; 0x190
 8006d0e:	0800      	lsrs	r0, r0, #32

08006d10 <GSM_SetMode>:

void GSM_SetMode(GSM *driver){
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
    GSM_SendCMD(driver, "AT+CNMP=");
 8006d18:	4903      	ldr	r1, [pc, #12]	; (8006d28 <GSM_SetMode+0x18>)
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff fcba 	bl	8006694 <GSM_SendCMD>
}
 8006d20:	bf00      	nop
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	b044      	add	sp, #272	; 0x110
 8006d2a:	0800      	lsrs	r0, r0, #32

08006d2c <GSM_CheckMode>:

void GSM_CheckMode(GSM *driver){
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
    GSM_SendCMD(driver, "AT+CNMP?");
 8006d34:	4903      	ldr	r1, [pc, #12]	; (8006d44 <GSM_CheckMode+0x18>)
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff fcac 	bl	8006694 <GSM_SendCMD>
}
 8006d3c:	bf00      	nop
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	b050      	add	sp, #320	; 0x140
 8006d46:	0800      	lsrs	r0, r0, #32

08006d48 <GSM_AnswerParser>:

void GSM_AnswerParser(){
 8006d48:	                b580      	push	{r7, lr}
 8006d4a:	                b08a      	sub	sp, #40	; 0x28
 8006d4c:	                af02      	add	r7, sp, #8
    sim7000g.status.waiting_for_answer = 0;
 8006d4e:	                4aac      	ldr	r2, [pc, #688]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006d50:	                f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 8006d54:	                f36f 0300 	bfc	r3, #0, #1
 8006d58:	                f882 3071 	strb.w	r3, [r2, #113]	; 0x71
    uint8_t parsed_flag = 0;
 8006d5c:	                2300      	movs	r3, #0
 8006d5e:	                77fb      	strb	r3, [r7, #31]
    if(strstr(sim7000g.rx_buf, "\nOK\r") != 0){
 8006d60:	                49a8      	ldr	r1, [pc, #672]	; (8007004 <GSM_AnswerParser+0x2bc>)
 8006d62:	                48a9      	ldr	r0, [pc, #676]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006d64:	                f002 ffe8 	bl	8009d38 <strstr>
 8006d68:	                4603      	mov	r3, r0
 8006d6a:	                2b00      	cmp	r3, #0
 8006d6c:	            /-- d007      	beq.n	8006d7e <GSM_AnswerParser+0x36>
        sim7000g.status.last_answer = 0;
 8006d6e:	            |   4aa4      	ldr	r2, [pc, #656]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006d70:	            |   f892 3072 	ldrb.w	r3, [r2, #114]	; 0x72
 8006d74:	            |   f36f 13c7 	bfc	r3, #7, #1
 8006d78:	            |   f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 8006d7c:	         /--|-- e015      	b.n	8006daa <GSM_AnswerParser+0x62>
    }
    else if(strstr(sim7000g.rx_buf, "\nERROR\r") != 0){
 8006d7e:	         |  \-> 49a3      	ldr	r1, [pc, #652]	; (800700c <GSM_AnswerParser+0x2c4>)
 8006d80:	         |      48a1      	ldr	r0, [pc, #644]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006d82:	         |      f002 ffd9 	bl	8009d38 <strstr>
 8006d86:	         |      4603      	mov	r3, r0
 8006d88:	         |      2b00      	cmp	r3, #0
 8006d8a:	         +----- d00e      	beq.n	8006daa <GSM_AnswerParser+0x62>
        sim7000g.status.last_answer = 1;
 8006d8c:	         |      4a9c      	ldr	r2, [pc, #624]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006d8e:	         |      f892 3072 	ldrb.w	r3, [r2, #114]	; 0x72
 8006d92:	         |      f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d96:	         |      f882 3072 	strb.w	r3, [r2, #114]	; 0x72
        sim7000g.error_answer_counter++;
 8006d9a:	         |      4b99      	ldr	r3, [pc, #612]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006d9c:	         |      f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8006da0:	         |      3301      	adds	r3, #1
 8006da2:	         |      b2da      	uxtb	r2, r3
 8006da4:	         |      4b96      	ldr	r3, [pc, #600]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006da6:	         |      f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
    }
    if(strstr(sim7000g.rx_buf, "STATE:") != 0){
 8006daa:	         \----> 4999      	ldr	r1, [pc, #612]	; (8007010 <GSM_AnswerParser+0x2c8>)
 8006dac:	                4896      	ldr	r0, [pc, #600]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006dae:	                f002 ffc3 	bl	8009d38 <strstr>
 8006db2:	                4603      	mov	r3, r0
 8006db4:	                2b00      	cmp	r3, #0
 8006db6:	         /----- d054      	beq.n	8006e62 <GSM_AnswerParser+0x11a>
        if(strstr(sim7000g.rx_buf, "IP INITIAL") != 0){
 8006db8:	         |      4996      	ldr	r1, [pc, #600]	; (8007014 <GSM_AnswerParser+0x2cc>)
 8006dba:	         |      4893      	ldr	r0, [pc, #588]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006dbc:	         |      f002 ffbc 	bl	8009d38 <strstr>
 8006dc0:	         |      4603      	mov	r3, r0
 8006dc2:	         |      2b00      	cmp	r3, #0
 8006dc4:	         |  /-- d004      	beq.n	8006dd0 <GSM_AnswerParser+0x88>
            sim7000g.ip_status = GPRS_INITIAL;
 8006dc6:	         |  |   4b8e      	ldr	r3, [pc, #568]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006dc8:	         |  |   2201      	movs	r2, #1
 8006dca:	         |  |   f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8006dce:	   /-----|--|-- e1f5      	b.n	80071bc <GSM_AnswerParser+0x474>
        }
        else if(strstr(sim7000g.rx_buf, "IP START") != 0){
 8006dd0:	   |     |  \-> 4991      	ldr	r1, [pc, #580]	; (8007018 <GSM_AnswerParser+0x2d0>)
 8006dd2:	   |     |      488d      	ldr	r0, [pc, #564]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006dd4:	   |     |      f002 ffb0 	bl	8009d38 <strstr>
 8006dd8:	   |     |      4603      	mov	r3, r0
 8006dda:	   |     |      2b00      	cmp	r3, #0
 8006ddc:	   |     |  /-- d004      	beq.n	8006de8 <GSM_AnswerParser+0xa0>
            sim7000g.ip_status = GPRS_START;
 8006dde:	   |     |  |   4b88      	ldr	r3, [pc, #544]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006de0:	   |     |  |   2202      	movs	r2, #2
 8006de2:	   |     |  |   f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8006de6:	   +-----|--|-- e1e9      	b.n	80071bc <GSM_AnswerParser+0x474>
        }
        else if(strstr(sim7000g.rx_buf, "IP GPRSACT") != 0){
 8006de8:	   |     |  \-> 498c      	ldr	r1, [pc, #560]	; (800701c <GSM_AnswerParser+0x2d4>)
 8006dea:	   |     |      4887      	ldr	r0, [pc, #540]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006dec:	   |     |      f002 ffa4 	bl	8009d38 <strstr>
 8006df0:	   |     |      4603      	mov	r3, r0
 8006df2:	   |     |      2b00      	cmp	r3, #0
 8006df4:	   |     |  /-- d004      	beq.n	8006e00 <GSM_AnswerParser+0xb8>
            sim7000g.ip_status = GPRS_GPRSACT;
 8006df6:	   |     |  |   4b82      	ldr	r3, [pc, #520]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006df8:	   |     |  |   2203      	movs	r2, #3
 8006dfa:	   |     |  |   f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8006dfe:	   +-----|--|-- e1dd      	b.n	80071bc <GSM_AnswerParser+0x474>
        }
        else if(strstr(sim7000g.rx_buf, "IP STATUS") != 0){
 8006e00:	   |     |  \-> 4987      	ldr	r1, [pc, #540]	; (8007020 <GSM_AnswerParser+0x2d8>)
 8006e02:	   |     |      4881      	ldr	r0, [pc, #516]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006e04:	   |     |      f002 ff98 	bl	8009d38 <strstr>
 8006e08:	   |     |      4603      	mov	r3, r0
 8006e0a:	   |     |      2b00      	cmp	r3, #0
 8006e0c:	   |     |  /-- d004      	beq.n	8006e18 <GSM_AnswerParser+0xd0>
            sim7000g.ip_status = GPRS_STATUS;
 8006e0e:	   |     |  |   4b7c      	ldr	r3, [pc, #496]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006e10:	   |     |  |   2204      	movs	r2, #4
 8006e12:	   |     |  |   f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8006e16:	   +-----|--|-- e1d1      	b.n	80071bc <GSM_AnswerParser+0x474>
        }
        else if(strstr(sim7000g.rx_buf, "TCP CLOSED") != 0){
 8006e18:	   |     |  \-> 4982      	ldr	r1, [pc, #520]	; (8007024 <GSM_AnswerParser+0x2dc>)
 8006e1a:	   |     |      487b      	ldr	r0, [pc, #492]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006e1c:	   |     |      f002 ff8c 	bl	8009d38 <strstr>
 8006e20:	   |     |      4603      	mov	r3, r0
 8006e22:	   |     |      2b00      	cmp	r3, #0
 8006e24:	   |     |  /-- d004      	beq.n	8006e30 <GSM_AnswerParser+0xe8>
             sim7000g.ip_status = GPRS_CLOSED;
 8006e26:	   |     |  |   4b76      	ldr	r3, [pc, #472]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006e28:	   |     |  |   2206      	movs	r2, #6
 8006e2a:	   |     |  |   f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8006e2e:	   +-----|--|-- e1c5      	b.n	80071bc <GSM_AnswerParser+0x474>
        }
        else if(strstr(sim7000g.rx_buf, "TCP CONNECTING") != 0){
 8006e30:	   |     |  \-> 497d      	ldr	r1, [pc, #500]	; (8007028 <GSM_AnswerParser+0x2e0>)
 8006e32:	   |     |      4875      	ldr	r0, [pc, #468]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006e34:	   |     |      f002 ff80 	bl	8009d38 <strstr>
 8006e38:	   |     |      4603      	mov	r3, r0
 8006e3a:	   |     |      2b00      	cmp	r3, #0
 8006e3c:	   |     |  /-- d004      	beq.n	8006e48 <GSM_AnswerParser+0x100>
            sim7000g.ip_status = GPRS_CONNECT_OK;
 8006e3e:	   |     |  |   4b70      	ldr	r3, [pc, #448]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006e40:	   |     |  |   2205      	movs	r2, #5
 8006e42:	   |     |  |   f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8006e46:	   +-----|--|-- e1b9      	b.n	80071bc <GSM_AnswerParser+0x474>
        }
        else if(strstr(sim7000g.rx_buf, "CONNECT OK") != 0){
 8006e48:	   |     |  \-> 4978      	ldr	r1, [pc, #480]	; (800702c <GSM_AnswerParser+0x2e4>)
 8006e4a:	   |     |      486f      	ldr	r0, [pc, #444]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006e4c:	   |     |      f002 ff74 	bl	8009d38 <strstr>
 8006e50:	   |     |      4603      	mov	r3, r0
 8006e52:	   |     |      2b00      	cmp	r3, #0
 8006e54:	   +-----|----- f000 81b2 	beq.w	80071bc <GSM_AnswerParser+0x474>
            sim7000g.ip_status = GPRS_CONNECT_OK;
 8006e58:	   |     |      4b69      	ldr	r3, [pc, #420]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006e5a:	   |     |      2205      	movs	r2, #5
 8006e5c:	   |     |      f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8006e60:	   +-----|----- e1ac      	b.n	80071bc <GSM_AnswerParser+0x474>
        }
    }
    else if(strstr(sim7000g.rx_buf, "RDY\r\n") != 0){
 8006e62:	   |     \----> 4973      	ldr	r1, [pc, #460]	; (8007030 <GSM_AnswerParser+0x2e8>)
 8006e64:	   |            4868      	ldr	r0, [pc, #416]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006e66:	   |            f002 ff67 	bl	8009d38 <strstr>
 8006e6a:	   |            4603      	mov	r3, r0
 8006e6c:	   |            2b00      	cmp	r3, #0
 8006e6e:	   |        /-- d007      	beq.n	8006e80 <GSM_AnswerParser+0x138>
        sim7000g.status.pwr_status = 1;
 8006e70:	   |        |   4a63      	ldr	r2, [pc, #396]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006e72:	   |        |   f892 3072 	ldrb.w	r3, [r2, #114]	; 0x72
 8006e76:	   |        |   f043 0310 	orr.w	r3, r3, #16
 8006e7a:	   |        |   f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 8006e7e:	   +--------|-- e19d      	b.n	80071bc <GSM_AnswerParser+0x474>
    }
    else if(strstr(sim7000g.rx_buf, "cmd") != 0){  // Custom answer from TCP server
 8006e80:	   |        \-> 496c      	ldr	r1, [pc, #432]	; (8007034 <GSM_AnswerParser+0x2ec>)
 8006e82:	   |            4861      	ldr	r0, [pc, #388]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006e84:	   |            f002 ff58 	bl	8009d38 <strstr>
 8006e88:	   |            4603      	mov	r3, r0
 8006e8a:	   |            2b00      	cmp	r3, #0
 8006e8c:	   |        /-- d01e      	beq.n	8006ecc <GSM_AnswerParser+0x184>
        sim7000g.status.last_answer = 0;
 8006e8e:	   |        |   4a5c      	ldr	r2, [pc, #368]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006e90:	   |        |   f892 3072 	ldrb.w	r3, [r2, #114]	; 0x72
 8006e94:	   |        |   f36f 13c7 	bfc	r3, #7, #1
 8006e98:	   |        |   f882 3072 	strb.w	r3, [r2, #114]	; 0x72
        sim7000g.status.tcp_server_answer = 1;
 8006e9c:	   |        |   4a58      	ldr	r2, [pc, #352]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006e9e:	   |        |   f892 3073 	ldrb.w	r3, [r2, #115]	; 0x73
 8006ea2:	   |        |   f043 0301 	orr.w	r3, r3, #1
 8006ea6:	   |        |   f882 3073 	strb.w	r3, [r2, #115]	; 0x73
        char *cmd_ptr = strstr(sim7000g.rx_buf, "#");
 8006eaa:	   |        |   2123      	movs	r1, #35	; 0x23
 8006eac:	   |        |   4856      	ldr	r0, [pc, #344]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006eae:	   |        |   f002 ff36 	bl	8009d1e <strchr>
 8006eb2:	   |        |   61b8      	str	r0, [r7, #24]
        if(cmd_ptr != 0){
 8006eb4:	   |        |   69bb      	ldr	r3, [r7, #24]
 8006eb6:	   |        |   2b00      	cmp	r3, #0
 8006eb8:	   +--------|-- f000 8180 	beq.w	80071bc <GSM_AnswerParser+0x474>
            CommandStruct *pkt = (CommandStruct *)(cmd_ptr + 1);
 8006ebc:	   |        |   69bb      	ldr	r3, [r7, #24]
 8006ebe:	   |        |   3301      	adds	r3, #1
 8006ec0:	   |        |   617b      	str	r3, [r7, #20]
            CMD_Parser(&SX1268, pkt);
 8006ec2:	   |        |   6979      	ldr	r1, [r7, #20]
 8006ec4:	   |        |   485c      	ldr	r0, [pc, #368]	; (8007038 <GSM_AnswerParser+0x2f0>)
 8006ec6:	   |        |   f7f9 fcfd 	bl	80008c4 <CMD_Parser>
 8006eca:	   +--------|-- e177      	b.n	80071bc <GSM_AnswerParser+0x474>
        }
        // gpio_toggle(LED);
    }
    else if(strstr(sim7000g.rx_buf, "start") != 0){
 8006ecc:	   |        \-> 495b      	ldr	r1, [pc, #364]	; (800703c <GSM_AnswerParser+0x2f4>)
 8006ece:	   |            484e      	ldr	r0, [pc, #312]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006ed0:	   |            f002 ff32 	bl	8009d38 <strstr>
 8006ed4:	   |            4603      	mov	r3, r0
 8006ed6:	   |            2b00      	cmp	r3, #0
 8006ed8:	   |        /-- d007      	beq.n	8006eea <GSM_AnswerParser+0x1a2>
        sim7000g.status.tcp_server_connected = 1;
 8006eda:	   |        |   4a49      	ldr	r2, [pc, #292]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006edc:	   |        |   f892 3073 	ldrb.w	r3, [r2, #115]	; 0x73
 8006ee0:	   |        |   f043 0302 	orr.w	r3, r3, #2
 8006ee4:	   |        |   f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 8006ee8:	   +--------|-- e168      	b.n	80071bc <GSM_AnswerParser+0x474>
    }
    else if(strstr(sim7000g.rx_buf, "POWER DOWN\r\n") != 0){
 8006eea:	   |        \-> 4955      	ldr	r1, [pc, #340]	; (8007040 <GSM_AnswerParser+0x2f8>)
 8006eec:	   |            4846      	ldr	r0, [pc, #280]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006eee:	   |            f002 ff23 	bl	8009d38 <strstr>
 8006ef2:	   |            4603      	mov	r3, r0
 8006ef4:	   |            2b00      	cmp	r3, #0
 8006ef6:	   |        /-- d007      	beq.n	8006f08 <GSM_AnswerParser+0x1c0>
        sim7000g.status.pwr_status = 0;
 8006ef8:	   |        |   4a41      	ldr	r2, [pc, #260]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006efa:	   |        |   f892 3072 	ldrb.w	r3, [r2, #114]	; 0x72
 8006efe:	   |        |   f36f 1304 	bfc	r3, #4, #1
 8006f02:	   |        |   f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 8006f06:	   +--------|-- e159      	b.n	80071bc <GSM_AnswerParser+0x474>
    }
    else if(strstr(sim7000g.rx_buf, "+CPIN:") != 0){
 8006f08:	   |        \-> 494e      	ldr	r1, [pc, #312]	; (8007044 <GSM_AnswerParser+0x2fc>)
 8006f0a:	   |            483f      	ldr	r0, [pc, #252]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006f0c:	   |            f002 ff14 	bl	8009d38 <strstr>
 8006f10:	   |            4603      	mov	r3, r0
 8006f12:	   |            2b00      	cmp	r3, #0
 8006f14:	   |     /----- d016      	beq.n	8006f44 <GSM_AnswerParser+0x1fc>
        if(strstr(sim7000g.rx_buf, "+CPIN: READY") != 0) sim7000g.status.sim_status = 1;
 8006f16:	   |     |      494c      	ldr	r1, [pc, #304]	; (8007048 <GSM_AnswerParser+0x300>)
 8006f18:	   |     |      483b      	ldr	r0, [pc, #236]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006f1a:	   |     |      f002 ff0d 	bl	8009d38 <strstr>
 8006f1e:	   |     |      4603      	mov	r3, r0
 8006f20:	   |     |      2b00      	cmp	r3, #0
 8006f22:	   |     |  /-- d007      	beq.n	8006f34 <GSM_AnswerParser+0x1ec>
 8006f24:	   |     |  |   4a36      	ldr	r2, [pc, #216]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006f26:	   |     |  |   f892 3072 	ldrb.w	r3, [r2, #114]	; 0x72
 8006f2a:	   |     |  |   f043 0308 	orr.w	r3, r3, #8
 8006f2e:	   |     |  |   f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 8006f32:	   +-----|--|-- e143      	b.n	80071bc <GSM_AnswerParser+0x474>
        else sim7000g.status.sim_status = 0;
 8006f34:	   |     |  \-> 4a32      	ldr	r2, [pc, #200]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006f36:	   |     |      f892 3072 	ldrb.w	r3, [r2, #114]	; 0x72
 8006f3a:	   |     |      f36f 03c3 	bfc	r3, #3, #1
 8006f3e:	   |     |      f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 8006f42:	   +-----|----- e13b      	b.n	80071bc <GSM_AnswerParser+0x474>
    }
    else if(strstr(sim7000g.rx_buf, "+CREG:") != 0){
 8006f44:	   |     \----> 4941      	ldr	r1, [pc, #260]	; (800704c <GSM_AnswerParser+0x304>)
 8006f46:	   |            4830      	ldr	r0, [pc, #192]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006f48:	   |            f002 fef6 	bl	8009d38 <strstr>
 8006f4c:	   |            4603      	mov	r3, r0
 8006f4e:	   |            2b00      	cmp	r3, #0
 8006f50:	   |     /----- d017      	beq.n	8006f82 <GSM_AnswerParser+0x23a>
        if(strstr(sim7000g.rx_buf, "+CREG: 0,1") != 0) sim7000g.status.gsm_reg_status = 1;
 8006f52:	   |     |      493f      	ldr	r1, [pc, #252]	; (8007050 <GSM_AnswerParser+0x308>)
 8006f54:	   |     |      482c      	ldr	r0, [pc, #176]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006f56:	   |     |      f002 feef 	bl	8009d38 <strstr>
 8006f5a:	   |     |      4603      	mov	r3, r0
 8006f5c:	   |     |      2b00      	cmp	r3, #0
 8006f5e:	   |     |  /-- d008      	beq.n	8006f72 <GSM_AnswerParser+0x22a>
 8006f60:	   |     |  |   4a27      	ldr	r2, [pc, #156]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006f62:	   |     |  |   f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 8006f66:	   |     |  |   2101      	movs	r1, #1
 8006f68:	   |     |  |   f361 0343 	bfi	r3, r1, #1, #3
 8006f6c:	   |     |  |   f882 3071 	strb.w	r3, [r2, #113]	; 0x71
 8006f70:	   +-----|--|-- e124      	b.n	80071bc <GSM_AnswerParser+0x474>
        else sim7000g.status.gsm_reg_status = 0;
 8006f72:	   |     |  \-> 4a23      	ldr	r2, [pc, #140]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006f74:	   |     |      f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 8006f78:	   |     |      f36f 0343 	bfc	r3, #1, #3
 8006f7c:	   |     |      f882 3071 	strb.w	r3, [r2, #113]	; 0x71
 8006f80:	   +-----|----- e11c      	b.n	80071bc <GSM_AnswerParser+0x474>
    }
    else if(strstr(sim7000g.rx_buf, "+CGREG:") != 0){
 8006f82:	   |     \----> 4934      	ldr	r1, [pc, #208]	; (8007054 <GSM_AnswerParser+0x30c>)
 8006f84:	   |            4820      	ldr	r0, [pc, #128]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006f86:	   |            f002 fed7 	bl	8009d38 <strstr>
 8006f8a:	   |            4603      	mov	r3, r0
 8006f8c:	   |            2b00      	cmp	r3, #0
 8006f8e:	   |     /----- d017      	beq.n	8006fc0 <GSM_AnswerParser+0x278>
        if(strstr(sim7000g.rx_buf, "+CGREG: 0,1") != 0) sim7000g.status.gprs_reg_status = 1;
 8006f90:	   |     |      4931      	ldr	r1, [pc, #196]	; (8007058 <GSM_AnswerParser+0x310>)
 8006f92:	   |     |      481d      	ldr	r0, [pc, #116]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006f94:	   |     |      f002 fed0 	bl	8009d38 <strstr>
 8006f98:	   |     |      4603      	mov	r3, r0
 8006f9a:	   |     |      2b00      	cmp	r3, #0
 8006f9c:	   |     |  /-- d008      	beq.n	8006fb0 <GSM_AnswerParser+0x268>
 8006f9e:	   |     |  |   4a18      	ldr	r2, [pc, #96]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006fa0:	   |     |  |   f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 8006fa4:	   |     |  |   2101      	movs	r1, #1
 8006fa6:	   |     |  |   f361 1306 	bfi	r3, r1, #4, #3
 8006faa:	   |     |  |   f882 3071 	strb.w	r3, [r2, #113]	; 0x71
 8006fae:	   +-----|--|-- e105      	b.n	80071bc <GSM_AnswerParser+0x474>
        else sim7000g.status.gprs_reg_status = 0;
 8006fb0:	   |     |  \-> 4a13      	ldr	r2, [pc, #76]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006fb2:	   |     |      f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 8006fb6:	   |     |      f36f 1306 	bfc	r3, #4, #3
 8006fba:	   |     |      f882 3071 	strb.w	r3, [r2, #113]	; 0x71
 8006fbe:	   +-----|----- e0fd      	b.n	80071bc <GSM_AnswerParser+0x474>
    }
    else if(strstr(sim7000g.rx_buf, "+CEREG:") != 0){
 8006fc0:	   |     \----> 4926      	ldr	r1, [pc, #152]	; (800705c <GSM_AnswerParser+0x314>)
 8006fc2:	   |            4811      	ldr	r0, [pc, #68]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006fc4:	   |            f002 feb8 	bl	8009d38 <strstr>
 8006fc8:	   |            4603      	mov	r3, r0
 8006fca:	   |            2b00      	cmp	r3, #0
 8006fcc:	   |  /-------- d04a      	beq.n	8007064 <GSM_AnswerParser+0x31c>
        if(strstr(sim7000g.rx_buf, "+CEREG: 0,1") != 0) sim7000g.status.lte_reg_status = 1;
 8006fce:	   |  |         4924      	ldr	r1, [pc, #144]	; (8007060 <GSM_AnswerParser+0x318>)
 8006fd0:	   |  |         480d      	ldr	r0, [pc, #52]	; (8007008 <GSM_AnswerParser+0x2c0>)
 8006fd2:	   |  |         f002 feb1 	bl	8009d38 <strstr>
 8006fd6:	   |  |         4603      	mov	r3, r0
 8006fd8:	   |  |         2b00      	cmp	r3, #0
 8006fda:	   |  |     /-- d008      	beq.n	8006fee <GSM_AnswerParser+0x2a6>
 8006fdc:	   |  |     |   4a08      	ldr	r2, [pc, #32]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006fde:	   |  |     |   f892 3072 	ldrb.w	r3, [r2, #114]	; 0x72
 8006fe2:	   |  |     |   2101      	movs	r1, #1
 8006fe4:	   |  |     |   f361 0302 	bfi	r3, r1, #0, #3
 8006fe8:	   |  |     |   f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 8006fec:	   +--|-----|-- e0e6      	b.n	80071bc <GSM_AnswerParser+0x474>
        else sim7000g.status.lte_reg_status = 0;
 8006fee:	   |  |     \-> 4a04      	ldr	r2, [pc, #16]	; (8007000 <GSM_AnswerParser+0x2b8>)
 8006ff0:	   |  |         f892 3072 	ldrb.w	r3, [r2, #114]	; 0x72
 8006ff4:	   |  |         f36f 0302 	bfc	r3, #0, #3
 8006ff8:	   |  |         f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 8006ffc:	   +--|-------- e0de      	b.n	80071bc <GSM_AnswerParser+0x474>
 8006ffe:	   |  |         bf00      	nop
 8007000:	   |  |         0948      	lsrs	r0, r1, #5
 8007002:	   |  |         2000      	movs	r0, #0
 8007004:	   |  |         b05c      	add	sp, #368	; 0x170
 8007006:	   |  |         0800      	lsrs	r0, r0, #32
 8007008:	   |  |         0978      	lsrs	r0, r7, #5
 800700a:	   |  |         2000      	movs	r0, #0
 800700c:	   |  |         b064      	add	sp, #400	; 0x190
 800700e:	   |  |         0800      	lsrs	r0, r0, #32
 8007010:	   |  |         b06c      	add	sp, #432	; 0x1b0
 8007012:	   |  |         0800      	lsrs	r0, r0, #32
 8007014:	   |  |         b074      	add	sp, #464	; 0x1d0
 8007016:	   |  |         0800      	lsrs	r0, r0, #32
 8007018:	   |  |         b080      	sub	sp, #0
 800701a:	   |  |         0800      	lsrs	r0, r0, #32
 800701c:	   |  |         b08c      	sub	sp, #48	; 0x30
 800701e:	   |  |         0800      	lsrs	r0, r0, #32
 8007020:	   |  |         b098      	sub	sp, #96	; 0x60
 8007022:	   |  |         0800      	lsrs	r0, r0, #32
 8007024:	   |  |         b0a4      	sub	sp, #144	; 0x90
 8007026:	   |  |         0800      	lsrs	r0, r0, #32
 8007028:	   |  |         b0b0      	sub	sp, #192	; 0xc0
 800702a:	   |  |         0800      	lsrs	r0, r0, #32
 800702c:	   |  |         b0c0      	sub	sp, #256	; 0x100
 800702e:	   |  |         0800      	lsrs	r0, r0, #32
 8007030:	   |  |         b0cc      	sub	sp, #304	; 0x130
 8007032:	   |  |         0800      	lsrs	r0, r0, #32
 8007034:	   |  |         b0d4      	sub	sp, #336	; 0x150
 8007036:	   |  |         0800      	lsrs	r0, r0, #32
 8007038:	   |  |         09c8      	lsrs	r0, r1, #7
 800703a:	   |  |         2000      	movs	r0, #0
 800703c:	   |  |         b0d8      	sub	sp, #352	; 0x160
 800703e:	   |  |         0800      	lsrs	r0, r0, #32
 8007040:	   |  |         b0e0      	sub	sp, #384	; 0x180
 8007042:	   |  |         0800      	lsrs	r0, r0, #32
 8007044:	   |  |         b0f0      	sub	sp, #448	; 0x1c0
 8007046:	   |  |         0800      	lsrs	r0, r0, #32
 8007048:	   |  |         b0f8      	sub	sp, #480	; 0x1e0
 800704a:	   |  |         0800      	lsrs	r0, r0, #32
 800704c:	   |  |     /-- b108      	cbz	r0, 8007052 <GSM_AnswerParser+0x30a>
 800704e:	   |  |     |   0800      	lsrs	r0, r0, #32
 8007050:	   |  |  /--|-- b110      	cbz	r0, 8007058 <GSM_AnswerParser+0x310>
 8007052:	   |  |  |  \-> 0800      	lsrs	r0, r0, #32
 8007054:	   |  |  |  /-- b11c      	cbz	r4, 800705e <GSM_AnswerParser+0x316>
 8007056:	   |  |  |  |   0800      	lsrs	r0, r0, #32
 8007058:	   |  +--\--|-X b124      	cbz	r4, 8007064 <GSM_AnswerParser+0x31c>
 800705a:	   |  |     |   0800      	lsrs	r0, r0, #32
 800705c:	   |  |  /--|-- b130      	cbz	r0, 800706c <GSM_AnswerParser+0x324>
 800705e:	   |  |  |  \-> 0800      	lsrs	r0, r0, #32
 8007060:	   |  |  |  /-- b138      	cbz	r0, 8007072 <GSM_AnswerParser+0x32a>
 8007062:	   |  |  |  |   0800      	lsrs	r0, r0, #32
    }
    else if(strstr(sim7000g.rx_buf, "+CGATT:") != 0){
 8007064:	   |  \--|--|-> 495c      	ldr	r1, [pc, #368]	; (80071d8 <GSM_AnswerParser+0x490>)
 8007066:	   |     |  |   485d      	ldr	r0, [pc, #372]	; (80071dc <GSM_AnswerParser+0x494>)
 8007068:	   |     |  |   f002 fe66 	bl	8009d38 <strstr>
 800706c:	   |     \--|-> 4603      	mov	r3, r0
 800706e:	   |        |   2b00      	cmp	r3, #0
 8007070:	   |     /--|-- d016      	beq.n	80070a0 <GSM_AnswerParser+0x358>
        if(strstr(sim7000g.rx_buf, "+CGATT: 1") != 0) sim7000g.status.gprs_connected = 1;
 8007072:	   |     |  \-> 495b      	ldr	r1, [pc, #364]	; (80071e0 <GSM_AnswerParser+0x498>)
 8007074:	   |     |      4859      	ldr	r0, [pc, #356]	; (80071dc <GSM_AnswerParser+0x494>)
 8007076:	   |     |      f002 fe5f 	bl	8009d38 <strstr>
 800707a:	   |     |      4603      	mov	r3, r0
 800707c:	   |     |      2b00      	cmp	r3, #0
 800707e:	   |     |  /-- d007      	beq.n	8007090 <GSM_AnswerParser+0x348>
 8007080:	   |     |  |   4a58      	ldr	r2, [pc, #352]	; (80071e4 <GSM_AnswerParser+0x49c>)
 8007082:	   |     |  |   f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 8007086:	   |     |  |   f043 0380 	orr.w	r3, r3, #128	; 0x80
 800708a:	   |     |  |   f882 3071 	strb.w	r3, [r2, #113]	; 0x71
 800708e:	   +-----|--|-- e095      	b.n	80071bc <GSM_AnswerParser+0x474>
        else sim7000g.status.gprs_connected = 0;
 8007090:	   |     |  \-> 4a54      	ldr	r2, [pc, #336]	; (80071e4 <GSM_AnswerParser+0x49c>)
 8007092:	   |     |      f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 8007096:	   |     |      f36f 13c7 	bfc	r3, #7, #1
 800709a:	   |     |      f882 3071 	strb.w	r3, [r2, #113]	; 0x71
 800709e:	   +-----|----- e08d      	b.n	80071bc <GSM_AnswerParser+0x474>
    }
    else if(strstr(sim7000g.rx_buf, "+PDP: DEACT") != 0){
 80070a0:	   |     \----> 4951      	ldr	r1, [pc, #324]	; (80071e8 <GSM_AnswerParser+0x4a0>)
 80070a2:	   |            484e      	ldr	r0, [pc, #312]	; (80071dc <GSM_AnswerParser+0x494>)
 80070a4:	   |            f002 fe48 	bl	8009d38 <strstr>
 80070a8:	   |            4603      	mov	r3, r0
 80070aa:	   |            2b00      	cmp	r3, #0
 80070ac:	   |        /-- d007      	beq.n	80070be <GSM_AnswerParser+0x376>
        sim7000g.status.gprs_connected = 0;
 80070ae:	   |        |   4a4d      	ldr	r2, [pc, #308]	; (80071e4 <GSM_AnswerParser+0x49c>)
 80070b0:	   |        |   f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 80070b4:	   |        |   f36f 13c7 	bfc	r3, #7, #1
 80070b8:	   |        |   f882 3071 	strb.w	r3, [r2, #113]	; 0x71
 80070bc:	   +--------|-- e07e      	b.n	80071bc <GSM_AnswerParser+0x474>
    }
    else if(strstr(sim7000g.rx_buf, "+CNMP:") != 0){
 80070be:	   |        \-> 494b      	ldr	r1, [pc, #300]	; (80071ec <GSM_AnswerParser+0x4a4>)
 80070c0:	   |            4846      	ldr	r0, [pc, #280]	; (80071dc <GSM_AnswerParser+0x494>)
 80070c2:	   |            f002 fe39 	bl	8009d38 <strstr>
 80070c6:	   |            4603      	mov	r3, r0
 80070c8:	   |            2b00      	cmp	r3, #0
 80070ca:	   |     /----- d02f      	beq.n	800712c <GSM_AnswerParser+0x3e4>
        if(strstr(sim7000g.rx_buf, "+CNMP: 51") != 0) sim7000g.mode = GSM_and_LTE_only;
 80070cc:	   |     |      4948      	ldr	r1, [pc, #288]	; (80071f0 <GSM_AnswerParser+0x4a8>)
 80070ce:	   |     |      4843      	ldr	r0, [pc, #268]	; (80071dc <GSM_AnswerParser+0x494>)
 80070d0:	   |     |      f002 fe32 	bl	8009d38 <strstr>
 80070d4:	   |     |      4603      	mov	r3, r0
 80070d6:	   |     |      2b00      	cmp	r3, #0
 80070d8:	   |     |  /-- d004      	beq.n	80070e4 <GSM_AnswerParser+0x39c>
 80070da:	   |     |  |   4b42      	ldr	r3, [pc, #264]	; (80071e4 <GSM_AnswerParser+0x49c>)
 80070dc:	   |     |  |   2203      	movs	r2, #3
 80070de:	   |     |  |   f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80070e2:	   +-----|--|-- e06b      	b.n	80071bc <GSM_AnswerParser+0x474>
        else if(strstr(sim7000g.rx_buf, "+CNMP: 38") != 0) sim7000g.mode = LTE_only;
 80070e4:	   |     |  \-> 4943      	ldr	r1, [pc, #268]	; (80071f4 <GSM_AnswerParser+0x4ac>)
 80070e6:	   |     |      483d      	ldr	r0, [pc, #244]	; (80071dc <GSM_AnswerParser+0x494>)
 80070e8:	   |     |      f002 fe26 	bl	8009d38 <strstr>
 80070ec:	   |     |      4603      	mov	r3, r0
 80070ee:	   |     |      2b00      	cmp	r3, #0
 80070f0:	   |     |  /-- d004      	beq.n	80070fc <GSM_AnswerParser+0x3b4>
 80070f2:	   |     |  |   4b3c      	ldr	r3, [pc, #240]	; (80071e4 <GSM_AnswerParser+0x49c>)
 80070f4:	   |     |  |   2202      	movs	r2, #2
 80070f6:	   |     |  |   f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80070fa:	   +-----|--|-- e05f      	b.n	80071bc <GSM_AnswerParser+0x474>
        else if(strstr(sim7000g.rx_buf, "+CNMP: 13") != 0) sim7000g.mode = GSM_only;
 80070fc:	   |     |  \-> 493e      	ldr	r1, [pc, #248]	; (80071f8 <GSM_AnswerParser+0x4b0>)
 80070fe:	   |     |      4837      	ldr	r0, [pc, #220]	; (80071dc <GSM_AnswerParser+0x494>)
 8007100:	   |     |      f002 fe1a 	bl	8009d38 <strstr>
 8007104:	   |     |      4603      	mov	r3, r0
 8007106:	   |     |      2b00      	cmp	r3, #0
 8007108:	   |     |  /-- d004      	beq.n	8007114 <GSM_AnswerParser+0x3cc>
 800710a:	   |     |  |   4b36      	ldr	r3, [pc, #216]	; (80071e4 <GSM_AnswerParser+0x49c>)
 800710c:	   |     |  |   2201      	movs	r2, #1
 800710e:	   |     |  |   f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8007112:	   +-----|--|-- e053      	b.n	80071bc <GSM_AnswerParser+0x474>
        else if(strstr(sim7000g.rx_buf, "+CNMP: 2") != 0) sim7000g.mode = Automatic;
 8007114:	   |     |  \-> 4939      	ldr	r1, [pc, #228]	; (80071fc <GSM_AnswerParser+0x4b4>)
 8007116:	   |     |      4831      	ldr	r0, [pc, #196]	; (80071dc <GSM_AnswerParser+0x494>)
 8007118:	   |     |      f002 fe0e 	bl	8009d38 <strstr>
 800711c:	   |     |      4603      	mov	r3, r0
 800711e:	   |     |      2b00      	cmp	r3, #0
 8007120:	   +-----|----- d04c      	beq.n	80071bc <GSM_AnswerParser+0x474>
 8007122:	   |     |      4b30      	ldr	r3, [pc, #192]	; (80071e4 <GSM_AnswerParser+0x49c>)
 8007124:	   |     |      2200      	movs	r2, #0
 8007126:	   |     |      f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800712a:	   +-----|----- e047      	b.n	80071bc <GSM_AnswerParser+0x474>
    }
    else if(strstr(sim7000g.rx_buf, "+CSQ:") != 0){
 800712c:	   |     \----> 4934      	ldr	r1, [pc, #208]	; (8007200 <GSM_AnswerParser+0x4b8>)
 800712e:	   |            482b      	ldr	r0, [pc, #172]	; (80071dc <GSM_AnswerParser+0x494>)
 8007130:	   |            f002 fe02 	bl	8009d38 <strstr>
 8007134:	   |            4603      	mov	r3, r0
 8007136:	   |            2b00      	cmp	r3, #0
 8007138:	   |        /-- d009      	beq.n	800714e <GSM_AnswerParser+0x406>
        uint32_t bit_error = 0;
 800713a:	   |        |   2300      	movs	r3, #0
 800713c:	   |        |   613b      	str	r3, [r7, #16]
        sscanf(sim7000g.rx_buf, "\r\n+CSQ: %d,%d", &sim7000g.signal_level, &bit_error);
 800713e:	   |        |   f107 0310 	add.w	r3, r7, #16
 8007142:	   |        |   4a30      	ldr	r2, [pc, #192]	; (8007204 <GSM_AnswerParser+0x4bc>)
 8007144:	   |        |   4930      	ldr	r1, [pc, #192]	; (8007208 <GSM_AnswerParser+0x4c0>)
 8007146:	   |        |   4825      	ldr	r0, [pc, #148]	; (80071dc <GSM_AnswerParser+0x494>)
 8007148:	   |        |   f002 fd4e 	bl	8009be8 <siscanf>
 800714c:	   +--------|-- e036      	b.n	80071bc <GSM_AnswerParser+0x474>
    }
    else if(strstr(sim7000g.rx_buf, "CLOSE OK") != 0){
 800714e:	   |        \-> 492f      	ldr	r1, [pc, #188]	; (800720c <GSM_AnswerParser+0x4c4>)
 8007150:	   |            4822      	ldr	r0, [pc, #136]	; (80071dc <GSM_AnswerParser+0x494>)
 8007152:	   |            f002 fdf1 	bl	8009d38 <strstr>
 8007156:	   |            4603      	mov	r3, r0
 8007158:	   |            2b00      	cmp	r3, #0
 800715a:	   |        /-- d004      	beq.n	8007166 <GSM_AnswerParser+0x41e>
        sim7000g.ip_status = GPRS_INITIAL;
 800715c:	   |        |   4b21      	ldr	r3, [pc, #132]	; (80071e4 <GSM_AnswerParser+0x49c>)
 800715e:	   |        |   2201      	movs	r2, #1
 8007160:	   |        |   f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8007164:	   +--------|-- e02a      	b.n	80071bc <GSM_AnswerParser+0x474>
    }
    else if(strstr(sim7000g.rx_buf, "SEND OK") != 0){
 8007166:	   |        \-> 492a      	ldr	r1, [pc, #168]	; (8007210 <GSM_AnswerParser+0x4c8>)
 8007168:	   |            481c      	ldr	r0, [pc, #112]	; (80071dc <GSM_AnswerParser+0x494>)
 800716a:	   |            f002 fde5 	bl	8009d38 <strstr>
 800716e:	   |            4603      	mov	r3, r0
 8007170:	   |            2b00      	cmp	r3, #0
 8007172:	   |        /-- d007      	beq.n	8007184 <GSM_AnswerParser+0x43c>
        // если сервер быстро отвечает, то ответ приходит вместе с SEND OK и до сюда обработчик не доходит
        sim7000g.status.last_answer = 0;
 8007174:	   |        |   4a1b      	ldr	r2, [pc, #108]	; (80071e4 <GSM_AnswerParser+0x49c>)
 8007176:	   |        |   f892 3072 	ldrb.w	r3, [r2, #114]	; 0x72
 800717a:	   |        |   f36f 13c7 	bfc	r3, #7, #1
 800717e:	   |        |   f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 8007182:	   +--------|-- e01b      	b.n	80071bc <GSM_AnswerParser+0x474>
    }
    else if(strstr(sim7000g.rx_buf, "+CBC:") != 0){
 8007184:	   |        \-> 4923      	ldr	r1, [pc, #140]	; (8007214 <GSM_AnswerParser+0x4cc>)
 8007186:	   |            4815      	ldr	r0, [pc, #84]	; (80071dc <GSM_AnswerParser+0x494>)
 8007188:	   |            f002 fdd6 	bl	8009d38 <strstr>
 800718c:	   |            4603      	mov	r3, r0
 800718e:	   |            2b00      	cmp	r3, #0
 8007190:	   +----------- d014      	beq.n	80071bc <GSM_AnswerParser+0x474>
        uint32_t charger_status = 0;
 8007192:	   |            2300      	movs	r3, #0
 8007194:	   |            60fb      	str	r3, [r7, #12]
        uint32_t percent = 0;
 8007196:	   |            2300      	movs	r3, #0
 8007198:	   |            60bb      	str	r3, [r7, #8]
        uint32_t vbat = 0;
 800719a:	   |            2300      	movs	r3, #0
 800719c:	   |            607b      	str	r3, [r7, #4]
        sscanf(sim7000g.rx_buf, "\r\n+CBC: %d,%d,%d", &charger_status, &percent, &vbat);
 800719e:	   |            f107 0108 	add.w	r1, r7, #8
 80071a2:	   |            f107 020c 	add.w	r2, r7, #12
 80071a6:	   |            1d3b      	adds	r3, r7, #4
 80071a8:	   |            9300      	str	r3, [sp, #0]
 80071aa:	   |            460b      	mov	r3, r1
 80071ac:	   |            491a      	ldr	r1, [pc, #104]	; (8007218 <GSM_AnswerParser+0x4d0>)
 80071ae:	   |            480b      	ldr	r0, [pc, #44]	; (80071dc <GSM_AnswerParser+0x494>)
 80071b0:	   |            f002 fd1a 	bl	8009be8 <siscanf>
        sim7000g.vbat = (uint16_t)vbat;
 80071b4:	   |            687b      	ldr	r3, [r7, #4]
 80071b6:	   |            b29a      	uxth	r2, r3
 80071b8:	   |            4b0a      	ldr	r3, [pc, #40]	; (80071e4 <GSM_AnswerParser+0x49c>)
 80071ba:	   |            83da      	strh	r2, [r3, #30]
    }
    sim7000g.rx_counter = 0;
 80071bc:	   \----------> 4b09      	ldr	r3, [pc, #36]	; (80071e4 <GSM_AnswerParser+0x49c>)
 80071be:	                2200      	movs	r2, #0
 80071c0:	                f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
    memset(sim7000g.rx_buf, 0, sizeof(sim7000g.rx_buf));
 80071c4:	                2240      	movs	r2, #64	; 0x40
 80071c6:	                2100      	movs	r1, #0
 80071c8:	                4804      	ldr	r0, [pc, #16]	; (80071dc <GSM_AnswerParser+0x494>)
 80071ca:	                f002 fc09 	bl	80099e0 <memset>
}
 80071ce:	                bf00      	nop
 80071d0:	                3720      	adds	r7, #32
 80071d2:	                46bd      	mov	sp, r7
 80071d4:	                bd80      	pop	{r7, pc}
 80071d6:	                bf00      	nop
 80071d8:	            /-- b144      	cbz	r4, 80071ec <GSM_AnswerParser+0x4a4>
 80071da:	            |   0800      	lsrs	r0, r0, #32
 80071dc:	            |   0978      	lsrs	r0, r7, #5
 80071de:	            |   2000      	movs	r0, #0
 80071e0:	         /--|-- b14c      	cbz	r4, 80071f6 <GSM_AnswerParser+0x4ae>
 80071e2:	         |  |   0800      	lsrs	r0, r0, #32
 80071e4:	         |  |   0948      	lsrs	r0, r1, #5
 80071e6:	         |  |   2000      	movs	r0, #0
 80071e8:	      /--|--|-- b158      	cbz	r0, 8007202 <GSM_AnswerParser+0x4ba>
 80071ea:	      |  |  |   0800      	lsrs	r0, r0, #32
 80071ec:	   /--|--|--\-X b164      	cbz	r4, 8007208 <GSM_AnswerParser+0x4c0>
 80071ee:	   |  |  |      0800      	lsrs	r0, r0, #32
 80071f0:	   |  |  |  /-- b16c      	cbz	r4, 800720e <GSM_AnswerParser+0x4c6>
 80071f2:	   |  |  |  |   0800      	lsrs	r0, r0, #32
 80071f4:	/--|--|--|--|-- b178      	cbz	r0, 8007216 <GSM_AnswerParser+0x4ce>
 80071f6:	|  |  |  \--|-> 0800      	lsrs	r0, r0, #32
 80071f8:	|  |  |     |   b184      	cbz	r4, 800721c <GSM_RX_Handler>
 80071fa:	|  |  |     |   0800      	lsrs	r0, r0, #32
 80071fc:	|  |  |     |   b190      	cbz	r0, 8007224 <GSM_RX_Handler+0x8>
 80071fe:	|  |  |     |   0800      	lsrs	r0, r0, #32
 8007200:	|  |  |     |   b19c      	cbz	r4, 800722a <GSM_RX_Handler+0xe>
 8007202:	|  |  \-----|-> 0800      	lsrs	r0, r0, #32
 8007204:	|  |        |   0968      	lsrs	r0, r5, #5
 8007206:	|  |        |   2000      	movs	r0, #0
 8007208:	|  \--------|-> b1a4      	cbz	r4, 8007234 <GSM_RX_Handler+0x18>
 800720a:	|           |   0800      	lsrs	r0, r0, #32
 800720c:	|           |   b1b4      	cbz	r4, 800723c <GSM_RX_Handler+0x20>
 800720e:	|           \-> 0800      	lsrs	r0, r0, #32
 8007210:	|               b1c0      	cbz	r0, 8007244 <GSM_RX_Handler+0x28>
 8007212:	|               0800      	lsrs	r0, r0, #32
 8007214:	|               b1c8      	cbz	r0, 800724a <GSM_RX_Handler+0x2e>
 8007216:	\-------------> 0800      	lsrs	r0, r0, #32
 8007218:	                b1d0      	cbz	r0, 8007250 <GSM_RX_Handler+0x34>
 800721a:	                0800      	lsrs	r0, r0, #32

0800721c <GSM_RX_Handler>:

void GSM_RX_Handler(){
 800721c:	             b580      	push	{r7, lr}
 800721e:	             b082      	sub	sp, #8
 8007220:	             af00      	add	r7, sp, #0
    if (sim7000g.uart->ISR & USART_ISR_RXNE) {
 8007222:	             4b47      	ldr	r3, [pc, #284]	; (8007340 <GSM_RX_Handler+0x124>)
 8007224:	             691b      	ldr	r3, [r3, #16]
 8007226:	             69db      	ldr	r3, [r3, #28]
 8007228:	             f003 0320 	and.w	r3, r3, #32
 800722c:	             2b00      	cmp	r3, #0
 800722e:	         /-- d024      	beq.n	800727a <GSM_RX_Handler+0x5e>
        sim7000g.rx_buf[sim7000g.rx_counter] = sim7000g.uart->RDR;
 8007230:	         |   4b43      	ldr	r3, [pc, #268]	; (8007340 <GSM_RX_Handler+0x124>)
 8007232:	         |   691b      	ldr	r3, [r3, #16]
 8007234:	         |   8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007236:	         |   b29a      	uxth	r2, r3
 8007238:	         |   4b41      	ldr	r3, [pc, #260]	; (8007340 <GSM_RX_Handler+0x124>)
 800723a:	         |   f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800723e:	         |   4619      	mov	r1, r3
 8007240:	         |   b2d2      	uxtb	r2, r2
 8007242:	         |   4b3f      	ldr	r3, [pc, #252]	; (8007340 <GSM_RX_Handler+0x124>)
 8007244:	         |   440b      	add	r3, r1
 8007246:	         |   f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        sim7000g.rx_counter++;
 800724a:	         |   4b3d      	ldr	r3, [pc, #244]	; (8007340 <GSM_RX_Handler+0x124>)
 800724c:	         |   f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8007250:	         |   3301      	adds	r3, #1
 8007252:	         |   b29a      	uxth	r2, r3
 8007254:	         |   4b3a      	ldr	r3, [pc, #232]	; (8007340 <GSM_RX_Handler+0x124>)
 8007256:	         |   f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
        if(sim7000g.rx_counter >= sizeof(sim7000g.rx_buf)){
 800725a:	         |   4b39      	ldr	r3, [pc, #228]	; (8007340 <GSM_RX_Handler+0x124>)
 800725c:	         |   f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8007260:	         |   2b3f      	cmp	r3, #63	; 0x3f
 8007262:	         +-- d90a      	bls.n	800727a <GSM_RX_Handler+0x5e>
            sim7000g.rx_counter = 0;
 8007264:	         |   4b36      	ldr	r3, [pc, #216]	; (8007340 <GSM_RX_Handler+0x124>)
 8007266:	         |   2200      	movs	r2, #0
 8007268:	         |   f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
            sim7000g.status.buffer_filled = 1;
 800726c:	         |   4a34      	ldr	r2, [pc, #208]	; (8007340 <GSM_RX_Handler+0x124>)
 800726e:	         |   f892 3072 	ldrb.w	r3, [r2, #114]	; 0x72
 8007272:	         |   f043 0320 	orr.w	r3, r3, #32
 8007276:	         |   f882 3072 	strb.w	r3, [r2, #114]	; 0x72
        }
	}
    if(sim7000g.uart->ISR & USART_ISR_IDLE){
 800727a:	         \-> 4b31      	ldr	r3, [pc, #196]	; (8007340 <GSM_RX_Handler+0x124>)
 800727c:	             691b      	ldr	r3, [r3, #16]
 800727e:	             69db      	ldr	r3, [r3, #28]
 8007280:	             f003 0310 	and.w	r3, r3, #16
 8007284:	             2b00      	cmp	r3, #0
 8007286:	   /-------- d01b      	beq.n	80072c0 <GSM_RX_Handler+0xa4>
        sim7000g.uart->ICR |= USART_ICR_IDLECF;
 8007288:	   |         4b2d      	ldr	r3, [pc, #180]	; (8007340 <GSM_RX_Handler+0x124>)
 800728a:	   |         691b      	ldr	r3, [r3, #16]
 800728c:	   |         6a1a      	ldr	r2, [r3, #32]
 800728e:	   |         4b2c      	ldr	r3, [pc, #176]	; (8007340 <GSM_RX_Handler+0x124>)
 8007290:	   |         691b      	ldr	r3, [r3, #16]
 8007292:	   |         f042 0210 	orr.w	r2, r2, #16
 8007296:	   |         621a      	str	r2, [r3, #32]
        for(uint32_t i = 0; i < 40000; i++){
 8007298:	   |         2300      	movs	r3, #0
 800729a:	   |         607b      	str	r3, [r7, #4]
 800729c:	   |     /-- e009      	b.n	80072b2 <GSM_RX_Handler+0x96>
            if (sim7000g.uart->ISR & USART_ISR_RXNE) return;
 800729e:	   |  /--|-> 4b28      	ldr	r3, [pc, #160]	; (8007340 <GSM_RX_Handler+0x124>)
 80072a0:	   |  |  |   691b      	ldr	r3, [r3, #16]
 80072a2:	   |  |  |   69db      	ldr	r3, [r3, #28]
 80072a4:	   |  |  |   f003 0320 	and.w	r3, r3, #32
 80072a8:	   |  |  |   2b00      	cmp	r3, #0
 80072aa:	/--|--|--|-- d144      	bne.n	8007336 <GSM_RX_Handler+0x11a>
        for(uint32_t i = 0; i < 40000; i++){
 80072ac:	|  |  |  |   687b      	ldr	r3, [r7, #4]
 80072ae:	|  |  |  |   3301      	adds	r3, #1
 80072b0:	|  |  |  |   607b      	str	r3, [r7, #4]
 80072b2:	|  |  |  \-> 687b      	ldr	r3, [r7, #4]
 80072b4:	|  |  |      f649 423f 	movw	r2, #39999	; 0x9c3f
 80072b8:	|  |  |      4293      	cmp	r3, r2
 80072ba:	|  |  \----- d9f0      	bls.n	800729e <GSM_RX_Handler+0x82>
        }
        GSM_AnswerParser(); // TODO: вызывать парсер после каждой функции GSM_wait_for_answer(), а не в прерывании
 80072bc:	|  |         f7ff fd44 	bl	8006d48 <GSM_AnswerParser>
                            // тогда не нужно будет тупить десятки тысяч циклов в самом начале парсера
    }
	if(sim7000g.uart->ISR & USART_ISR_ORE){
 80072c0:	|  \-------> 4b1f      	ldr	r3, [pc, #124]	; (8007340 <GSM_RX_Handler+0x124>)
 80072c2:	|            691b      	ldr	r3, [r3, #16]
 80072c4:	|            69db      	ldr	r3, [r3, #28]
 80072c6:	|            f003 0308 	and.w	r3, r3, #8
 80072ca:	|            2b00      	cmp	r3, #0
 80072cc:	|        /-- d014      	beq.n	80072f8 <GSM_RX_Handler+0xdc>
        char data = sim7000g.uart->RDR;
 80072ce:	|        |   4b1c      	ldr	r3, [pc, #112]	; (8007340 <GSM_RX_Handler+0x124>)
 80072d0:	|        |   691b      	ldr	r3, [r3, #16]
 80072d2:	|        |   8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80072d4:	|        |   b29b      	uxth	r3, r3
 80072d6:	|        |   70fb      	strb	r3, [r7, #3]
        sim7000g.overrun_counter++;
 80072d8:	|        |   4b19      	ldr	r3, [pc, #100]	; (8007340 <GSM_RX_Handler+0x124>)
 80072da:	|        |   f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80072de:	|        |   3301      	adds	r3, #1
 80072e0:	|        |   b2da      	uxtb	r2, r3
 80072e2:	|        |   4b17      	ldr	r3, [pc, #92]	; (8007340 <GSM_RX_Handler+0x124>)
 80072e4:	|        |   f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		sim7000g.uart->ICR |= USART_ICR_ORECF;
 80072e8:	|        |   4b15      	ldr	r3, [pc, #84]	; (8007340 <GSM_RX_Handler+0x124>)
 80072ea:	|        |   691b      	ldr	r3, [r3, #16]
 80072ec:	|        |   6a1a      	ldr	r2, [r3, #32]
 80072ee:	|        |   4b14      	ldr	r3, [pc, #80]	; (8007340 <GSM_RX_Handler+0x124>)
 80072f0:	|        |   691b      	ldr	r3, [r3, #16]
 80072f2:	|        |   f042 0208 	orr.w	r2, r2, #8
 80072f6:	|        |   621a      	str	r2, [r3, #32]
		// UART_tx_array(USART1, "USART3 OVERRUN ERROR!\r\n");
	}
    if(sim7000g.uart->ISR & USART_ISR_FE){
 80072f8:	|        \-> 4b11      	ldr	r3, [pc, #68]	; (8007340 <GSM_RX_Handler+0x124>)
 80072fa:	|            691b      	ldr	r3, [r3, #16]
 80072fc:	|            69db      	ldr	r3, [r3, #28]
 80072fe:	|            f003 0302 	and.w	r3, r3, #2
 8007302:	|            2b00      	cmp	r3, #0
 8007304:	|        /-- d018      	beq.n	8007338 <GSM_RX_Handler+0x11c>
        sim7000g.uart->ICR |= USART_ICR_FECF;
 8007306:	|        |   4b0e      	ldr	r3, [pc, #56]	; (8007340 <GSM_RX_Handler+0x124>)
 8007308:	|        |   691b      	ldr	r3, [r3, #16]
 800730a:	|        |   6a1a      	ldr	r2, [r3, #32]
 800730c:	|        |   4b0c      	ldr	r3, [pc, #48]	; (8007340 <GSM_RX_Handler+0x124>)
 800730e:	|        |   691b      	ldr	r3, [r3, #16]
 8007310:	|        |   f042 0202 	orr.w	r2, r2, #2
 8007314:	|        |   621a      	str	r2, [r3, #32]
        sim7000g.status.pwr_status = 0;
 8007316:	|        |   4a0a      	ldr	r2, [pc, #40]	; (8007340 <GSM_RX_Handler+0x124>)
 8007318:	|        |   f892 3072 	ldrb.w	r3, [r2, #114]	; 0x72
 800731c:	|        |   f36f 1304 	bfc	r3, #4, #1
 8007320:	|        |   f882 3072 	strb.w	r3, [r2, #114]	; 0x72
        sim7000g.frame_error_counter++;
 8007324:	|        |   4b06      	ldr	r3, [pc, #24]	; (8007340 <GSM_RX_Handler+0x124>)
 8007326:	|        |   f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800732a:	|        |   3301      	adds	r3, #1
 800732c:	|        |   b2da      	uxtb	r2, r3
 800732e:	|        |   4b04      	ldr	r3, [pc, #16]	; (8007340 <GSM_RX_Handler+0x124>)
 8007330:	|        |   f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8007334:	|        +-- e000      	b.n	8007338 <GSM_RX_Handler+0x11c>
            if (sim7000g.uart->ISR & USART_ISR_RXNE) return;
 8007336:	\--------|-> bf00      	nop
    }
}
 8007338:	         \-> 3708      	adds	r7, #8
 800733a:	             46bd      	mov	sp, r7
 800733c:	             bd80      	pop	{r7, pc}
 800733e:	             bf00      	nop
 8007340:	             0948      	lsrs	r0, r1, #5
 8007342:	             2000      	movs	r0, #0
 8007344:	             0000      	movs	r0, r0
	...

08007348 <SX126x_Init>:
#include "main.h"
#include "rtc.h"
#include "low_power.h"
uint8_t *DUMMY_PTR = 0;

void SX126x_Init(SX126x *driver){
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af02      	add	r7, sp, #8
 800734e:	6078      	str	r0, [r7, #4]
    gpio_init(driver->gpio.CS_pin, General_output, Push_pull, pull_up, Very_high_speed);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	78d8      	ldrb	r0, [r3, #3]
 8007354:	2303      	movs	r3, #3
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	2301      	movs	r3, #1
 800735a:	2200      	movs	r2, #0
 800735c:	2101      	movs	r1, #1
 800735e:	f7fa fd3b 	bl	8001dd8 <gpio_init>
    gpio_init(driver->gpio.SCK_pin, driver->gpio.__SCK_AF_pin,  Push_pull, no_pull, Very_high_speed);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	7898      	ldrb	r0, [r3, #2]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	7a59      	ldrb	r1, [r3, #9]
 800736a:	2303      	movs	r3, #3
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	2300      	movs	r3, #0
 8007370:	2200      	movs	r2, #0
 8007372:	f7fa fd31 	bl	8001dd8 <gpio_init>
    gpio_init(driver->gpio.MISO_pin, driver->gpio.__MISO_AF_pin,  Open_drain, no_pull, Input);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	7858      	ldrb	r0, [r3, #1]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	7a19      	ldrb	r1, [r3, #8]
 800737e:	2304      	movs	r3, #4
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	2300      	movs	r3, #0
 8007384:	2201      	movs	r2, #1
 8007386:	f7fa fd27 	bl	8001dd8 <gpio_init>
    gpio_init(driver->gpio.MOSI_pin, driver->gpio.__MOSI_AF_pin,  Push_pull, no_pull, Very_high_speed);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	7818      	ldrb	r0, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	79d9      	ldrb	r1, [r3, #7]
 8007392:	2303      	movs	r3, #3
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	2300      	movs	r3, #0
 8007398:	2200      	movs	r2, #0
 800739a:	f7fa fd1d 	bl	8001dd8 <gpio_init>
    gpio_init(driver->gpio.reset_pin, General_output, Push_pull, pull_up, High_speed);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	7918      	ldrb	r0, [r3, #4]
 80073a2:	2302      	movs	r3, #2
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	2301      	movs	r3, #1
 80073a8:	2200      	movs	r2, #0
 80073aa:	2101      	movs	r1, #1
 80073ac:	f7fa fd14 	bl	8001dd8 <gpio_init>
    gpio_init(driver->gpio.busy_pin, Input_mode, Open_drain, no_pull, Input);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	7958      	ldrb	r0, [r3, #5]
 80073b4:	2304      	movs	r3, #4
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	2300      	movs	r3, #0
 80073ba:	2201      	movs	r2, #1
 80073bc:	2100      	movs	r1, #0
 80073be:	f7fa fd0b 	bl	8001dd8 <gpio_init>
    // gpio_init(driver->gpio.DIO1_pin, Input_mode, Open_drain, no_pull, Input);
    gpio_exti_init(driver->gpio.DIO1_pin, 0);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	799b      	ldrb	r3, [r3, #6]
 80073c6:	2100      	movs	r1, #0
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fa fe43 	bl	8002054 <gpio_exti_init>
    gpio_state(driver->gpio.CS_pin, HIGH);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	78db      	ldrb	r3, [r3, #3]
 80073d2:	2101      	movs	r1, #1
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fa fde3 	bl	8001fa0 <gpio_state>
    gpio_state(driver->gpio.reset_pin, LOW);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	791b      	ldrb	r3, [r3, #4]
 80073de:	2100      	movs	r1, #0
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fa fddd 	bl	8001fa0 <gpio_state>
    spi_init(driver->spi, div_2, Mode_0, data_8_bit, MSB);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68d8      	ldr	r0, [r3, #12]
 80073ea:	2300      	movs	r3, #0
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	2300      	movs	r3, #0
 80073f0:	2200      	movs	r2, #0
 80073f2:	2100      	movs	r1, #0
 80073f4:	f7fe f87c 	bl	80054f0 <spi_init>
    Delay(2);
 80073f8:	2002      	movs	r0, #2
 80073fa:	f7fe fbeb 	bl	8005bd4 <Delay>
    gpio_state(driver->gpio.reset_pin, HIGH);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	791b      	ldrb	r3, [r3, #4]
 8007402:	2101      	movs	r1, #1
 8007404:	4618      	mov	r0, r3
 8007406:	f7fa fdcb 	bl	8001fa0 <gpio_state>
    Delay(5);
 800740a:	2005      	movs	r0, #5
 800740c:	f7fe fbe2 	bl	8005bd4 <Delay>

    // SX126x_SetStandby(driver, 0);
    SX126x_SetPacketType(driver, driver->packet_type);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	7c9b      	ldrb	r3, [r3, #18]
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa0a 	bl	8007830 <SX126x_SetPacketType>
    SX126x_SetDIO2AsRfSwitchCtr(driver, 1);
 800741c:	2101      	movs	r1, #1
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fc56 	bl	8007cd0 <SX126x_SetDIO2AsRfSwitchCtr>
    SX126x_GetPacketType(driver);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fb7b 	bl	8007b20 <SX126x_GetPacketType>
    SX126x_SetRfFrequency(driver, driver->frequency);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f9b5 	bl	80077a0 <SX126x_SetRfFrequency>
    SX126x_SetTxParams(driver, driver->power_dbm, driver->ramping_time);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 1020 	ldrb.w	r1, [r3, #32]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007442:	461a      	mov	r2, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fa0b 	bl	8007860 <SX126x_SetTxParams>
    SX126x_SetModulationParams(driver, driver->spredingFactor, driver->bandWidth, driver->crcRate, driver->low_data_rate_optim);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	7e99      	ldrb	r1, [r3, #26]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	7eda      	ldrb	r2, [r3, #27]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	7f18      	ldrb	r0, [r3, #28]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	4603      	mov	r3, r0
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fa39 	bl	80078d8 <SX126x_SetModulationParams>
    SX126x_GetDeviceErrors(driver);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fb7c 	bl	8007b64 <SX126x_GetDeviceErrors>
    SX126x_SetDioIrqParams(driver, 0x3F, 1 << 1, 0, 0);
 800746c:	2300      	movs	r3, #0
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	2300      	movs	r3, #0
 8007472:	2202      	movs	r2, #2
 8007474:	213f      	movs	r1, #63	; 0x3f
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fbea 	bl	8007c50 <SX126x_SetDioIrqParams>
    // SX126x_SetOCP(driver,  driver->overCurrentProtection);
    uint8_t extra_tx_params[3] = {0x08, 0x89, 0x01};  // 0 if LoRa BW = 500kHz
 800747c:	4a0f      	ldr	r2, [pc, #60]	; (80074bc <SX126x_Init+0x174>)
 800747e:	f107 030c 	add.w	r3, r7, #12
 8007482:	6812      	ldr	r2, [r2, #0]
 8007484:	4611      	mov	r1, r2
 8007486:	8019      	strh	r1, [r3, #0]
 8007488:	3302      	adds	r3, #2
 800748a:	0c12      	lsrs	r2, r2, #16
 800748c:	701a      	strb	r2, [r3, #0]
    SX126x_WriteRegisters(driver, extra_tx_params, 3);
 800748e:	f107 030c 	add.w	r3, r7, #12
 8007492:	2203      	movs	r2, #3
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f929 	bl	80076ee <SX126x_WriteRegisters>
    SX126x_SetSyncWord(driver, driver->sync_word);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fc43 	bl	8007d2e <SX126x_SetSyncWord>
    SX126x_SetBufferBaseAddress(driver, 0, 128);
 80074a8:	2280      	movs	r2, #128	; 0x80
 80074aa:	2100      	movs	r1, #0
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f9f5 	bl	800789c <SX126x_SetBufferBaseAddress>
}
 80074b2:	bf00      	nop
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	b1e4      	cbz	r4, 80074f8 <SX126x_SendData+0x38>
 80074be:	0800      	lsrs	r0, r0, #32

080074c0 <SX126x_SendData>:
void SX126x_SendData(SX126x *driver, uint8_t *data, uint8_t data_len){
 80074c0:	       b590      	push	{r4, r7, lr}
 80074c2:	       b087      	sub	sp, #28
 80074c4:	       af02      	add	r7, sp, #8
 80074c6:	       60f8      	str	r0, [r7, #12]
 80074c8:	       60b9      	str	r1, [r7, #8]
 80074ca:	       4613      	mov	r3, r2
 80074cc:	       71fb      	strb	r3, [r7, #7]
    SX126x_SetPacketParams(driver, driver->preamble_len, driver->header_type, data_len, driver->crc_on_off, driver->iq_polarity);
 80074ce:	       68fb      	ldr	r3, [r7, #12]
 80074d0:	       8bd9      	ldrh	r1, [r3, #30]
 80074d2:	       68fb      	ldr	r3, [r7, #12]
 80074d4:	       7e18      	ldrb	r0, [r3, #24]
 80074d6:	       68fb      	ldr	r3, [r7, #12]
 80074d8:	       7e5b      	ldrb	r3, [r3, #25]
 80074da:	       68fa      	ldr	r2, [r7, #12]
 80074dc:	       f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80074e0:	       79fc      	ldrb	r4, [r7, #7]
 80074e2:	       9201      	str	r2, [sp, #4]
 80074e4:	       9300      	str	r3, [sp, #0]
 80074e6:	       4623      	mov	r3, r4
 80074e8:	       4602      	mov	r2, r0
 80074ea:	       68f8      	ldr	r0, [r7, #12]
 80074ec:	       f000 fa1c 	bl	8007928 <SX126x_SetPacketParams>
    driver->packet_configured = 1;
 80074f0:	       68fb      	ldr	r3, [r7, #12]
 80074f2:	       2201      	movs	r2, #1
 80074f4:	       f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    SX126x_WriteBuffer(driver, data, data_len);
 80074f8:	       79fb      	ldrb	r3, [r7, #7]
 80074fa:	       461a      	mov	r2, r3
 80074fc:	       68b9      	ldr	r1, [r7, #8]
 80074fe:	       68f8      	ldr	r0, [r7, #12]
 8007500:	       f000 f90e 	bl	8007720 <SX126x_WriteBuffer>
    SX126x_SetTx(driver, 0);
 8007504:	       2100      	movs	r1, #0
 8007506:	       68f8      	ldr	r0, [r7, #12]
 8007508:	       f000 fa3e 	bl	8007988 <SX126x_SetTx>
    while(!driver->irq_status.TxDone)
 800750c:	   /-- e002      	b.n	8007514 <SX126x_SendData+0x54>
        SX126x_GetIrqStatus(driver);
 800750e:	/--|-> 68f8      	ldr	r0, [r7, #12]
 8007510:	|  |   f000 fb52 	bl	8007bb8 <SX126x_GetIrqStatus>
    while(!driver->irq_status.TxDone)
 8007514:	|  \-> 68fb      	ldr	r3, [r7, #12]
 8007516:	|      f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800751a:	|      2b00      	cmp	r3, #0
 800751c:	\----- d0f7      	beq.n	800750e <SX126x_SendData+0x4e>
    SX126x_SetRx(driver, 0);
 800751e:	       2100      	movs	r1, #0
 8007520:	       68f8      	ldr	r0, [r7, #12]
 8007522:	       f000 fa67 	bl	80079f4 <SX126x_SetRx>
    SX126x_ClearIrqStatus(driver, 0x01);
 8007526:	       2101      	movs	r1, #1
 8007528:	       68f8      	ldr	r0, [r7, #12]
 800752a:	       f000 fc71 	bl	8007e10 <SX126x_ClearIrqStatus>
    SX126x_GetIrqStatus(driver);
 800752e:	       68f8      	ldr	r0, [r7, #12]
 8007530:	       f000 fb42 	bl	8007bb8 <SX126x_GetIrqStatus>
    SX126x_GetStatus(driver);
 8007534:	       68f8      	ldr	r0, [r7, #12]
 8007536:	       f000 f89a 	bl	800766e <SX126x_GetStatus>
}
 800753a:	       bf00      	nop
 800753c:	       3714      	adds	r7, #20
 800753e:	       46bd      	mov	sp, r7
 8007540:	       bd90      	pop	{r4, r7, pc}

08007542 <SX126x_CalculateMode>:

void SX126x_CalculateMode(SX126x *driver, uint8_t data){
 8007542:	b480      	push	{r7}
 8007544:	b083      	sub	sp, #12
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	460b      	mov	r3, r1
 800754c:	70fb      	strb	r3, [r7, #3]
    driver->mode.mode = (data & 0x70) >> 4;
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	111b      	asrs	r3, r3, #4
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	b2d9      	uxtb	r1, r3
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	7c13      	ldrb	r3, [r2, #16]
 800755c:	f361 0302 	bfi	r3, r1, #0, #3
 8007560:	7413      	strb	r3, [r2, #16]
    driver->mode.cmd = (data & 0x0E) >> 1;
 8007562:	78fb      	ldrb	r3, [r7, #3]
 8007564:	105b      	asrs	r3, r3, #1
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	b2d9      	uxtb	r1, r3
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	7c13      	ldrb	r3, [r2, #16]
 8007570:	f361 03c5 	bfi	r3, r1, #3, #3
 8007574:	7413      	strb	r3, [r2, #16]
}
 8007576:	bf00      	nop
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <SX126x_SendOpcode>:

void SX126x_SendOpcode(SX126x *driver, uint8_t opcode, uint8_t *parameters, uint8_t param_len,
                       uint8_t *answer, uint8_t answer_len){
 8007582:	          b590      	push	{r4, r7, lr}
 8007584:	          b087      	sub	sp, #28
 8007586:	          af00      	add	r7, sp, #0
 8007588:	          60f8      	str	r0, [r7, #12]
 800758a:	          607a      	str	r2, [r7, #4]
 800758c:	          461a      	mov	r2, r3
 800758e:	          460b      	mov	r3, r1
 8007590:	          72fb      	strb	r3, [r7, #11]
 8007592:	          4613      	mov	r3, r2
 8007594:	          72bb      	strb	r3, [r7, #10]
    uint16_t timeout = 10000;
 8007596:	          f242 7310 	movw	r3, #10000	; 0x2710
 800759a:	          82fb      	strh	r3, [r7, #22]
    while(gpio_read(driver->gpio.busy_pin) && timeout--);
 800759c:	          bf00      	nop
 800759e:	   /----> 68fb      	ldr	r3, [r7, #12]
 80075a0:	   |      795b      	ldrb	r3, [r3, #5]
 80075a2:	   |      4618      	mov	r0, r3
 80075a4:	   |      f7fa fd3c 	bl	8002020 <gpio_read>
 80075a8:	   |      4603      	mov	r3, r0
 80075aa:	   |      2b00      	cmp	r3, #0
 80075ac:	   |  /-- d004      	beq.n	80075b8 <SX126x_SendOpcode+0x36>
 80075ae:	   |  |   8afb      	ldrh	r3, [r7, #22]
 80075b0:	   |  |   1e5a      	subs	r2, r3, #1
 80075b2:	   |  |   82fa      	strh	r2, [r7, #22]
 80075b4:	   |  |   2b00      	cmp	r3, #0
 80075b6:	   \--|-- d1f2      	bne.n	800759e <SX126x_SendOpcode+0x1c>
    if(timeout == 0){
 80075b8:	      \-> 8afb      	ldrh	r3, [r7, #22]
 80075ba:	          2b00      	cmp	r3, #0
 80075bc:	      /-- d103      	bne.n	80075c6 <SX126x_SendOpcode+0x44>
        driver->busy_issues = 1;
 80075be:	      |   68fb      	ldr	r3, [r7, #12]
 80075c0:	      |   2201      	movs	r2, #1
 80075c2:	      |   f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    gpio_state(driver->gpio.CS_pin, LOW);
 80075c6:	      \-> 68fb      	ldr	r3, [r7, #12]
 80075c8:	          78db      	ldrb	r3, [r3, #3]
 80075ca:	          2100      	movs	r1, #0
 80075cc:	          4618      	mov	r0, r3
 80075ce:	          f7fa fce7 	bl	8001fa0 <gpio_state>
    // SX126x_CalculateMode(driver, spi_txrx(driver->spi, opcode));
    spi_txrx(driver->spi, opcode);
 80075d2:	          68fb      	ldr	r3, [r7, #12]
 80075d4:	          68db      	ldr	r3, [r3, #12]
 80075d6:	          7afa      	ldrb	r2, [r7, #11]
 80075d8:	          4611      	mov	r1, r2
 80075da:	          4618      	mov	r0, r3
 80075dc:	          f7fe f814 	bl	8005608 <spi_txrx>
    if(opcode == OPCODE_WRITE_BUFFER)
 80075e0:	          7afb      	ldrb	r3, [r7, #11]
 80075e2:	          2b0e      	cmp	r3, #14
 80075e4:	      /-- d105      	bne.n	80075f2 <SX126x_SendOpcode+0x70>
        spi_txrx(driver->spi, 0);
 80075e6:	      |   68fb      	ldr	r3, [r7, #12]
 80075e8:	      |   68db      	ldr	r3, [r3, #12]
 80075ea:	      |   2100      	movs	r1, #0
 80075ec:	      |   4618      	mov	r0, r3
 80075ee:	      |   f7fe f80b 	bl	8005608 <spi_txrx>
    if(param_len > 0){
 80075f2:	      \-> 7abb      	ldrb	r3, [r7, #10]
 80075f4:	          2b00      	cmp	r3, #0
 80075f6:	/-------- d017      	beq.n	8007628 <SX126x_SendOpcode+0xa6>
        for(uint8_t i = 0; i < param_len; i++){
 80075f8:	|         2300      	movs	r3, #0
 80075fa:	|         757b      	strb	r3, [r7, #21]
 80075fc:	|     /-- e010      	b.n	8007620 <SX126x_SendOpcode+0x9e>
            uint8_t data = parameters[i];
 80075fe:	|  /--|-> 7d7b      	ldrb	r3, [r7, #21]
 8007600:	|  |  |   687a      	ldr	r2, [r7, #4]
 8007602:	|  |  |   4413      	add	r3, r2
 8007604:	|  |  |   781b      	ldrb	r3, [r3, #0]
 8007606:	|  |  |   74fb      	strb	r3, [r7, #19]
            spi_txrx(driver->spi, parameters[i]);
 8007608:	|  |  |   68fb      	ldr	r3, [r7, #12]
 800760a:	|  |  |   68d8      	ldr	r0, [r3, #12]
 800760c:	|  |  |   7d7b      	ldrb	r3, [r7, #21]
 800760e:	|  |  |   687a      	ldr	r2, [r7, #4]
 8007610:	|  |  |   4413      	add	r3, r2
 8007612:	|  |  |   781b      	ldrb	r3, [r3, #0]
 8007614:	|  |  |   4619      	mov	r1, r3
 8007616:	|  |  |   f7fd fff7 	bl	8005608 <spi_txrx>
        for(uint8_t i = 0; i < param_len; i++){
 800761a:	|  |  |   7d7b      	ldrb	r3, [r7, #21]
 800761c:	|  |  |   3301      	adds	r3, #1
 800761e:	|  |  |   757b      	strb	r3, [r7, #21]
 8007620:	|  |  \-> 7d7a      	ldrb	r2, [r7, #21]
 8007622:	|  |      7abb      	ldrb	r3, [r7, #10]
 8007624:	|  |      429a      	cmp	r2, r3
 8007626:	|  \----- d3ea      	bcc.n	80075fe <SX126x_SendOpcode+0x7c>
        }
    }
    if(answer_len > 0){
 8007628:	\-------> f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800762c:	          2b00      	cmp	r3, #0
 800762e:	/-------- d014      	beq.n	800765a <SX126x_SendOpcode+0xd8>
        for(uint8_t i = 0; i < answer_len; i++)
 8007630:	|         2300      	movs	r3, #0
 8007632:	|         753b      	strb	r3, [r7, #20]
 8007634:	|     /-- e00c      	b.n	8007650 <SX126x_SendOpcode+0xce>
            answer[i] = (uint8_t)(spi_txrx(driver->spi, 0x00));
 8007636:	|  /--|-> 68fb      	ldr	r3, [r7, #12]
 8007638:	|  |  |   68d8      	ldr	r0, [r3, #12]
 800763a:	|  |  |   7d3b      	ldrb	r3, [r7, #20]
 800763c:	|  |  |   6aba      	ldr	r2, [r7, #40]	; 0x28
 800763e:	|  |  |   18d4      	adds	r4, r2, r3
 8007640:	|  |  |   2100      	movs	r1, #0
 8007642:	|  |  |   f7fd ffe1 	bl	8005608 <spi_txrx>
 8007646:	|  |  |   4603      	mov	r3, r0
 8007648:	|  |  |   7023      	strb	r3, [r4, #0]
        for(uint8_t i = 0; i < answer_len; i++)
 800764a:	|  |  |   7d3b      	ldrb	r3, [r7, #20]
 800764c:	|  |  |   3301      	adds	r3, #1
 800764e:	|  |  |   753b      	strb	r3, [r7, #20]
 8007650:	|  |  \-> 7d3a      	ldrb	r2, [r7, #20]
 8007652:	|  |      f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007656:	|  |      429a      	cmp	r2, r3
 8007658:	|  \----- d3ed      	bcc.n	8007636 <SX126x_SendOpcode+0xb4>
    }
    gpio_state(driver->gpio.CS_pin, HIGH);
 800765a:	\-------> 68fb      	ldr	r3, [r7, #12]
 800765c:	          78db      	ldrb	r3, [r3, #3]
 800765e:	          2101      	movs	r1, #1
 8007660:	          4618      	mov	r0, r3
 8007662:	          f7fa fc9d 	bl	8001fa0 <gpio_state>
}
 8007666:	          bf00      	nop
 8007668:	          371c      	adds	r7, #28
 800766a:	          46bd      	mov	sp, r7
 800766c:	          bd90      	pop	{r4, r7, pc}

0800766e <SX126x_GetStatus>:

void SX126x_GetStatus(SX126x *driver){
 800766e:	b580      	push	{r7, lr}
 8007670:	b086      	sub	sp, #24
 8007672:	af02      	add	r7, sp, #8
 8007674:	6078      	str	r0, [r7, #4]
    uint8_t data = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]
    SX126x_SendOpcode(driver, OPCODE_GET_STATUS, DUMMY_PTR, 0, &data, 1);
 800767a:	4b0a      	ldr	r3, [pc, #40]	; (80076a4 <SX126x_GetStatus+0x36>)
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	2301      	movs	r3, #1
 8007680:	9301      	str	r3, [sp, #4]
 8007682:	f107 030f 	add.w	r3, r7, #15
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	2300      	movs	r3, #0
 800768a:	21c0      	movs	r1, #192	; 0xc0
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff ff78 	bl	8007582 <SX126x_SendOpcode>
    SX126x_CalculateMode(driver, data);
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	4619      	mov	r1, r3
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7ff ff53 	bl	8007542 <SX126x_CalculateMode>
}
 800769c:	bf00      	nop
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	5314      	strh	r4, [r2, r4]
 80076a6:	2000      	movs	r0, #0

080076a8 <SX126x_ReadRegisters>:

void SX126x_ReadRegisters(SX126x *driver, uint16_t address, uint8_t *answer, uint8_t len){
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b088      	sub	sp, #32
 80076ac:	af02      	add	r7, sp, #8
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	607a      	str	r2, [r7, #4]
 80076b2:	461a      	mov	r2, r3
 80076b4:	460b      	mov	r3, r1
 80076b6:	817b      	strh	r3, [r7, #10]
 80076b8:	4613      	mov	r3, r2
 80076ba:	727b      	strb	r3, [r7, #9]
    uint8_t data[3] = {address >> 8, address & 0xFF, 0x00};
 80076bc:	897b      	ldrh	r3, [r7, #10]
 80076be:	0a1b      	lsrs	r3, r3, #8
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	753b      	strb	r3, [r7, #20]
 80076c6:	897b      	ldrh	r3, [r7, #10]
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	757b      	strb	r3, [r7, #21]
 80076cc:	2300      	movs	r3, #0
 80076ce:	75bb      	strb	r3, [r7, #22]
    SX126x_SendOpcode(driver, OPCODE_READ_REGISTER, data, 3, answer, len);
 80076d0:	f107 0214 	add.w	r2, r7, #20
 80076d4:	7a7b      	ldrb	r3, [r7, #9]
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	2303      	movs	r3, #3
 80076de:	211d      	movs	r1, #29
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f7ff ff4e 	bl	8007582 <SX126x_SendOpcode>
}
 80076e6:	bf00      	nop
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <SX126x_WriteRegisters>:

void SX126x_WriteRegisters(SX126x *driver, uint8_t *addr_and_regs, uint8_t len){
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b086      	sub	sp, #24
 80076f2:	af02      	add	r7, sp, #8
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	60b9      	str	r1, [r7, #8]
 80076f8:	4613      	mov	r3, r2
 80076fa:	71fb      	strb	r3, [r7, #7]
    SX126x_SendOpcode(driver, OPCODE_WRITE_REGISTER, addr_and_regs, len, DUMMY_PTR, 0);
 80076fc:	4b07      	ldr	r3, [pc, #28]	; (800771c <SX126x_WriteRegisters+0x2e>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	79fa      	ldrb	r2, [r7, #7]
 8007702:	2100      	movs	r1, #0
 8007704:	9101      	str	r1, [sp, #4]
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	4613      	mov	r3, r2
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	210d      	movs	r1, #13
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f7ff ff37 	bl	8007582 <SX126x_SendOpcode>
}
 8007714:	bf00      	nop
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	5314      	strh	r4, [r2, r4]
 800771e:	2000      	movs	r0, #0

08007720 <SX126x_WriteBuffer>:

void SX126x_WriteBuffer(SX126x *driver, uint8_t *data, uint8_t len){
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af02      	add	r7, sp, #8
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	4613      	mov	r3, r2
 800772c:	71fb      	strb	r3, [r7, #7]
    SX126x_SendOpcode(driver, OPCODE_WRITE_BUFFER, data, len, DUMMY_PTR, 0);
 800772e:	4b08      	ldr	r3, [pc, #32]	; (8007750 <SX126x_WriteBuffer+0x30>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	79fa      	ldrb	r2, [r7, #7]
 8007734:	2100      	movs	r1, #0
 8007736:	9101      	str	r1, [sp, #4]
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	4613      	mov	r3, r2
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	210e      	movs	r1, #14
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7ff ff1e 	bl	8007582 <SX126x_SendOpcode>
}
 8007746:	bf00      	nop
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	5314      	strh	r4, [r2, r4]
 8007752:	2000      	movs	r0, #0

08007754 <SX126x_ReadBuffer>:
void SX126x_ReadBuffer(SX126x *driver, uint8_t offset, uint8_t *data, uint8_t len){
 8007754:	b580      	push	{r7, lr}
 8007756:	b088      	sub	sp, #32
 8007758:	af02      	add	r7, sp, #8
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	607a      	str	r2, [r7, #4]
 800775e:	461a      	mov	r2, r3
 8007760:	460b      	mov	r3, r1
 8007762:	72fb      	strb	r3, [r7, #11]
 8007764:	4613      	mov	r3, r2
 8007766:	72bb      	strb	r3, [r7, #10]
    uint8_t status[2] = {offset, 0};
 8007768:	7afb      	ldrb	r3, [r7, #11]
 800776a:	753b      	strb	r3, [r7, #20]
 800776c:	2300      	movs	r3, #0
 800776e:	757b      	strb	r3, [r7, #21]
    SX126x_SendOpcode(driver, OPCODE_READ_BUFFER, status, 2, data, len);
 8007770:	f107 0214 	add.w	r2, r7, #20
 8007774:	7abb      	ldrb	r3, [r7, #10]
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	2302      	movs	r3, #2
 800777e:	211e      	movs	r1, #30
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7ff fefe 	bl	8007582 <SX126x_SendOpcode>
    driver->mode.mode = status[1];
 8007786:	7d7b      	ldrb	r3, [r7, #21]
 8007788:	f003 0307 	and.w	r3, r3, #7
 800778c:	b2d9      	uxtb	r1, r3
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	7c13      	ldrb	r3, [r2, #16]
 8007792:	f361 0302 	bfi	r3, r1, #0, #3
 8007796:	7413      	strb	r3, [r2, #16]
}
 8007798:	bf00      	nop
 800779a:	3718      	adds	r7, #24
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <SX126x_SetRfFrequency>:

void SX126x_SetRfFrequency(SX126x *driver, uint32_t freq_hz){
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
    uint32_t RF_Freq = (uint32_t)((float)(freq_hz / 32000000.0) * (1 << 25) );  // 0x1b100000
 80077aa:	6838      	ldr	r0, [r7, #0]
 80077ac:	f001 fd62 	bl	8009274 <__aeabi_ui2d>
 80077b0:	a31d      	add	r3, pc, #116	; (adr r3, 8007828 <SX126x_SetRfFrequency+0x88>)
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f001 ff01 	bl	80095bc <__aeabi_ddiv>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	4610      	mov	r0, r2
 80077c0:	4619      	mov	r1, r3
 80077c2:	f002 f82b 	bl	800981c <__aeabi_d2f>
 80077c6:	ee07 0a10 	vmov	s14, r0
 80077ca:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007820 <SX126x_SetRfFrequency+0x80>
 80077ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077d6:	ee17 3a90 	vmov	r3, s15
 80077da:	613b      	str	r3, [r7, #16]
    uint8_t data[4] = {RF_Freq >> 24, (RF_Freq >> 16) & 0xFF, (RF_Freq >> 8) & 0xFF, RF_Freq & 0xFF};  // [0x1b, 0x10, 0, 0]
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	0e1b      	lsrs	r3, r3, #24
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	733b      	strb	r3, [r7, #12]
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	0c1b      	lsrs	r3, r3, #16
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	737b      	strb	r3, [r7, #13]
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	0a1b      	lsrs	r3, r3, #8
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	73bb      	strb	r3, [r7, #14]
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	73fb      	strb	r3, [r7, #15]
    uint8_t *reversed_data = (uint8_t *)(&RF_Freq);  // big endian [0, 0, 0x10, 0x1b]
 80077fa:	f107 0310 	add.w	r3, r7, #16
 80077fe:	617b      	str	r3, [r7, #20]
    SX126x_SendOpcode(driver, OPCODE_SET_RF_FREQUENCY, data, 4, DUMMY_PTR, 0);
 8007800:	4b08      	ldr	r3, [pc, #32]	; (8007824 <SX126x_SetRfFrequency+0x84>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f107 020c 	add.w	r2, r7, #12
 8007808:	2100      	movs	r1, #0
 800780a:	9101      	str	r1, [sp, #4]
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	2304      	movs	r3, #4
 8007810:	2186      	movs	r1, #134	; 0x86
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7ff feb5 	bl	8007582 <SX126x_SendOpcode>
}
 8007818:	bf00      	nop
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	0000      	movs	r0, r0
 8007822:	4c00      	ldr	r4, [pc, #0]	; (8007824 <SX126x_SetRfFrequency+0x84>)
 8007824:	5314      	strh	r4, [r2, r4]
 8007826:	2000      	movs	r0, #0
 8007828:	0000      	movs	r0, r0
 800782a:	0000      	movs	r0, r0
 800782c:	8480      	strh	r0, [r0, #36]	; 0x24
 800782e:	417e      	adcs	r6, r7

08007830 <SX126x_SetPacketType>:

void SX126x_SetPacketType(SX126x *driver, uint8_t packet_type){
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af02      	add	r7, sp, #8
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	460b      	mov	r3, r1
 800783a:	70fb      	strb	r3, [r7, #3]
    SX126x_SendOpcode(driver, OPCODE_SET_PACKET_TYPE, &packet_type, 1, DUMMY_PTR, 0);
 800783c:	4b07      	ldr	r3, [pc, #28]	; (800785c <SX126x_SetPacketType+0x2c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	1cfa      	adds	r2, r7, #3
 8007842:	2100      	movs	r1, #0
 8007844:	9101      	str	r1, [sp, #4]
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	2301      	movs	r3, #1
 800784a:	218a      	movs	r1, #138	; 0x8a
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff fe98 	bl	8007582 <SX126x_SendOpcode>
}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	5314      	strh	r4, [r2, r4]
 800785e:	2000      	movs	r0, #0

08007860 <SX126x_SetTxParams>:

void SX126x_SetTxParams(SX126x *driver, uint8_t power_dbm, uint8_t ramp_time){
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af02      	add	r7, sp, #8
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	460b      	mov	r3, r1
 800786a:	70fb      	strb	r3, [r7, #3]
 800786c:	4613      	mov	r3, r2
 800786e:	70bb      	strb	r3, [r7, #2]
    uint8_t data[2] = {power_dbm, ramp_time};
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	733b      	strb	r3, [r7, #12]
 8007874:	78bb      	ldrb	r3, [r7, #2]
 8007876:	737b      	strb	r3, [r7, #13]
    SX126x_SendOpcode(driver, OPCODE_SET_TX_PARAMS, data, 2, DUMMY_PTR, 0);
 8007878:	4b07      	ldr	r3, [pc, #28]	; (8007898 <SX126x_SetTxParams+0x38>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f107 020c 	add.w	r2, r7, #12
 8007880:	2100      	movs	r1, #0
 8007882:	9101      	str	r1, [sp, #4]
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	2302      	movs	r3, #2
 8007888:	218e      	movs	r1, #142	; 0x8e
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff fe79 	bl	8007582 <SX126x_SendOpcode>
}
 8007890:	bf00      	nop
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	5314      	strh	r4, [r2, r4]
 800789a:	2000      	movs	r0, #0

0800789c <SX126x_SetBufferBaseAddress>:

void SX126x_SetBufferBaseAddress(SX126x *driver, uint8_t tx_buf_addr, uint8_t rx_buf_addr){
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af02      	add	r7, sp, #8
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
 80078a8:	4613      	mov	r3, r2
 80078aa:	70bb      	strb	r3, [r7, #2]
    uint8_t data[2] = {tx_buf_addr, rx_buf_addr};
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	733b      	strb	r3, [r7, #12]
 80078b0:	78bb      	ldrb	r3, [r7, #2]
 80078b2:	737b      	strb	r3, [r7, #13]
    SX126x_SendOpcode(driver, OPCODE_SET_BUFFER_BASE_ADDR, data, 2, DUMMY_PTR, 0);
 80078b4:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <SX126x_SetBufferBaseAddress+0x38>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f107 020c 	add.w	r2, r7, #12
 80078bc:	2100      	movs	r1, #0
 80078be:	9101      	str	r1, [sp, #4]
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	2302      	movs	r3, #2
 80078c4:	218f      	movs	r1, #143	; 0x8f
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7ff fe5b 	bl	8007582 <SX126x_SendOpcode>
}
 80078cc:	bf00      	nop
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	5314      	strh	r4, [r2, r4]
 80078d6:	2000      	movs	r0, #0

080078d8 <SX126x_SetModulationParams>:

void SX126x_SetModulationParams(SX126x *driver, uint8_t sf, uint8_t bw, uint8_t cr, uint8_t ldro){
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af02      	add	r7, sp, #8
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	4608      	mov	r0, r1
 80078e2:	4611      	mov	r1, r2
 80078e4:	461a      	mov	r2, r3
 80078e6:	4603      	mov	r3, r0
 80078e8:	70fb      	strb	r3, [r7, #3]
 80078ea:	460b      	mov	r3, r1
 80078ec:	70bb      	strb	r3, [r7, #2]
 80078ee:	4613      	mov	r3, r2
 80078f0:	707b      	strb	r3, [r7, #1]
    uint8_t data[4] = {sf, bw, cr, ldro};
 80078f2:	78fb      	ldrb	r3, [r7, #3]
 80078f4:	733b      	strb	r3, [r7, #12]
 80078f6:	78bb      	ldrb	r3, [r7, #2]
 80078f8:	737b      	strb	r3, [r7, #13]
 80078fa:	787b      	ldrb	r3, [r7, #1]
 80078fc:	73bb      	strb	r3, [r7, #14]
 80078fe:	7e3b      	ldrb	r3, [r7, #24]
 8007900:	73fb      	strb	r3, [r7, #15]
    // uint8_t data[8] = {sf, bw, cr, ldro, 0, 0, 0, 0};
    SX126x_SendOpcode(driver, OPCODE_SET_MODULATION_PARAMS, data, 4, DUMMY_PTR, 0);
 8007902:	4b08      	ldr	r3, [pc, #32]	; (8007924 <SX126x_SetModulationParams+0x4c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f107 020c 	add.w	r2, r7, #12
 800790a:	2100      	movs	r1, #0
 800790c:	9101      	str	r1, [sp, #4]
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	2304      	movs	r3, #4
 8007912:	218b      	movs	r1, #139	; 0x8b
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff fe34 	bl	8007582 <SX126x_SendOpcode>
}
 800791a:	bf00      	nop
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	5314      	strh	r4, [r2, r4]
 8007926:	2000      	movs	r0, #0

08007928 <SX126x_SetPacketParams>:

void SX126x_SetPacketParams(SX126x *driver, uint16_t preamble_len, uint8_t header_type,
                            uint8_t payload_len, uint8_t crc_type, uint8_t invert_iq){
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af02      	add	r7, sp, #8
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	4608      	mov	r0, r1
 8007932:	4611      	mov	r1, r2
 8007934:	461a      	mov	r2, r3
 8007936:	4603      	mov	r3, r0
 8007938:	807b      	strh	r3, [r7, #2]
 800793a:	460b      	mov	r3, r1
 800793c:	707b      	strb	r3, [r7, #1]
 800793e:	4613      	mov	r3, r2
 8007940:	703b      	strb	r3, [r7, #0]
    uint8_t data[6] = {(uint8_t)(preamble_len >> 8), (uint8_t)(preamble_len & 0xFF), header_type,
 8007942:	887b      	ldrh	r3, [r7, #2]
 8007944:	0a1b      	lsrs	r3, r3, #8
 8007946:	b29b      	uxth	r3, r3
 8007948:	b2db      	uxtb	r3, r3
 800794a:	723b      	strb	r3, [r7, #8]
 800794c:	887b      	ldrh	r3, [r7, #2]
 800794e:	b2db      	uxtb	r3, r3
 8007950:	727b      	strb	r3, [r7, #9]
 8007952:	787b      	ldrb	r3, [r7, #1]
 8007954:	72bb      	strb	r3, [r7, #10]
 8007956:	783b      	ldrb	r3, [r7, #0]
 8007958:	72fb      	strb	r3, [r7, #11]
 800795a:	7e3b      	ldrb	r3, [r7, #24]
 800795c:	733b      	strb	r3, [r7, #12]
 800795e:	7f3b      	ldrb	r3, [r7, #28]
 8007960:	737b      	strb	r3, [r7, #13]
                       payload_len, crc_type, invert_iq};
    // uint8_t data[9] = {(uint8_t)(preamble_len >> 8), (uint8_t)(preamble_len & 0xFF), header_type,
    //                    payload_len, crc_type, invert_iq, 0, 0, 0};
    SX126x_SendOpcode(driver, OPCODE_SET_PACKET_PARAMS, data, 6, DUMMY_PTR, 0);
 8007962:	4b08      	ldr	r3, [pc, #32]	; (8007984 <SX126x_SetPacketParams+0x5c>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f107 0208 	add.w	r2, r7, #8
 800796a:	2100      	movs	r1, #0
 800796c:	9101      	str	r1, [sp, #4]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	2306      	movs	r3, #6
 8007972:	218c      	movs	r1, #140	; 0x8c
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f7ff fe04 	bl	8007582 <SX126x_SendOpcode>
}
 800797a:	bf00      	nop
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	5314      	strh	r4, [r2, r4]
 8007986:	2000      	movs	r0, #0

08007988 <SX126x_SetTx>:

void SX126x_SetTx(SX126x *driver, uint16_t timeout_ms){
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af02      	add	r7, sp, #8
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	807b      	strh	r3, [r7, #2]
    // max timeout 262000 ms
    uint32_t timeout = timeout_ms / 0.015625;
 8007994:	887b      	ldrh	r3, [r7, #2]
 8007996:	4618      	mov	r0, r3
 8007998:	f001 fc7c 	bl	8009294 <__aeabi_i2d>
 800799c:	f04f 0200 	mov.w	r2, #0
 80079a0:	4b12      	ldr	r3, [pc, #72]	; (80079ec <SX126x_SetTx+0x64>)
 80079a2:	f001 fe0b 	bl	80095bc <__aeabi_ddiv>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	4610      	mov	r0, r2
 80079ac:	4619      	mov	r1, r3
 80079ae:	f001 ff15 	bl	80097dc <__aeabi_d2uiz>
 80079b2:	4603      	mov	r3, r0
 80079b4:	60fb      	str	r3, [r7, #12]
    uint8_t data[3] = {timeout >> 16, (timeout >> 8) & 0xFF, timeout & 0xFF};
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	0c1b      	lsrs	r3, r3, #16
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	723b      	strb	r3, [r7, #8]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	0a1b      	lsrs	r3, r3, #8
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	727b      	strb	r3, [r7, #9]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	72bb      	strb	r3, [r7, #10]
    SX126x_SendOpcode(driver, OPCODE_SET_TX, data, 3, DUMMY_PTR, 0);
 80079cc:	4b08      	ldr	r3, [pc, #32]	; (80079f0 <SX126x_SetTx+0x68>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f107 0208 	add.w	r2, r7, #8
 80079d4:	2100      	movs	r1, #0
 80079d6:	9101      	str	r1, [sp, #4]
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	2303      	movs	r3, #3
 80079dc:	2183      	movs	r1, #131	; 0x83
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff fdcf 	bl	8007582 <SX126x_SendOpcode>
}
 80079e4:	bf00      	nop
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	0000      	movs	r0, r0
 80079ee:	3f90      	subs	r7, #144	; 0x90
 80079f0:	5314      	strh	r4, [r2, r4]
 80079f2:	2000      	movs	r0, #0

080079f4 <SX126x_SetRx>:

void SX126x_SetRx(SX126x *driver, uint16_t timeout_ms){
 80079f4:	    b580      	push	{r7, lr}
 80079f6:	    b086      	sub	sp, #24
 80079f8:	    af02      	add	r7, sp, #8
 80079fa:	    6078      	str	r0, [r7, #4]
 80079fc:	    460b      	mov	r3, r1
 80079fe:	    807b      	strh	r3, [r7, #2]
    // max timeout 262000 ms ; 0xFFFFFF - continuous mode
    if(!driver->packet_configured){
 8007a00:	    687b      	ldr	r3, [r7, #4]
 8007a02:	    f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007a06:	    2b00      	cmp	r3, #0
 8007a08:	/-- d113      	bne.n	8007a32 <SX126x_SetRx+0x3e>
        SX126x_SetPacketParams(driver, driver->preamble_len, driver->header_type, 0, driver->crc_on_off, driver->iq_polarity);
 8007a0a:	|   687b      	ldr	r3, [r7, #4]
 8007a0c:	|   8bd9      	ldrh	r1, [r3, #30]
 8007a0e:	|   687b      	ldr	r3, [r7, #4]
 8007a10:	|   7e18      	ldrb	r0, [r3, #24]
 8007a12:	|   687b      	ldr	r3, [r7, #4]
 8007a14:	|   7e5b      	ldrb	r3, [r3, #25]
 8007a16:	|   687a      	ldr	r2, [r7, #4]
 8007a18:	|   f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007a1c:	|   9201      	str	r2, [sp, #4]
 8007a1e:	|   9300      	str	r3, [sp, #0]
 8007a20:	|   2300      	movs	r3, #0
 8007a22:	|   4602      	mov	r2, r0
 8007a24:	|   6878      	ldr	r0, [r7, #4]
 8007a26:	|   f7ff ff7f 	bl	8007928 <SX126x_SetPacketParams>
        driver->packet_configured = 1;
 8007a2a:	|   687b      	ldr	r3, [r7, #4]
 8007a2c:	|   2201      	movs	r2, #1
 8007a2e:	|   f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    }
    uint32_t timeout = timeout_ms / 0.015625;
 8007a32:	\-> 887b      	ldrh	r3, [r7, #2]
 8007a34:	    4618      	mov	r0, r3
 8007a36:	    f001 fc2d 	bl	8009294 <__aeabi_i2d>
 8007a3a:	    f04f 0200 	mov.w	r2, #0
 8007a3e:	    4b13      	ldr	r3, [pc, #76]	; (8007a8c <SX126x_SetRx+0x98>)
 8007a40:	    f001 fdbc 	bl	80095bc <__aeabi_ddiv>
 8007a44:	    4602      	mov	r2, r0
 8007a46:	    460b      	mov	r3, r1
 8007a48:	    4610      	mov	r0, r2
 8007a4a:	    4619      	mov	r1, r3
 8007a4c:	    f001 fec6 	bl	80097dc <__aeabi_d2uiz>
 8007a50:	    4603      	mov	r3, r0
 8007a52:	    60fb      	str	r3, [r7, #12]
    uint8_t data[3] = {timeout >> 16, (timeout >> 8) & 0xFF, timeout & 0xFF};
 8007a54:	    68fb      	ldr	r3, [r7, #12]
 8007a56:	    0c1b      	lsrs	r3, r3, #16
 8007a58:	    b2db      	uxtb	r3, r3
 8007a5a:	    723b      	strb	r3, [r7, #8]
 8007a5c:	    68fb      	ldr	r3, [r7, #12]
 8007a5e:	    0a1b      	lsrs	r3, r3, #8
 8007a60:	    b2db      	uxtb	r3, r3
 8007a62:	    727b      	strb	r3, [r7, #9]
 8007a64:	    68fb      	ldr	r3, [r7, #12]
 8007a66:	    b2db      	uxtb	r3, r3
 8007a68:	    72bb      	strb	r3, [r7, #10]
    SX126x_SendOpcode(driver, OPCODE_SET_RX, data, 3, DUMMY_PTR, 0);
 8007a6a:	    4b09      	ldr	r3, [pc, #36]	; (8007a90 <SX126x_SetRx+0x9c>)
 8007a6c:	    681b      	ldr	r3, [r3, #0]
 8007a6e:	    f107 0208 	add.w	r2, r7, #8
 8007a72:	    2100      	movs	r1, #0
 8007a74:	    9101      	str	r1, [sp, #4]
 8007a76:	    9300      	str	r3, [sp, #0]
 8007a78:	    2303      	movs	r3, #3
 8007a7a:	    2182      	movs	r1, #130	; 0x82
 8007a7c:	    6878      	ldr	r0, [r7, #4]
 8007a7e:	    f7ff fd80 	bl	8007582 <SX126x_SendOpcode>
}
 8007a82:	    bf00      	nop
 8007a84:	    3710      	adds	r7, #16
 8007a86:	    46bd      	mov	sp, r7
 8007a88:	    bd80      	pop	{r7, pc}
 8007a8a:	    bf00      	nop
 8007a8c:	    0000      	movs	r0, r0
 8007a8e:	    3f90      	subs	r7, #144	; 0x90
 8007a90:	    5314      	strh	r4, [r2, r4]
 8007a92:	    2000      	movs	r0, #0

08007a94 <SetRxTxFallbackMode>:

void SetRxTxFallbackMode(SX126x *driver){
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af02      	add	r7, sp, #8
 8007a9a:	6078      	str	r0, [r7, #4]
    uint8_t mode = 0x20;  // STBY_RC
 8007a9c:	2320      	movs	r3, #32
 8007a9e:	73fb      	strb	r3, [r7, #15]
    SX126x_SendOpcode(driver, OPCODE_SET_FALLBACK_MODE, &mode, 1, DUMMY_PTR, 0);
 8007aa0:	4b07      	ldr	r3, [pc, #28]	; (8007ac0 <SetRxTxFallbackMode+0x2c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f107 020f 	add.w	r2, r7, #15
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	9101      	str	r1, [sp, #4]
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	2301      	movs	r3, #1
 8007ab0:	2193      	movs	r1, #147	; 0x93
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff fd65 	bl	8007582 <SX126x_SendOpcode>
}
 8007ab8:	bf00      	nop
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	5314      	strh	r4, [r2, r4]
 8007ac2:	2000      	movs	r0, #0

08007ac4 <SX126x_SetStandby>:

void SX126x_SetStandby(SX126x *driver, uint8_t config){
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af02      	add	r7, sp, #8
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
    SX126x_SendOpcode(driver, OPCODE_SET_STANDBY, &config, 1, DUMMY_PTR, 0);
 8007ad0:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <SX126x_SetStandby+0x2c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	1cfa      	adds	r2, r7, #3
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	9101      	str	r1, [sp, #4]
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	2301      	movs	r3, #1
 8007ade:	2180      	movs	r1, #128	; 0x80
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff fd4e 	bl	8007582 <SX126x_SendOpcode>
}
 8007ae6:	bf00      	nop
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	5314      	strh	r4, [r2, r4]
 8007af2:	2000      	movs	r0, #0

08007af4 <SX126x_SetSleep>:

void SX126x_SetSleep(SX126x *driver){
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af02      	add	r7, sp, #8
 8007afa:	6078      	str	r0, [r7, #4]
    SX126x_SendOpcode(driver, OPCODE_SET_SLEEP, DUMMY_PTR, 0, DUMMY_PTR, 0);
 8007afc:	4b07      	ldr	r3, [pc, #28]	; (8007b1c <SX126x_SetSleep+0x28>)
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	4b06      	ldr	r3, [pc, #24]	; (8007b1c <SX126x_SetSleep+0x28>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2100      	movs	r1, #0
 8007b06:	9101      	str	r1, [sp, #4]
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	2184      	movs	r1, #132	; 0x84
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7ff fd37 	bl	8007582 <SX126x_SendOpcode>
}
 8007b14:	bf00      	nop
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	5314      	strh	r4, [r2, r4]
 8007b1e:	2000      	movs	r0, #0

08007b20 <SX126x_GetPacketType>:

uint8_t SX126x_GetPacketType(SX126x *driver){
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af02      	add	r7, sp, #8
 8007b26:	6078      	str	r0, [r7, #4]
    uint8_t buf[2] = {0};
 8007b28:	2300      	movs	r3, #0
 8007b2a:	81bb      	strh	r3, [r7, #12]
    SX126x_SendOpcode(driver, OPCODE_GET_PACKET_TYPE, DUMMY_PTR, 0, buf, 2);
 8007b2c:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <SX126x_GetPacketType+0x40>)
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	2302      	movs	r3, #2
 8007b32:	9301      	str	r3, [sp, #4]
 8007b34:	f107 030c 	add.w	r3, r7, #12
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	2111      	movs	r1, #17
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff fd1f 	bl	8007582 <SX126x_SendOpcode>
    SX126x_CalculateMode(driver, buf[0]);
 8007b44:	7b3b      	ldrb	r3, [r7, #12]
 8007b46:	4619      	mov	r1, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7ff fcfa 	bl	8007542 <SX126x_CalculateMode>
    driver->packet_type = buf[1];
 8007b4e:	7b7a      	ldrb	r2, [r7, #13]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	749a      	strb	r2, [r3, #18]
    return buf[1];
 8007b54:	7b7b      	ldrb	r3, [r7, #13]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	5314      	strh	r4, [r2, r4]
 8007b62:	2000      	movs	r0, #0

08007b64 <SX126x_GetDeviceErrors>:

uint16_t SX126x_GetDeviceErrors(SX126x *driver){
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af02      	add	r7, sp, #8
 8007b6a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3] = {0};
 8007b6c:	4b10      	ldr	r3, [pc, #64]	; (8007bb0 <SX126x_GetDeviceErrors+0x4c>)
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	81bb      	strh	r3, [r7, #12]
 8007b72:	2300      	movs	r3, #0
 8007b74:	73bb      	strb	r3, [r7, #14]
    SX126x_SendOpcode(driver, OPCODE_GET_DEVICE_ERRORS, DUMMY_PTR, 0, buf, 3);
 8007b76:	4b0f      	ldr	r3, [pc, #60]	; (8007bb4 <SX126x_GetDeviceErrors+0x50>)
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	9301      	str	r3, [sp, #4]
 8007b7e:	f107 030c 	add.w	r3, r7, #12
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	2300      	movs	r3, #0
 8007b86:	2117      	movs	r1, #23
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7ff fcfa 	bl	8007582 <SX126x_SendOpcode>
    SX126x_CalculateMode(driver, buf[0]);
 8007b8e:	7b3b      	ldrb	r3, [r7, #12]
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff fcd5 	bl	8007542 <SX126x_CalculateMode>
    return (uint16_t)((buf[1] << 8) | buf[2]);
 8007b98:	7b7b      	ldrb	r3, [r7, #13]
 8007b9a:	021b      	lsls	r3, r3, #8
 8007b9c:	b21a      	sxth	r2, r3
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	b21b      	sxth	r3, r3
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	b21b      	sxth	r3, r3
 8007ba6:	b29b      	uxth	r3, r3
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	b1e8      	cbz	r0, 8007bee <SX126x_GetIrqStatus+0x36>
 8007bb2:	0800      	lsrs	r0, r0, #32
 8007bb4:	5314      	strh	r4, [r2, r4]
 8007bb6:	2000      	movs	r0, #0

08007bb8 <SX126x_GetIrqStatus>:

void SX126x_GetIrqStatus(SX126x *driver){
 8007bb8:	       b580      	push	{r7, lr}
 8007bba:	       b086      	sub	sp, #24
 8007bbc:	       af02      	add	r7, sp, #8
 8007bbe:	       6078      	str	r0, [r7, #4]
    uint8_t buf[3] = {0};
 8007bc0:	       4b21      	ldr	r3, [pc, #132]	; (8007c48 <SX126x_GetIrqStatus+0x90>)
 8007bc2:	       881b      	ldrh	r3, [r3, #0]
 8007bc4:	       81bb      	strh	r3, [r7, #12]
 8007bc6:	       2300      	movs	r3, #0
 8007bc8:	       73bb      	strb	r3, [r7, #14]
    SX126x_SendOpcode(driver, OPCODE_GET_IRQ_STATUS, DUMMY_PTR, 0, buf, 3);
 8007bca:	       4b20      	ldr	r3, [pc, #128]	; (8007c4c <SX126x_GetIrqStatus+0x94>)
 8007bcc:	       681a      	ldr	r2, [r3, #0]
 8007bce:	       2303      	movs	r3, #3
 8007bd0:	       9301      	str	r3, [sp, #4]
 8007bd2:	       f107 030c 	add.w	r3, r7, #12
 8007bd6:	       9300      	str	r3, [sp, #0]
 8007bd8:	       2300      	movs	r3, #0
 8007bda:	       2112      	movs	r1, #18
 8007bdc:	       6878      	ldr	r0, [r7, #4]
 8007bde:	       f7ff fcd0 	bl	8007582 <SX126x_SendOpcode>
    SX126x_CalculateMode(driver, buf[0]);
 8007be2:	       7b3b      	ldrb	r3, [r7, #12]
 8007be4:	       4619      	mov	r1, r3
 8007be6:	       6878      	ldr	r0, [r7, #4]
 8007be8:	       f7ff fcab 	bl	8007542 <SX126x_CalculateMode>
    for(uint8_t i = 0; i < 8; i++)
 8007bec:	       2300      	movs	r3, #0
 8007bee:	       73fb      	strb	r3, [r7, #15]
 8007bf0:	   /-- e011      	b.n	8007c16 <SX126x_GetIrqStatus+0x5e>
        *((uint8_t *)(&(driver->irq_status)) + i) = (buf[2] >> i) & 0x01;
 8007bf2:	/--|-> 7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	|  |   461a      	mov	r2, r3
 8007bf6:	|  |   7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	|  |   fa42 f303 	asr.w	r3, r2, r3
 8007bfc:	|  |   b2da      	uxtb	r2, r3
 8007bfe:	|  |   687b      	ldr	r3, [r7, #4]
 8007c00:	|  |   f103 012e 	add.w	r1, r3, #46	; 0x2e
 8007c04:	|  |   7bfb      	ldrb	r3, [r7, #15]
 8007c06:	|  |   440b      	add	r3, r1
 8007c08:	|  |   f002 0201 	and.w	r2, r2, #1
 8007c0c:	|  |   b2d2      	uxtb	r2, r2
 8007c0e:	|  |   701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < 8; i++)
 8007c10:	|  |   7bfb      	ldrb	r3, [r7, #15]
 8007c12:	|  |   3301      	adds	r3, #1
 8007c14:	|  |   73fb      	strb	r3, [r7, #15]
 8007c16:	|  \-> 7bfb      	ldrb	r3, [r7, #15]
 8007c18:	|      2b07      	cmp	r3, #7
 8007c1a:	\----- d9ea      	bls.n	8007bf2 <SX126x_GetIrqStatus+0x3a>
    *((uint8_t *)(&(driver->irq_status)) + 8) = (buf[1] >> 0) & 0x01;
 8007c1c:	       7b7a      	ldrb	r2, [r7, #13]
 8007c1e:	       687b      	ldr	r3, [r7, #4]
 8007c20:	       332e      	adds	r3, #46	; 0x2e
 8007c22:	       3308      	adds	r3, #8
 8007c24:	       f002 0201 	and.w	r2, r2, #1
 8007c28:	       b2d2      	uxtb	r2, r2
 8007c2a:	       701a      	strb	r2, [r3, #0]
    *((uint8_t *)(&(driver->irq_status)) + 9) = (buf[1] >> 1) & 0x01;
 8007c2c:	       7b7b      	ldrb	r3, [r7, #13]
 8007c2e:	       085b      	lsrs	r3, r3, #1
 8007c30:	       b2da      	uxtb	r2, r3
 8007c32:	       687b      	ldr	r3, [r7, #4]
 8007c34:	       332e      	adds	r3, #46	; 0x2e
 8007c36:	       3309      	adds	r3, #9
 8007c38:	       f002 0201 	and.w	r2, r2, #1
 8007c3c:	       b2d2      	uxtb	r2, r2
 8007c3e:	       701a      	strb	r2, [r3, #0]

}
 8007c40:	       bf00      	nop
 8007c42:	       3710      	adds	r7, #16
 8007c44:	       46bd      	mov	sp, r7
 8007c46:	       bd80      	pop	{r7, pc}
 8007c48:	       b1e8      	cbz	r0, 8007c86 <SX126x_SetDioIrqParams+0x36>
 8007c4a:	       0800      	lsrs	r0, r0, #32
 8007c4c:	       5314      	strh	r4, [r2, r4]
 8007c4e:	       2000      	movs	r0, #0

08007c50 <SX126x_SetDioIrqParams>:
void SX126x_SetDioIrqParams(SX126x *driver, uint16_t irq_mask, uint16_t dio1_mask, uint16_t dio2_mask, uint16_t dio3_mask){
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af02      	add	r7, sp, #8
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	4608      	mov	r0, r1
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	4603      	mov	r3, r0
 8007c60:	817b      	strh	r3, [r7, #10]
 8007c62:	460b      	mov	r3, r1
 8007c64:	813b      	strh	r3, [r7, #8]
 8007c66:	4613      	mov	r3, r2
 8007c68:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8] = {irq_mask >> 8, irq_mask & 0xFF, dio1_mask >> 8, dio1_mask & 0xFF, dio2_mask >> 8, dio2_mask & 0xFF, dio3_mask >> 8, dio3_mask & 0xFF};
 8007c6a:	897b      	ldrh	r3, [r7, #10]
 8007c6c:	0a1b      	lsrs	r3, r3, #8
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	743b      	strb	r3, [r7, #16]
 8007c74:	897b      	ldrh	r3, [r7, #10]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	747b      	strb	r3, [r7, #17]
 8007c7a:	893b      	ldrh	r3, [r7, #8]
 8007c7c:	0a1b      	lsrs	r3, r3, #8
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	74bb      	strb	r3, [r7, #18]
 8007c84:	893b      	ldrh	r3, [r7, #8]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	74fb      	strb	r3, [r7, #19]
 8007c8a:	88fb      	ldrh	r3, [r7, #6]
 8007c8c:	0a1b      	lsrs	r3, r3, #8
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	753b      	strb	r3, [r7, #20]
 8007c94:	88fb      	ldrh	r3, [r7, #6]
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	757b      	strb	r3, [r7, #21]
 8007c9a:	8c3b      	ldrh	r3, [r7, #32]
 8007c9c:	0a1b      	lsrs	r3, r3, #8
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	75bb      	strb	r3, [r7, #22]
 8007ca4:	8c3b      	ldrh	r3, [r7, #32]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	75fb      	strb	r3, [r7, #23]
    SX126x_SendOpcode(driver, OPCODE_SET_DIO_IRQ_PARAMS, data, 8, DUMMY_PTR, 0);
 8007caa:	4b08      	ldr	r3, [pc, #32]	; (8007ccc <SX126x_SetDioIrqParams+0x7c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f107 0210 	add.w	r2, r7, #16
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	9101      	str	r1, [sp, #4]
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	2308      	movs	r3, #8
 8007cba:	2108      	movs	r1, #8
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7ff fc60 	bl	8007582 <SX126x_SendOpcode>
}
 8007cc2:	bf00      	nop
 8007cc4:	3718      	adds	r7, #24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	5314      	strh	r4, [r2, r4]
 8007cce:	2000      	movs	r0, #0

08007cd0 <SX126x_SetDIO2AsRfSwitchCtr>:

void SX126x_SetDIO2AsRfSwitchCtr(SX126x *driver, uint8_t enable){
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af02      	add	r7, sp, #8
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	70fb      	strb	r3, [r7, #3]
    SX126x_SendOpcode(driver, OPCODE_SET_DIO2_AS_RFSWITCH, &enable, 1, DUMMY_PTR, 0);
 8007cdc:	4b07      	ldr	r3, [pc, #28]	; (8007cfc <SX126x_SetDIO2AsRfSwitchCtr+0x2c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	1cfa      	adds	r2, r7, #3
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	9101      	str	r1, [sp, #4]
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	2301      	movs	r3, #1
 8007cea:	219d      	movs	r1, #157	; 0x9d
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7ff fc48 	bl	8007582 <SX126x_SendOpcode>
}
 8007cf2:	bf00      	nop
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	5314      	strh	r4, [r2, r4]
 8007cfe:	2000      	movs	r0, #0

08007d00 <SX126x_SetOCP>:

void SX126x_SetOCP(SX126x *driver, uint8_t ocp){
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70fb      	strb	r3, [r7, #3]
    uint8_t data[3] = {0x08, 0xE7, ocp};
 8007d0c:	2308      	movs	r3, #8
 8007d0e:	733b      	strb	r3, [r7, #12]
 8007d10:	23e7      	movs	r3, #231	; 0xe7
 8007d12:	737b      	strb	r3, [r7, #13]
 8007d14:	78fb      	ldrb	r3, [r7, #3]
 8007d16:	73bb      	strb	r3, [r7, #14]
    SX126x_WriteRegisters(driver, data, 3);
 8007d18:	f107 030c 	add.w	r3, r7, #12
 8007d1c:	2203      	movs	r2, #3
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff fce4 	bl	80076ee <SX126x_WriteRegisters>
}
 8007d26:	bf00      	nop
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <SX126x_SetSyncWord>:

void SX126x_SetSyncWord(SX126x *driver, uint16_t sync_word){
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	460b      	mov	r3, r1
 8007d38:	807b      	strh	r3, [r7, #2]
    uint8_t data[4] = {0x07, 0x40, sync_word >> 8, sync_word & 0xFF};
 8007d3a:	2307      	movs	r3, #7
 8007d3c:	733b      	strb	r3, [r7, #12]
 8007d3e:	2340      	movs	r3, #64	; 0x40
 8007d40:	737b      	strb	r3, [r7, #13]
 8007d42:	887b      	ldrh	r3, [r7, #2]
 8007d44:	0a1b      	lsrs	r3, r3, #8
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	73bb      	strb	r3, [r7, #14]
 8007d4c:	887b      	ldrh	r3, [r7, #2]
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	73fb      	strb	r3, [r7, #15]
    SX126x_WriteRegisters(driver, data, 4);
 8007d52:	f107 030c 	add.w	r3, r7, #12
 8007d56:	2204      	movs	r2, #4
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7ff fcc7 	bl	80076ee <SX126x_WriteRegisters>
}
 8007d60:	bf00      	nop
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <SX126x_GetRxBufferStatus>:
void SX126x_GetRxBufferStatus(SX126x *driver){
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af02      	add	r7, sp, #8
 8007d6e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3] = {0};
 8007d70:	4b10      	ldr	r3, [pc, #64]	; (8007db4 <SX126x_GetRxBufferStatus+0x4c>)
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	81bb      	strh	r3, [r7, #12]
 8007d76:	2300      	movs	r3, #0
 8007d78:	73bb      	strb	r3, [r7, #14]
    SX126x_SendOpcode(driver, OPCODE_GET_RX_BUFFER_STATUS, DUMMY_PTR, 0, buf, 3);
 8007d7a:	4b0f      	ldr	r3, [pc, #60]	; (8007db8 <SX126x_GetRxBufferStatus+0x50>)
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	2303      	movs	r3, #3
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	f107 030c 	add.w	r3, r7, #12
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	2300      	movs	r3, #0
 8007d8a:	2113      	movs	r1, #19
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff fbf8 	bl	8007582 <SX126x_SendOpcode>
    SX126x_CalculateMode(driver, buf[0]);
 8007d92:	7b3b      	ldrb	r3, [r7, #12]
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7ff fbd3 	bl	8007542 <SX126x_CalculateMode>
    driver->rx_pkt_len = buf[1];
 8007d9c:	7b7a      	ldrb	r2, [r7, #13]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    driver->rx_buf_ptr = buf[2];
 8007da4:	7bba      	ldrb	r2, [r7, #14]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007dac:	bf00      	nop
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	b1e8      	cbz	r0, 8007df2 <SX126x_GetPacketStatus+0x36>
 8007db6:	0800      	lsrs	r0, r0, #32
 8007db8:	5314      	strh	r4, [r2, r4]
 8007dba:	2000      	movs	r0, #0

08007dbc <SX126x_GetPacketStatus>:
void SX126x_GetPacketStatus(SX126x *driver){
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af02      	add	r7, sp, #8
 8007dc2:	6078      	str	r0, [r7, #4]
    uint8_t buf[4] = {0};
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60fb      	str	r3, [r7, #12]
    SX126x_SendOpcode(driver, OPCODE_GET_PACKET_STATUS, DUMMY_PTR, 0, buf, 4);
 8007dc8:	4b10      	ldr	r3, [pc, #64]	; (8007e0c <SX126x_GetPacketStatus+0x50>)
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	2304      	movs	r3, #4
 8007dce:	9301      	str	r3, [sp, #4]
 8007dd0:	f107 030c 	add.w	r3, r7, #12
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	2114      	movs	r1, #20
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7ff fbd1 	bl	8007582 <SX126x_SendOpcode>
    SX126x_CalculateMode(driver, buf[0]);
 8007de0:	7b3b      	ldrb	r3, [r7, #12]
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7ff fbac 	bl	8007542 <SX126x_CalculateMode>
    driver->rssi = buf[1];
 8007dea:	7b7a      	ldrb	r2, [r7, #13]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    driver->snr = buf[2];
 8007df2:	7bba      	ldrb	r2, [r7, #14]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    driver->signal_rssi = buf[3];
 8007dfa:	7bfa      	ldrb	r2, [r7, #15]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8007e02:	bf00      	nop
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	5314      	strh	r4, [r2, r4]
 8007e0e:	2000      	movs	r0, #0

08007e10 <SX126x_ClearIrqStatus>:
void SX126x_ClearIrqStatus(SX126x *driver, uint16_t param){
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af02      	add	r7, sp, #8
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	807b      	strh	r3, [r7, #2]
    uint8_t data[2] = {param >> 8, param & 0xff};
 8007e1c:	887b      	ldrh	r3, [r7, #2]
 8007e1e:	0a1b      	lsrs	r3, r3, #8
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	733b      	strb	r3, [r7, #12]
 8007e26:	887b      	ldrh	r3, [r7, #2]
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	737b      	strb	r3, [r7, #13]
    SX126x_SendOpcode(driver, OPCODE_CLEAR_IRQ_STATUS, data, 2, DUMMY_PTR, 0);
 8007e2c:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <SX126x_ClearIrqStatus+0x3c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f107 020c 	add.w	r2, r7, #12
 8007e34:	2100      	movs	r1, #0
 8007e36:	9101      	str	r1, [sp, #4]
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	2102      	movs	r1, #2
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7ff fb9f 	bl	8007582 <SX126x_SendOpcode>
}
 8007e44:	bf00      	nop
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	5314      	strh	r4, [r2, r4]
 8007e4e:	2000      	movs	r0, #0

08007e50 <SX126x_RxDataParse>:

void SX126x_RxDataParse(SX126x *driver){
 8007e50:	       b580      	push	{r7, lr}
 8007e52:	       b084      	sub	sp, #16
 8007e54:	       af00      	add	r7, sp, #0
 8007e56:	       6078      	str	r0, [r7, #4]
    if(driver->rx_pkt_len > 3 && driver->rx_data[0] == 0x55){
 8007e58:	       687b      	ldr	r3, [r7, #4]
 8007e5a:	       f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007e5e:	       2b03      	cmp	r3, #3
 8007e60:	/----- d91e      	bls.n	8007ea0 <SX126x_RxDataParse+0x50>
 8007e62:	|      687b      	ldr	r3, [r7, #4]
 8007e64:	|      f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e68:	|      2b55      	cmp	r3, #85	; 0x55
 8007e6a:	+----- d119      	bne.n	8007ea0 <SX126x_RxDataParse+0x50>
        CommandStruct *pkt = (CommandStruct *)(driver->rx_data);
 8007e6c:	|      687b      	ldr	r3, [r7, #4]
 8007e6e:	|      3339      	adds	r3, #57	; 0x39
 8007e70:	|      60fb      	str	r3, [r7, #12]
        if(pkt->target_id == driver->self_addr || pkt->target_id  == 0xFF){
 8007e72:	|      68fb      	ldr	r3, [r7, #12]
 8007e74:	|      789a      	ldrb	r2, [r3, #2]
 8007e76:	|      687b      	ldr	r3, [r7, #4]
 8007e78:	|      7c5b      	ldrb	r3, [r3, #17]
 8007e7a:	|      429a      	cmp	r2, r3
 8007e7c:	|  /-- d003      	beq.n	8007e86 <SX126x_RxDataParse+0x36>
 8007e7e:	|  |   68fb      	ldr	r3, [r7, #12]
 8007e80:	|  |   789b      	ldrb	r3, [r3, #2]
 8007e82:	|  |   2bff      	cmp	r3, #255	; 0xff
 8007e84:	+--|-- d10c      	bne.n	8007ea0 <SX126x_RxDataParse+0x50>
            if(pkt->arg_len == driver->rx_pkt_len - 5){
 8007e86:	|  \-> 68fb      	ldr	r3, [r7, #12]
 8007e88:	|      791b      	ldrb	r3, [r3, #4]
 8007e8a:	|      461a      	mov	r2, r3
 8007e8c:	|      687b      	ldr	r3, [r7, #4]
 8007e8e:	|      f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007e92:	|      3b05      	subs	r3, #5
 8007e94:	|      429a      	cmp	r2, r3
 8007e96:	+----- d103      	bne.n	8007ea0 <SX126x_RxDataParse+0x50>
                CMD_Parser(driver, pkt);
 8007e98:	|      68f9      	ldr	r1, [r7, #12]
 8007e9a:	|      6878      	ldr	r0, [r7, #4]
 8007e9c:	|      f7f8 fd12 	bl	80008c4 <CMD_Parser>
            }
        }
    }
    driver->new_rx_data_flag = 0;
 8007ea0:	\----> 687b      	ldr	r3, [r7, #4]
 8007ea2:	       2200      	movs	r2, #0
 8007ea4:	       f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8007ea8:	       bf00      	nop
 8007eaa:	       3710      	adds	r7, #16
 8007eac:	       46bd      	mov	sp, r7
 8007eae:	       bd80      	pop	{r7, pc}

08007eb0 <SX126x_RxHandler>:

void SX126x_RxHandler(SX126x *driver){
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
    SX126x_GetIrqStatus(driver);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7ff fe7d 	bl	8007bb8 <SX126x_GetIrqStatus>
    memset(driver->rx_data, 0, 128);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3339      	adds	r3, #57	; 0x39
 8007ec2:	2280      	movs	r2, #128	; 0x80
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f001 fd8a 	bl	80099e0 <memset>
    SX126x_ClearIrqStatus(driver, 0x3F);
 8007ecc:	213f      	movs	r1, #63	; 0x3f
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7ff ff9e 	bl	8007e10 <SX126x_ClearIrqStatus>
    SX126x_GetIrqStatus(driver);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7ff fe6f 	bl	8007bb8 <SX126x_GetIrqStatus>
    SX126x_GetPacketStatus(driver);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7ff ff6e 	bl	8007dbc <SX126x_GetPacketStatus>
    SX126x_GetRxBufferStatus(driver);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7ff ff41 	bl	8007d68 <SX126x_GetRxBufferStatus>
    SX126x_ReadBuffer(driver, driver->rx_buf_ptr, driver->rx_data, driver->rx_pkt_len);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f103 0239 	add.w	r2, r3, #57	; 0x39
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff fc2b 	bl	8007754 <SX126x_ReadBuffer>
    SX126x_SetRx(driver, 0);
 8007efe:	2100      	movs	r1, #0
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7ff fd77 	bl	80079f4 <SX126x_SetRx>
    SX126x_GetStatus(driver);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7ff fbb1 	bl	800766e <SX126x_GetStatus>
    driver->new_rx_data_flag = 1;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <newLoRa>:
#include "gpio.h"
#include "delay.h"
#include "spi.h"


LoRa newLoRa(){
 8007f1c:	b4b0      	push	{r4, r5, r7}
 8007f1e:	b089      	sub	sp, #36	; 0x24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8007f24:	f240 13b1 	movw	r3, #433	; 0x1b1
 8007f28:	617b      	str	r3, [r7, #20]
	new_LoRa.spredingFactor        = SF_7      ;
 8007f2a:	2307      	movs	r3, #7
 8007f2c:	763b      	strb	r3, [r7, #24]
	new_LoRa.bandWidth			   = BW_125KHz ;
 8007f2e:	2307      	movs	r3, #7
 8007f30:	767b      	strb	r3, [r7, #25]
	new_LoRa.crcRate               = CR_4_5    ;
 8007f32:	2301      	movs	r3, #1
 8007f34:	76bb      	strb	r3, [r7, #26]
	new_LoRa.power				   = POWER_20db;
 8007f36:	23ff      	movs	r3, #255	; 0xff
 8007f38:	77bb      	strb	r3, [r7, #30]
	new_LoRa.overCurrentProtection = 100       ;
 8007f3a:	2364      	movs	r3, #100	; 0x64
 8007f3c:	77fb      	strb	r3, [r7, #31]
	new_LoRa.preamble			   = 8         ;
 8007f3e:	2308      	movs	r3, #8
 8007f40:	83bb      	strh	r3, [r7, #28]

	return new_LoRa;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	461d      	mov	r5, r3
 8007f46:	f107 0408 	add.w	r4, r7, #8
 8007f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f52:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	3724      	adds	r7, #36	; 0x24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bcb0      	pop	{r4, r5, r7}
 8007f5e:	4770      	bx	lr

08007f60 <LoRa_reset>:

void LoRa_reset(LoRa* _LoRa){
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
	gpio_state(_LoRa->reset_pin, LOW);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	785b      	ldrb	r3, [r3, #1]
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fa f816 	bl	8001fa0 <gpio_state>
	Delay(1);
 8007f74:	2001      	movs	r0, #1
 8007f76:	f7fd fe2d 	bl	8005bd4 <Delay>
	gpio_state(_LoRa->reset_pin, HIGH);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	785b      	ldrb	r3, [r3, #1]
 8007f7e:	2101      	movs	r1, #1
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fa f80d 	bl	8001fa0 <gpio_state>
	Delay(6);
 8007f86:	2006      	movs	r0, #6
 8007f88:	f7fd fe24 	bl	8005bd4 <Delay>
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <LoRa_gotoMode>:

void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8007f94:	          b580      	push	{r7, lr}
 8007f96:	          b084      	sub	sp, #16
 8007f98:	          af00      	add	r7, sp, #0
 8007f9a:	          6078      	str	r0, [r7, #4]
 8007f9c:	          6039      	str	r1, [r7, #0]
	volatile uint8_t read;
	volatile uint8_t data;

	read = LoRa_readRegister(_LoRa, RegOpMode);
 8007f9e:	          2101      	movs	r1, #1
 8007fa0:	          6878      	ldr	r0, [r7, #4]
 8007fa2:	          f000 f854 	bl	800804e <LoRa_readRegister>
 8007fa6:	          4603      	mov	r3, r0
 8007fa8:	          73fb      	strb	r3, [r7, #15]
	data = (read & 0xF8);
 8007faa:	          7bfb      	ldrb	r3, [r7, #15]
 8007fac:	          b2db      	uxtb	r3, r3
 8007fae:	          f023 0307 	bic.w	r3, r3, #7
 8007fb2:	          b2db      	uxtb	r3, r3
 8007fb4:	          73bb      	strb	r3, [r7, #14]

	if(mode == SLEEP_MODE){
 8007fb6:	          683b      	ldr	r3, [r7, #0]
 8007fb8:	          2b00      	cmp	r3, #0
 8007fba:	      /-- d10b      	bne.n	8007fd4 <LoRa_gotoMode+0x40>
		data |= 0x00;
 8007fbc:	      |   7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	      |   b2db      	uxtb	r3, r3
 8007fc0:	      |   73bb      	strb	r3, [r7, #14]
		_LoRa->current_mode = SLEEP_MODE;
 8007fc2:	      |   687b      	ldr	r3, [r7, #4]
 8007fc4:	      |   2200      	movs	r2, #0
 8007fc6:	      |   609a      	str	r2, [r3, #8]
		LoRa_writeRegister(_LoRa, RegOpMode, 0x08);
 8007fc8:	      |   2208      	movs	r2, #8
 8007fca:	      |   2101      	movs	r1, #1
 8007fcc:	      |   6878      	ldr	r0, [r7, #4]
 8007fce:	      |   f000 f872 	bl	80080b6 <LoRa_writeRegister>
		return;
 8007fd2:	/-----|-- e039      	b.n	8008048 <LoRa_gotoMode+0xb4>
	}else if (mode == STNBY_MODE){
 8007fd4:	|     \-> 683b      	ldr	r3, [r7, #0]
 8007fd6:	|         2b01      	cmp	r3, #1
 8007fd8:	|     /-- d109      	bne.n	8007fee <LoRa_gotoMode+0x5a>
		data |= 0x01;
 8007fda:	|     |   7bbb      	ldrb	r3, [r7, #14]
 8007fdc:	|     |   b2db      	uxtb	r3, r3
 8007fde:	|     |   f043 0301 	orr.w	r3, r3, #1
 8007fe2:	|     |   b2db      	uxtb	r3, r3
 8007fe4:	|     |   73bb      	strb	r3, [r7, #14]
		_LoRa->current_mode = STNBY_MODE;
 8007fe6:	|     |   687b      	ldr	r3, [r7, #4]
 8007fe8:	|     |   2201      	movs	r2, #1
 8007fea:	|     |   609a      	str	r2, [r3, #8]
 8007fec:	|  /--|-- e025      	b.n	800803a <LoRa_gotoMode+0xa6>
	}else if (mode == TRANSMIT_MODE){
 8007fee:	|  |  \-> 683b      	ldr	r3, [r7, #0]
 8007ff0:	|  |      2b03      	cmp	r3, #3
 8007ff2:	|  |  /-- d109      	bne.n	8008008 <LoRa_gotoMode+0x74>
		data |= 0x03;
 8007ff4:	|  |  |   7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	|  |  |   b2db      	uxtb	r3, r3
 8007ff8:	|  |  |   f043 0303 	orr.w	r3, r3, #3
 8007ffc:	|  |  |   b2db      	uxtb	r3, r3
 8007ffe:	|  |  |   73bb      	strb	r3, [r7, #14]
		_LoRa->current_mode = TRANSMIT_MODE;
 8008000:	|  |  |   687b      	ldr	r3, [r7, #4]
 8008002:	|  |  |   2203      	movs	r2, #3
 8008004:	|  |  |   609a      	str	r2, [r3, #8]
 8008006:	|  +--|-- e018      	b.n	800803a <LoRa_gotoMode+0xa6>
	}else if (mode == RXCONTIN_MODE){
 8008008:	|  |  \-> 683b      	ldr	r3, [r7, #0]
 800800a:	|  |      2b05      	cmp	r3, #5
 800800c:	|  |  /-- d109      	bne.n	8008022 <LoRa_gotoMode+0x8e>
		data |= 0x05;
 800800e:	|  |  |   7bbb      	ldrb	r3, [r7, #14]
 8008010:	|  |  |   b2db      	uxtb	r3, r3
 8008012:	|  |  |   f043 0305 	orr.w	r3, r3, #5
 8008016:	|  |  |   b2db      	uxtb	r3, r3
 8008018:	|  |  |   73bb      	strb	r3, [r7, #14]
		_LoRa->current_mode = RXCONTIN_MODE;
 800801a:	|  |  |   687b      	ldr	r3, [r7, #4]
 800801c:	|  |  |   2205      	movs	r2, #5
 800801e:	|  |  |   609a      	str	r2, [r3, #8]
 8008020:	|  +--|-- e00b      	b.n	800803a <LoRa_gotoMode+0xa6>
	}else if (mode == RXSINGLE_MODE){
 8008022:	|  |  \-> 683b      	ldr	r3, [r7, #0]
 8008024:	|  |      2b06      	cmp	r3, #6
 8008026:	|  +----- d108      	bne.n	800803a <LoRa_gotoMode+0xa6>
		data |= 0x06;
 8008028:	|  |      7bbb      	ldrb	r3, [r7, #14]
 800802a:	|  |      b2db      	uxtb	r3, r3
 800802c:	|  |      f043 0306 	orr.w	r3, r3, #6
 8008030:	|  |      b2db      	uxtb	r3, r3
 8008032:	|  |      73bb      	strb	r3, [r7, #14]
		_LoRa->current_mode = RXSINGLE_MODE;
 8008034:	|  |      687b      	ldr	r3, [r7, #4]
 8008036:	|  |      2206      	movs	r2, #6
 8008038:	|  |      609a      	str	r2, [r3, #8]
	}

	LoRa_writeRegister(_LoRa, RegOpMode, data);
 800803a:	|  \----> 7bbb      	ldrb	r3, [r7, #14]
 800803c:	|         b2db      	uxtb	r3, r3
 800803e:	|         461a      	mov	r2, r3
 8008040:	|         2101      	movs	r1, #1
 8008042:	|         6878      	ldr	r0, [r7, #4]
 8008044:	|         f000 f837 	bl	80080b6 <LoRa_writeRegister>
}
 8008048:	\-------> 3710      	adds	r7, #16
 800804a:	          46bd      	mov	sp, r7
 800804c:	          bd80      	pop	{r7, pc}

0800804e <LoRa_readRegister>:

uint8_t LoRa_readRegister(LoRa* _LoRa, uint8_t address){
 800804e:	b580      	push	{r7, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	460b      	mov	r3, r1
 8008058:	70fb      	strb	r3, [r7, #3]
	address &= ~(1 << 7);
 800805a:	78fb      	ldrb	r3, [r7, #3]
 800805c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008060:	70fb      	strb	r3, [r7, #3]
	gpio_state(_LoRa->CS_pin, LOW);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	2100      	movs	r1, #0
 8008068:	4618      	mov	r0, r3
 800806a:	f7f9 ff99 	bl	8001fa0 <gpio_state>
	// Delay(1);
	// spi_send8(_LoRa->LoRaSPI, address);
	// uint8_t output = spi_recieve8(_LoRa->LoRaSPI);
	Delay(1);
 800806e:	2001      	movs	r0, #1
 8008070:	f7fd fdb0 	bl	8005bd4 <Delay>
	spi_txrx(_LoRa->LoRaSPI, address);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	78fa      	ldrb	r2, [r7, #3]
 800807a:	4611      	mov	r1, r2
 800807c:	4618      	mov	r0, r3
 800807e:	f7fd fac3 	bl	8005608 <spi_txrx>
	volatile uint8_t output = spi_txrx(_LoRa->LoRaSPI, 0x00);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	2100      	movs	r1, #0
 8008088:	4618      	mov	r0, r3
 800808a:	f7fd fabd 	bl	8005608 <spi_txrx>
 800808e:	4603      	mov	r3, r0
 8008090:	73fb      	strb	r3, [r7, #15]
	Delay(1);
 8008092:	2001      	movs	r0, #1
 8008094:	f7fd fd9e 	bl	8005bd4 <Delay>
	gpio_state(_LoRa->CS_pin, HIGH);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2101      	movs	r1, #1
 800809e:	4618      	mov	r0, r3
 80080a0:	f7f9 ff7e 	bl	8001fa0 <gpio_state>
	Delay(2);
 80080a4:	2002      	movs	r0, #2
 80080a6:	f7fd fd95 	bl	8005bd4 <Delay>
	return output;
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
 80080ac:	b2db      	uxtb	r3, r3
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <LoRa_writeRegister>:

void LoRa_writeRegister(LoRa* _LoRa, uint8_t address, volatile uint8_t data){
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	70fb      	strb	r3, [r7, #3]
 80080c2:	4613      	mov	r3, r2
 80080c4:	70bb      	strb	r3, [r7, #2]
	address |= (1 << 7);
 80080c6:	78fb      	ldrb	r3, [r7, #3]
 80080c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080cc:	70fb      	strb	r3, [r7, #3]
	gpio_state(_LoRa->CS_pin, LOW);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	2100      	movs	r1, #0
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7f9 ff63 	bl	8001fa0 <gpio_state>
	// Delay(1);
	// spi_send8(_LoRa->LoRaSPI, address);
	// spi_send8(_LoRa->LoRaSPI, data);
	Delay(1);
 80080da:	2001      	movs	r0, #1
 80080dc:	f7fd fd7a 	bl	8005bd4 <Delay>
	spi_txrx(_LoRa->LoRaSPI, address);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	78fa      	ldrb	r2, [r7, #3]
 80080e6:	4611      	mov	r1, r2
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fd fa8d 	bl	8005608 <spi_txrx>
	volatile uint8_t output = spi_txrx(_LoRa->LoRaSPI, data);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	78ba      	ldrb	r2, [r7, #2]
 80080f4:	b2d2      	uxtb	r2, r2
 80080f6:	4611      	mov	r1, r2
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fd fa85 	bl	8005608 <spi_txrx>
 80080fe:	4603      	mov	r3, r0
 8008100:	73fb      	strb	r3, [r7, #15]
	Delay(1);
 8008102:	2001      	movs	r0, #1
 8008104:	f7fd fd66 	bl	8005bd4 <Delay>
	gpio_state(_LoRa->CS_pin, HIGH);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	2101      	movs	r1, #1
 800810e:	4618      	mov	r0, r3
 8008110:	f7f9 ff46 	bl	8001fa0 <gpio_state>
	Delay(2);
 8008114:	2002      	movs	r0, #2
 8008116:	f7fd fd5d 	bl	8005bd4 <Delay>
}
 800811a:	bf00      	nop
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <LoRa_writeRegisters>:

void LoRa_writeRegisters(LoRa* _LoRa, uint8_t address, uint8_t* values, uint8_t w_length){
 8008122:	       b580      	push	{r7, lr}
 8008124:	       b086      	sub	sp, #24
 8008126:	       af00      	add	r7, sp, #0
 8008128:	       60f8      	str	r0, [r7, #12]
 800812a:	       607a      	str	r2, [r7, #4]
 800812c:	       461a      	mov	r2, r3
 800812e:	       460b      	mov	r3, r1
 8008130:	       72fb      	strb	r3, [r7, #11]
 8008132:	       4613      	mov	r3, r2
 8008134:	       72bb      	strb	r3, [r7, #10]
    address |= (1 << 7);
 8008136:	       7afb      	ldrb	r3, [r7, #11]
 8008138:	       f063 037f 	orn	r3, r3, #127	; 0x7f
 800813c:	       72fb      	strb	r3, [r7, #11]
	gpio_state(_LoRa->CS_pin, LOW);
 800813e:	       68fb      	ldr	r3, [r7, #12]
 8008140:	       781b      	ldrb	r3, [r3, #0]
 8008142:	       2100      	movs	r1, #0
 8008144:	       4618      	mov	r0, r3
 8008146:	       f7f9 ff2b 	bl	8001fa0 <gpio_state>
	Delay(1);
 800814a:	       2001      	movs	r0, #1
 800814c:	       f7fd fd42 	bl	8005bd4 <Delay>
	spi_txrx(_LoRa->LoRaSPI, address);
 8008150:	       68fb      	ldr	r3, [r7, #12]
 8008152:	       685b      	ldr	r3, [r3, #4]
 8008154:	       7afa      	ldrb	r2, [r7, #11]
 8008156:	       4611      	mov	r1, r2
 8008158:	       4618      	mov	r0, r3
 800815a:	       f7fd fa55 	bl	8005608 <spi_txrx>
	for(uint8_t i = 0; i < w_length; i++){
 800815e:	       2300      	movs	r3, #0
 8008160:	       75fb      	strb	r3, [r7, #23]
 8008162:	   /-- e00b      	b.n	800817c <LoRa_writeRegisters+0x5a>
	    spi_txrx(_LoRa->LoRaSPI, values[i]);
 8008164:	/--|-> 68fb      	ldr	r3, [r7, #12]
 8008166:	|  |   6858      	ldr	r0, [r3, #4]
 8008168:	|  |   7dfb      	ldrb	r3, [r7, #23]
 800816a:	|  |   687a      	ldr	r2, [r7, #4]
 800816c:	|  |   4413      	add	r3, r2
 800816e:	|  |   781b      	ldrb	r3, [r3, #0]
 8008170:	|  |   4619      	mov	r1, r3
 8008172:	|  |   f7fd fa49 	bl	8005608 <spi_txrx>
	for(uint8_t i = 0; i < w_length; i++){
 8008176:	|  |   7dfb      	ldrb	r3, [r7, #23]
 8008178:	|  |   3301      	adds	r3, #1
 800817a:	|  |   75fb      	strb	r3, [r7, #23]
 800817c:	|  \-> 7dfa      	ldrb	r2, [r7, #23]
 800817e:	|      7abb      	ldrb	r3, [r7, #10]
 8008180:	|      429a      	cmp	r2, r3
 8008182:	\----- d3ef      	bcc.n	8008164 <LoRa_writeRegisters+0x42>
    }
	Delay(1);
 8008184:	       2001      	movs	r0, #1
 8008186:	       f7fd fd25 	bl	8005bd4 <Delay>
	gpio_state(_LoRa->CS_pin, HIGH);
 800818a:	       68fb      	ldr	r3, [r7, #12]
 800818c:	       781b      	ldrb	r3, [r3, #0]
 800818e:	       2101      	movs	r1, #1
 8008190:	       4618      	mov	r0, r3
 8008192:	       f7f9 ff05 	bl	8001fa0 <gpio_state>
	Delay(2);
 8008196:	       2002      	movs	r0, #2
 8008198:	       f7fd fd1c 	bl	8005bd4 <Delay>
}
 800819c:	       bf00      	nop
 800819e:	       3718      	adds	r7, #24
 80081a0:	       46bd      	mov	sp, r7
 80081a2:	       bd80      	pop	{r7, pc}

080081a4 <LoRa_setFrequency>:


void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
	volatile uint8_t  data;
	volatile uint32_t F;
	F = (uint32_t)(freq * 524288) >> 5;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	04db      	lsls	r3, r3, #19
 80081b2:	095b      	lsrs	r3, r3, #5
 80081b4:	60bb      	str	r3, [r7, #8]

	// write Msb:
	data = (uint8_t) (F >> 16);
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	0c1b      	lsrs	r3, r3, #16
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	73fb      	strb	r3, [r7, #15]
	LoRa_writeRegister(_LoRa, RegFrMsb, data);
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	461a      	mov	r2, r3
 80081c4:	2106      	movs	r1, #6
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7ff ff75 	bl	80080b6 <LoRa_writeRegister>
	Delay(5);
 80081cc:	2005      	movs	r0, #5
 80081ce:	f7fd fd01 	bl	8005bd4 <Delay>

	// write Mid:
	data = (uint8_t) (F >> 8);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	0a1b      	lsrs	r3, r3, #8
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	73fb      	strb	r3, [r7, #15]
	LoRa_writeRegister(_LoRa, RegFrMid, data);
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	461a      	mov	r2, r3
 80081e0:	2107      	movs	r1, #7
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7ff ff67 	bl	80080b6 <LoRa_writeRegister>
	Delay(5);
 80081e8:	2005      	movs	r0, #5
 80081ea:	f7fd fcf3 	bl	8005bd4 <Delay>

	// write Lsb:
	data = (uint8_t) (F >> 0);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	73fb      	strb	r3, [r7, #15]
	LoRa_writeRegister(_LoRa, RegFrLsb, data);
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	461a      	mov	r2, r3
 80081fa:	2108      	movs	r1, #8
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f7ff ff5a 	bl	80080b6 <LoRa_writeRegister>
	Delay(5);
 8008202:	2005      	movs	r0, #5
 8008204:	f7fd fce6 	bl	8005bd4 <Delay>
}
 8008208:	bf00      	nop
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <LoRa_setSpreadingFactor>:


void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8008210:	    b580      	push	{r7, lr}
 8008212:	    b084      	sub	sp, #16
 8008214:	    af00      	add	r7, sp, #0
 8008216:	    6078      	str	r0, [r7, #4]
 8008218:	    6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800821a:	    683b      	ldr	r3, [r7, #0]
 800821c:	    2b0c      	cmp	r3, #12
 800821e:	/-- dd01      	ble.n	8008224 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8008220:	|   230c      	movs	r3, #12
 8008222:	|   603b      	str	r3, [r7, #0]
	if(SF<7)
 8008224:	\-> 683b      	ldr	r3, [r7, #0]
 8008226:	    2b06      	cmp	r3, #6
 8008228:	/-- dc01      	bgt.n	800822e <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800822a:	|   2307      	movs	r3, #7
 800822c:	|   603b      	str	r3, [r7, #0]

	read = LoRa_readRegister(_LoRa, RegModemConfig2);
 800822e:	\-> 211e      	movs	r1, #30
 8008230:	    6878      	ldr	r0, [r7, #4]
 8008232:	    f7ff ff0c 	bl	800804e <LoRa_readRegister>
 8008236:	    4603      	mov	r3, r0
 8008238:	    73fb      	strb	r3, [r7, #15]
	Delay(10);
 800823a:	    200a      	movs	r0, #10
 800823c:	    f7fd fcca 	bl	8005bd4 <Delay>

	data = (SF << 4) + (read & 0x0F);
 8008240:	    683b      	ldr	r3, [r7, #0]
 8008242:	    b2db      	uxtb	r3, r3
 8008244:	    011b      	lsls	r3, r3, #4
 8008246:	    b2da      	uxtb	r2, r3
 8008248:	    7bfb      	ldrb	r3, [r7, #15]
 800824a:	    f003 030f 	and.w	r3, r3, #15
 800824e:	    b2db      	uxtb	r3, r3
 8008250:	    4413      	add	r3, r2
 8008252:	    73bb      	strb	r3, [r7, #14]
	LoRa_writeRegister(_LoRa, RegModemConfig2, data);
 8008254:	    7bbb      	ldrb	r3, [r7, #14]
 8008256:	    461a      	mov	r2, r3
 8008258:	    211e      	movs	r1, #30
 800825a:	    6878      	ldr	r0, [r7, #4]
 800825c:	    f7ff ff2b 	bl	80080b6 <LoRa_writeRegister>
	Delay(10);
 8008260:	    200a      	movs	r0, #10
 8008262:	    f7fd fcb7 	bl	8005bd4 <Delay>
}
 8008266:	    bf00      	nop
 8008268:	    3710      	adds	r7, #16
 800826a:	    46bd      	mov	sp, r7
 800826c:	    bd80      	pop	{r7, pc}

0800826e <LoRa_setPower>:

void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	460b      	mov	r3, r1
 8008278:	70fb      	strb	r3, [r7, #3]
	LoRa_writeRegister(_LoRa, RegPaConfig, power);
 800827a:	78fb      	ldrb	r3, [r7, #3]
 800827c:	461a      	mov	r2, r3
 800827e:	2109      	movs	r1, #9
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7ff ff18 	bl	80080b6 <LoRa_writeRegister>
	Delay(10);
 8008286:	200a      	movs	r0, #10
 8008288:	f7fd fca4 	bl	8005bd4 <Delay>
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <LoRa_setOCP>:

void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8008294:	       b580      	push	{r7, lr}
 8008296:	       b084      	sub	sp, #16
 8008298:	       af00      	add	r7, sp, #0
 800829a:	       6078      	str	r0, [r7, #4]
 800829c:	       460b      	mov	r3, r1
 800829e:	       70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80082a0:	       2300      	movs	r3, #0
 80082a2:	       73fb      	strb	r3, [r7, #15]

	if(current<45)
 80082a4:	       78fb      	ldrb	r3, [r7, #3]
 80082a6:	       2b2c      	cmp	r3, #44	; 0x2c
 80082a8:	   /-- d801      	bhi.n	80082ae <LoRa_setOCP+0x1a>
		current = 45;
 80082aa:	   |   232d      	movs	r3, #45	; 0x2d
 80082ac:	   |   70fb      	strb	r3, [r7, #3]
	if(current>240)
 80082ae:	   \-> 78fb      	ldrb	r3, [r7, #3]
 80082b0:	       2bf0      	cmp	r3, #240	; 0xf0
 80082b2:	   /-- d901      	bls.n	80082b8 <LoRa_setOCP+0x24>
		current = 240;
 80082b4:	   |   23f0      	movs	r3, #240	; 0xf0
 80082b6:	   |   70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80082b8:	   \-> 78fb      	ldrb	r3, [r7, #3]
 80082ba:	       2b78      	cmp	r3, #120	; 0x78
 80082bc:	   /-- d809      	bhi.n	80082d2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80082be:	   |   78fb      	ldrb	r3, [r7, #3]
 80082c0:	   |   3b2d      	subs	r3, #45	; 0x2d
 80082c2:	   |   4a12      	ldr	r2, [pc, #72]	; (800830c <LoRa_setOCP+0x78>)
 80082c4:	   |   fb82 1203 	smull	r1, r2, r2, r3
 80082c8:	   |   1052      	asrs	r2, r2, #1
 80082ca:	   |   17db      	asrs	r3, r3, #31
 80082cc:	   |   1ad3      	subs	r3, r2, r3
 80082ce:	   |   73fb      	strb	r3, [r7, #15]
 80082d0:	/--|-- e00b      	b.n	80082ea <LoRa_setOCP+0x56>
	else if(current <= 240)
 80082d2:	|  \-> 78fb      	ldrb	r3, [r7, #3]
 80082d4:	|      2bf0      	cmp	r3, #240	; 0xf0
 80082d6:	+----- d808      	bhi.n	80082ea <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80082d8:	|      78fb      	ldrb	r3, [r7, #3]
 80082da:	|      331e      	adds	r3, #30
 80082dc:	|      4a0b      	ldr	r2, [pc, #44]	; (800830c <LoRa_setOCP+0x78>)
 80082de:	|      fb82 1203 	smull	r1, r2, r2, r3
 80082e2:	|      1092      	asrs	r2, r2, #2
 80082e4:	|      17db      	asrs	r3, r3, #31
 80082e6:	|      1ad3      	subs	r3, r2, r3
 80082e8:	|      73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80082ea:	\----> 7bfb      	ldrb	r3, [r7, #15]
 80082ec:	       3320      	adds	r3, #32
 80082ee:	       73fb      	strb	r3, [r7, #15]
	LoRa_writeRegister(_LoRa, RegOcp, OcpTrim);
 80082f0:	       7bfb      	ldrb	r3, [r7, #15]
 80082f2:	       461a      	mov	r2, r3
 80082f4:	       210b      	movs	r1, #11
 80082f6:	       6878      	ldr	r0, [r7, #4]
 80082f8:	       f7ff fedd 	bl	80080b6 <LoRa_writeRegister>
	Delay(10);
 80082fc:	       200a      	movs	r0, #10
 80082fe:	       f7fd fc69 	bl	8005bd4 <Delay>
}
 8008302:	       bf00      	nop
 8008304:	       3710      	adds	r7, #16
 8008306:	       46bd      	mov	sp, r7
 8008308:	       bd80      	pop	{r7, pc}
 800830a:	       bf00      	nop
 800830c:	       6667      	str	r7, [r4, #100]	; 0x64
 800830e:	       6666      	str	r6, [r4, #100]	; 0x64

08008310 <LoRa_setTOMsb_setCRCon>:

void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_readRegister(_LoRa, RegModemConfig2);
 8008318:	211e      	movs	r1, #30
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7ff fe97 	bl	800804e <LoRa_readRegister>
 8008320:	4603      	mov	r3, r0
 8008322:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
 8008326:	f043 0307 	orr.w	r3, r3, #7
 800832a:	73bb      	strb	r3, [r7, #14]
	LoRa_writeRegister(_LoRa, RegModemConfig2, data);
 800832c:	7bbb      	ldrb	r3, [r7, #14]
 800832e:	461a      	mov	r2, r3
 8008330:	211e      	movs	r1, #30
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7ff febf 	bl	80080b6 <LoRa_writeRegister>
	Delay(10);
 8008338:	200a      	movs	r0, #10
 800833a:	f7fd fc4b 	bl	8005bd4 <Delay>
}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <LoRa_transmit>:


uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t *data, uint8_t length, uint16_t timeout){
 8008346:	b580      	push	{r7, lr}
 8008348:	b086      	sub	sp, #24
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	4611      	mov	r1, r2
 8008352:	461a      	mov	r2, r3
 8008354:	460b      	mov	r3, r1
 8008356:	71fb      	strb	r3, [r7, #7]
 8008358:	4613      	mov	r3, r2
 800835a:	80bb      	strh	r3, [r7, #4]
	volatile uint8_t read;
	int mode = _LoRa->current_mode;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8008362:	2101      	movs	r1, #1
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f7ff fe15 	bl	8007f94 <LoRa_gotoMode>
	LoRa_writeRegister(_LoRa, RegIrqFlags, 0xFF);
 800836a:	22ff      	movs	r2, #255	; 0xff
 800836c:	2112      	movs	r1, #18
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f7ff fea1 	bl	80080b6 <LoRa_writeRegister>
	read = LoRa_readRegister(_LoRa, RegOpMode);
 8008374:	2101      	movs	r1, #1
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f7ff fe69 	bl	800804e <LoRa_readRegister>
 800837c:	4603      	mov	r3, r0
 800837e:	74fb      	strb	r3, [r7, #19]
	read = LoRa_readRegister(_LoRa, RegFiFoTxBaseAddr);
 8008380:	210e      	movs	r1, #14
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f7ff fe63 	bl	800804e <LoRa_readRegister>
 8008388:	4603      	mov	r3, r0
 800838a:	74fb      	strb	r3, [r7, #19]
	LoRa_writeRegister(_LoRa, RegFiFoAddPtr, read);
 800838c:	7cfb      	ldrb	r3, [r7, #19]
 800838e:	b2db      	uxtb	r3, r3
 8008390:	461a      	mov	r2, r3
 8008392:	210d      	movs	r1, #13
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f7ff fe8e 	bl	80080b6 <LoRa_writeRegister>
	LoRa_writeRegister(_LoRa, RegPayloadLength, length);
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	461a      	mov	r2, r3
 800839e:	2122      	movs	r1, #34	; 0x22
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f7ff fe88 	bl	80080b6 <LoRa_writeRegister>
	LoRa_writeRegisters(_LoRa, RegFiFo, data, length);
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	2100      	movs	r1, #0
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f7ff feb8 	bl	8008122 <LoRa_writeRegisters>
	read = LoRa_readRegister(_LoRa, RegOpMode);
 80083b2:	2101      	movs	r1, #1
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7ff fe4a 	bl	800804e <LoRa_readRegister>
 80083ba:	4603      	mov	r3, r0
 80083bc:	74fb      	strb	r3, [r7, #19]
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80083be:	2103      	movs	r1, #3
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f7ff fde7 	bl	8007f94 <LoRa_gotoMode>
	// модуль ненадолго переходит в режим отправки, после чего возвращается в режим ожидания или приема.
	// Поэтому нет смысла пытаться прочитать из регистра режим отправки.
	return 1;
 80083c6:	2301      	movs	r3, #1
	// 		}
	// 	}
	// 	Delay(1);
	// }

}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <LoRa_startReceiving>:


void LoRa_startReceiving(LoRa* _LoRa){
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80083d8:	2105      	movs	r1, #5
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7ff fdda 	bl	8007f94 <LoRa_gotoMode>
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <LoRa_receive>:


uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80083e8:	          b590      	push	{r4, r7, lr}
 80083ea:	          b087      	sub	sp, #28
 80083ec:	          af00      	add	r7, sp, #0
 80083ee:	          60f8      	str	r0, [r7, #12]
 80083f0:	          60b9      	str	r1, [r7, #8]
 80083f2:	          4613      	mov	r3, r2
 80083f4:	          71fb      	strb	r3, [r7, #7]
	volatile uint8_t read;
	volatile uint8_t number_of_bytes;
	volatile uint8_t min = 0;
 80083f6:	          2300      	movs	r3, #0
 80083f8:	          74fb      	strb	r3, [r7, #19]
	// volatile uint8_t stat = 0;

	for(uint8_t i=0; i<length; i++)
 80083fa:	          2300      	movs	r3, #0
 80083fc:	          75fb      	strb	r3, [r7, #23]
 80083fe:	      /-- e007      	b.n	8008410 <LoRa_receive+0x28>
		data[i]=0;
 8008400:	   /--|-> 7dfb      	ldrb	r3, [r7, #23]
 8008402:	   |  |   68ba      	ldr	r2, [r7, #8]
 8008404:	   |  |   4413      	add	r3, r2
 8008406:	   |  |   2200      	movs	r2, #0
 8008408:	   |  |   701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<length; i++)
 800840a:	   |  |   7dfb      	ldrb	r3, [r7, #23]
 800840c:	   |  |   3301      	adds	r3, #1
 800840e:	   |  |   75fb      	strb	r3, [r7, #23]
 8008410:	   |  \-> 7dfa      	ldrb	r2, [r7, #23]
 8008412:	   |      79fb      	ldrb	r3, [r7, #7]
 8008414:	   |      429a      	cmp	r2, r3
 8008416:	   \----- d3f3      	bcc.n	8008400 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8008418:	          2101      	movs	r1, #1
 800841a:	          68f8      	ldr	r0, [r7, #12]
 800841c:	          f7ff fdba 	bl	8007f94 <LoRa_gotoMode>
	// stat = LoRa_readRegister(_LoRa, RegOpMode);
	read = LoRa_readRegister(_LoRa, RegIrqFlags);
 8008420:	          2112      	movs	r1, #18
 8008422:	          68f8      	ldr	r0, [r7, #12]
 8008424:	          f7ff fe13 	bl	800804e <LoRa_readRegister>
 8008428:	          4603      	mov	r3, r0
 800842a:	          757b      	strb	r3, [r7, #21]
	if((read & 0x40) != 0){
 800842c:	          7d7b      	ldrb	r3, [r7, #21]
 800842e:	          b2db      	uxtb	r3, r3
 8008430:	          f003 0340 	and.w	r3, r3, #64	; 0x40
 8008434:	          2b00      	cmp	r3, #0
 8008436:	/-------- d035      	beq.n	80084a4 <LoRa_receive+0xbc>
		LoRa_writeRegister(_LoRa, RegIrqFlags, 0xFF);
 8008438:	|         22ff      	movs	r2, #255	; 0xff
 800843a:	|         2112      	movs	r1, #18
 800843c:	|         68f8      	ldr	r0, [r7, #12]
 800843e:	|         f7ff fe3a 	bl	80080b6 <LoRa_writeRegister>
		number_of_bytes = LoRa_readRegister(_LoRa, RegRxNbBytes);
 8008442:	|         2113      	movs	r1, #19
 8008444:	|         68f8      	ldr	r0, [r7, #12]
 8008446:	|         f7ff fe02 	bl	800804e <LoRa_readRegister>
 800844a:	|         4603      	mov	r3, r0
 800844c:	|         753b      	strb	r3, [r7, #20]
		read = LoRa_readRegister(_LoRa, RegFiFoRxCurrentAddr);
 800844e:	|         2110      	movs	r1, #16
 8008450:	|         68f8      	ldr	r0, [r7, #12]
 8008452:	|         f7ff fdfc 	bl	800804e <LoRa_readRegister>
 8008456:	|         4603      	mov	r3, r0
 8008458:	|         757b      	strb	r3, [r7, #21]
		LoRa_writeRegister(_LoRa, RegFiFoAddPtr, read);
 800845a:	|         7d7b      	ldrb	r3, [r7, #21]
 800845c:	|         b2db      	uxtb	r3, r3
 800845e:	|         461a      	mov	r2, r3
 8008460:	|         210d      	movs	r1, #13
 8008462:	|         68f8      	ldr	r0, [r7, #12]
 8008464:	|         f7ff fe27 	bl	80080b6 <LoRa_writeRegister>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8008468:	|         7d3b      	ldrb	r3, [r7, #20]
 800846a:	|         b2db      	uxtb	r3, r3
 800846c:	|         79fa      	ldrb	r2, [r7, #7]
 800846e:	|         429a      	cmp	r2, r3
 8008470:	|  /----- d302      	bcc.n	8008478 <LoRa_receive+0x90>
 8008472:	|  |      7d3b      	ldrb	r3, [r7, #20]
 8008474:	|  |      b2db      	uxtb	r3, r3
 8008476:	|  |  /-- e000      	b.n	800847a <LoRa_receive+0x92>
 8008478:	|  \--|-> 79fb      	ldrb	r3, [r7, #7]
 800847a:	|     \-> 74fb      	strb	r3, [r7, #19]
		for(uint8_t i=0; i<min; i++)
 800847c:	|         2300      	movs	r3, #0
 800847e:	|         75bb      	strb	r3, [r7, #22]
 8008480:	|     /-- e00b      	b.n	800849a <LoRa_receive+0xb2>
			data[i] = LoRa_readRegister(_LoRa, RegFiFo);
 8008482:	|  /--|-> 7dbb      	ldrb	r3, [r7, #22]
 8008484:	|  |  |   68ba      	ldr	r2, [r7, #8]
 8008486:	|  |  |   18d4      	adds	r4, r2, r3
 8008488:	|  |  |   2100      	movs	r1, #0
 800848a:	|  |  |   68f8      	ldr	r0, [r7, #12]
 800848c:	|  |  |   f7ff fddf 	bl	800804e <LoRa_readRegister>
 8008490:	|  |  |   4603      	mov	r3, r0
 8008492:	|  |  |   7023      	strb	r3, [r4, #0]
		for(uint8_t i=0; i<min; i++)
 8008494:	|  |  |   7dbb      	ldrb	r3, [r7, #22]
 8008496:	|  |  |   3301      	adds	r3, #1
 8008498:	|  |  |   75bb      	strb	r3, [r7, #22]
 800849a:	|  |  \-> 7cfb      	ldrb	r3, [r7, #19]
 800849c:	|  |      b2db      	uxtb	r3, r3
 800849e:	|  |      7dba      	ldrb	r2, [r7, #22]
 80084a0:	|  |      429a      	cmp	r2, r3
 80084a2:	|  \----- d3ee      	bcc.n	8008482 <LoRa_receive+0x9a>
	}
	LoRa_writeRegister(_LoRa, RegIrqFlags, 0xFF);
 80084a4:	\-------> 22ff      	movs	r2, #255	; 0xff
 80084a6:	          2112      	movs	r1, #18
 80084a8:	          68f8      	ldr	r0, [r7, #12]
 80084aa:	          f7ff fe04 	bl	80080b6 <LoRa_writeRegister>
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80084ae:	          2105      	movs	r1, #5
 80084b0:	          68f8      	ldr	r0, [r7, #12]
 80084b2:	          f7ff fd6f 	bl	8007f94 <LoRa_gotoMode>
    return min;
 80084b6:	          7cfb      	ldrb	r3, [r7, #19]
 80084b8:	          b2db      	uxtb	r3, r3
}
 80084ba:	          4618      	mov	r0, r3
 80084bc:	          371c      	adds	r7, #28
 80084be:	          46bd      	mov	sp, r7
 80084c0:	          bd90      	pop	{r4, r7, pc}

080084c2 <LoRa_getRSSI>:

int LoRa_getRSSI(LoRa* _LoRa){
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
	volatile uint8_t read;
	read = LoRa_readRegister(_LoRa, RegPktRssiValue);
 80084ca:	211a      	movs	r1, #26
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7ff fdbe 	bl	800804e <LoRa_readRegister>
 80084d2:	4603      	mov	r3, r0
 80084d4:	73fb      	strb	r3, [r7, #15]
	return -164 + read;
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	3ba4      	subs	r3, #164	; 0xa4
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <LoRa_init>:

uint16_t LoRa_init(LoRa* _LoRa){
 80084e4:	                b580      	push	{r7, lr}
 80084e6:	                b084      	sub	sp, #16
 80084e8:	                af00      	add	r7, sp, #0
 80084ea:	                6078      	str	r0, [r7, #4]
	volatile uint8_t    data;
	volatile uint8_t    read;
	for(uint8_t i = 0; i < 4; i++){
 80084ec:	                2300      	movs	r3, #0
 80084ee:	                73fb      	strb	r3, [r7, #15]
 80084f0:	   /----------- e022      	b.n	8008538 <LoRa_init+0x54>
		read = LoRa_readRegister(_LoRa, RegOpMode);
 80084f2:	/--|----------> 2101      	movs	r1, #1
 80084f4:	|  |            6878      	ldr	r0, [r7, #4]
 80084f6:	|  |            f7ff fdaa 	bl	800804e <LoRa_readRegister>
 80084fa:	|  |            4603      	mov	r3, r0
 80084fc:	|  |            737b      	strb	r3, [r7, #13]
		if((read & 0x07) != 0x00){
 80084fe:	|  |            7b7b      	ldrb	r3, [r7, #13]
 8008500:	|  |            b2db      	uxtb	r3, r3
 8008502:	|  |            f003 0307 	and.w	r3, r3, #7
 8008506:	|  |            2b00      	cmp	r3, #0
 8008508:	|  |  /-------- d01a      	beq.n	8008540 <LoRa_init+0x5c>
			LoRa_reset(_LoRa);
 800850a:	|  |  |         6878      	ldr	r0, [r7, #4]
 800850c:	|  |  |         f7ff fd28 	bl	8007f60 <LoRa_reset>
			Delay(50);
 8008510:	|  |  |         2032      	movs	r0, #50	; 0x32
 8008512:	|  |  |         f7fd fb5f 	bl	8005bd4 <Delay>
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8008516:	|  |  |         2100      	movs	r1, #0
 8008518:	|  |  |         6878      	ldr	r0, [r7, #4]
 800851a:	|  |  |         f7ff fd3b 	bl	8007f94 <LoRa_gotoMode>
			Delay(50);
 800851e:	|  |  |         2032      	movs	r0, #50	; 0x32
 8008520:	|  |  |         f7fd fb58 	bl	8005bd4 <Delay>
		}
		else{
			break;
		}
		if(i == 3){
 8008524:	|  |  |         7bfb      	ldrb	r3, [r7, #15]
 8008526:	|  |  |         2b03      	cmp	r3, #3
 8008528:	|  |  |  /----- d103      	bne.n	8008532 <LoRa_init+0x4e>
			while(1){
				Delay(1);
 800852a:	|  |  |  |  /-> 2001      	movs	r0, #1
 800852c:	|  |  |  |  |   f7fd fb52 	bl	8005bd4 <Delay>
 8008530:	|  |  |  |  \-- e7fb      	b.n	800852a <LoRa_init+0x46>
	for(uint8_t i = 0; i < 4; i++){
 8008532:	|  |  |  \----> 7bfb      	ldrb	r3, [r7, #15]
 8008534:	|  |  |         3301      	adds	r3, #1
 8008536:	|  |  |         73fb      	strb	r3, [r7, #15]
 8008538:	|  \--|-------> 7bfb      	ldrb	r3, [r7, #15]
 800853a:	|     |         2b03      	cmp	r3, #3
 800853c:	\-----|-------- d9d9      	bls.n	80084f2 <LoRa_init+0xe>
 800853e:	      |     /-- e000      	b.n	8008542 <LoRa_init+0x5e>
			break;
 8008540:	      \-----|-> bf00      	nop
			}
		}
	}
	Delay(10);
 8008542:	            \-> 200a      	movs	r0, #10
 8008544:	                f7fd fb46 	bl	8005bd4 <Delay>

// turn on lora mode:
	read = LoRa_readRegister(_LoRa, RegOpMode);
 8008548:	                2101      	movs	r1, #1
 800854a:	                6878      	ldr	r0, [r7, #4]
 800854c:	                f7ff fd7f 	bl	800804e <LoRa_readRegister>
 8008550:	                4603      	mov	r3, r0
 8008552:	                737b      	strb	r3, [r7, #13]
	LoRa_writeRegister(_LoRa, RegOpMode, 0x88);
 8008554:	                2288      	movs	r2, #136	; 0x88
 8008556:	                2101      	movs	r1, #1
 8008558:	                6878      	ldr	r0, [r7, #4]
 800855a:	                f7ff fdac 	bl	80080b6 <LoRa_writeRegister>
	Delay(50);
 800855e:	                2032      	movs	r0, #50	; 0x32
 8008560:	                f7fd fb38 	bl	8005bd4 <Delay>
	read = LoRa_readRegister(_LoRa, RegOpMode);
 8008564:	                2101      	movs	r1, #1
 8008566:	                6878      	ldr	r0, [r7, #4]
 8008568:	                f7ff fd71 	bl	800804e <LoRa_readRegister>
 800856c:	                4603      	mov	r3, r0
 800856e:	                737b      	strb	r3, [r7, #13]
	if(read != 0x88){
 8008570:	                7b7b      	ldrb	r3, [r7, #13]
 8008572:	                b2db      	uxtb	r3, r3
 8008574:	                2b88      	cmp	r3, #136	; 0x88
 8008576:	         /----- d012      	beq.n	800859e <LoRa_init+0xba>
		LoRa_writeRegister(_LoRa, RegOpMode, 0x88);
 8008578:	         |      2288      	movs	r2, #136	; 0x88
 800857a:	         |      2101      	movs	r1, #1
 800857c:	         |      6878      	ldr	r0, [r7, #4]
 800857e:	         |      f7ff fd9a 	bl	80080b6 <LoRa_writeRegister>
		read = LoRa_readRegister(_LoRa, RegOpMode);
 8008582:	         |      2101      	movs	r1, #1
 8008584:	         |      6878      	ldr	r0, [r7, #4]
 8008586:	         |      f7ff fd62 	bl	800804e <LoRa_readRegister>
 800858a:	         |      4603      	mov	r3, r0
 800858c:	         |      737b      	strb	r3, [r7, #13]
		if(read != 0x88){
 800858e:	         |      7b7b      	ldrb	r3, [r7, #13]
 8008590:	         |      b2db      	uxtb	r3, r3
 8008592:	         |      2b88      	cmp	r3, #136	; 0x88
 8008594:	         +----- d003      	beq.n	800859e <LoRa_init+0xba>
			while(1){
				Delay(1);
 8008596:	         |  /-> 2001      	movs	r0, #1
 8008598:	         |  |   f7fd fb1c 	bl	8005bd4 <Delay>
 800859c:	         |  \-- e7fb      	b.n	8008596 <LoRa_init+0xb2>
			}
		}
	}
// set frequency:
	LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800859e:	         \----> 687b      	ldr	r3, [r7, #4]
 80085a0:	                68db      	ldr	r3, [r3, #12]
 80085a2:	                4619      	mov	r1, r3
 80085a4:	                6878      	ldr	r0, [r7, #4]
 80085a6:	                f7ff fdfd 	bl	80081a4 <LoRa_setFrequency>

// set output power gain:
	LoRa_setPower(_LoRa, _LoRa->power);
 80085aa:	                687b      	ldr	r3, [r7, #4]
 80085ac:	                7d9b      	ldrb	r3, [r3, #22]
 80085ae:	                4619      	mov	r1, r3
 80085b0:	                6878      	ldr	r0, [r7, #4]
 80085b2:	                f7ff fe5c 	bl	800826e <LoRa_setPower>

// set over current protection:
	LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80085b6:	                687b      	ldr	r3, [r7, #4]
 80085b8:	                7ddb      	ldrb	r3, [r3, #23]
 80085ba:	                4619      	mov	r1, r3
 80085bc:	                6878      	ldr	r0, [r7, #4]
 80085be:	                f7ff fe69 	bl	8008294 <LoRa_setOCP>

// set LNA gain:
	LoRa_writeRegister(_LoRa, RegLna, 0x23);
 80085c2:	                2223      	movs	r2, #35	; 0x23
 80085c4:	                210c      	movs	r1, #12
 80085c6:	                6878      	ldr	r0, [r7, #4]
 80085c8:	                f7ff fd75 	bl	80080b6 <LoRa_writeRegister>

// set spreading factor, CRC on, and Timeout Msb:
	LoRa_setTOMsb_setCRCon(_LoRa);
 80085cc:	                6878      	ldr	r0, [r7, #4]
 80085ce:	                f7ff fe9f 	bl	8008310 <LoRa_setTOMsb_setCRCon>
	LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80085d2:	                687b      	ldr	r3, [r7, #4]
 80085d4:	                7c1b      	ldrb	r3, [r3, #16]
 80085d6:	                4619      	mov	r1, r3
 80085d8:	                6878      	ldr	r0, [r7, #4]
 80085da:	                f7ff fe19 	bl	8008210 <LoRa_setSpreadingFactor>

// set Timeout Lsb:
	LoRa_writeRegister(_LoRa, RegSymbTimeoutL, 0xFF);
 80085de:	                22ff      	movs	r2, #255	; 0xff
 80085e0:	                211f      	movs	r1, #31
 80085e2:	                6878      	ldr	r0, [r7, #4]
 80085e4:	                f7ff fd67 	bl	80080b6 <LoRa_writeRegister>

// set bandwidth, coding rate and expilicit mode:
	// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
	//       bits represent --> |   bandwidth   |     CR    |I/E|
	data = 0;
 80085e8:	                2300      	movs	r3, #0
 80085ea:	                73bb      	strb	r3, [r7, #14]
	data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80085ec:	                687b      	ldr	r3, [r7, #4]
 80085ee:	                7c5b      	ldrb	r3, [r3, #17]
 80085f0:	                011b      	lsls	r3, r3, #4
 80085f2:	                b2da      	uxtb	r2, r3
 80085f4:	                687b      	ldr	r3, [r7, #4]
 80085f6:	                7c9b      	ldrb	r3, [r3, #18]
 80085f8:	                005b      	lsls	r3, r3, #1
 80085fa:	                b2db      	uxtb	r3, r3
 80085fc:	                4413      	add	r3, r2
 80085fe:	                b2db      	uxtb	r3, r3
 8008600:	                73bb      	strb	r3, [r7, #14]
	LoRa_writeRegister(_LoRa, RegModemConfig1, data);
 8008602:	                7bbb      	ldrb	r3, [r7, #14]
 8008604:	                b2db      	uxtb	r3, r3
 8008606:	                461a      	mov	r2, r3
 8008608:	                211d      	movs	r1, #29
 800860a:	                6878      	ldr	r0, [r7, #4]
 800860c:	                f7ff fd53 	bl	80080b6 <LoRa_writeRegister>

// set preamble:
	LoRa_writeRegister(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8008610:	                687b      	ldr	r3, [r7, #4]
 8008612:	                8a9b      	ldrh	r3, [r3, #20]
 8008614:	                0a1b      	lsrs	r3, r3, #8
 8008616:	                b29b      	uxth	r3, r3
 8008618:	                b2db      	uxtb	r3, r3
 800861a:	                461a      	mov	r2, r3
 800861c:	                2120      	movs	r1, #32
 800861e:	                6878      	ldr	r0, [r7, #4]
 8008620:	                f7ff fd49 	bl	80080b6 <LoRa_writeRegister>
	LoRa_writeRegister(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8008624:	                687b      	ldr	r3, [r7, #4]
 8008626:	                8a9b      	ldrh	r3, [r3, #20]
 8008628:	                b2db      	uxtb	r3, r3
 800862a:	                461a      	mov	r2, r3
 800862c:	                2121      	movs	r1, #33	; 0x21
 800862e:	                6878      	ldr	r0, [r7, #4]
 8008630:	                f7ff fd41 	bl	80080b6 <LoRa_writeRegister>

// DIO mapping:   --> DIO: RxDone
	read = LoRa_readRegister(_LoRa, RegDioMapping1);
 8008634:	                2140      	movs	r1, #64	; 0x40
 8008636:	                6878      	ldr	r0, [r7, #4]
 8008638:	                f7ff fd09 	bl	800804e <LoRa_readRegister>
 800863c:	                4603      	mov	r3, r0
 800863e:	                737b      	strb	r3, [r7, #13]
	data = read | 0x3F;
 8008640:	                7b7b      	ldrb	r3, [r7, #13]
 8008642:	                b2db      	uxtb	r3, r3
 8008644:	                f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8008648:	                b2db      	uxtb	r3, r3
 800864a:	                73bb      	strb	r3, [r7, #14]
	LoRa_writeRegister(_LoRa, RegDioMapping1, data);
 800864c:	                7bbb      	ldrb	r3, [r7, #14]
 800864e:	                b2db      	uxtb	r3, r3
 8008650:	                461a      	mov	r2, r3
 8008652:	                2140      	movs	r1, #64	; 0x40
 8008654:	                6878      	ldr	r0, [r7, #4]
 8008656:	                f7ff fd2e 	bl	80080b6 <LoRa_writeRegister>

	LoRa_writeRegister(_LoRa, RegSyncWord, 0x12);
 800865a:	                2212      	movs	r2, #18
 800865c:	                2139      	movs	r1, #57	; 0x39
 800865e:	                6878      	ldr	r0, [r7, #4]
 8008660:	                f7ff fd29 	bl	80080b6 <LoRa_writeRegister>

// goto standby mode:
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8008664:	                2101      	movs	r1, #1
 8008666:	                6878      	ldr	r0, [r7, #4]
 8008668:	                f7ff fc94 	bl	8007f94 <LoRa_gotoMode>
	_LoRa->current_mode = STNBY_MODE;
 800866c:	                687b      	ldr	r3, [r7, #4]
 800866e:	                2201      	movs	r2, #1
 8008670:	                609a      	str	r2, [r3, #8]
	Delay(10);
 8008672:	                200a      	movs	r0, #10
 8008674:	                f7fd faae 	bl	8005bd4 <Delay>

	read = LoRa_readRegister(_LoRa, RegVersion);
 8008678:	                2142      	movs	r1, #66	; 0x42
 800867a:	                6878      	ldr	r0, [r7, #4]
 800867c:	                f7ff fce7 	bl	800804e <LoRa_readRegister>
 8008680:	                4603      	mov	r3, r0
 8008682:	                737b      	strb	r3, [r7, #13]
	if(read != 0x12){
 8008684:	                7b7b      	ldrb	r3, [r7, #13]
 8008686:	                b2db      	uxtb	r3, r3
 8008688:	                2b12      	cmp	r3, #18
 800868a:	         /----- d002      	beq.n	8008692 <LoRa_init+0x1ae>
		return LORA_NOT_FOUND;
 800868c:	         |      f44f 73ca 	mov.w	r3, #404	; 0x194
 8008690:	         |  /-- e000      	b.n	8008694 <LoRa_init+0x1b0>
	}
	else{
		return LORA_OK;
 8008692:	         \--|-> 23c8      	movs	r3, #200	; 0xc8
	}
 8008694:	            \-> 4618      	mov	r0, r3
 8008696:	                3710      	adds	r7, #16
 8008698:	                46bd      	mov	sp, r7
 800869a:	                bd80      	pop	{r7, pc}

0800869c <TMP1075_read_id>:
/**	@brief	Reading device id.
	@param *I2Cx - pointer to I2C controller, where x is a number (e.x., I2C1, I2C2 etc.).
	@param tmp1075_addr - 7-bit device address.
	@retval	0-OK, -1-Error
*/
ErrorStatus TMP1075_read_id(I2C_TypeDef *I2Cx, uint8_t tmp1075_addr, uint16_t *read_data){
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af02      	add	r7, sp, #8
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	460b      	mov	r3, r1
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	72fb      	strb	r3, [r7, #11]

	return I2C_Read_word_u16_St_ReSt(I2Cx, tmp1075_addr, I2C_SIZE_REG_ADDR_U8, (uint32_t)0x0F, 1, read_data);
 80086aa:	7af9      	ldrb	r1, [r7, #11]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	9301      	str	r3, [sp, #4]
 80086b0:	2301      	movs	r3, #1
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	230f      	movs	r3, #15
 80086b6:	2201      	movs	r2, #1
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f7f9 fefb 	bl	80024b4 <I2C_Read_word_u16_St_ReSt>
 80086be:	4603      	mov	r3, r0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <TMP1075_read_raw_temperature>:
	@param *I2Cx - pointer to I2C controller, where x is a number (e.x., I2C1, I2C2 etc.).
	@param tmp1075_addr - 7-bit device address.
	@param read_data - pointer to get data in raw format.
	@retval	0-OK, -1-Error
*/
ErrorStatus TMP1075_read_raw_temperature(I2C_TypeDef *I2Cx, uint8_t tmp1075_addr, uint16_t *read_data){
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af02      	add	r7, sp, #8
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	460b      	mov	r3, r1
 80086d2:	607a      	str	r2, [r7, #4]
 80086d4:	72fb      	strb	r3, [r7, #11]

	return I2C_Read_word_u16_St_ReSt(I2Cx, tmp1075_addr, I2C_SIZE_REG_ADDR_U8, (uint32_t)0x00, 1, read_data);
 80086d6:	7af9      	ldrb	r1, [r7, #11]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	9301      	str	r3, [sp, #4]
 80086dc:	2301      	movs	r3, #1
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	2300      	movs	r3, #0
 80086e2:	2201      	movs	r2, #1
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f7f9 fee5 	bl	80024b4 <I2C_Read_word_u16_St_ReSt>
 80086ea:	4603      	mov	r3, r0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <TMP1075_read_float_temperature>:
	@param *I2Cx - pointer to I2C controller, where x is a number (e.x., I2C1, I2C2 etc.).
	@param tmp1075_addr - 7-bit device address.
	@param temp_value - pointer to get data in float format.
	@retval	0-OK, -1-Error
*/
ErrorStatus TMP1075_read_float_temperature(I2C_TypeDef *I2Cx, uint8_t tmp1075_addr, float *temp_value){
 80086f4:	       b580      	push	{r7, lr}
 80086f6:	       b088      	sub	sp, #32
 80086f8:	       af02      	add	r7, sp, #8
 80086fa:	       60f8      	str	r0, [r7, #12]
 80086fc:	       460b      	mov	r3, r1
 80086fe:	       607a      	str	r2, [r7, #4]
 8008700:	       72fb      	strb	r3, [r7, #11]

	uint16_t ADC_CODE;

	if( I2C_Read_word_u16_St_ReSt(I2Cx, tmp1075_addr, I2C_SIZE_REG_ADDR_U8, (uint32_t)0x00, 1, &ADC_CODE) != SUCCESS){
 8008702:	       7af9      	ldrb	r1, [r7, #11]
 8008704:	       f107 0316 	add.w	r3, r7, #22
 8008708:	       9301      	str	r3, [sp, #4]
 800870a:	       2301      	movs	r3, #1
 800870c:	       9300      	str	r3, [sp, #0]
 800870e:	       2300      	movs	r3, #0
 8008710:	       2201      	movs	r2, #1
 8008712:	       68f8      	ldr	r0, [r7, #12]
 8008714:	       f7f9 fece 	bl	80024b4 <I2C_Read_word_u16_St_ReSt>
 8008718:	       4603      	mov	r3, r0
 800871a:	       2b00      	cmp	r3, #0
 800871c:	   /-- d001      	beq.n	8008722 <TMP1075_read_float_temperature+0x2e>
		return -1;
 800871e:	   |   23ff      	movs	r3, #255	; 0xff
 8008720:	/--|-- e009      	b.n	8008736 <TMP1075_read_float_temperature+0x42>
	}

	*temp_value = TMP1075_raw_to_float(ADC_CODE);
 8008722:	|  \-> 8afb      	ldrh	r3, [r7, #22]
 8008724:	|      4618      	mov	r0, r3
 8008726:	|      f000 f82e 	bl	8008786 <TMP1075_raw_to_float>
 800872a:	|      eef0 7a40 	vmov.f32	s15, s0
 800872e:	|      687b      	ldr	r3, [r7, #4]
 8008730:	|      edc3 7a00 	vstr	s15, [r3]

	return SUCCESS;
 8008734:	|      2300      	movs	r3, #0
}
 8008736:	\----> 4618      	mov	r0, r3
 8008738:	       3718      	adds	r7, #24
 800873a:	       46bd      	mov	sp, r7
 800873c:	       bd80      	pop	{r7, pc}

0800873e <TMP1075_read_int8_temperature>:
	@param *I2Cx - pointer to I2C controller, where x is a number (e.x., I2C1, I2C2 etc.).
	@param tmp1075_addr - 7-bit device address.
	@param temp_value - pointer to get data in int8_t format.
	@retval	0-OK, -1-Error
*/
ErrorStatus TMP1075_read_int8_temperature(I2C_TypeDef *I2Cx, uint8_t tmp1075_addr, int8_t *temp_value){
 800873e:	       b580      	push	{r7, lr}
 8008740:	       b088      	sub	sp, #32
 8008742:	       af02      	add	r7, sp, #8
 8008744:	       60f8      	str	r0, [r7, #12]
 8008746:	       460b      	mov	r3, r1
 8008748:	       607a      	str	r2, [r7, #4]
 800874a:	       72fb      	strb	r3, [r7, #11]

	uint16_t ADC_CODE;

	if( I2C_Read_word_u16_St_ReSt(I2Cx, tmp1075_addr, I2C_SIZE_REG_ADDR_U8, (uint32_t)0x00, 1, &ADC_CODE) != SUCCESS){
 800874c:	       7af9      	ldrb	r1, [r7, #11]
 800874e:	       f107 0316 	add.w	r3, r7, #22
 8008752:	       9301      	str	r3, [sp, #4]
 8008754:	       2301      	movs	r3, #1
 8008756:	       9300      	str	r3, [sp, #0]
 8008758:	       2300      	movs	r3, #0
 800875a:	       2201      	movs	r2, #1
 800875c:	       68f8      	ldr	r0, [r7, #12]
 800875e:	       f7f9 fea9 	bl	80024b4 <I2C_Read_word_u16_St_ReSt>
 8008762:	       4603      	mov	r3, r0
 8008764:	       2b00      	cmp	r3, #0
 8008766:	   /-- d001      	beq.n	800876c <TMP1075_read_int8_temperature+0x2e>
		return -1;
 8008768:	   |   23ff      	movs	r3, #255	; 0xff
 800876a:	/--|-- e008      	b.n	800877e <TMP1075_read_int8_temperature+0x40>
	}

	*temp_value = TMP1075_raw_to_int(ADC_CODE);
 800876c:	|  \-> 8afb      	ldrh	r3, [r7, #22]
 800876e:	|      4618      	mov	r0, r3
 8008770:	|      f000 f832 	bl	80087d8 <TMP1075_raw_to_int>
 8008774:	|      4603      	mov	r3, r0
 8008776:	|      461a      	mov	r2, r3
 8008778:	|      687b      	ldr	r3, [r7, #4]
 800877a:	|      701a      	strb	r2, [r3, #0]

	return SUCCESS;
 800877c:	|      2300      	movs	r3, #0
}
 800877e:	\----> 4618      	mov	r0, r3
 8008780:	       3718      	adds	r7, #24
 8008782:	       46bd      	mov	sp, r7
 8008784:	       bd80      	pop	{r7, pc}

08008786 <TMP1075_raw_to_float>:

/**	@brief	Converter from raw data (temperature register) to float.
	@param ADC_CODE - raw data from tmp1075 sensor.
	@retval	temperature value in float format
*/
float TMP1075_raw_to_float(uint16_t ADC_CODE){
 8008786:	b480      	push	{r7}
 8008788:	b085      	sub	sp, #20
 800878a:	af00      	add	r7, sp, #0
 800878c:	4603      	mov	r3, r0
 800878e:	80fb      	strh	r3, [r7, #6]

	int16_t ADC_data_int = 0;
 8008790:	2300      	movs	r3, #0
 8008792:	81fb      	strh	r3, [r7, #14]
	float ret_val = 0;
 8008794:	f04f 0300 	mov.w	r3, #0
 8008798:	60bb      	str	r3, [r7, #8]

	ADC_data_int = (int16_t)ADC_CODE;
 800879a:	88fb      	ldrh	r3, [r7, #6]
 800879c:	81fb      	strh	r3, [r7, #14]

	ADC_data_int = ADC_data_int>>4;
 800879e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80087a2:	111b      	asrs	r3, r3, #4
 80087a4:	81fb      	strh	r3, [r7, #14]

	ret_val = (float)( ( (float)ADC_data_int ) * 0.0625 );
 80087a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087b2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80087d4 <TMP1075_raw_to_float+0x4e>
 80087b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087ba:	edc7 7a02 	vstr	s15, [r7, #8]

	return ret_val;
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	ee07 3a90 	vmov	s15, r3
}
 80087c4:	eeb0 0a67 	vmov.f32	s0, s15
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	0000      	movs	r0, r0
 80087d6:	3d80      	subs	r5, #128	; 0x80

080087d8 <TMP1075_raw_to_int>:

/** @brief  Converter from raw data (temperature register)  to int8_t.
	@param ADC_CODE - raw data from tmp1075 sensor.
	@retval temperature value in int8_t format
*/
int8_t TMP1075_raw_to_int(uint16_t ADC_CODE){
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	80fb      	strh	r3, [r7, #6]

	float temperature = 0;
 80087e2:	f04f 0300 	mov.w	r3, #0
 80087e6:	60fb      	str	r3, [r7, #12]

	temperature = TMP1075_raw_to_float(ADC_CODE);
 80087e8:	88fb      	ldrh	r3, [r7, #6]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7ff ffcb 	bl	8008786 <TMP1075_raw_to_float>
 80087f0:	ed87 0a03 	vstr	s0, [r7, #12]

	return ((int8_t)temperature);
 80087f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80087f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087fc:	edc7 7a00 	vstr	s15, [r7]
 8008800:	783b      	ldrb	r3, [r7, #0]
 8008802:	b25b      	sxtb	r3, r3
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <TMP1075_float_to_binary>:

/** @brief  Converter from float to raw data temperature register..
	@param 	val_temp - temperature value in float format.
	@retval raw data in tmp1075 sensor format
*/
uint16_t TMP1075_float_to_binary(float val_temp){
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	ed87 0a01 	vstr	s0, [r7, #4]

	int16_t ADC_data_int = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	81fb      	strh	r3, [r7, #14]

	ADC_data_int = (int16_t)(val_temp/0.0625);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fd4c 	bl	80092b8 <__aeabi_f2d>
 8008820:	f04f 0200 	mov.w	r2, #0
 8008824:	4b09      	ldr	r3, [pc, #36]	; (800884c <TMP1075_float_to_binary+0x40>)
 8008826:	f000 fec9 	bl	80095bc <__aeabi_ddiv>
 800882a:	4602      	mov	r2, r0
 800882c:	460b      	mov	r3, r1
 800882e:	4610      	mov	r0, r2
 8008830:	4619      	mov	r1, r3
 8008832:	f000 ffab 	bl	800978c <__aeabi_d2iz>
 8008836:	4603      	mov	r3, r0
 8008838:	81fb      	strh	r3, [r7, #14]

	ADC_data_int = (int16_t)(ADC_data_int<<4);
 800883a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800883e:	011b      	lsls	r3, r3, #4
 8008840:	81fb      	strh	r3, [r7, #14]

	return ((uint16_t)ADC_data_int);
 8008842:	89fb      	ldrh	r3, [r7, #14]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	0000      	movs	r0, r0
 800884e:	3fb0      	subs	r7, #176	; 0xb0

08008850 <TMP1075_read_config>:
/** @brief	Reading configuration register tmp1075 sensor.
	@param *I2Cx - pointer to I2C controller, where x is a number (e.x., I2C1, I2C2 etc.).
	@param  tmp1075_addr - 7-bit device address.
	@retval	0-OK, -1-Error
*/
ErrorStatus TMP1075_read_config(I2C_TypeDef *I2Cx, uint8_t tmp1075_addr, uint16_t *read_data){
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af02      	add	r7, sp, #8
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	460b      	mov	r3, r1
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	72fb      	strb	r3, [r7, #11]

	return I2C_Read_word_u16_St_ReSt(I2Cx, tmp1075_addr, I2C_SIZE_REG_ADDR_U8, (uint32_t)0x01, 1, read_data);
 800885e:	7af9      	ldrb	r1, [r7, #11]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	9301      	str	r3, [sp, #4]
 8008864:	2301      	movs	r3, #1
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	2301      	movs	r3, #1
 800886a:	2201      	movs	r2, #1
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f7f9 fe21 	bl	80024b4 <I2C_Read_word_u16_St_ReSt>
 8008872:	4603      	mov	r3, r0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <TMP1075_write_config>:
	@param *I2Cx - pointer to I2C controller, where x is a number (e.x., I2C1, I2C2 etc.).
	@param  tmp1075_addr - 7-bit device address.
	@param  config - 8 bit of config register;
	@retval	0-OK, -1-Error
*/
ErrorStatus TMP1075_write_config(I2C_TypeDef *I2Cx, uint8_t tmp1075_addr, uint8_t config){
 800887c:	       b580      	push	{r7, lr}
 800887e:	       b084      	sub	sp, #16
 8008880:	       af02      	add	r7, sp, #8
 8008882:	       6078      	str	r0, [r7, #4]
 8008884:	       460b      	mov	r3, r1
 8008886:	       70fb      	strb	r3, [r7, #3]
 8008888:	       4613      	mov	r3, r2
 800888a:	       70bb      	strb	r3, [r7, #2]

	if (I2C_Write_word_u16_St(I2Cx, tmp1075_addr, I2C_SIZE_REG_ADDR_U8, (uint32_t)0x01, config ) != SUCCESS ){
 800888c:	       78bb      	ldrb	r3, [r7, #2]
 800888e:	       b29b      	uxth	r3, r3
 8008890:	       78f9      	ldrb	r1, [r7, #3]
 8008892:	       9300      	str	r3, [sp, #0]
 8008894:	       2301      	movs	r3, #1
 8008896:	       2201      	movs	r2, #1
 8008898:	       6878      	ldr	r0, [r7, #4]
 800889a:	       f7fa f811 	bl	80028c0 <I2C_Write_word_u16_St>
 800889e:	       4603      	mov	r3, r0
 80088a0:	       2b00      	cmp	r3, #0
 80088a2:	/----- d001      	beq.n	80088a8 <TMP1075_write_config+0x2c>
		return -1;
 80088a4:	|      23ff      	movs	r3, #255	; 0xff
 80088a6:	|  /-- e000      	b.n	80088aa <TMP1075_write_config+0x2e>
	}
	else{
		return SUCCESS;
 80088a8:	\--|-> 2300      	movs	r3, #0
	}
}
 80088aa:	   \-> 4618      	mov	r0, r3
 80088ac:	       3708      	adds	r7, #8
 80088ae:	       46bd      	mov	sp, r7
 80088b0:	       bd80      	pop	{r7, pc}

080088b2 <TMP1075_set_mode>:
	@param *I2Cx - pointer to I2C controller, where x is a number (e.x., I2C1, I2C2 etc.).
	@param tmp1075_addr - 7-bit device address.
	@param mode - TMP1075_SHUTDOWN_MODE or TMP1075_CONTINUOS_CONV mode of TMP1075 sensor.
	@retval 0-OK, -1-Error
*/
ErrorStatus TMP1075_set_mode(I2C_TypeDef *I2Cx, uint8_t tmp1075_addr, uint8_t mode){
 80088b2:	       b580      	push	{r7, lr}
 80088b4:	       b086      	sub	sp, #24
 80088b6:	       af02      	add	r7, sp, #8
 80088b8:	       6078      	str	r0, [r7, #4]
 80088ba:	       460b      	mov	r3, r1
 80088bc:	       70fb      	strb	r3, [r7, #3]
 80088be:	       4613      	mov	r3, r2
 80088c0:	       70bb      	strb	r3, [r7, #2]

	uint16_t last_state;
	uint16_t current_state;

	if( TMP1075_read_config(I2Cx, tmp1075_addr, &last_state) != SUCCESS ){
 80088c2:	       f107 020e 	add.w	r2, r7, #14
 80088c6:	       78fb      	ldrb	r3, [r7, #3]
 80088c8:	       4619      	mov	r1, r3
 80088ca:	       6878      	ldr	r0, [r7, #4]
 80088cc:	       f7ff ffc0 	bl	8008850 <TMP1075_read_config>
 80088d0:	       4603      	mov	r3, r0
 80088d2:	       2b00      	cmp	r3, #0
 80088d4:	   /-- d001      	beq.n	80088da <TMP1075_set_mode+0x28>
		return -1;
 80088d6:	   |   23ff      	movs	r3, #255	; 0xff
 80088d8:	/--|-- e02d      	b.n	8008936 <TMP1075_set_mode+0x84>
	}

	if( I2C_Write_word_u16_St(I2Cx, tmp1075_addr, I2C_SIZE_REG_ADDR_U8, (uint32_t)0x01, (uint16_t)((last_state & (~(1 << 8))) | (mode << 8)) ) != SUCCESS ){
 80088da:	|  \-> 89fb      	ldrh	r3, [r7, #14]
 80088dc:	|      b21b      	sxth	r3, r3
 80088de:	|      f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088e2:	|      b21a      	sxth	r2, r3
 80088e4:	|      78bb      	ldrb	r3, [r7, #2]
 80088e6:	|      021b      	lsls	r3, r3, #8
 80088e8:	|      b21b      	sxth	r3, r3
 80088ea:	|      4313      	orrs	r3, r2
 80088ec:	|      b21b      	sxth	r3, r3
 80088ee:	|      b29b      	uxth	r3, r3
 80088f0:	|      78f9      	ldrb	r1, [r7, #3]
 80088f2:	|      9300      	str	r3, [sp, #0]
 80088f4:	|      2301      	movs	r3, #1
 80088f6:	|      2201      	movs	r2, #1
 80088f8:	|      6878      	ldr	r0, [r7, #4]
 80088fa:	|      f7f9 ffe1 	bl	80028c0 <I2C_Write_word_u16_St>
 80088fe:	|      4603      	mov	r3, r0
 8008900:	|      2b00      	cmp	r3, #0
 8008902:	|  /-- d001      	beq.n	8008908 <TMP1075_set_mode+0x56>
		return -1;
 8008904:	|  |   23ff      	movs	r3, #255	; 0xff
 8008906:	+--|-- e016      	b.n	8008936 <TMP1075_set_mode+0x84>
	}

	if( TMP1075_read_config(I2Cx, tmp1075_addr, &current_state) != SUCCESS ){
 8008908:	|  \-> f107 020c 	add.w	r2, r7, #12
 800890c:	|      78fb      	ldrb	r3, [r7, #3]
 800890e:	|      4619      	mov	r1, r3
 8008910:	|      6878      	ldr	r0, [r7, #4]
 8008912:	|      f7ff ff9d 	bl	8008850 <TMP1075_read_config>
 8008916:	|      4603      	mov	r3, r0
 8008918:	|      2b00      	cmp	r3, #0
 800891a:	|  /-- d001      	beq.n	8008920 <TMP1075_set_mode+0x6e>
		return -1;
 800891c:	|  |   23ff      	movs	r3, #255	; 0xff
 800891e:	+--|-- e00a      	b.n	8008936 <TMP1075_set_mode+0x84>
	}

	if((current_state & (~(1 << 8)))  | (mode << 8)){
 8008920:	|  \-> 89bb      	ldrh	r3, [r7, #12]
 8008922:	|      f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008926:	|      78bb      	ldrb	r3, [r7, #2]
 8008928:	|      021b      	lsls	r3, r3, #8
 800892a:	|      4313      	orrs	r3, r2
 800892c:	|      2b00      	cmp	r3, #0
 800892e:	|  /-- d001      	beq.n	8008934 <TMP1075_set_mode+0x82>
		return SUCCESS;
 8008930:	|  |   2300      	movs	r3, #0
 8008932:	+--|-- e000      	b.n	8008936 <TMP1075_set_mode+0x84>

	}else{
		return -1;
 8008934:	|  \-> 23ff      	movs	r3, #255	; 0xff
	}
}
 8008936:	\----> 4618      	mov	r0, r3
 8008938:	       3710      	adds	r7, #16
 800893a:	       46bd      	mov	sp, r7
 800893c:	       bd80      	pop	{r7, pc}

0800893e <TMP1075_set_time_conversion>:
				 TMP1075_CR_FAST             // 55 ms
				 TMP1075_CR_MEDIUM           // 110 ms
				 TMP1075_CR_SLOW             // 220 ms
	@retval 0-OK, -1-Error
*/
ErrorStatus TMP1075_set_time_conversion(I2C_TypeDef *I2Cx, uint8_t tmp1075_addr, uint8_t time){
 800893e:	       b580      	push	{r7, lr}
 8008940:	       b086      	sub	sp, #24
 8008942:	       af02      	add	r7, sp, #8
 8008944:	       6078      	str	r0, [r7, #4]
 8008946:	       460b      	mov	r3, r1
 8008948:	       70fb      	strb	r3, [r7, #3]
 800894a:	       4613      	mov	r3, r2
 800894c:	       70bb      	strb	r3, [r7, #2]

	uint16_t last_state;
	uint16_t current_state;

	if( TMP1075_read_config(I2Cx, tmp1075_addr, &last_state) != SUCCESS ){
 800894e:	       f107 020e 	add.w	r2, r7, #14
 8008952:	       78fb      	ldrb	r3, [r7, #3]
 8008954:	       4619      	mov	r1, r3
 8008956:	       6878      	ldr	r0, [r7, #4]
 8008958:	       f7ff ff7a 	bl	8008850 <TMP1075_read_config>
 800895c:	       4603      	mov	r3, r0
 800895e:	       2b00      	cmp	r3, #0
 8008960:	   /-- d001      	beq.n	8008966 <TMP1075_set_time_conversion+0x28>
		return -1;
 8008962:	   |   23ff      	movs	r3, #255	; 0xff
 8008964:	/--|-- e02e      	b.n	80089c4 <TMP1075_set_time_conversion+0x86>
	}

	if( I2C_Write_word_u16_St(I2Cx, tmp1075_addr, I2C_SIZE_REG_ADDR_U8, (uint32_t)0x01, (uint16_t)((last_state & (~(3 << 13))) | (time << 13)) )!= SUCCESS ){
 8008966:	|  \-> 89fb      	ldrh	r3, [r7, #14]
 8008968:	|      b21b      	sxth	r3, r3
 800896a:	|      f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800896e:	|      b21a      	sxth	r2, r3
 8008970:	|      78bb      	ldrb	r3, [r7, #2]
 8008972:	|      035b      	lsls	r3, r3, #13
 8008974:	|      b21b      	sxth	r3, r3
 8008976:	|      4313      	orrs	r3, r2
 8008978:	|      b21b      	sxth	r3, r3
 800897a:	|      b29b      	uxth	r3, r3
 800897c:	|      78f9      	ldrb	r1, [r7, #3]
 800897e:	|      9300      	str	r3, [sp, #0]
 8008980:	|      2301      	movs	r3, #1
 8008982:	|      2201      	movs	r2, #1
 8008984:	|      6878      	ldr	r0, [r7, #4]
 8008986:	|      f7f9 ff9b 	bl	80028c0 <I2C_Write_word_u16_St>
 800898a:	|      4603      	mov	r3, r0
 800898c:	|      2b00      	cmp	r3, #0
 800898e:	|  /-- d001      	beq.n	8008994 <TMP1075_set_time_conversion+0x56>
		return -1;
 8008990:	|  |   23ff      	movs	r3, #255	; 0xff
 8008992:	+--|-- e017      	b.n	80089c4 <TMP1075_set_time_conversion+0x86>
	}

	if( TMP1075_read_config(I2Cx, tmp1075_addr, &current_state) != SUCCESS ){
 8008994:	|  \-> f107 020c 	add.w	r2, r7, #12
 8008998:	|      78fb      	ldrb	r3, [r7, #3]
 800899a:	|      4619      	mov	r1, r3
 800899c:	|      6878      	ldr	r0, [r7, #4]
 800899e:	|      f7ff ff57 	bl	8008850 <TMP1075_read_config>
 80089a2:	|      4603      	mov	r3, r0
 80089a4:	|      2b00      	cmp	r3, #0
 80089a6:	|  /-- d001      	beq.n	80089ac <TMP1075_set_time_conversion+0x6e>
		return -1;
 80089a8:	|  |   23ff      	movs	r3, #255	; 0xff
 80089aa:	+--|-- e00b      	b.n	80089c4 <TMP1075_set_time_conversion+0x86>
	}

	if( ( (last_state & (~(3 << 13))) | (time << 13) ) != current_state ){
 80089ac:	|  \-> 89fb      	ldrh	r3, [r7, #14]
 80089ae:	|      f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80089b2:	|      78bb      	ldrb	r3, [r7, #2]
 80089b4:	|      035b      	lsls	r3, r3, #13
 80089b6:	|      4313      	orrs	r3, r2
 80089b8:	|      89ba      	ldrh	r2, [r7, #12]
 80089ba:	|      4293      	cmp	r3, r2
 80089bc:	|  /-- d001      	beq.n	80089c2 <TMP1075_set_time_conversion+0x84>
		return -1;
 80089be:	|  |   23ff      	movs	r3, #255	; 0xff
 80089c0:	+--|-- e000      	b.n	80089c4 <TMP1075_set_time_conversion+0x86>
	}

	return SUCCESS;
 80089c2:	|  \-> 2300      	movs	r3, #0
}
 80089c4:	\----> 4618      	mov	r0, r3
 80089c6:	       3710      	adds	r7, #16
 80089c8:	       46bd      	mov	sp, r7
 80089ca:	       bd80      	pop	{r7, pc}

080089cc <TMP1075_one_shot_conversion_start>:
/** @brief	One-shot conversion mode (for SHUTDOWN_MODE). Requests single measurement of temperature.
	@param  I2Cx - pointer to I2C controller, where x is a number (e.x., I2C1, I2C2 etc.).
	@param  tmp1075_addr - 7-bit device address.
	@retval	0-OK, 1-Error
*/
ErrorStatus TMP1075_one_shot_conversion_start(I2C_TypeDef *I2Cx, uint8_t tmp1075_addr){
 80089cc:	       b580      	push	{r7, lr}
 80089ce:	       b086      	sub	sp, #24
 80089d0:	       af02      	add	r7, sp, #8
 80089d2:	       6078      	str	r0, [r7, #4]
 80089d4:	       460b      	mov	r3, r1
 80089d6:	       70fb      	strb	r3, [r7, #3]

	uint16_t last_state;
	uint16_t current_state;
	volatile uint8_t errors = 0;
 80089d8:	       2300      	movs	r3, #0
 80089da:	       72fb      	strb	r3, [r7, #11]

	if( TMP1075_read_config(I2Cx, tmp1075_addr, &last_state) != SUCCESS ){
 80089dc:	       f107 020e 	add.w	r2, r7, #14
 80089e0:	       78fb      	ldrb	r3, [r7, #3]
 80089e2:	       4619      	mov	r1, r3
 80089e4:	       6878      	ldr	r0, [r7, #4]
 80089e6:	       f7ff ff33 	bl	8008850 <TMP1075_read_config>
 80089ea:	       4603      	mov	r3, r0
 80089ec:	       2b00      	cmp	r3, #0
 80089ee:	   /-- d006      	beq.n	80089fe <TMP1075_one_shot_conversion_start+0x32>
		errors++;
 80089f0:	   |   7afb      	ldrb	r3, [r7, #11]
 80089f2:	   |   b2db      	uxtb	r3, r3
 80089f4:	   |   3301      	adds	r3, #1
 80089f6:	   |   b2db      	uxtb	r3, r3
 80089f8:	   |   72fb      	strb	r3, [r7, #11]
		return ERROR;
 80089fa:	   |   2301      	movs	r3, #1
 80089fc:	/--|-- e02a      	b.n	8008a54 <TMP1075_one_shot_conversion_start+0x88>
	}

	if( I2C_Write_word_u16_St(I2Cx, tmp1075_addr, I2C_SIZE_REG_ADDR_U8, (uint32_t)0x01, (uint16_t) ((last_state & (~(1 << 15))) | (1 << 15)) ) != SUCCESS ){
 80089fe:	|  \-> 89fb      	ldrh	r3, [r7, #14]
 8008a00:	|      b21b      	sxth	r3, r3
 8008a02:	|      ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a06:	|      ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a0a:	|      b21b      	sxth	r3, r3
 8008a0c:	|      b29b      	uxth	r3, r3
 8008a0e:	|      78f9      	ldrb	r1, [r7, #3]
 8008a10:	|      9300      	str	r3, [sp, #0]
 8008a12:	|      2301      	movs	r3, #1
 8008a14:	|      2201      	movs	r2, #1
 8008a16:	|      6878      	ldr	r0, [r7, #4]
 8008a18:	|      f7f9 ff52 	bl	80028c0 <I2C_Write_word_u16_St>
 8008a1c:	|      4603      	mov	r3, r0
 8008a1e:	|      2b00      	cmp	r3, #0
 8008a20:	|  /-- d006      	beq.n	8008a30 <TMP1075_one_shot_conversion_start+0x64>
		errors++;
 8008a22:	|  |   7afb      	ldrb	r3, [r7, #11]
 8008a24:	|  |   b2db      	uxtb	r3, r3
 8008a26:	|  |   3301      	adds	r3, #1
 8008a28:	|  |   b2db      	uxtb	r3, r3
 8008a2a:	|  |   72fb      	strb	r3, [r7, #11]
		return ERROR;
 8008a2c:	|  |   2301      	movs	r3, #1
 8008a2e:	+--|-- e011      	b.n	8008a54 <TMP1075_one_shot_conversion_start+0x88>
	}

	if( TMP1075_read_config(I2Cx, tmp1075_addr, &current_state) != SUCCESS ){
 8008a30:	|  \-> f107 020c 	add.w	r2, r7, #12
 8008a34:	|      78fb      	ldrb	r3, [r7, #3]
 8008a36:	|      4619      	mov	r1, r3
 8008a38:	|      6878      	ldr	r0, [r7, #4]
 8008a3a:	|      f7ff ff09 	bl	8008850 <TMP1075_read_config>
 8008a3e:	|      4603      	mov	r3, r0
 8008a40:	|      2b00      	cmp	r3, #0
 8008a42:	|  /-- d006      	beq.n	8008a52 <TMP1075_one_shot_conversion_start+0x86>
		errors++;
 8008a44:	|  |   7afb      	ldrb	r3, [r7, #11]
 8008a46:	|  |   b2db      	uxtb	r3, r3
 8008a48:	|  |   3301      	adds	r3, #1
 8008a4a:	|  |   b2db      	uxtb	r3, r3
 8008a4c:	|  |   72fb      	strb	r3, [r7, #11]
		return ERROR;
 8008a4e:	|  |   2301      	movs	r3, #1
 8008a50:	+--|-- e000      	b.n	8008a54 <TMP1075_one_shot_conversion_start+0x88>
	// if(((last_state & (~(1 << 15))) | (1 << 15)) != current_state){
	// 	errors++;
	// 	return ERROR;
	// }

	return SUCCESS;
 8008a52:	|  \-> 2300      	movs	r3, #0
}
 8008a54:	\----> 4618      	mov	r0, r3
 8008a56:	       3710      	adds	r7, #16
 8008a58:	       46bd      	mov	sp, r7
 8008a5a:	       bd80      	pop	{r7, pc}

08008a5c <TMP1075_disable_ALERT_pin>:
/** @brief  Disable ALERT pin function.
	@param  I2Cx - pointer to I2C controller, where x is a number (e.x., I2C1, I2C2 etc.).
	@param  tmp1075_addr - 7-bit device address.
	@retval 0-OK, 1-Error
*/
ErrorStatus TMP1075_disable_ALERT_pin(I2C_TypeDef *I2Cx, uint8_t tmp1075_addr){
 8008a5c:	       b580      	push	{r7, lr}
 8008a5e:	       b082      	sub	sp, #8
 8008a60:	       af00      	add	r7, sp, #0
 8008a62:	       6078      	str	r0, [r7, #4]
 8008a64:	       460b      	mov	r3, r1
 8008a66:	       70fb      	strb	r3, [r7, #3]

	if( TMP1075_set_low_limit( I2Cx, tmp1075_addr, -128) != SUCCESS){
 8008a68:	       78fb      	ldrb	r3, [r7, #3]
 8008a6a:	       ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008aa4 <TMP1075_disable_ALERT_pin+0x48>
 8008a6e:	       4619      	mov	r1, r3
 8008a70:	       6878      	ldr	r0, [r7, #4]
 8008a72:	       f000 f8f0 	bl	8008c56 <TMP1075_set_low_limit>
 8008a76:	       4603      	mov	r3, r0
 8008a78:	       2b00      	cmp	r3, #0
 8008a7a:	   /-- d001      	beq.n	8008a80 <TMP1075_disable_ALERT_pin+0x24>
		return -1;
 8008a7c:	   |   23ff      	movs	r3, #255	; 0xff
 8008a7e:	/--|-- e00c      	b.n	8008a9a <TMP1075_disable_ALERT_pin+0x3e>
	}

	if( TMP1075_set_high_limit(I2Cx, tmp1075_addr, 127.9375) != SUCCESS){
 8008a80:	|  \-> 78fb      	ldrb	r3, [r7, #3]
 8008a82:	|      ed9f 0a09 	vldr	s0, [pc, #36]	; 8008aa8 <TMP1075_disable_ALERT_pin+0x4c>
 8008a86:	|      4619      	mov	r1, r3
 8008a88:	|      6878      	ldr	r0, [r7, #4]
 8008a8a:	|      f000 f91a 	bl	8008cc2 <TMP1075_set_high_limit>
 8008a8e:	|      4603      	mov	r3, r0
 8008a90:	|      2b00      	cmp	r3, #0
 8008a92:	|  /-- d001      	beq.n	8008a98 <TMP1075_disable_ALERT_pin+0x3c>
		return -1;
 8008a94:	|  |   23ff      	movs	r3, #255	; 0xff
 8008a96:	+--|-- e000      	b.n	8008a9a <TMP1075_disable_ALERT_pin+0x3e>
	}

	return SUCCESS;
 8008a98:	|  \-> 2300      	movs	r3, #0
}
 8008a9a:	\----> 4618      	mov	r0, r3
 8008a9c:	       3708      	adds	r7, #8
 8008a9e:	       46bd      	mov	sp, r7
 8008aa0:	       bd80      	pop	{r7, pc}
 8008aa2:	       bf00      	nop
 8008aa4:	       0000      	movs	r0, r0
 8008aa6:	       c300      	stmia	r3!, {}
 8008aa8:	       e000      	b.n	8008aac <TMP1075_set_mode_ALERT_pin>
 8008aaa:	       42ff      	cmn	r7, r7

08008aac <TMP1075_set_mode_ALERT_pin>:
	@param  mode - ALERT mode:
				 TMP1075_COMPARATOR_MODE
				 TMP1075_INTERRUPT_MODE
	@retval	0-OK, 1-Error
*/
ErrorStatus TMP1075_set_mode_ALERT_pin(I2C_TypeDef *I2Cx, uint8_t tmp1075_addr, uint8_t mode){
 8008aac:	       b580      	push	{r7, lr}
 8008aae:	       b086      	sub	sp, #24
 8008ab0:	       af02      	add	r7, sp, #8
 8008ab2:	       6078      	str	r0, [r7, #4]
 8008ab4:	       460b      	mov	r3, r1
 8008ab6:	       70fb      	strb	r3, [r7, #3]
 8008ab8:	       4613      	mov	r3, r2
 8008aba:	       70bb      	strb	r3, [r7, #2]

	uint16_t last_state;
	uint16_t current_state;

	if( TMP1075_read_config(I2Cx, tmp1075_addr, &last_state) != SUCCESS ){
 8008abc:	       f107 020e 	add.w	r2, r7, #14
 8008ac0:	       78fb      	ldrb	r3, [r7, #3]
 8008ac2:	       4619      	mov	r1, r3
 8008ac4:	       6878      	ldr	r0, [r7, #4]
 8008ac6:	       f7ff fec3 	bl	8008850 <TMP1075_read_config>
 8008aca:	       4603      	mov	r3, r0
 8008acc:	       2b00      	cmp	r3, #0
 8008ace:	   /-- d001      	beq.n	8008ad4 <TMP1075_set_mode_ALERT_pin+0x28>
		return -1;
 8008ad0:	   |   23ff      	movs	r3, #255	; 0xff
 8008ad2:	/--|-- e02e      	b.n	8008b32 <TMP1075_set_mode_ALERT_pin+0x86>
	}

	if( I2C_Write_word_u16_St(I2Cx, tmp1075_addr, I2C_SIZE_REG_ADDR_U8, (uint32_t)0x01,  (uint16_t)(( last_state & (~(1 << 9)) ) | (mode << 9))  ) != SUCCESS ){
 8008ad4:	|  \-> 89fb      	ldrh	r3, [r7, #14]
 8008ad6:	|      b21b      	sxth	r3, r3
 8008ad8:	|      f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008adc:	|      b21a      	sxth	r2, r3
 8008ade:	|      78bb      	ldrb	r3, [r7, #2]
 8008ae0:	|      025b      	lsls	r3, r3, #9
 8008ae2:	|      b21b      	sxth	r3, r3
 8008ae4:	|      4313      	orrs	r3, r2
 8008ae6:	|      b21b      	sxth	r3, r3
 8008ae8:	|      b29b      	uxth	r3, r3
 8008aea:	|      78f9      	ldrb	r1, [r7, #3]
 8008aec:	|      9300      	str	r3, [sp, #0]
 8008aee:	|      2301      	movs	r3, #1
 8008af0:	|      2201      	movs	r2, #1
 8008af2:	|      6878      	ldr	r0, [r7, #4]
 8008af4:	|      f7f9 fee4 	bl	80028c0 <I2C_Write_word_u16_St>
 8008af8:	|      4603      	mov	r3, r0
 8008afa:	|      2b00      	cmp	r3, #0
 8008afc:	|  /-- d001      	beq.n	8008b02 <TMP1075_set_mode_ALERT_pin+0x56>
		return -1;
 8008afe:	|  |   23ff      	movs	r3, #255	; 0xff
 8008b00:	+--|-- e017      	b.n	8008b32 <TMP1075_set_mode_ALERT_pin+0x86>
	}

	if( TMP1075_read_config(I2Cx, tmp1075_addr, &current_state) != SUCCESS ){
 8008b02:	|  \-> f107 020c 	add.w	r2, r7, #12
 8008b06:	|      78fb      	ldrb	r3, [r7, #3]
 8008b08:	|      4619      	mov	r1, r3
 8008b0a:	|      6878      	ldr	r0, [r7, #4]
 8008b0c:	|      f7ff fea0 	bl	8008850 <TMP1075_read_config>
 8008b10:	|      4603      	mov	r3, r0
 8008b12:	|      2b00      	cmp	r3, #0
 8008b14:	|  /-- d001      	beq.n	8008b1a <TMP1075_set_mode_ALERT_pin+0x6e>
		return -1;
 8008b16:	|  |   23ff      	movs	r3, #255	; 0xff
 8008b18:	+--|-- e00b      	b.n	8008b32 <TMP1075_set_mode_ALERT_pin+0x86>
	}

	if( ( (last_state & (~(1 << 9))) | (mode << 9) ) != current_state ){
 8008b1a:	|  \-> 89fb      	ldrh	r3, [r7, #14]
 8008b1c:	|      f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008b20:	|      78bb      	ldrb	r3, [r7, #2]
 8008b22:	|      025b      	lsls	r3, r3, #9
 8008b24:	|      4313      	orrs	r3, r2
 8008b26:	|      89ba      	ldrh	r2, [r7, #12]
 8008b28:	|      4293      	cmp	r3, r2
 8008b2a:	|  /-- d001      	beq.n	8008b30 <TMP1075_set_mode_ALERT_pin+0x84>

		return -1;
 8008b2c:	|  |   23ff      	movs	r3, #255	; 0xff
 8008b2e:	+--|-- e000      	b.n	8008b32 <TMP1075_set_mode_ALERT_pin+0x86>
	}

	return SUCCESS;
 8008b30:	|  \-> 2300      	movs	r3, #0
}
 8008b32:	\----> 4618      	mov	r0, r3
 8008b34:	       3710      	adds	r7, #16
 8008b36:	       46bd      	mov	sp, r7
 8008b38:	       bd80      	pop	{r7, pc}

08008b3a <TMP1075_ALERT_active_level>:
	@param mode - ALERT polarity.
				 TMP1075_ACTIVE_LOW
				 TMP1075_ACTIVE_HIGH
	@retval	0-OK, 1-Error
*/
ErrorStatus TMP1075_ALERT_active_level(I2C_TypeDef *I2Cx, uint8_t tmp1075_addr, uint8_t mode){
 8008b3a:	       b580      	push	{r7, lr}
 8008b3c:	       b086      	sub	sp, #24
 8008b3e:	       af02      	add	r7, sp, #8
 8008b40:	       6078      	str	r0, [r7, #4]
 8008b42:	       460b      	mov	r3, r1
 8008b44:	       70fb      	strb	r3, [r7, #3]
 8008b46:	       4613      	mov	r3, r2
 8008b48:	       70bb      	strb	r3, [r7, #2]

	uint16_t last_state;
	uint16_t current_state;

	if( TMP1075_read_config(I2Cx, tmp1075_addr, &last_state) != SUCCESS ){
 8008b4a:	       f107 020e 	add.w	r2, r7, #14
 8008b4e:	       78fb      	ldrb	r3, [r7, #3]
 8008b50:	       4619      	mov	r1, r3
 8008b52:	       6878      	ldr	r0, [r7, #4]
 8008b54:	       f7ff fe7c 	bl	8008850 <TMP1075_read_config>
 8008b58:	       4603      	mov	r3, r0
 8008b5a:	       2b00      	cmp	r3, #0
 8008b5c:	   /-- d001      	beq.n	8008b62 <TMP1075_ALERT_active_level+0x28>
		return -1;
 8008b5e:	   |   23ff      	movs	r3, #255	; 0xff
 8008b60:	/--|-- e02e      	b.n	8008bc0 <TMP1075_ALERT_active_level+0x86>
	}

	if( I2C_Write_word_u16_St(I2Cx, tmp1075_addr, I2C_SIZE_REG_ADDR_U8, (uint32_t)0x01, (uint16_t)(( last_state & (~(1 << 10))) | (mode << 10)) ) != SUCCESS ){
 8008b62:	|  \-> 89fb      	ldrh	r3, [r7, #14]
 8008b64:	|      b21b      	sxth	r3, r3
 8008b66:	|      f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b6a:	|      b21a      	sxth	r2, r3
 8008b6c:	|      78bb      	ldrb	r3, [r7, #2]
 8008b6e:	|      029b      	lsls	r3, r3, #10
 8008b70:	|      b21b      	sxth	r3, r3
 8008b72:	|      4313      	orrs	r3, r2
 8008b74:	|      b21b      	sxth	r3, r3
 8008b76:	|      b29b      	uxth	r3, r3
 8008b78:	|      78f9      	ldrb	r1, [r7, #3]
 8008b7a:	|      9300      	str	r3, [sp, #0]
 8008b7c:	|      2301      	movs	r3, #1
 8008b7e:	|      2201      	movs	r2, #1
 8008b80:	|      6878      	ldr	r0, [r7, #4]
 8008b82:	|      f7f9 fe9d 	bl	80028c0 <I2C_Write_word_u16_St>
 8008b86:	|      4603      	mov	r3, r0
 8008b88:	|      2b00      	cmp	r3, #0
 8008b8a:	|  /-- d001      	beq.n	8008b90 <TMP1075_ALERT_active_level+0x56>
		return -1;
 8008b8c:	|  |   23ff      	movs	r3, #255	; 0xff
 8008b8e:	+--|-- e017      	b.n	8008bc0 <TMP1075_ALERT_active_level+0x86>
	}

	if( TMP1075_read_config( I2Cx, tmp1075_addr, &current_state ) != SUCCESS ){
 8008b90:	|  \-> f107 020c 	add.w	r2, r7, #12
 8008b94:	|      78fb      	ldrb	r3, [r7, #3]
 8008b96:	|      4619      	mov	r1, r3
 8008b98:	|      6878      	ldr	r0, [r7, #4]
 8008b9a:	|      f7ff fe59 	bl	8008850 <TMP1075_read_config>
 8008b9e:	|      4603      	mov	r3, r0
 8008ba0:	|      2b00      	cmp	r3, #0
 8008ba2:	|  /-- d001      	beq.n	8008ba8 <TMP1075_ALERT_active_level+0x6e>
		return -1;
 8008ba4:	|  |   23ff      	movs	r3, #255	; 0xff
 8008ba6:	+--|-- e00b      	b.n	8008bc0 <TMP1075_ALERT_active_level+0x86>
	}

	if( ( (last_state & (~(1 << 10))) | (mode << 10) ) != current_state ){
 8008ba8:	|  \-> 89fb      	ldrh	r3, [r7, #14]
 8008baa:	|      f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008bae:	|      78bb      	ldrb	r3, [r7, #2]
 8008bb0:	|      029b      	lsls	r3, r3, #10
 8008bb2:	|      4313      	orrs	r3, r2
 8008bb4:	|      89ba      	ldrh	r2, [r7, #12]
 8008bb6:	|      4293      	cmp	r3, r2
 8008bb8:	|  /-- d001      	beq.n	8008bbe <TMP1075_ALERT_active_level+0x84>
		return -1;
 8008bba:	|  |   23ff      	movs	r3, #255	; 0xff
 8008bbc:	+--|-- e000      	b.n	8008bc0 <TMP1075_ALERT_active_level+0x86>
	}

	return SUCCESS;
 8008bbe:	|  \-> 2300      	movs	r3, #0
}
 8008bc0:	\----> 4618      	mov	r0, r3
 8008bc2:	       3710      	adds	r7, #16
 8008bc4:	       46bd      	mov	sp, r7
 8008bc6:	       bd80      	pop	{r7, pc}

08008bc8 <TMP1075_ALERT_sensitivity>:
				 TMP1075_TWO_FAULT
				 TMP1075_THREE_FAULT
				 TMP1075_FOUR_FAULT
	@retval	0-OK, 1-Error
*/
ErrorStatus TMP1075_ALERT_sensitivity(I2C_TypeDef *I2Cx, uint8_t tmp1075_addr, uint8_t mode){
 8008bc8:	       b580      	push	{r7, lr}
 8008bca:	       b086      	sub	sp, #24
 8008bcc:	       af02      	add	r7, sp, #8
 8008bce:	       6078      	str	r0, [r7, #4]
 8008bd0:	       460b      	mov	r3, r1
 8008bd2:	       70fb      	strb	r3, [r7, #3]
 8008bd4:	       4613      	mov	r3, r2
 8008bd6:	       70bb      	strb	r3, [r7, #2]

	uint16_t last_state;
	uint16_t current_state;

	if( TMP1075_read_config(I2Cx, tmp1075_addr, &last_state) != SUCCESS ){
 8008bd8:	       f107 020e 	add.w	r2, r7, #14
 8008bdc:	       78fb      	ldrb	r3, [r7, #3]
 8008bde:	       4619      	mov	r1, r3
 8008be0:	       6878      	ldr	r0, [r7, #4]
 8008be2:	       f7ff fe35 	bl	8008850 <TMP1075_read_config>
 8008be6:	       4603      	mov	r3, r0
 8008be8:	       2b00      	cmp	r3, #0
 8008bea:	   /-- d001      	beq.n	8008bf0 <TMP1075_ALERT_sensitivity+0x28>
		return -1;
 8008bec:	   |   23ff      	movs	r3, #255	; 0xff
 8008bee:	/--|-- e02e      	b.n	8008c4e <TMP1075_ALERT_sensitivity+0x86>
	}

	if( I2C_Write_word_u16_St(I2Cx, tmp1075_addr, I2C_SIZE_REG_ADDR_U8, (uint32_t)0x01, (uint16_t)((last_state & (~(3 << 11))) | (mode<< 11)) ) != SUCCESS ) {
 8008bf0:	|  \-> 89fb      	ldrh	r3, [r7, #14]
 8008bf2:	|      b21b      	sxth	r3, r3
 8008bf4:	|      f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8008bf8:	|      b21a      	sxth	r2, r3
 8008bfa:	|      78bb      	ldrb	r3, [r7, #2]
 8008bfc:	|      02db      	lsls	r3, r3, #11
 8008bfe:	|      b21b      	sxth	r3, r3
 8008c00:	|      4313      	orrs	r3, r2
 8008c02:	|      b21b      	sxth	r3, r3
 8008c04:	|      b29b      	uxth	r3, r3
 8008c06:	|      78f9      	ldrb	r1, [r7, #3]
 8008c08:	|      9300      	str	r3, [sp, #0]
 8008c0a:	|      2301      	movs	r3, #1
 8008c0c:	|      2201      	movs	r2, #1
 8008c0e:	|      6878      	ldr	r0, [r7, #4]
 8008c10:	|      f7f9 fe56 	bl	80028c0 <I2C_Write_word_u16_St>
 8008c14:	|      4603      	mov	r3, r0
 8008c16:	|      2b00      	cmp	r3, #0
 8008c18:	|  /-- d001      	beq.n	8008c1e <TMP1075_ALERT_sensitivity+0x56>
		return -1;
 8008c1a:	|  |   23ff      	movs	r3, #255	; 0xff
 8008c1c:	+--|-- e017      	b.n	8008c4e <TMP1075_ALERT_sensitivity+0x86>
	}

	if( TMP1075_read_config(I2Cx, tmp1075_addr, &current_state) != SUCCESS ){
 8008c1e:	|  \-> f107 020c 	add.w	r2, r7, #12
 8008c22:	|      78fb      	ldrb	r3, [r7, #3]
 8008c24:	|      4619      	mov	r1, r3
 8008c26:	|      6878      	ldr	r0, [r7, #4]
 8008c28:	|      f7ff fe12 	bl	8008850 <TMP1075_read_config>
 8008c2c:	|      4603      	mov	r3, r0
 8008c2e:	|      2b00      	cmp	r3, #0
 8008c30:	|  /-- d001      	beq.n	8008c36 <TMP1075_ALERT_sensitivity+0x6e>
		return -1;
 8008c32:	|  |   23ff      	movs	r3, #255	; 0xff
 8008c34:	+--|-- e00b      	b.n	8008c4e <TMP1075_ALERT_sensitivity+0x86>
	}

	if(((last_state & (~(3 << 11))) | (mode << 11)) != current_state){
 8008c36:	|  \-> 89fb      	ldrh	r3, [r7, #14]
 8008c38:	|      f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008c3c:	|      78bb      	ldrb	r3, [r7, #2]
 8008c3e:	|      02db      	lsls	r3, r3, #11
 8008c40:	|      4313      	orrs	r3, r2
 8008c42:	|      89ba      	ldrh	r2, [r7, #12]
 8008c44:	|      4293      	cmp	r3, r2
 8008c46:	|  /-- d001      	beq.n	8008c4c <TMP1075_ALERT_sensitivity+0x84>
		return -1;
 8008c48:	|  |   23ff      	movs	r3, #255	; 0xff
 8008c4a:	+--|-- e000      	b.n	8008c4e <TMP1075_ALERT_sensitivity+0x86>
	}

	return SUCCESS;
 8008c4c:	|  \-> 2300      	movs	r3, #0
}
 8008c4e:	\----> 4618      	mov	r0, r3
 8008c50:	       3710      	adds	r7, #16
 8008c52:	       46bd      	mov	sp, r7
 8008c54:	       bd80      	pop	{r7, pc}

08008c56 <TMP1075_set_low_limit>:
	@param  I2Cx - pointer to I2C controller, where x is a number (e.x., I2C1, I2C2 etc.).
	@param tmp1075_addr - 7-bit device address.
	@param low_limit -  low limit for comparison with temperature results.
	@retval	0-OK, -1-Error
*/
ErrorStatus TMP1075_set_low_limit(I2C_TypeDef *I2Cx, uint8_t tmp1075_addr, float low_limit){
 8008c56:	       b580      	push	{r7, lr}
 8008c58:	       b088      	sub	sp, #32
 8008c5a:	       af02      	add	r7, sp, #8
 8008c5c:	       60f8      	str	r0, [r7, #12]
 8008c5e:	       460b      	mov	r3, r1
 8008c60:	       ed87 0a01 	vstr	s0, [r7, #4]
 8008c64:	       72fb      	strb	r3, [r7, #11]

	uint16_t low_limit_temp=0;
 8008c66:	       2300      	movs	r3, #0
 8008c68:	       82fb      	strh	r3, [r7, #22]
	uint16_t get_reg_data=0;
 8008c6a:	       2300      	movs	r3, #0
 8008c6c:	       82bb      	strh	r3, [r7, #20]

	low_limit_temp = TMP1075_float_to_binary(low_limit);
 8008c6e:	       ed97 0a01 	vldr	s0, [r7, #4]
 8008c72:	       f7ff fdcb 	bl	800880c <TMP1075_float_to_binary>
 8008c76:	       4603      	mov	r3, r0
 8008c78:	       82fb      	strh	r3, [r7, #22]

	if( I2C_Write_word_u16_St(I2Cx, tmp1075_addr, I2C_SIZE_REG_ADDR_U8, (uint32_t)0x02, low_limit_temp) != SUCCESS ){
 8008c7a:	       7af9      	ldrb	r1, [r7, #11]
 8008c7c:	       8afb      	ldrh	r3, [r7, #22]
 8008c7e:	       9300      	str	r3, [sp, #0]
 8008c80:	       2302      	movs	r3, #2
 8008c82:	       2201      	movs	r2, #1
 8008c84:	       68f8      	ldr	r0, [r7, #12]
 8008c86:	       f7f9 fe1b 	bl	80028c0 <I2C_Write_word_u16_St>
 8008c8a:	       4603      	mov	r3, r0
 8008c8c:	       2b00      	cmp	r3, #0
 8008c8e:	   /-- d001      	beq.n	8008c94 <TMP1075_set_low_limit+0x3e>
		return -1;
 8008c90:	   |   23ff      	movs	r3, #255	; 0xff
 8008c92:	/--|-- e012      	b.n	8008cba <TMP1075_set_low_limit+0x64>
	}

	if( TMP1075_get_low_limit(I2Cx, tmp1075_addr, &get_reg_data) != SUCCESS ){
 8008c94:	|  \-> f107 0214 	add.w	r2, r7, #20
 8008c98:	|      7afb      	ldrb	r3, [r7, #11]
 8008c9a:	|      4619      	mov	r1, r3
 8008c9c:	|      68f8      	ldr	r0, [r7, #12]
 8008c9e:	|      f000 f846 	bl	8008d2e <TMP1075_get_low_limit>
 8008ca2:	|      4603      	mov	r3, r0
 8008ca4:	|      2b00      	cmp	r3, #0
 8008ca6:	|  /-- d001      	beq.n	8008cac <TMP1075_set_low_limit+0x56>
		return -1;
 8008ca8:	|  |   23ff      	movs	r3, #255	; 0xff
 8008caa:	+--|-- e006      	b.n	8008cba <TMP1075_set_low_limit+0x64>
	}

	if( low_limit_temp != get_reg_data ){
 8008cac:	|  \-> 8abb      	ldrh	r3, [r7, #20]
 8008cae:	|      8afa      	ldrh	r2, [r7, #22]
 8008cb0:	|      429a      	cmp	r2, r3
 8008cb2:	|  /-- d001      	beq.n	8008cb8 <TMP1075_set_low_limit+0x62>
		return -1;
 8008cb4:	|  |   23ff      	movs	r3, #255	; 0xff
 8008cb6:	+--|-- e000      	b.n	8008cba <TMP1075_set_low_limit+0x64>
	}

	return SUCCESS;
 8008cb8:	|  \-> 2300      	movs	r3, #0
}
 8008cba:	\----> 4618      	mov	r0, r3
 8008cbc:	       3718      	adds	r7, #24
 8008cbe:	       46bd      	mov	sp, r7
 8008cc0:	       bd80      	pop	{r7, pc}

08008cc2 <TMP1075_set_high_limit>:
	@param  I2Cx - pointer to I2C controller, where x is a number (e.x., I2C1, I2C2 etc.).
	@param tmp1075_addr - 7-bit device address.
	@param high_limit - high limit for comparison with temperature results.
	@retval	0-OK, -1-Error
*/
ErrorStatus TMP1075_set_high_limit(I2C_TypeDef *I2Cx, uint8_t tmp1075_addr, float high_limit){
 8008cc2:	       b580      	push	{r7, lr}
 8008cc4:	       b088      	sub	sp, #32
 8008cc6:	       af02      	add	r7, sp, #8
 8008cc8:	       60f8      	str	r0, [r7, #12]
 8008cca:	       460b      	mov	r3, r1
 8008ccc:	       ed87 0a01 	vstr	s0, [r7, #4]
 8008cd0:	       72fb      	strb	r3, [r7, #11]

	uint16_t high_limit_temp=0;
 8008cd2:	       2300      	movs	r3, #0
 8008cd4:	       82fb      	strh	r3, [r7, #22]
	uint16_t get_reg_data=0;
 8008cd6:	       2300      	movs	r3, #0
 8008cd8:	       82bb      	strh	r3, [r7, #20]

	high_limit_temp = TMP1075_float_to_binary(high_limit);
 8008cda:	       ed97 0a01 	vldr	s0, [r7, #4]
 8008cde:	       f7ff fd95 	bl	800880c <TMP1075_float_to_binary>
 8008ce2:	       4603      	mov	r3, r0
 8008ce4:	       82fb      	strh	r3, [r7, #22]

	if( I2C_Write_word_u16_St(I2Cx, tmp1075_addr, I2C_SIZE_REG_ADDR_U8, (uint32_t)0x03, high_limit_temp) != SUCCESS ){
 8008ce6:	       7af9      	ldrb	r1, [r7, #11]
 8008ce8:	       8afb      	ldrh	r3, [r7, #22]
 8008cea:	       9300      	str	r3, [sp, #0]
 8008cec:	       2303      	movs	r3, #3
 8008cee:	       2201      	movs	r2, #1
 8008cf0:	       68f8      	ldr	r0, [r7, #12]
 8008cf2:	       f7f9 fde5 	bl	80028c0 <I2C_Write_word_u16_St>
 8008cf6:	       4603      	mov	r3, r0
 8008cf8:	       2b00      	cmp	r3, #0
 8008cfa:	   /-- d001      	beq.n	8008d00 <TMP1075_set_high_limit+0x3e>
		return -1;
 8008cfc:	   |   23ff      	movs	r3, #255	; 0xff
 8008cfe:	/--|-- e012      	b.n	8008d26 <TMP1075_set_high_limit+0x64>
	}

	if( TMP1075_get_high_limit(I2Cx, tmp1075_addr, &get_reg_data) != SUCCESS ){
 8008d00:	|  \-> f107 0214 	add.w	r2, r7, #20
 8008d04:	|      7afb      	ldrb	r3, [r7, #11]
 8008d06:	|      4619      	mov	r1, r3
 8008d08:	|      68f8      	ldr	r0, [r7, #12]
 8008d0a:	|      f000 f826 	bl	8008d5a <TMP1075_get_high_limit>
 8008d0e:	|      4603      	mov	r3, r0
 8008d10:	|      2b00      	cmp	r3, #0
 8008d12:	|  /-- d001      	beq.n	8008d18 <TMP1075_set_high_limit+0x56>
		return -1;
 8008d14:	|  |   23ff      	movs	r3, #255	; 0xff
 8008d16:	+--|-- e006      	b.n	8008d26 <TMP1075_set_high_limit+0x64>
	}

	if( high_limit_temp != get_reg_data ){
 8008d18:	|  \-> 8abb      	ldrh	r3, [r7, #20]
 8008d1a:	|      8afa      	ldrh	r2, [r7, #22]
 8008d1c:	|      429a      	cmp	r2, r3
 8008d1e:	|  /-- d001      	beq.n	8008d24 <TMP1075_set_high_limit+0x62>
		return -1;
 8008d20:	|  |   23ff      	movs	r3, #255	; 0xff
 8008d22:	+--|-- e000      	b.n	8008d26 <TMP1075_set_high_limit+0x64>
	}

	return SUCCESS;
 8008d24:	|  \-> 2300      	movs	r3, #0
}
 8008d26:	\----> 4618      	mov	r0, r3
 8008d28:	       3718      	adds	r7, #24
 8008d2a:	       46bd      	mov	sp, r7
 8008d2c:	       bd80      	pop	{r7, pc}

08008d2e <TMP1075_get_low_limit>:
/** @brief  Reading current value of low limit register.
	@param  I2Cx - pointer to I2C controller, where x is a number (e.x., I2C1, I2C2 etc.).
	@param tmp1075_addr - 7-bit device address.
	@retval 0-OK, -1-Error
*/
ErrorStatus TMP1075_get_low_limit(I2C_TypeDef *I2Cx, uint8_t tmp1075_addr, uint16_t *read_data){
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b086      	sub	sp, #24
 8008d32:	af02      	add	r7, sp, #8
 8008d34:	60f8      	str	r0, [r7, #12]
 8008d36:	460b      	mov	r3, r1
 8008d38:	607a      	str	r2, [r7, #4]
 8008d3a:	72fb      	strb	r3, [r7, #11]

	return I2C_Read_word_u16_St_ReSt(I2Cx, tmp1075_addr,  I2C_SIZE_REG_ADDR_U8, (uint32_t)0x02, 1, read_data);
 8008d3c:	7af9      	ldrb	r1, [r7, #11]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	9301      	str	r3, [sp, #4]
 8008d42:	2301      	movs	r3, #1
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	2302      	movs	r3, #2
 8008d48:	2201      	movs	r2, #1
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7f9 fbb2 	bl	80024b4 <I2C_Read_word_u16_St_ReSt>
 8008d50:	4603      	mov	r3, r0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <TMP1075_get_high_limit>:
/** @brief	Reading current value of high limit register.
	@param  I2Cx - pointer to I2C controller, where x is a number (e.x., I2C1, I2C2 etc.).
	@param tmp1075_addr - 7-bit device address.
	@retval	0-OK, -1-Error
*/
ErrorStatus TMP1075_get_high_limit(I2C_TypeDef *I2Cx, uint8_t tmp1075_addr, uint16_t *read_data){
 8008d5a:	                b580      	push	{r7, lr}
 8008d5c:	                b086      	sub	sp, #24
 8008d5e:	                af02      	add	r7, sp, #8
 8008d60:	                60f8      	str	r0, [r7, #12]
 8008d62:	                460b      	mov	r3, r1
 8008d64:	                607a      	str	r2, [r7, #4]
 8008d66:	                72fb      	strb	r3, [r7, #11]

	return I2C_Read_word_u16_St_ReSt(I2Cx, tmp1075_addr, I2C_SIZE_REG_ADDR_U8, (uint32_t)0x03, 1, read_data);
 8008d68:	                7af9      	ldrb	r1, [r7, #11]
 8008d6a:	                687b      	ldr	r3, [r7, #4]
 8008d6c:	                9301      	str	r3, [sp, #4]
 8008d6e:	                2301      	movs	r3, #1
 8008d70:	                9300      	str	r3, [sp, #0]
 8008d72:	                2303      	movs	r3, #3
 8008d74:	                2201      	movs	r2, #1
 8008d76:	                68f8      	ldr	r0, [r7, #12]
 8008d78:	                f7f9 fb9c 	bl	80024b4 <I2C_Read_word_u16_St_ReSt>
 8008d7c:	                4603      	mov	r3, r0
}
 8008d7e:	                4618      	mov	r0, r3
 8008d80:	                3710      	adds	r7, #16
 8008d82:	                46bd      	mov	sp, r7
 8008d84:	                bd80      	pop	{r7, pc}
 8008d86:	                bf00      	nop
 8008d88:	            /-- b3b0      	cbz	r0, 8008df8 <TMP1075_get_high_limit+0x9e>
 8008d8a:	            |   0800      	lsrs	r0, r0, #32
 8008d8c:	            |   0000      	movs	r0, r0
 8008d8e:	            |   2000      	movs	r0, #0
 8008d90:	            |   084c      	lsrs	r4, r1, #1
 8008d92:	            |   2000      	movs	r0, #0
 8008d94:	            |   0850      	lsrs	r0, r2, #1
 8008d96:	            |   2000      	movs	r0, #0
 8008d98:	            |   5334      	strh	r4, [r6, r4]
 8008d9a:	            |   2000      	movs	r0, #0
 8008d9c:	            |   b570      	push	{r4, r5, r6, lr}
 8008d9e:	            |   f04f 0cff 	mov.w	r12, #255	; 0xff
 8008da2:	            |   f44c 6ce0 	orr.w	r12, r12, #1792	; 0x700
 8008da6:	            |   ea1c 5411 	ands.w	r4, r12, r1, lsr #20
 8008daa:	            |   bf1d      	ittte	ne
 8008dac:	            |   ea1c 5513 	andsne.w	r5, r12, r3, lsr #20
 8008db0:	            |   ea94 0f0c 	teqne	r4, r12
 8008db4:	            |   ea95 0f0c 	teqne	r5, r12
 8008db8:	/-----------|-- f000 f8de 	bleq	8008f78 <TMP1075_get_high_limit+0x21e>
 8008dbc:	|           |   442c      	add	r4, r5
 8008dbe:	|           |   ea81 0603 	eor.w	r6, r1, r3
 8008dc2:	|           |   ea21 514c 	bic.w	r1, r1, r12, lsl #21
 8008dc6:	|           |   ea23 534c 	bic.w	r3, r3, r12, lsl #21
 8008dca:	|           |   ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008dce:	|           |   bf18      	it	ne
 8008dd0:	|           |   ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008dd4:	|           |   f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008dd8:	|           |   f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ddc:	|        /--|-- d038      	beq.n	8008e50 <TMP1075_get_high_limit+0xf6>
 8008dde:	|        |  |   fba0 ce02 	umull	r12, lr, r0, r2
 8008de2:	|        |  |   f04f 0500 	mov.w	r5, #0
 8008de6:	|        |  |   fbe1 e502 	umlal	lr, r5, r1, r2
 8008dea:	|        |  |   f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008dee:	|        |  |   fbe0 e503 	umlal	lr, r5, r0, r3
 8008df2:	|        |  |   f04f 0600 	mov.w	r6, #0
 8008df6:	|        |  |   fbe1 5603 	umlal	r5, r6, r1, r3
 8008dfa:	|        |      f09c 0f00 	teq	r12, #0
 8008dfe:	|        |      bf18      	it	ne
 8008e00:	|        |      f04e 0e01 	orrne.w	lr, lr, #1
 8008e04:	|        |      f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008e08:	|        |      f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008e0c:	|        |      f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008e10:	|        |  /-- d204      	bcs.n	8008e1c <TMP1075_get_high_limit+0xc2>
 8008e12:	|        |  |   ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008e16:	|        |  |   416d      	adcs	r5, r5
 8008e18:	|        |  |   eb46 0606 	adc.w	r6, r6, r6
 8008e1c:	|        |  \-> ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008e20:	|        |      ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008e24:	|        |      ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008e28:	|        |      ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008e2c:	|        |      ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008e30:	|        |      f1b4 0cfd 	subs.w	r12, r4, #253	; 0xfd
 8008e34:	|        |      bf88      	it	hi
 8008e36:	|        |      f5bc 6fe0 	cmphi.w	r12, #1792	; 0x700
 8008e3a:	|        |  /-- d81e      	bhi.n	8008e7a <TMP1075_get_high_limit+0x120>
 8008e3c:	|        |  |   f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008e40:	|        |  |   bf08      	it	eq
 8008e42:	|        |  |   ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008e46:	|        |  |   f150 0000 	adcs.w	r0, r0, #0
 8008e4a:	|        |  |   eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008e4e:	|        |  |   bd70      	pop	{r4, r5, r6, pc}
 8008e50:	|        \--|-> f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008e54:	|           |   ea46 0101 	orr.w	r1, r6, r1
 8008e58:	|           |   ea40 0002 	orr.w	r0, r0, r2
 8008e5c:	|           |   ea81 0103 	eor.w	r1, r1, r3
 8008e60:	|           |   ebb4 045c 	subs.w	r4, r4, r12, lsr #1
 8008e64:	|           |   bfc2      	ittt	gt
 8008e66:	|           |   ebd4 050c 	rsbsgt	r5, r4, r12
 8008e6a:	|           |   ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008e6e:	|           |   bd70      	popgt	{r4, r5, r6, pc}
 8008e70:	|           |   f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008e74:	|           |   f04f 0e00 	mov.w	lr, #0
 8008e78:	|           |   3c01      	subs	r4, #1
 8008e7a:	|  /--------\-X f300 80ab 	bgt.w	8008fd4 <TMP1075_get_high_limit+0x27a>
 8008e7e:	|  |            f114 0f36 	cmn.w	r4, #54	; 0x36
 8008e82:	|  |            bfde      	ittt	le
 8008e84:	|  |            2000      	movle	r0, #0
 8008e86:	|  |            f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008e8a:	|  |            bd70      	pople	{r4, r5, r6, pc}
 8008e8c:	|  |            f1c4 0400 	rsb	r4, r4, #0
 8008e90:	|  |            3c20      	subs	r4, #32
 8008e92:	|  |     /----- da35      	bge.n	8008f00 <TMP1075_get_high_limit+0x1a6>
 8008e94:	|  |     |      340c      	adds	r4, #12
 8008e96:	|  |     |  /-- dc1b      	bgt.n	8008ed0 <TMP1075_get_high_limit+0x176>
 8008e98:	|  |     |  |   f104 0414 	add.w	r4, r4, #20
 8008e9c:	|  |     |  |   f1c4 0520 	rsb	r5, r4, #32
 8008ea0:	|  |     |  |   fa00 f305 	lsl.w	r3, r0, r5
 8008ea4:	|  |     |  |   fa20 f004 	lsr.w	r0, r0, r4
 8008ea8:	|  |     |  |   fa01 f205 	lsl.w	r2, r1, r5
 8008eac:	|  |     |  |   ea40 0002 	orr.w	r0, r0, r2
 8008eb0:	|  |     |  |   f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008eb4:	|  |     |  |   f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008eb8:	|  |     |  |   eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008ebc:	|  |     |  |   fa21 f604 	lsr.w	r6, r1, r4
 8008ec0:	|  |     |  |   eb42 0106 	adc.w	r1, r2, r6
 8008ec4:	|  |     |  |   ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008ec8:	|  |     |  |   bf08      	it	eq
 8008eca:	|  |     |  |   ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008ece:	|  |     |  |   bd70      	pop	{r4, r5, r6, pc}
 8008ed0:	|  |     |  \-> f1c4 040c 	rsb	r4, r4, #12
 8008ed4:	|  |     |      f1c4 0520 	rsb	r5, r4, #32
 8008ed8:	|  |     |      fa00 f304 	lsl.w	r3, r0, r4
 8008edc:	|  |     |      fa20 f005 	lsr.w	r0, r0, r5
 8008ee0:	|  |     |      fa01 f204 	lsl.w	r2, r1, r4
 8008ee4:	|  |     |      ea40 0002 	orr.w	r0, r0, r2
 8008ee8:	|  |     |      f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008eec:	|  |     |      eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008ef0:	|  |     |      f141 0100 	adc.w	r1, r1, #0
 8008ef4:	|  |     |      ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008ef8:	|  |     |      bf08      	it	eq
 8008efa:	|  |     |      ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008efe:	|  |     |      bd70      	pop	{r4, r5, r6, pc}
 8008f00:	|  |     \----> f1c4 0520 	rsb	r5, r4, #32
 8008f04:	|  |            fa00 f205 	lsl.w	r2, r0, r5
 8008f08:	|  |            ea4e 0e02 	orr.w	lr, lr, r2
 8008f0c:	|  |            fa20 f304 	lsr.w	r3, r0, r4
 8008f10:	|  |            fa01 f205 	lsl.w	r2, r1, r5
 8008f14:	|  |            ea43 0302 	orr.w	r3, r3, r2
 8008f18:	|  |            fa21 f004 	lsr.w	r0, r1, r4
 8008f1c:	|  |            f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008f20:	|  |            fa21 f204 	lsr.w	r2, r1, r4
 8008f24:	|  |            ea20 0002 	bic.w	r0, r0, r2
 8008f28:	|  |            eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008f2c:	|  |            ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008f30:	|  |            bf08      	it	eq
 8008f32:	|  |            ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008f36:	|  |            bd70      	pop	{r4, r5, r6, pc}
 8008f38:	|  |  /-------> f094 0f00 	teq	r4, #0
 8008f3c:	|  |  |  /----- d10f      	bne.n	8008f5e <TMP1075_get_high_limit+0x204>
 8008f3e:	|  |  |  |      f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008f42:	|  |  |  |  /-> 0040      	lsls	r0, r0, #1
 8008f44:	|  |  |  |  |   eb41 0101 	adc.w	r1, r1, r1
 8008f48:	|  |  |  |  |   f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008f4c:	|  |  |  |  |   bf08      	it	eq
 8008f4e:	|  |  |  |  |   3c01      	subeq	r4, #1
 8008f50:	|  |  |  |  \-- d0f7      	beq.n	8008f42 <TMP1075_get_high_limit+0x1e8>
 8008f52:	|  |  |  |      ea41 0106 	orr.w	r1, r1, r6
 8008f56:	|  |  |  |      f095 0f00 	teq	r5, #0
 8008f5a:	|  |  |  |      bf18      	it	ne
 8008f5c:	|  |  |  |      4770      	bxne	lr
 8008f5e:	|  |  |  \----> f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008f62:	|  |  |     /-> 0052      	lsls	r2, r2, #1
 8008f64:	|  |  |     |   eb43 0303 	adc.w	r3, r3, r3
 8008f68:	|  |  |     |   f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008f6c:	|  |  |     |   bf08      	it	eq
 8008f6e:	|  |  |     |   3d01      	subeq	r5, #1
 8008f70:	|  |  |     \-- d0f7      	beq.n	8008f62 <TMP1075_get_high_limit+0x208>
 8008f72:	|  |  |         ea43 0306 	orr.w	r3, r3, r6
 8008f76:	|  |  |         4770      	bx	lr
 8008f78:	\--|--|-------> ea94 0f0c 	teq	r4, r12
 8008f7c:	   |  |         ea0c 5513 	and.w	r5, r12, r3, lsr #20
 8008f80:	   |  |         bf18      	it	ne
 8008f82:	   |  |         ea95 0f0c 	teqne	r5, r12
 8008f86:	   |  |     /-- d00c      	beq.n	8008fa2 <TMP1075_get_high_limit+0x248>
 8008f88:	   |  |     |   ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008f8c:	   |  |     |   bf18      	it	ne
 8008f8e:	   |  |     |   ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008f92:	   |  \-----|-- d1d1      	bne.n	8008f38 <TMP1075_get_high_limit+0x1de>
 8008f94:	   |        |   ea81 0103 	eor.w	r1, r1, r3
 8008f98:	   |        |   f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008f9c:	   |        |   f04f 0000 	mov.w	r0, #0
 8008fa0:	   |        |   bd70      	pop	{r4, r5, r6, pc}
 8008fa2:	   |        \-> ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008fa6:	   |            bf06      	itte	eq
 8008fa8:	   |            4610      	moveq	r0, r2
 8008faa:	   |            4619      	moveq	r1, r3
 8008fac:	   |            ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008fb0:	   |     /----- d019      	beq.n	8008fe6 <TMP1075_get_high_limit+0x28c>
 8008fb2:	   |     |      ea94 0f0c 	teq	r4, r12
 8008fb6:	   |     |  /-- d102      	bne.n	8008fbe <TMP1075_get_high_limit+0x264>
 8008fb8:	   |     |  |   ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008fbc:	   |     +--|-- d113      	bne.n	8008fe6 <TMP1075_get_high_limit+0x28c>
 8008fbe:	   |     |  \-> ea95 0f0c 	teq	r5, r12
 8008fc2:	   |     |  /-- d105      	bne.n	8008fd0 <TMP1075_get_high_limit+0x276>
 8008fc4:	   |     |  |   ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008fc8:	   |     |  |   bf1c      	itt	ne
 8008fca:	   |     |  |   4610      	movne	r0, r2
 8008fcc:	   |     |  |   4619      	movne	r1, r3
 8008fce:	   |     +--|-- d10a      	bne.n	8008fe6 <TMP1075_get_high_limit+0x28c>
 8008fd0:	   |     |  \-> ea81 0103 	eor.w	r1, r1, r3
 8008fd4:	   \-----|----> f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008fd8:	         |      f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008fdc:	         |      f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008fe0:	         |      f04f 0000 	mov.w	r0, #0
 8008fe4:	         |      bd70      	pop	{r4, r5, r6, pc}
 8008fe6:	         \----> f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008fea:	                f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008fee:	                bd70      	pop	{r4, r5, r6, pc}

08008ff0 <__aeabi_drsub>:
 8008ff0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008ff4:	e002      	b.n	8008ffc <__adddf3>
 8008ff6:	bf00      	nop

08008ff8 <__aeabi_dsub>:
 8008ff8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008ffc <__adddf3>:
 8008ffc:	                      b530      	push	{r4, r5, lr}
 8008ffe:	                      ea4f 0441 	mov.w	r4, r1, lsl #1
 8009002:	                      ea4f 0543 	mov.w	r5, r3, lsl #1
 8009006:	                      ea94 0f05 	teq	r4, r5
 800900a:	                      bf08      	it	eq
 800900c:	                      ea90 0f02 	teqeq	r0, r2
 8009010:	                      bf1f      	itttt	ne
 8009012:	                      ea54 0c00 	orrsne.w	r12, r4, r0
 8009016:	                      ea55 0c02 	orrsne.w	r12, r5, r2
 800901a:	                      ea7f 5c64 	mvnsne.w	r12, r4, asr #21
 800901e:	                      ea7f 5c65 	mvnsne.w	r12, r5, asr #21
 8009022:	/-------------------- f000 80e2 	beq.w	80091ea <__adddf3+0x1ee>
 8009026:	|                     ea4f 5454 	mov.w	r4, r4, lsr #21
 800902a:	|                     ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800902e:	|                     bfb8      	it	lt
 8009030:	|                     426d      	neglt	r5, r5
 8009032:	|                 /-- dd0c      	ble.n	800904e <__adddf3+0x52>
 8009034:	|                 |   442c      	add	r4, r5
 8009036:	|                 |   ea80 0202 	eor.w	r2, r0, r2
 800903a:	|                 |   ea81 0303 	eor.w	r3, r1, r3
 800903e:	|                 |   ea82 0000 	eor.w	r0, r2, r0
 8009042:	|                 |   ea83 0101 	eor.w	r1, r3, r1
 8009046:	|                 |   ea80 0202 	eor.w	r2, r0, r2
 800904a:	|                 |   ea81 0303 	eor.w	r3, r1, r3
 800904e:	|                 \-> 2d36      	cmp	r5, #54	; 0x36
 8009050:	|                     bf88      	it	hi
 8009052:	|                     bd30      	pophi	{r4, r5, pc}
 8009054:	|                     f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8009058:	|                     ea4f 3101 	mov.w	r1, r1, lsl #12
 800905c:	|                     f44f 1c80 	mov.w	r12, #1048576	; 0x100000
 8009060:	|                     ea4c 3111 	orr.w	r1, r12, r1, lsr #12
 8009064:	|                 /-- d002      	beq.n	800906c <__adddf3+0x70>
 8009066:	|                 |   4240      	negs	r0, r0
 8009068:	|                 |   eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800906c:	|                 \-> f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8009070:	|                     ea4f 3303 	mov.w	r3, r3, lsl #12
 8009074:	|                     ea4c 3313 	orr.w	r3, r12, r3, lsr #12
 8009078:	|                 /-- d002      	beq.n	8009080 <__adddf3+0x84>
 800907a:	|                 |   4252      	negs	r2, r2
 800907c:	|                 |   eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8009080:	|                 \-> ea94 0f05 	teq	r4, r5
 8009084:	|     /-------------- f000 80a7 	beq.w	80091d6 <__adddf3+0x1da>
 8009088:	|  /--|-------------> f1a4 0401 	sub.w	r4, r4, #1
 800908c:	|  |  |               f1d5 0e20 	rsbs	lr, r5, #32
 8009090:	|  |  |           /-- db0d      	blt.n	80090ae <__adddf3+0xb2>
 8009092:	|  |  |           |   fa02 fc0e 	lsl.w	r12, r2, lr
 8009096:	|  |  |           |   fa22 f205 	lsr.w	r2, r2, r5
 800909a:	|  |  |           |   1880      	adds	r0, r0, r2
 800909c:	|  |  |           |   f141 0100 	adc.w	r1, r1, #0
 80090a0:	|  |  |           |   fa03 f20e 	lsl.w	r2, r3, lr
 80090a4:	|  |  |           |   1880      	adds	r0, r0, r2
 80090a6:	|  |  |           |   fa43 f305 	asr.w	r3, r3, r5
 80090aa:	|  |  |           |   4159      	adcs	r1, r3
 80090ac:	|  |  |        /--|-- e00e      	b.n	80090cc <__adddf3+0xd0>
 80090ae:	|  |  |        |  \-> f1a5 0520 	sub.w	r5, r5, #32
 80090b2:	|  |  |        |      f10e 0e20 	add.w	lr, lr, #32
 80090b6:	|  |  |        |      2a01      	cmp	r2, #1
 80090b8:	|  |  |        |      fa03 fc0e 	lsl.w	r12, r3, lr
 80090bc:	|  |  |        |      bf28      	it	cs
 80090be:	|  |  |        |      f04c 0c02 	orrcs.w	r12, r12, #2
 80090c2:	|  |  |        |      fa43 f305 	asr.w	r3, r3, r5
 80090c6:	|  |  |        |      18c0      	adds	r0, r0, r3
 80090c8:	|  |  |        |      eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80090cc:	|  |  |        \----> f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80090d0:	|  |  |           /-- d507      	bpl.n	80090e2 <__adddf3+0xe6>
 80090d2:	|  |  |           |   f04f 0e00 	mov.w	lr, #0
 80090d6:	|  |  |           |   f1dc 0c00 	rsbs	r12, r12, #0
 80090da:	|  |  |           |   eb7e 0000 	sbcs.w	r0, lr, r0
 80090de:	|  |  |           |   eb6e 0101 	sbc.w	r1, lr, r1
 80090e2:	|  |  |           \-> f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80090e6:	|  |  |           /-- d31b      	bcc.n	8009120 <__adddf3+0x124>
 80090e8:	|  |  |           |   f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80090ec:	|  |  |        /--|-- d30c      	bcc.n	8009108 <__adddf3+0x10c>
 80090ee:	|  |  |        |  |   0849      	lsrs	r1, r1, #1
 80090f0:	|  |  |        |  |   ea5f 0030 	movs.w	r0, r0, rrx
 80090f4:	|  |  |        |  |   ea4f 0c3c 	mov.w	r12, r12, rrx
 80090f8:	|  |  |        |  |   f104 0401 	add.w	r4, r4, #1
 80090fc:	|  |  |        |  |   ea4f 5244 	mov.w	r2, r4, lsl #21
 8009100:	|  |  |        |  |   f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8009104:	|  |  |  /-----|--|-- f080 809a 	bcs.w	800923c <__adddf3+0x240>
 8009108:	|  |  |  |     >--|-> f1bc 4f00 	cmp.w	r12, #2147483648	; 0x80000000
 800910c:	|  |  |  |     |  |   bf08      	it	eq
 800910e:	|  |  |  |     |  |   ea5f 0c50 	movseq.w	r12, r0, lsr #1
 8009112:	|  |  |  |     |  |   f150 0000 	adcs.w	r0, r0, #0
 8009116:	|  |  |  |     |  |   eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800911a:	|  |  |  |     |  |   ea41 0105 	orr.w	r1, r1, r5
 800911e:	|  |  |  |     |  |   bd30      	pop	{r4, r5, pc}
 8009120:	|  |  |  |     |  \-> ea5f 0c4c 	movs.w	r12, r12, lsl #1
 8009124:	|  |  |  |     |      4140      	adcs	r0, r0
 8009126:	|  |  |  |     |      eb41 0101 	adc.w	r1, r1, r1
 800912a:	|  |  |  |     |      3c01      	subs	r4, #1
 800912c:	|  |  |  |     |      bf28      	it	cs
 800912e:	|  |  |  |     |      f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8009132:	|  |  |  |     \----- d2e9      	bcs.n	8009108 <__adddf3+0x10c>
 8009134:	|  |  |  |            f091 0f00 	teq	r1, #0
 8009138:	|  |  |  |            bf04      	itt	eq
 800913a:	|  |  |  |            4601      	moveq	r1, r0
 800913c:	|  |  |  |            2000      	moveq	r0, #0
 800913e:	|  |  |  |            fab1 f381 	clz	r3, r1
 8009142:	|  |  |  |            bf08      	it	eq
 8009144:	|  |  |  |            3320      	addeq	r3, #32
 8009146:	|  |  |  |            f1a3 030b 	sub.w	r3, r3, #11
 800914a:	|  |  |  |            f1b3 0220 	subs.w	r2, r3, #32
 800914e:	|  |  |  |     /----- da0c      	bge.n	800916a <__adddf3+0x16e>
 8009150:	|  |  |  |     |      320c      	adds	r2, #12
 8009152:	|  |  |  |     |  /-- dd08      	ble.n	8009166 <__adddf3+0x16a>
 8009154:	|  |  |  |     |  |   f102 0c14 	add.w	r12, r2, #20
 8009158:	|  |  |  |     |  |   f1c2 020c 	rsb	r2, r2, #12
 800915c:	|  |  |  |     |  |   fa01 f00c 	lsl.w	r0, r1, r12
 8009160:	|  |  |  |     |  |   fa21 f102 	lsr.w	r1, r1, r2
 8009164:	|  |  |  |  /--|--|-- e00c      	b.n	8009180 <__adddf3+0x184>
 8009166:	|  |  |  |  |  |  \-> f102 0214 	add.w	r2, r2, #20
 800916a:	|  |  |  |  |  \----> bfd8      	it	le
 800916c:	|  |  |  |  |         f1c2 0c20 	rsble	r12, r2, #32
 8009170:	|  |  |  |  |         fa01 f102 	lsl.w	r1, r1, r2
 8009174:	|  |  |  |  |         fa20 fc0c 	lsr.w	r12, r0, r12
 8009178:	|  |  |  |  |         bfdc      	itt	le
 800917a:	|  |  |  |  |         ea41 010c 	orrle.w	r1, r1, r12
 800917e:	|  |  |  |  |         4090      	lslle	r0, r2
 8009180:	|  |  |  |  \-------> 1ae4      	subs	r4, r4, r3
 8009182:	|  |  |  |            bfa2      	ittt	ge
 8009184:	|  |  |  |            eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8009188:	|  |  |  |            4329      	orrge	r1, r5
 800918a:	|  |  |  |            bd30      	popge	{r4, r5, pc}
 800918c:	|  |  |  |            ea6f 0404 	mvn.w	r4, r4
 8009190:	|  |  |  |            3c1f      	subs	r4, #31
 8009192:	|  |  |  |     /----- da1c      	bge.n	80091ce <__adddf3+0x1d2>
 8009194:	|  |  |  |     |      340c      	adds	r4, #12
 8009196:	|  |  |  |     |  /-- dc0e      	bgt.n	80091b6 <__adddf3+0x1ba>
 8009198:	|  |  |  |     |  |   f104 0414 	add.w	r4, r4, #20
 800919c:	|  |  |  |     |  |   f1c4 0220 	rsb	r2, r4, #32
 80091a0:	|  |  |  |     |  |   fa20 f004 	lsr.w	r0, r0, r4
 80091a4:	|  |  |  |     |  |   fa01 f302 	lsl.w	r3, r1, r2
 80091a8:	|  |  |  |     |  |   ea40 0003 	orr.w	r0, r0, r3
 80091ac:	|  |  |  |     |  |   fa21 f304 	lsr.w	r3, r1, r4
 80091b0:	|  |  |  |     |  |   ea45 0103 	orr.w	r1, r5, r3
 80091b4:	|  |  |  |     |  |   bd30      	pop	{r4, r5, pc}
 80091b6:	|  |  |  |     |  \-> f1c4 040c 	rsb	r4, r4, #12
 80091ba:	|  |  |  |     |      f1c4 0220 	rsb	r2, r4, #32
 80091be:	|  |  |  |     |      fa20 f002 	lsr.w	r0, r0, r2
 80091c2:	|  |  |  |     |      fa01 f304 	lsl.w	r3, r1, r4
 80091c6:	|  |  |  |     |      ea40 0003 	orr.w	r0, r0, r3
 80091ca:	|  |  |  |     |      4629      	mov	r1, r5
 80091cc:	|  |  |  |     |      bd30      	pop	{r4, r5, pc}
 80091ce:	|  |  |  |     \----> fa21 f004 	lsr.w	r0, r1, r4
 80091d2:	|  |  |  |            4629      	mov	r1, r5
 80091d4:	|  |  |  |            bd30      	pop	{r4, r5, pc}
 80091d6:	|  |  \--|----------> f094 0f00 	teq	r4, #0
 80091da:	|  |     |            f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80091de:	|  |     |            bf06      	itte	eq
 80091e0:	|  |     |            f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80091e4:	|  |     |            3401      	addeq	r4, #1
 80091e6:	|  |     |            3d01      	subne	r5, #1
 80091e8:	|  \-----|----------- e74e      	b.n	8009088 <__adddf3+0x8c>
 80091ea:	\--------|----------> ea7f 5c64 	mvns.w	r12, r4, asr #21
 80091ee:	         |            bf18      	it	ne
 80091f0:	         |            ea7f 5c65 	mvnsne.w	r12, r5, asr #21
 80091f4:	         |     /----- d029      	beq.n	800924a <__adddf3+0x24e>
 80091f6:	         |     |      ea94 0f05 	teq	r4, r5
 80091fa:	         |     |      bf08      	it	eq
 80091fc:	         |     |      ea90 0f02 	teqeq	r0, r2
 8009200:	         |     |  /-- d005      	beq.n	800920e <__adddf3+0x212>
 8009202:	         |     |  |   ea54 0c00 	orrs.w	r12, r4, r0
 8009206:	         |     |  |   bf04      	itt	eq
 8009208:	         |     |  |   4619      	moveq	r1, r3
 800920a:	         |     |  |   4610      	moveq	r0, r2
 800920c:	         |     |  |   bd30      	pop	{r4, r5, pc}
 800920e:	         |     |  \-> ea91 0f03 	teq	r1, r3
 8009212:	         |     |      bf1e      	ittt	ne
 8009214:	         |     |      2100      	movne	r1, #0
 8009216:	         |     |      2000      	movne	r0, #0
 8009218:	         |     |      bd30      	popne	{r4, r5, pc}
 800921a:	         |     |      ea5f 5c54 	movs.w	r12, r4, lsr #21
 800921e:	         |     |  /-- d105      	bne.n	800922c <__adddf3+0x230>
 8009220:	         |     |  |   0040      	lsls	r0, r0, #1
 8009222:	         |     |  |   4149      	adcs	r1, r1
 8009224:	         |     |  |   bf28      	it	cs
 8009226:	         |     |  |   f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800922a:	         |     |  |   bd30      	pop	{r4, r5, pc}
 800922c:	         |     |  \-> f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8009230:	         |     |      bf3c      	itt	cc
 8009232:	         |     |      f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8009236:	         |     |      bd30      	popcc	{r4, r5, pc}
 8009238:	         |     |      f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800923c:	         \-----|----> f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8009240:	               |      f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009244:	               |      f04f 0000 	mov.w	r0, #0
 8009248:	               |      bd30      	pop	{r4, r5, pc}
 800924a:	               \----> ea7f 5c64 	mvns.w	r12, r4, asr #21
 800924e:	                      bf1a      	itte	ne
 8009250:	                      4619      	movne	r1, r3
 8009252:	                      4610      	movne	r0, r2
 8009254:	                      ea7f 5c65 	mvnseq.w	r12, r5, asr #21
 8009258:	                      bf1c      	itt	ne
 800925a:	                      460b      	movne	r3, r1
 800925c:	                      4602      	movne	r2, r0
 800925e:	                      ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8009262:	                      bf06      	itte	eq
 8009264:	                      ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8009268:	                      ea91 0f03 	teqeq	r1, r3
 800926c:	                      f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8009270:	                      bd30      	pop	{r4, r5, pc}
 8009272:	                      bf00      	nop

08009274 <__aeabi_ui2d>:
 8009274:	f090 0f00 	teq	r0, #0
 8009278:	bf04      	itt	eq
 800927a:	2100      	moveq	r1, #0
 800927c:	4770      	bxeq	lr
 800927e:	b530      	push	{r4, r5, lr}
 8009280:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009284:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8009288:	f04f 0500 	mov.w	r5, #0
 800928c:	f04f 0100 	mov.w	r1, #0
 8009290:	e750      	b.n	8009134 <__adddf3+0x138>
 8009292:	bf00      	nop

08009294 <__aeabi_i2d>:
 8009294:	f090 0f00 	teq	r0, #0
 8009298:	bf04      	itt	eq
 800929a:	2100      	moveq	r1, #0
 800929c:	4770      	bxeq	lr
 800929e:	b530      	push	{r4, r5, lr}
 80092a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80092a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80092a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80092ac:	bf48      	it	mi
 80092ae:	4240      	negmi	r0, r0
 80092b0:	f04f 0100 	mov.w	r1, #0
 80092b4:	e73e      	b.n	8009134 <__adddf3+0x138>
 80092b6:	bf00      	nop

080092b8 <__aeabi_f2d>:
 80092b8:	0042      	lsls	r2, r0, #1
 80092ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80092be:	ea4f 0131 	mov.w	r1, r1, rrx
 80092c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80092c6:	bf1f      	itttt	ne
 80092c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80092cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80092d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80092d4:	4770      	bxne	lr
 80092d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80092da:	bf08      	it	eq
 80092dc:	4770      	bxeq	lr
 80092de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80092e2:	bf04      	itt	eq
 80092e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80092e8:	4770      	bxeq	lr
 80092ea:	b530      	push	{r4, r5, lr}
 80092ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80092f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80092f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80092f8:	e71c      	b.n	8009134 <__adddf3+0x138>
 80092fa:	bf00      	nop

080092fc <__aeabi_ul2d>:
 80092fc:	ea50 0201 	orrs.w	r2, r0, r1
 8009300:	bf08      	it	eq
 8009302:	4770      	bxeq	lr
 8009304:	b530      	push	{r4, r5, lr}
 8009306:	f04f 0500 	mov.w	r5, #0
 800930a:	e00a      	b.n	8009322 <__aeabi_l2d+0x16>

0800930c <__aeabi_l2d>:
 800930c:	    ea50 0201 	orrs.w	r2, r0, r1
 8009310:	    bf08      	it	eq
 8009312:	    4770      	bxeq	lr
 8009314:	    b530      	push	{r4, r5, lr}
 8009316:	    f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800931a:	/-- d502      	bpl.n	8009322 <__aeabi_l2d+0x16>
 800931c:	|   4240      	negs	r0, r0
 800931e:	|   eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009322:	\-> f44f 6480 	mov.w	r4, #1024	; 0x400
 8009326:	    f104 0432 	add.w	r4, r4, #50	; 0x32
 800932a:	    ea5f 5c91 	movs.w	r12, r1, lsr #22
 800932e:	    f43f aed8 	beq.w	80090e2 <__adddf3+0xe6>
 8009332:	    f04f 0203 	mov.w	r2, #3
 8009336:	    ea5f 0cdc 	movs.w	r12, r12, lsr #3
 800933a:	    bf18      	it	ne
 800933c:	    3203      	addne	r2, #3
 800933e:	    ea5f 0cdc 	movs.w	r12, r12, lsr #3
 8009342:	    bf18      	it	ne
 8009344:	    3203      	addne	r2, #3
 8009346:	    eb02 02dc 	add.w	r2, r2, r12, lsr #3
 800934a:	    f1c2 0320 	rsb	r3, r2, #32
 800934e:	    fa00 fc03 	lsl.w	r12, r0, r3
 8009352:	    fa20 f002 	lsr.w	r0, r0, r2
 8009356:	    fa01 fe03 	lsl.w	lr, r1, r3
 800935a:	    ea40 000e 	orr.w	r0, r0, lr
 800935e:	    fa21 f102 	lsr.w	r1, r1, r2
 8009362:	    4414      	add	r4, r2
 8009364:	    e6bd      	b.n	80090e2 <__adddf3+0xe6>
 8009366:	    bf00      	nop

08009368 <__aeabi_dmul>:
 8009368:	                b570      	push	{r4, r5, r6, lr}
 800936a:	                f04f 0cff 	mov.w	r12, #255	; 0xff
 800936e:	                f44c 6ce0 	orr.w	r12, r12, #1792	; 0x700
 8009372:	                ea1c 5411 	ands.w	r4, r12, r1, lsr #20
 8009376:	                bf1d      	ittte	ne
 8009378:	                ea1c 5513 	andsne.w	r5, r12, r3, lsr #20
 800937c:	                ea94 0f0c 	teqne	r4, r12
 8009380:	                ea95 0f0c 	teqne	r5, r12
 8009384:	/-------------- f000 f8de 	bleq	8009544 <__aeabi_dmul+0x1dc>
 8009388:	|               442c      	add	r4, r5
 800938a:	|               ea81 0603 	eor.w	r6, r1, r3
 800938e:	|               ea21 514c 	bic.w	r1, r1, r12, lsl #21
 8009392:	|               ea23 534c 	bic.w	r3, r3, r12, lsl #21
 8009396:	|               ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800939a:	|               bf18      	it	ne
 800939c:	|               ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80093a0:	|               f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80093a4:	|               f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093a8:	|        /----- d038      	beq.n	800941c <__aeabi_dmul+0xb4>
 80093aa:	|        |      fba0 ce02 	umull	r12, lr, r0, r2
 80093ae:	|        |      f04f 0500 	mov.w	r5, #0
 80093b2:	|        |      fbe1 e502 	umlal	lr, r5, r1, r2
 80093b6:	|        |      f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80093ba:	|        |      fbe0 e503 	umlal	lr, r5, r0, r3
 80093be:	|        |      f04f 0600 	mov.w	r6, #0
 80093c2:	|        |      fbe1 5603 	umlal	r5, r6, r1, r3
 80093c6:	|        |      f09c 0f00 	teq	r12, #0
 80093ca:	|        |      bf18      	it	ne
 80093cc:	|        |      f04e 0e01 	orrne.w	lr, lr, #1
 80093d0:	|        |      f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80093d4:	|        |      f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80093d8:	|        |      f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80093dc:	|        |  /-- d204      	bcs.n	80093e8 <__aeabi_dmul+0x80>
 80093de:	|        |  |   ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80093e2:	|        |  |   416d      	adcs	r5, r5
 80093e4:	|        |  |   eb46 0606 	adc.w	r6, r6, r6
 80093e8:	|        |  \-> ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80093ec:	|        |      ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80093f0:	|        |      ea4f 20c5 	mov.w	r0, r5, lsl #11
 80093f4:	|        |      ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80093f8:	|        |      ea4f 2ece 	mov.w	lr, lr, lsl #11
 80093fc:	|        |      f1b4 0cfd 	subs.w	r12, r4, #253	; 0xfd
 8009400:	|        |      bf88      	it	hi
 8009402:	|        |      f5bc 6fe0 	cmphi.w	r12, #1792	; 0x700
 8009406:	|        |  /-- d81e      	bhi.n	8009446 <__aeabi_dmul+0xde>
 8009408:	|        |  |   f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800940c:	|        |  |   bf08      	it	eq
 800940e:	|        |  |   ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8009412:	|        |  |   f150 0000 	adcs.w	r0, r0, #0
 8009416:	|        |  |   eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800941a:	|        |  |   bd70      	pop	{r4, r5, r6, pc}
 800941c:	|        \--|-> f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8009420:	|           |   ea46 0101 	orr.w	r1, r6, r1
 8009424:	|           |   ea40 0002 	orr.w	r0, r0, r2
 8009428:	|           |   ea81 0103 	eor.w	r1, r1, r3
 800942c:	|           |   ebb4 045c 	subs.w	r4, r4, r12, lsr #1
 8009430:	|           |   bfc2      	ittt	gt
 8009432:	|           |   ebd4 050c 	rsbsgt	r5, r4, r12
 8009436:	|           |   ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800943a:	|           |   bd70      	popgt	{r4, r5, r6, pc}
 800943c:	|           |   f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009440:	|           |   f04f 0e00 	mov.w	lr, #0
 8009444:	|           |   3c01      	subs	r4, #1
 8009446:	|  /--------\-X f300 80ab 	bgt.w	80095a0 <__aeabi_dmul+0x238>
 800944a:	|  |            f114 0f36 	cmn.w	r4, #54	; 0x36
 800944e:	|  |            bfde      	ittt	le
 8009450:	|  |            2000      	movle	r0, #0
 8009452:	|  |            f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8009456:	|  |            bd70      	pople	{r4, r5, r6, pc}
 8009458:	|  |            f1c4 0400 	rsb	r4, r4, #0
 800945c:	|  |            3c20      	subs	r4, #32
 800945e:	|  |     /----- da35      	bge.n	80094cc <__aeabi_dmul+0x164>
 8009460:	|  |     |      340c      	adds	r4, #12
 8009462:	|  |     |  /-- dc1b      	bgt.n	800949c <__aeabi_dmul+0x134>
 8009464:	|  |     |  |   f104 0414 	add.w	r4, r4, #20
 8009468:	|  |     |  |   f1c4 0520 	rsb	r5, r4, #32
 800946c:	|  |     |  |   fa00 f305 	lsl.w	r3, r0, r5
 8009470:	|  |     |  |   fa20 f004 	lsr.w	r0, r0, r4
 8009474:	|  |     |  |   fa01 f205 	lsl.w	r2, r1, r5
 8009478:	|  |     |  |   ea40 0002 	orr.w	r0, r0, r2
 800947c:	|  |     |  |   f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8009480:	|  |     |  |   f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009484:	|  |     |  |   eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8009488:	|  |     |  |   fa21 f604 	lsr.w	r6, r1, r4
 800948c:	|  |     |  |   eb42 0106 	adc.w	r1, r2, r6
 8009490:	|  |     |  |   ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009494:	|  |     |  |   bf08      	it	eq
 8009496:	|  |     |  |   ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800949a:	|  |     |  |   bd70      	pop	{r4, r5, r6, pc}
 800949c:	|  |     |  \-> f1c4 040c 	rsb	r4, r4, #12
 80094a0:	|  |     |      f1c4 0520 	rsb	r5, r4, #32
 80094a4:	|  |     |      fa00 f304 	lsl.w	r3, r0, r4
 80094a8:	|  |     |      fa20 f005 	lsr.w	r0, r0, r5
 80094ac:	|  |     |      fa01 f204 	lsl.w	r2, r1, r4
 80094b0:	|  |     |      ea40 0002 	orr.w	r0, r0, r2
 80094b4:	|  |     |      f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80094b8:	|  |     |      eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80094bc:	|  |     |      f141 0100 	adc.w	r1, r1, #0
 80094c0:	|  |     |      ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80094c4:	|  |     |      bf08      	it	eq
 80094c6:	|  |     |      ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80094ca:	|  |     |      bd70      	pop	{r4, r5, r6, pc}
 80094cc:	|  |     \----> f1c4 0520 	rsb	r5, r4, #32
 80094d0:	|  |            fa00 f205 	lsl.w	r2, r0, r5
 80094d4:	|  |            ea4e 0e02 	orr.w	lr, lr, r2
 80094d8:	|  |            fa20 f304 	lsr.w	r3, r0, r4
 80094dc:	|  |            fa01 f205 	lsl.w	r2, r1, r5
 80094e0:	|  |            ea43 0302 	orr.w	r3, r3, r2
 80094e4:	|  |            fa21 f004 	lsr.w	r0, r1, r4
 80094e8:	|  |            f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80094ec:	|  |            fa21 f204 	lsr.w	r2, r1, r4
 80094f0:	|  |            ea20 0002 	bic.w	r0, r0, r2
 80094f4:	|  |            eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80094f8:	|  |            ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80094fc:	|  |            bf08      	it	eq
 80094fe:	|  |            ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009502:	|  |            bd70      	pop	{r4, r5, r6, pc}
 8009504:	|  |  /-------> f094 0f00 	teq	r4, #0
 8009508:	|  |  |  /----- d10f      	bne.n	800952a <__aeabi_dmul+0x1c2>
 800950a:	|  |  |  |      f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800950e:	|  |  |  |  /-> 0040      	lsls	r0, r0, #1
 8009510:	|  |  |  |  |   eb41 0101 	adc.w	r1, r1, r1
 8009514:	|  |  |  |  |   f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009518:	|  |  |  |  |   bf08      	it	eq
 800951a:	|  |  |  |  |   3c01      	subeq	r4, #1
 800951c:	|  |  |  |  \-- d0f7      	beq.n	800950e <__aeabi_dmul+0x1a6>
 800951e:	|  |  |  |      ea41 0106 	orr.w	r1, r1, r6
 8009522:	|  |  |  |      f095 0f00 	teq	r5, #0
 8009526:	|  |  |  |      bf18      	it	ne
 8009528:	|  |  |  |      4770      	bxne	lr
 800952a:	|  |  |  \----> f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800952e:	|  |  |     /-> 0052      	lsls	r2, r2, #1
 8009530:	|  |  |     |   eb43 0303 	adc.w	r3, r3, r3
 8009534:	|  |  |     |   f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009538:	|  |  |     |   bf08      	it	eq
 800953a:	|  |  |     |   3d01      	subeq	r5, #1
 800953c:	|  |  |     \-- d0f7      	beq.n	800952e <__aeabi_dmul+0x1c6>
 800953e:	|  |  |         ea43 0306 	orr.w	r3, r3, r6
 8009542:	|  |  |         4770      	bx	lr
 8009544:	\--|--|-------> ea94 0f0c 	teq	r4, r12
 8009548:	   |  |         ea0c 5513 	and.w	r5, r12, r3, lsr #20
 800954c:	   |  |         bf18      	it	ne
 800954e:	   |  |         ea95 0f0c 	teqne	r5, r12
 8009552:	   |  |     /-- d00c      	beq.n	800956e <__aeabi_dmul+0x206>
 8009554:	   |  |     |   ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009558:	   |  |     |   bf18      	it	ne
 800955a:	   |  |     |   ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800955e:	   |  \-----|-- d1d1      	bne.n	8009504 <__aeabi_dmul+0x19c>
 8009560:	   |        |   ea81 0103 	eor.w	r1, r1, r3
 8009564:	   |        |   f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009568:	   |        |   f04f 0000 	mov.w	r0, #0
 800956c:	   |        |   bd70      	pop	{r4, r5, r6, pc}
 800956e:	   |        \-> ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009572:	   |            bf06      	itte	eq
 8009574:	   |            4610      	moveq	r0, r2
 8009576:	   |            4619      	moveq	r1, r3
 8009578:	   |            ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800957c:	   |     /----- d019      	beq.n	80095b2 <__aeabi_dmul+0x24a>
 800957e:	   |     |      ea94 0f0c 	teq	r4, r12
 8009582:	   |     |  /-- d102      	bne.n	800958a <__aeabi_dmul+0x222>
 8009584:	   |     |  |   ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8009588:	   |     +--|-- d113      	bne.n	80095b2 <__aeabi_dmul+0x24a>
 800958a:	   |     |  \-> ea95 0f0c 	teq	r5, r12
 800958e:	   |     |  /-- d105      	bne.n	800959c <__aeabi_dmul+0x234>
 8009590:	   |     |  |   ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8009594:	   |     |  |   bf1c      	itt	ne
 8009596:	   |     |  |   4610      	movne	r0, r2
 8009598:	   |     |  |   4619      	movne	r1, r3
 800959a:	   |     +--|-- d10a      	bne.n	80095b2 <__aeabi_dmul+0x24a>
 800959c:	   |     |  \-> ea81 0103 	eor.w	r1, r1, r3
 80095a0:	   \-----|----> f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80095a4:	         |      f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80095a8:	         |      f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80095ac:	         |      f04f 0000 	mov.w	r0, #0
 80095b0:	         |      bd70      	pop	{r4, r5, r6, pc}
 80095b2:	         \----> f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80095b6:	                f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80095ba:	                bd70      	pop	{r4, r5, r6, pc}

080095bc <__aeabi_ddiv>:
 80095bc:	                b570      	push	{r4, r5, r6, lr}
 80095be:	                f04f 0cff 	mov.w	r12, #255	; 0xff
 80095c2:	                f44c 6ce0 	orr.w	r12, r12, #1792	; 0x700
 80095c6:	                ea1c 5411 	ands.w	r4, r12, r1, lsr #20
 80095ca:	                bf1d      	ittte	ne
 80095cc:	                ea1c 5513 	andsne.w	r5, r12, r3, lsr #20
 80095d0:	                ea94 0f0c 	teqne	r4, r12
 80095d4:	                ea95 0f0c 	teqne	r5, r12
 80095d8:	/-------------- f000 f8a7 	bleq	800972a <__aeabi_ddiv+0x16e>
 80095dc:	|               eba4 0405 	sub.w	r4, r4, r5
 80095e0:	|               ea81 0e03 	eor.w	lr, r1, r3
 80095e4:	|               ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80095e8:	|               ea4f 3101 	mov.w	r1, r1, lsl #12
 80095ec:	|  /----------- f000 8088 	beq.w	8009700 <__aeabi_ddiv+0x144>
 80095f0:	|  |            ea4f 3303 	mov.w	r3, r3, lsl #12
 80095f4:	|  |            f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80095f8:	|  |            ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80095fc:	|  |            ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009600:	|  |            ea4f 2202 	mov.w	r2, r2, lsl #8
 8009604:	|  |            ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8009608:	|  |            ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800960c:	|  |            ea4f 2600 	mov.w	r6, r0, lsl #8
 8009610:	|  |            f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8009614:	|  |            429d      	cmp	r5, r3
 8009616:	|  |            bf08      	it	eq
 8009618:	|  |            4296      	cmpeq	r6, r2
 800961a:	|  |            f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800961e:	|  |            f504 7440 	add.w	r4, r4, #768	; 0x300
 8009622:	|  |        /-- d202      	bcs.n	800962a <__aeabi_ddiv+0x6e>
 8009624:	|  |        |   085b      	lsrs	r3, r3, #1
 8009626:	|  |        |   ea4f 0232 	mov.w	r2, r2, rrx
 800962a:	|  |        \-> 1ab6      	subs	r6, r6, r2
 800962c:	|  |            eb65 0503 	sbc.w	r5, r5, r3
 8009630:	|  |            085b      	lsrs	r3, r3, #1
 8009632:	|  |            ea4f 0232 	mov.w	r2, r2, rrx
 8009636:	|  |            f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800963a:	|  |            f44f 2c00 	mov.w	r12, #524288	; 0x80000
 800963e:	|  |  /-------> ebb6 0e02 	subs.w	lr, r6, r2
 8009642:	|  |  |         eb75 0e03 	sbcs.w	lr, r5, r3
 8009646:	|  |  |         bf22      	ittt	cs
 8009648:	|  |  |         1ab6      	subcs	r6, r6, r2
 800964a:	|  |  |         4675      	movcs	r5, lr
 800964c:	|  |  |         ea40 000c 	orrcs.w	r0, r0, r12
 8009650:	|  |  |         085b      	lsrs	r3, r3, #1
 8009652:	|  |  |         ea4f 0232 	mov.w	r2, r2, rrx
 8009656:	|  |  |         ebb6 0e02 	subs.w	lr, r6, r2
 800965a:	|  |  |         eb75 0e03 	sbcs.w	lr, r5, r3
 800965e:	|  |  |         bf22      	ittt	cs
 8009660:	|  |  |         1ab6      	subcs	r6, r6, r2
 8009662:	|  |  |         4675      	movcs	r5, lr
 8009664:	|  |  |         ea40 005c 	orrcs.w	r0, r0, r12, lsr #1
 8009668:	|  |  |         085b      	lsrs	r3, r3, #1
 800966a:	|  |  |         ea4f 0232 	mov.w	r2, r2, rrx
 800966e:	|  |  |         ebb6 0e02 	subs.w	lr, r6, r2
 8009672:	|  |  |         eb75 0e03 	sbcs.w	lr, r5, r3
 8009676:	|  |  |         bf22      	ittt	cs
 8009678:	|  |  |         1ab6      	subcs	r6, r6, r2
 800967a:	|  |  |         4675      	movcs	r5, lr
 800967c:	|  |  |         ea40 009c 	orrcs.w	r0, r0, r12, lsr #2
 8009680:	|  |  |         085b      	lsrs	r3, r3, #1
 8009682:	|  |  |         ea4f 0232 	mov.w	r2, r2, rrx
 8009686:	|  |  |         ebb6 0e02 	subs.w	lr, r6, r2
 800968a:	|  |  |         eb75 0e03 	sbcs.w	lr, r5, r3
 800968e:	|  |  |         bf22      	ittt	cs
 8009690:	|  |  |         1ab6      	subcs	r6, r6, r2
 8009692:	|  |  |         4675      	movcs	r5, lr
 8009694:	|  |  |         ea40 00dc 	orrcs.w	r0, r0, r12, lsr #3
 8009698:	|  |  |         ea55 0e06 	orrs.w	lr, r5, r6
 800969c:	|  |  |  /----- d018      	beq.n	80096d0 <__aeabi_ddiv+0x114>
 800969e:	|  |  |  |      ea4f 1505 	mov.w	r5, r5, lsl #4
 80096a2:	|  |  |  |      ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80096a6:	|  |  |  |      ea4f 1606 	mov.w	r6, r6, lsl #4
 80096aa:	|  |  |  |      ea4f 03c3 	mov.w	r3, r3, lsl #3
 80096ae:	|  |  |  |      ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80096b2:	|  |  |  |      ea4f 02c2 	mov.w	r2, r2, lsl #3
 80096b6:	|  |  |  |      ea5f 1c1c 	movs.w	r12, r12, lsr #4
 80096ba:	|  |  +--|----- d1c0      	bne.n	800963e <__aeabi_ddiv+0x82>
 80096bc:	|  |  |  |      f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80096c0:	|  |  |  |  /-- d10b      	bne.n	80096da <__aeabi_ddiv+0x11e>
 80096c2:	|  |  |  |  |   ea41 0100 	orr.w	r1, r1, r0
 80096c6:	|  |  |  |  |   f04f 0000 	mov.w	r0, #0
 80096ca:	|  |  |  |  |   f04f 4c00 	mov.w	r12, #2147483648	; 0x80000000
 80096ce:	|  |  \--|--|-- e7b6      	b.n	800963e <__aeabi_ddiv+0x82>
 80096d0:	|  |     \--|-> f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80096d4:	|  |        |   bf04      	itt	eq
 80096d6:	|  |        |   4301      	orreq	r1, r0
 80096d8:	|  |        |   2000      	moveq	r0, #0
 80096da:	|  |        \-> f1b4 0cfd 	subs.w	r12, r4, #253	; 0xfd
 80096de:	|  |            bf88      	it	hi
 80096e0:	|  |            f5bc 6fe0 	cmphi.w	r12, #1792	; 0x700
 80096e4:	|  |            f63f aeaf 	bhi.w	8009446 <__aeabi_dmul+0xde>
 80096e8:	|  |            ebb5 0c03 	subs.w	r12, r5, r3
 80096ec:	|  |            bf04      	itt	eq
 80096ee:	|  |            ebb6 0c02 	subseq.w	r12, r6, r2
 80096f2:	|  |            ea5f 0c50 	movseq.w	r12, r0, lsr #1
 80096f6:	|  |            f150 0000 	adcs.w	r0, r0, #0
 80096fa:	|  |            eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80096fe:	|  |            bd70      	pop	{r4, r5, r6, pc}
 8009700:	|  \----------> f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8009704:	|               ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8009708:	|               eb14 045c 	adds.w	r4, r4, r12, lsr #1
 800970c:	|               bfc2      	ittt	gt
 800970e:	|               ebd4 050c 	rsbsgt	r5, r4, r12
 8009712:	|               ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8009716:	|               bd70      	popgt	{r4, r5, r6, pc}
 8009718:	|               f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800971c:	|               f04f 0e00 	mov.w	lr, #0
 8009720:	|               3c01      	subs	r4, #1
 8009722:	|               e690      	b.n	8009446 <__aeabi_dmul+0xde>
 8009724:	|               ea45 0e06 	orr.w	lr, r5, r6
 8009728:	|               e68d      	b.n	8009446 <__aeabi_dmul+0xde>
 800972a:	\-------------> ea0c 5513 	and.w	r5, r12, r3, lsr #20
 800972e:	                ea94 0f0c 	teq	r4, r12
 8009732:	                bf08      	it	eq
 8009734:	                ea95 0f0c 	teqeq	r5, r12
 8009738:	                f43f af3b 	beq.w	80095b2 <__aeabi_dmul+0x24a>
 800973c:	                ea94 0f0c 	teq	r4, r12
 8009740:	            /-- d10a      	bne.n	8009758 <__aeabi_ddiv+0x19c>
 8009742:	            |   ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8009746:	            |   f47f af34 	bne.w	80095b2 <__aeabi_dmul+0x24a>
 800974a:	            |   ea95 0f0c 	teq	r5, r12
 800974e:	            |   f47f af25 	bne.w	800959c <__aeabi_dmul+0x234>
 8009752:	            |   4610      	mov	r0, r2
 8009754:	            |   4619      	mov	r1, r3
 8009756:	            |   e72c      	b.n	80095b2 <__aeabi_dmul+0x24a>
 8009758:	            \-> ea95 0f0c 	teq	r5, r12
 800975c:	            /-- d106      	bne.n	800976c <__aeabi_ddiv+0x1b0>
 800975e:	            |   ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8009762:	            |   f43f aefd 	beq.w	8009560 <__aeabi_dmul+0x1f8>
 8009766:	            |   4610      	mov	r0, r2
 8009768:	            |   4619      	mov	r1, r3
 800976a:	            |   e722      	b.n	80095b2 <__aeabi_dmul+0x24a>
 800976c:	            \-> ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009770:	                bf18      	it	ne
 8009772:	                ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8009776:	                f47f aec5 	bne.w	8009504 <__aeabi_dmul+0x19c>
 800977a:	                ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800977e:	                f47f af0d 	bne.w	800959c <__aeabi_dmul+0x234>
 8009782:	                ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8009786:	                f47f aeeb 	bne.w	8009560 <__aeabi_dmul+0x1f8>
 800978a:	                e712      	b.n	80095b2 <__aeabi_dmul+0x24a>

0800978c <__aeabi_d2iz>:
 800978c:	          ea4f 0241 	mov.w	r2, r1, lsl #1
 8009790:	          f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8009794:	/-------- d215      	bcs.n	80097c2 <__aeabi_d2iz+0x36>
 8009796:	|     /-- d511      	bpl.n	80097bc <__aeabi_d2iz+0x30>
 8009798:	|     |   f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800979c:	|     |   ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80097a0:	|  /--|-- d912      	bls.n	80097c8 <__aeabi_d2iz+0x3c>
 80097a2:	|  |  |   ea4f 23c1 	mov.w	r3, r1, lsl #11
 80097a6:	|  |  |   f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097aa:	|  |  |   ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80097ae:	|  |  |   f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80097b2:	|  |  |   fa23 f002 	lsr.w	r0, r3, r2
 80097b6:	|  |  |   bf18      	it	ne
 80097b8:	|  |  |   4240      	negne	r0, r0
 80097ba:	|  |  |   4770      	bx	lr
 80097bc:	|  |  \-> f04f 0000 	mov.w	r0, #0
 80097c0:	|  |      4770      	bx	lr
 80097c2:	\--|----> ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80097c6:	   |  /-- d105      	bne.n	80097d4 <__aeabi_d2iz+0x48>
 80097c8:	   \--|-> f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80097cc:	      |   bf08      	it	eq
 80097ce:	      |   f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80097d2:	      |   4770      	bx	lr
 80097d4:	      \-> f04f 0000 	mov.w	r0, #0
 80097d8:	          4770      	bx	lr
 80097da:	          bf00      	nop

080097dc <__aeabi_d2uiz>:
 80097dc:	          004a      	lsls	r2, r1, #1
 80097de:	      /-- d211      	bcs.n	8009804 <__aeabi_d2uiz+0x28>
 80097e0:	      |   f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80097e4:	/-----|-- d211      	bcs.n	800980a <__aeabi_d2uiz+0x2e>
 80097e6:	|     +-- d50d      	bpl.n	8009804 <__aeabi_d2uiz+0x28>
 80097e8:	|     |   f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80097ec:	|     |   ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80097f0:	|  /--|-- d40e      	bmi.n	8009810 <__aeabi_d2uiz+0x34>
 80097f2:	|  |  |   ea4f 23c1 	mov.w	r3, r1, lsl #11
 80097f6:	|  |  |   f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097fa:	|  |  |   ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80097fe:	|  |  |   fa23 f002 	lsr.w	r0, r3, r2
 8009802:	|  |  |   4770      	bx	lr
 8009804:	|  |  \-> f04f 0000 	mov.w	r0, #0
 8009808:	|  |      4770      	bx	lr
 800980a:	\--|----> ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800980e:	   |  /-- d102      	bne.n	8009816 <__aeabi_d2uiz+0x3a>
 8009810:	   \--|-> f04f 30ff 	mov.w	r0, #4294967295
 8009814:	      |   4770      	bx	lr
 8009816:	      \-> f04f 0000 	mov.w	r0, #0
 800981a:	          4770      	bx	lr

0800981c <__aeabi_d2f>:
 800981c:	       ea4f 0241 	mov.w	r2, r1, lsl #1
 8009820:	       f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8009824:	       bf24      	itt	cs
 8009826:	       f5b3 1c00 	subscs.w	r12, r3, #2097152	; 0x200000
 800982a:	       f1dc 5cfe 	rsbscs	r12, r12, #532676608	; 0x1fc00000
 800982e:	   /-- d90d      	bls.n	800984c <__aeabi_d2f+0x30>
 8009830:	/--|-> f001 4c00 	and.w	r12, r1, #2147483648	; 0x80000000
 8009834:	|  |   ea4f 02c0 	mov.w	r2, r0, lsl #3
 8009838:	|  |   ea4c 7050 	orr.w	r0, r12, r0, lsr #29
 800983c:	|  |   f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8009840:	|  |   eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8009844:	|  |   bf08      	it	eq
 8009846:	|  |   f020 0001 	biceq.w	r0, r0, #1
 800984a:	|  |   4770      	bx	lr
 800984c:	|  \-> f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8009850:	|  /-- d121      	bne.n	8009896 <__aeabi_d2f+0x7a>
 8009852:	|  |   f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8009856:	|  |   bfbc      	itt	lt
 8009858:	|  |   f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800985c:	|  |   4770      	bxlt	lr
 800985e:	|  |   f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009862:	|  |   ea4f 5252 	mov.w	r2, r2, lsr #21
 8009866:	|  |   f1c2 0218 	rsb	r2, r2, #24
 800986a:	|  |   f1c2 0c20 	rsb	r12, r2, #32
 800986e:	|  |   fa10 f30c 	lsls.w	r3, r0, r12
 8009872:	|  |   fa20 f002 	lsr.w	r0, r0, r2
 8009876:	|  |   bf18      	it	ne
 8009878:	|  |   f040 0001 	orrne.w	r0, r0, #1
 800987c:	|  |   ea4f 23c1 	mov.w	r3, r1, lsl #11
 8009880:	|  |   ea4f 23d3 	mov.w	r3, r3, lsr #11
 8009884:	|  |   fa03 fc0c 	lsl.w	r12, r3, r12
 8009888:	|  |   ea40 000c 	orr.w	r0, r0, r12
 800988c:	|  |   fa23 f302 	lsr.w	r3, r3, r2
 8009890:	|  |   ea4f 0343 	mov.w	r3, r3, lsl #1
 8009894:	\--|-- e7cc      	b.n	8009830 <__aeabi_d2f+0x14>
 8009896:	   \-> ea7f 5362 	mvns.w	r3, r2, asr #21
 800989a:	   /-- d107      	bne.n	80098ac <__aeabi_d2f+0x90>
 800989c:	   |   ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80098a0:	   |   bf1e      	ittt	ne
 80098a2:	   |   f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80098a6:	   |   f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80098aa:	   |   4770      	bxne	lr
 80098ac:	   \-> f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80098b0:	       f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80098b4:	       f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80098b8:	       4770      	bx	lr
 80098ba:	       bf00      	nop

080098bc <strlen>:
 80098bc:	    4603      	mov	r3, r0
 80098be:	/-> f813 2b01 	ldrb.w	r2, [r3], #1
 80098c2:	|   2a00      	cmp	r2, #0
 80098c4:	\-- d1fb      	bne.n	80098be <strlen+0x2>
 80098c6:	    1a18      	subs	r0, r3, r0
 80098c8:	    3801      	subs	r0, #1
 80098ca:	    4770      	bx	lr
 80098cc:	    0000      	movs	r0, r0
	...

080098d0 <memchr>:
 80098d0:	                f001 01ff 	and.w	r1, r1, #255	; 0xff
 80098d4:	                2a10      	cmp	r2, #16
 80098d6:	   /----------- db2b      	blt.n	8009930 <memchr+0x60>
 80098d8:	   |            f010 0f07 	tst.w	r0, #7
 80098dc:	   |     /----- d008      	beq.n	80098f0 <memchr+0x20>
 80098de:	   |     |  /-> f810 3b01 	ldrb.w	r3, [r0], #1
 80098e2:	   |     |  |   3a01      	subs	r2, #1
 80098e4:	   |     |  |   428b      	cmp	r3, r1
 80098e6:	/--|-----|--|-- d02d      	beq.n	8009944 <memchr+0x74>
 80098e8:	|  |     |  |   f010 0f07 	tst.w	r0, #7
 80098ec:	|  |  /--|--|-- b342      	cbz	r2, 8009940 <memchr+0x70>
 80098ee:	|  |  |  |  \-- d1f6      	bne.n	80098de <memchr+0xe>
 80098f0:	|  |  |  \----> b4f0      	push	{r4, r5, r6, r7}
 80098f2:	|  |  |         ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80098f6:	|  |  |         ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80098fa:	|  |  |         f022 0407 	bic.w	r4, r2, #7
 80098fe:	|  |  |         f07f 0700 	mvns.w	r7, #0
 8009902:	|  |  |         2300      	movs	r3, #0
 8009904:	|  |  |     /-> e8f0 5602 	ldrd	r5, r6, [r0], #8
 8009908:	|  |  |     |   3c08      	subs	r4, #8
 800990a:	|  |  |     |   ea85 0501 	eor.w	r5, r5, r1
 800990e:	|  |  |     |   ea86 0601 	eor.w	r6, r6, r1
 8009912:	|  |  |     |   fa85 f547 	uadd8	r5, r5, r7
 8009916:	|  |  |     |   faa3 f587 	sel	r5, r3, r7
 800991a:	|  |  |     |   fa86 f647 	uadd8	r6, r6, r7
 800991e:	|  |  |     |   faa5 f687 	sel	r6, r5, r7
 8009922:	|  |  |  /--|-- b98e      	cbnz	r6, 8009948 <memchr+0x78>
 8009924:	|  |  |  |  \-- d1ee      	bne.n	8009904 <memchr+0x34>
 8009926:	|  |  |  |      bcf0      	pop	{r4, r5, r6, r7}
 8009928:	|  |  |  |      f001 01ff 	and.w	r1, r1, #255	; 0xff
 800992c:	|  |  |  |      f002 0207 	and.w	r2, r2, #7
 8009930:	|  \--+--|----X b132      	cbz	r2, 8009940 <memchr+0x70>
 8009932:	|     |  |  /-> f810 3b01 	ldrb.w	r3, [r0], #1
 8009936:	|     |  |  |   3a01      	subs	r2, #1
 8009938:	|     |  |  |   ea83 0301 	eor.w	r3, r3, r1
 800993c:	+-----|--|--|-- b113      	cbz	r3, 8009944 <memchr+0x74>
 800993e:	|     |  |  \-- d1f8      	bne.n	8009932 <memchr+0x62>
 8009940:	|     \--|----> 2000      	movs	r0, #0
 8009942:	|        |      4770      	bx	lr
 8009944:	\--------|----> 3801      	subs	r0, #1
 8009946:	         |      4770      	bx	lr
 8009948:	         \----> 2d00      	cmp	r5, #0
 800994a:	                bf06      	itte	eq
 800994c:	                4635      	moveq	r5, r6
 800994e:	                3803      	subeq	r0, #3
 8009950:	                3807      	subne	r0, #7
 8009952:	                f015 0f01 	tst.w	r5, #1
 8009956:	            /-- d107      	bne.n	8009968 <memchr+0x98>
 8009958:	            |   3001      	adds	r0, #1
 800995a:	            |   f415 7f80 	tst.w	r5, #256	; 0x100
 800995e:	            |   bf02      	ittt	eq
 8009960:	            |   3001      	addeq	r0, #1
 8009962:	            |   f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8009966:	            |   3001      	addeq	r0, #1
 8009968:	            \-> bcf0      	pop	{r4, r5, r6, r7}
 800996a:	                3801      	subs	r0, #1
 800996c:	                4770      	bx	lr
 800996e:	                bf00      	nop

08009970 <exit>:
 8009970:	    b508      	push	{r3, lr}
 8009972:	    4b07      	ldr	r3, [pc, #28]	; (8009990 <exit+0x20>)
 8009974:	    4604      	mov	r4, r0
 8009976:	/-- b113      	cbz	r3, 800997e <exit+0xe>
 8009978:	|   2100      	movs	r1, #0
 800997a:	|   f3af 8000 	nop.w
 800997e:	\-> 4b05      	ldr	r3, [pc, #20]	; (8009994 <exit+0x24>)
 8009980:	    6818      	ldr	r0, [r3, #0]
 8009982:	    6a83      	ldr	r3, [r0, #40]	; 0x28
 8009984:	/-- b103      	cbz	r3, 8009988 <exit+0x18>
 8009986:	|   4798      	blx	r3
 8009988:	\-> 4620      	mov	r0, r4
 800998a:	    f001 fa7f 	bl	800ae8c <_exit>
 800998e:	    bf00      	nop
 8009990:	    0000      	movs	r0, r0
 8009992:	    0000      	movs	r0, r0
 8009994:	    b21c      	sxth	r4, r3
 8009996:	    0800      	lsrs	r0, r0, #32

08009998 <__libc_init_array>:
 8009998:	             b570      	push	{r4, r5, r6, lr}
 800999a:	             4d0d      	ldr	r5, [pc, #52]	; (80099d0 <__libc_init_array+0x38>)
 800999c:	             4c0d      	ldr	r4, [pc, #52]	; (80099d4 <__libc_init_array+0x3c>)
 800999e:	             1b64      	subs	r4, r4, r5
 80099a0:	             10a4      	asrs	r4, r4, #2
 80099a2:	             2600      	movs	r6, #0
 80099a4:	/----------> 42a6      	cmp	r6, r4
 80099a6:	|     /----- d109      	bne.n	80099bc <__libc_init_array+0x24>
 80099a8:	|     |      4d0b      	ldr	r5, [pc, #44]	; (80099d8 <__libc_init_array+0x40>)
 80099aa:	|     |      4c0c      	ldr	r4, [pc, #48]	; (80099dc <__libc_init_array+0x44>)
 80099ac:	|     |      f001 fa72 	bl	800ae94 <_init>
 80099b0:	|     |      1b64      	subs	r4, r4, r5
 80099b2:	|     |      10a4      	asrs	r4, r4, #2
 80099b4:	|     |      2600      	movs	r6, #0
 80099b6:	|  /--|----> 42a6      	cmp	r6, r4
 80099b8:	|  |  |  /-- d105      	bne.n	80099c6 <__libc_init_array+0x2e>
 80099ba:	|  |  |  |   bd70      	pop	{r4, r5, r6, pc}
 80099bc:	|  |  \--|-> f855 3b04 	ldr.w	r3, [r5], #4
 80099c0:	|  |     |   4798      	blx	r3
 80099c2:	|  |     |   3601      	adds	r6, #1
 80099c4:	\--|-----|-- e7ee      	b.n	80099a4 <__libc_init_array+0xc>
 80099c6:	   |     \-> f855 3b04 	ldr.w	r3, [r5], #4
 80099ca:	   |         4798      	blx	r3
 80099cc:	   |         3601      	adds	r6, #1
 80099ce:	   \-------- e7f2      	b.n	80099b6 <__libc_init_array+0x1e>
 80099d0:	             b3a8      	cbz	r0, 8009a3e <LoopForever+0x18>
 80099d2:	             0800      	lsrs	r0, r0, #32
 80099d4:	             b3a8      	cbz	r0, 8009a42 <malloc+0x2>
 80099d6:	             0800      	lsrs	r0, r0, #32
 80099d8:	             b3a8      	cbz	r0, 8009a46 <malloc+0x6>
 80099da:	             0800      	lsrs	r0, r0, #32
 80099dc:	             b3ac      	cbz	r4, 8009a4a <malloc+0xa>
 80099de:	             0800      	lsrs	r0, r0, #32

080099e0 <memset>:
 80099e0:	       4402      	add	r2, r0
 80099e2:	       4603      	mov	r3, r0
 80099e4:	/----> 4293      	cmp	r3, r2
 80099e6:	|  /-- d100      	bne.n	80099ea <memset+0xa>
 80099e8:	|  |   4770      	bx	lr
 80099ea:	|  \-> f803 1b01 	strb.w	r1, [r3], #1
 80099ee:	\----- e7f9      	b.n	80099e4 <memset+0x4>

080099f0 <BusFault_Handler>:
/*	Default Handler*/
/*---------------------------------------------------------------------------------*/
	.section .text.Default_Handler,"ax",%progbits
Default_Handler:
	Infinite_Loop:
		b Infinite_Loop
 80099f0:	/-- e7fe      	b.n	80099f0 <BusFault_Handler>
	...

080099f4 <Reset_Handler>:
/*---------------------------------------------------------------------------------*/
	.section .text.Reset_Handler
	.weak Reset_Handler
	.type Reset_Handler, %function
Reset_Handler:
	ldr r0, =ENDRAM
 80099f4:	480c      	ldr	r0, [pc, #48]	; (8009a28 <LoopForever+0x2>)
	mov sp, r0
 80099f6:	4685      	mov	sp, r0

	ldr r0, =_sdata
 80099f8:	480c      	ldr	r0, [pc, #48]	; (8009a2c <LoopForever+0x6>)
	ldr r1, =_edata
 80099fa:	490d      	ldr	r1, [pc, #52]	; (8009a30 <LoopForever+0xa>)
	ldr r2, =_sidata
 80099fc:	4a0d      	ldr	r2, [pc, #52]	; (8009a34 <LoopForever+0xe>)
	movs r3, #0
 80099fe:	2300      	movs	r3, #0
	b LoopCopyDataInit
 8009a00:	e002      	b.n	8009a08 <LoopCopyDataInit>

08009a02 <CopyDataInit>:

CopyDataInit:
	ldr r4, [r2, r3]
 8009a02:	58d4      	ldr	r4, [r2, r3]
	str r4, [r0, r3]
 8009a04:	50c4      	str	r4, [r0, r3]
	adds r3, r3, #4
 8009a06:	3304      	adds	r3, #4

08009a08 <LoopCopyDataInit>:

LoopCopyDataInit:
	adds r4, r0, r3
 8009a08:	18c4      	adds	r4, r0, r3
	cmp r4, r1
 8009a0a:	428c      	cmp	r4, r1
	bcc CopyDataInit
 8009a0c:	d3f9      	bcc.n	8009a02 <CopyDataInit>

	ldr r2, =_sbss
 8009a0e:	4a0a      	ldr	r2, [pc, #40]	; (8009a38 <LoopForever+0x12>)
	ldr r4, =_ebss
 8009a10:	4c0a      	ldr	r4, [pc, #40]	; (8009a3c <LoopForever+0x16>)
	movs r3, #0
 8009a12:	2300      	movs	r3, #0
	b LoopFillZerobss
 8009a14:	e001      	b.n	8009a1a <LoopFillZerobss>

08009a16 <FillZerobss>:

FillZerobss:
	str  r3, [r2]
 8009a16:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 8009a18:	3204      	adds	r2, #4

08009a1a <LoopFillZerobss>:
LoopFillZerobss:
	cmp r2, r4
 8009a1a:	42a2      	cmp	r2, r4
	bcc FillZerobss
 8009a1c:	d3fb      	bcc.n	8009a16 <FillZerobss>

	bl __libc_init_array
 8009a1e:	f7ff ffbb 	bl	8009998 <__libc_init_array>
	bl main
 8009a22:	f7f7 fd8b 	bl	800153c <main>

08009a26 <LoopForever>:

LoopForever:	b LoopForever
 8009a26:	/-- e7fe      	b.n	8009a26 <LoopForever>
	ldr r0, =ENDRAM
 8009a28:	    c000      	stmia	r0!, {}
 8009a2a:	    2000      	movs	r0, #0
	ldr r0, =_sdata
 8009a2c:	    0000      	movs	r0, r0
 8009a2e:	    2000      	movs	r0, #0
	ldr r1, =_edata
 8009a30:	    084c      	lsrs	r4, r1, #1
 8009a32:	    2000      	movs	r0, #0
	ldr r2, =_sidata
 8009a34:	    b3b0      	cbz	r0, 8009aa4 <_free_r+0x28>
 8009a36:	    0800      	lsrs	r0, r0, #32
	ldr r2, =_sbss
 8009a38:	    0850      	lsrs	r0, r2, #1
 8009a3a:	    2000      	movs	r0, #0
	ldr r4, =_ebss
 8009a3c:	    5334      	strh	r4, [r6, r4]
 8009a3e:	    2000      	movs	r0, #0

08009a40 <malloc>:
 8009a40:	4b02      	ldr	r3, [pc, #8]	; (8009a4c <malloc+0xc>)
 8009a42:	4601      	mov	r1, r0
 8009a44:	6818      	ldr	r0, [r3, #0]
 8009a46:	f000 b865 	b.w	8009b14 <_malloc_r>
 8009a4a:	bf00      	nop
 8009a4c:	07e8      	lsls	r0, r5, #31
 8009a4e:	2000      	movs	r0, #0

08009a50 <free>:
 8009a50:	4b02      	ldr	r3, [pc, #8]	; (8009a5c <free+0xc>)
 8009a52:	4601      	mov	r1, r0
 8009a54:	6818      	ldr	r0, [r3, #0]
 8009a56:	f000 b811 	b.w	8009a7c <_free_r>
 8009a5a:	bf00      	nop
 8009a5c:	07e8      	lsls	r0, r5, #31
 8009a5e:	2000      	movs	r0, #0

08009a60 <memcpy>:
 8009a60:	    440a      	add	r2, r1
 8009a62:	    4291      	cmp	r1, r2
 8009a64:	    f100 33ff 	add.w	r3, r0, #4294967295
 8009a68:	/-- d100      	bne.n	8009a6c <memcpy+0xc>
 8009a6a:	|   4770      	bx	lr
 8009a6c:	\-> b510      	push	{r4, lr}
 8009a6e:	/-> f811 4b01 	ldrb.w	r4, [r1], #1
 8009a72:	|   f803 4f01 	strb.w	r4, [r3, #1]!
 8009a76:	|   4291      	cmp	r1, r2
 8009a78:	\-- d1f9      	bne.n	8009a6e <memcpy+0xe>
 8009a7a:	    bd10      	pop	{r4, pc}

08009a7c <_free_r>:
 8009a7c:	                b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a7e:	                2900      	cmp	r1, #0
 8009a80:	/-------------- d044      	beq.n	8009b0c <_free_r+0x90>
 8009a82:	|               f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a86:	|               9001      	str	r0, [sp, #4]
 8009a88:	|               2b00      	cmp	r3, #0
 8009a8a:	|               f1a1 0404 	sub.w	r4, r1, #4
 8009a8e:	|               bfb8      	it	lt
 8009a90:	|               18e4      	addlt	r4, r4, r3
 8009a92:	|               f000 f99b 	bl	8009dcc <__malloc_lock>
 8009a96:	|               4a1e      	ldr	r2, [pc, #120]	; (8009b10 <_free_r+0x94>)
 8009a98:	|               9801      	ldr	r0, [sp, #4]
 8009a9a:	|               6813      	ldr	r3, [r2, #0]
 8009a9c:	|           /-- b933      	cbnz	r3, 8009aac <_free_r+0x30>
 8009a9e:	|     /-----|-> 6063      	str	r3, [r4, #4]
 8009aa0:	|     |     |   6014      	str	r4, [r2, #0]
 8009aa2:	|  /--|-----|-> b003      	add	sp, #12
 8009aa4:	|  |  |     |   e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009aa8:	|  |  |     |   f000 b996 	b.w	8009dd8 <__malloc_unlock>
 8009aac:	|  |  |     \-> 42a3      	cmp	r3, r4
 8009aae:	|  |  |  /----- d908      	bls.n	8009ac2 <_free_r+0x46>
 8009ab0:	|  |  |  |      6825      	ldr	r5, [r4, #0]
 8009ab2:	|  |  |  |      1961      	adds	r1, r4, r5
 8009ab4:	|  |  |  |      428b      	cmp	r3, r1
 8009ab6:	|  |  |  |      bf01      	itttt	eq
 8009ab8:	|  |  |  |      6819      	ldreq	r1, [r3, #0]
 8009aba:	|  |  |  |      685b      	ldreq	r3, [r3, #4]
 8009abc:	|  |  |  |      1949      	addeq	r1, r1, r5
 8009abe:	|  |  |  |      6021      	streq	r1, [r4, #0]
 8009ac0:	|  |  \--|----- e7ed      	b.n	8009a9e <_free_r+0x22>
 8009ac2:	|  |     >----> 461a      	mov	r2, r3
 8009ac4:	|  |     |      685b      	ldr	r3, [r3, #4]
 8009ac6:	|  |     |  /-- b10b      	cbz	r3, 8009acc <_free_r+0x50>
 8009ac8:	|  |     |  |   42a3      	cmp	r3, r4
 8009aca:	|  |     \--|-- d9fa      	bls.n	8009ac2 <_free_r+0x46>
 8009acc:	|  |        \-> 6811      	ldr	r1, [r2, #0]
 8009ace:	|  |            1855      	adds	r5, r2, r1
 8009ad0:	|  |            42a5      	cmp	r5, r4
 8009ad2:	|  |     /----- d10b      	bne.n	8009aec <_free_r+0x70>
 8009ad4:	|  |     |      6824      	ldr	r4, [r4, #0]
 8009ad6:	|  |     |      4421      	add	r1, r4
 8009ad8:	|  |     |      1854      	adds	r4, r2, r1
 8009ada:	|  |     |      42a3      	cmp	r3, r4
 8009adc:	|  |     |      6011      	str	r1, [r2, #0]
 8009ade:	|  +-----|----- d1e0      	bne.n	8009aa2 <_free_r+0x26>
 8009ae0:	|  |     |      681c      	ldr	r4, [r3, #0]
 8009ae2:	|  |     |      685b      	ldr	r3, [r3, #4]
 8009ae4:	|  |     |      6053      	str	r3, [r2, #4]
 8009ae6:	|  |     |      4421      	add	r1, r4
 8009ae8:	|  |     |      6011      	str	r1, [r2, #0]
 8009aea:	|  +-----|----- e7da      	b.n	8009aa2 <_free_r+0x26>
 8009aec:	|  |     \--/-X d902      	bls.n	8009af4 <_free_r+0x78>
 8009aee:	|  |        |   230c      	movs	r3, #12
 8009af0:	|  |        |   6003      	str	r3, [r0, #0]
 8009af2:	|  +--------|-- e7d6      	b.n	8009aa2 <_free_r+0x26>
 8009af4:	|  |        \-> 6825      	ldr	r5, [r4, #0]
 8009af6:	|  |            1961      	adds	r1, r4, r5
 8009af8:	|  |            428b      	cmp	r3, r1
 8009afa:	|  |            bf04      	itt	eq
 8009afc:	|  |            6819      	ldreq	r1, [r3, #0]
 8009afe:	|  |            685b      	ldreq	r3, [r3, #4]
 8009b00:	|  |            6063      	str	r3, [r4, #4]
 8009b02:	|  |            bf04      	itt	eq
 8009b04:	|  |            1949      	addeq	r1, r1, r5
 8009b06:	|  |            6021      	streq	r1, [r4, #0]
 8009b08:	|  |            6054      	str	r4, [r2, #4]
 8009b0a:	|  \----------- e7ca      	b.n	8009aa2 <_free_r+0x26>
 8009b0c:	\-------------> b003      	add	sp, #12
 8009b0e:	                bd30      	pop	{r4, r5, pc}
 8009b10:	                5318      	strh	r0, [r3, r4]
 8009b12:	                2000      	movs	r0, #0

08009b14 <_malloc_r>:
 8009b14:	                         b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b16:	                         1ccd      	adds	r5, r1, #3
 8009b18:	                         f025 0503 	bic.w	r5, r5, #3
 8009b1c:	                         3508      	adds	r5, #8
 8009b1e:	                         2d0c      	cmp	r5, #12
 8009b20:	                         bf38      	it	cc
 8009b22:	                         250c      	movcc	r5, #12
 8009b24:	                         2d00      	cmp	r5, #0
 8009b26:	                         4606      	mov	r6, r0
 8009b28:	                     /-- db01      	blt.n	8009b2e <_malloc_r+0x1a>
 8009b2a:	                     |   42a9      	cmp	r1, r5
 8009b2c:	                  /--|-- d903      	bls.n	8009b36 <_malloc_r+0x22>
 8009b2e:	                  |  \-> 230c      	movs	r3, #12
 8009b30:	                  |      6033      	str	r3, [r6, #0]
 8009b32:	               /--|----> 2000      	movs	r0, #0
 8009b34:	/--------------|--|----> bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b36:	|              |  \----> f000 f949 	bl	8009dcc <__malloc_lock>
 8009b3a:	|              |         4921      	ldr	r1, [pc, #132]	; (8009bc0 <_malloc_r+0xac>)
 8009b3c:	|              |         680a      	ldr	r2, [r1, #0]
 8009b3e:	|              |         4614      	mov	r4, r2
 8009b40:	|  /-----------|--/----X b99c      	cbnz	r4, 8009b6a <_malloc_r+0x56>
 8009b42:	|  |           |  |      4f20      	ldr	r7, [pc, #128]	; (8009bc4 <_malloc_r+0xb0>)
 8009b44:	|  |           |  |      683b      	ldr	r3, [r7, #0]
 8009b46:	|  |           |  |  /-- b923      	cbnz	r3, 8009b52 <_malloc_r+0x3e>
 8009b48:	|  |           |  |  |   4621      	mov	r1, r4
 8009b4a:	|  |           |  |  |   4630      	mov	r0, r6
 8009b4c:	|  |           |  |  |   f000 f83c 	bl	8009bc8 <_sbrk_r>
 8009b50:	|  |           |  |  |   6038      	str	r0, [r7, #0]
 8009b52:	|  |           |  |  \-> 4629      	mov	r1, r5
 8009b54:	|  |           |  |      4630      	mov	r0, r6
 8009b56:	|  |           |  |      f000 f837 	bl	8009bc8 <_sbrk_r>
 8009b5a:	|  |           |  |      1c43      	adds	r3, r0, #1
 8009b5c:	|  |     /-----|--|----- d123      	bne.n	8009ba6 <_malloc_r+0x92>
 8009b5e:	|  |  /--|-----|--|----> 230c      	movs	r3, #12
 8009b60:	|  |  |  |     |  |      6033      	str	r3, [r6, #0]
 8009b62:	|  |  |  |     |  |      4630      	mov	r0, r6
 8009b64:	|  |  |  |     |  |      f000 f938 	bl	8009dd8 <__malloc_unlock>
 8009b68:	|  |  |  |     \--|----- e7e3      	b.n	8009b32 <_malloc_r+0x1e>
 8009b6a:	|  |  |  |        \----> 6823      	ldr	r3, [r4, #0]
 8009b6c:	|  |  |  |               1b5b      	subs	r3, r3, r5
 8009b6e:	|  |  |  |     /-------- d417      	bmi.n	8009ba0 <_malloc_r+0x8c>
 8009b70:	|  |  |  |     |         2b0b      	cmp	r3, #11
 8009b72:	|  |  |  |     |     /-- d903      	bls.n	8009b7c <_malloc_r+0x68>
 8009b74:	|  |  |  |     |     |   6023      	str	r3, [r4, #0]
 8009b76:	|  |  |  |     |     |   441c      	add	r4, r3
 8009b78:	|  |  |  |  /--|-----|-> 6025      	str	r5, [r4, #0]
 8009b7a:	|  |  |  |  |  |  /--|-- e004      	b.n	8009b86 <_malloc_r+0x72>
 8009b7c:	|  |  |  |  |  |  |  \-> 6863      	ldr	r3, [r4, #4]
 8009b7e:	|  |  |  |  |  |  |      42a2      	cmp	r2, r4
 8009b80:	|  |  |  |  |  |  |      bf0c      	ite	eq
 8009b82:	|  |  |  |  |  |  |      600b      	streq	r3, [r1, #0]
 8009b84:	|  |  |  |  |  |  |      6053      	strne	r3, [r2, #4]
 8009b86:	|  |  |  |  |  |  \----> 4630      	mov	r0, r6
 8009b88:	|  |  |  |  |  |         f000 f926 	bl	8009dd8 <__malloc_unlock>
 8009b8c:	|  |  |  |  |  |         f104 000b 	add.w	r0, r4, #11
 8009b90:	|  |  |  |  |  |         1d23      	adds	r3, r4, #4
 8009b92:	|  |  |  |  |  |         f020 0007 	bic.w	r0, r0, #7
 8009b96:	|  |  |  |  |  |         1ac2      	subs	r2, r0, r3
 8009b98:	+--|--|--|--|--|-------- d0cc      	beq.n	8009b34 <_malloc_r+0x20>
 8009b9a:	|  |  |  |  |  |         1a1b      	subs	r3, r3, r0
 8009b9c:	|  |  |  |  |  |         50a3      	str	r3, [r4, r2]
 8009b9e:	\--|--|--|--|--|-------- e7c9      	b.n	8009b34 <_malloc_r+0x20>
 8009ba0:	   |  |  |  |  \-------> 4622      	mov	r2, r4
 8009ba2:	   |  |  |  |            6864      	ldr	r4, [r4, #4]
 8009ba4:	   \--|--|--|----------- e7cc      	b.n	8009b40 <_malloc_r+0x2c>
 8009ba6:	      |  \--|----------> 1cc4      	adds	r4, r0, #3
 8009ba8:	      |     |            f024 0403 	bic.w	r4, r4, #3
 8009bac:	      |     |            42a0      	cmp	r0, r4
 8009bae:	      |     +----------- d0e3      	beq.n	8009b78 <_malloc_r+0x64>
 8009bb0:	      |     |            1a21      	subs	r1, r4, r0
 8009bb2:	      |     |            4630      	mov	r0, r6
 8009bb4:	      |     |            f000 f808 	bl	8009bc8 <_sbrk_r>
 8009bb8:	      |     |            3001      	adds	r0, #1
 8009bba:	      |     \----------- d1dd      	bne.n	8009b78 <_malloc_r+0x64>
 8009bbc:	      \----------------- e7cf      	b.n	8009b5e <_malloc_r+0x4a>
 8009bbe:	                         bf00      	nop
 8009bc0:	                         5318      	strh	r0, [r3, r4]
 8009bc2:	                         2000      	movs	r0, #0
 8009bc4:	                         531c      	strh	r4, [r3, r4]
 8009bc6:	                         2000      	movs	r0, #0

08009bc8 <_sbrk_r>:
 8009bc8:	    b538      	push	{r3, r4, r5, lr}
 8009bca:	    4d06      	ldr	r5, [pc, #24]	; (8009be4 <_sbrk_r+0x1c>)
 8009bcc:	    2300      	movs	r3, #0
 8009bce:	    4604      	mov	r4, r0
 8009bd0:	    4608      	mov	r0, r1
 8009bd2:	    602b      	str	r3, [r5, #0]
 8009bd4:	    f001 f94c 	bl	800ae70 <_sbrk>
 8009bd8:	    1c43      	adds	r3, r0, #1
 8009bda:	/-- d102      	bne.n	8009be2 <_sbrk_r+0x1a>
 8009bdc:	|   682b      	ldr	r3, [r5, #0]
 8009bde:	+-- b103      	cbz	r3, 8009be2 <_sbrk_r+0x1a>
 8009be0:	|   6023      	str	r3, [r4, #0]
 8009be2:	\-> bd38      	pop	{r3, r4, r5, pc}
 8009be4:	    5320      	strh	r0, [r4, r4]
 8009be6:	    2000      	movs	r0, #0

08009be8 <siscanf>:
 8009be8:	b40e      	push	{r1, r2, r3}
 8009bea:	b510      	push	{r4, lr}
 8009bec:	b09f      	sub	sp, #124	; 0x7c
 8009bee:	ac21      	add	r4, sp, #132	; 0x84
 8009bf0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009bf4:	f854 2b04 	ldr.w	r2, [r4], #4
 8009bf8:	9201      	str	r2, [sp, #4]
 8009bfa:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009bfe:	9004      	str	r0, [sp, #16]
 8009c00:	9008      	str	r0, [sp, #32]
 8009c02:	f7ff fe5b 	bl	80098bc <strlen>
 8009c06:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <siscanf+0x50>)
 8009c08:	9005      	str	r0, [sp, #20]
 8009c0a:	9009      	str	r0, [sp, #36]	; 0x24
 8009c0c:	930d      	str	r3, [sp, #52]	; 0x34
 8009c0e:	480b      	ldr	r0, [pc, #44]	; (8009c3c <siscanf+0x54>)
 8009c10:	9a01      	ldr	r2, [sp, #4]
 8009c12:	6800      	ldr	r0, [r0, #0]
 8009c14:	9403      	str	r4, [sp, #12]
 8009c16:	2300      	movs	r3, #0
 8009c18:	9311      	str	r3, [sp, #68]	; 0x44
 8009c1a:	9316      	str	r3, [sp, #88]	; 0x58
 8009c1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c20:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009c24:	a904      	add	r1, sp, #16
 8009c26:	4623      	mov	r3, r4
 8009c28:	f000 f936 	bl	8009e98 <__ssvfiscanf_r>
 8009c2c:	b01f      	add	sp, #124	; 0x7c
 8009c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c32:	b003      	add	sp, #12
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	9cb7      	ldr	r4, [sp, #732]	; 0x2dc
 8009c3a:	0800      	lsrs	r0, r0, #32
 8009c3c:	07e8      	lsls	r0, r5, #31
 8009c3e:	2000      	movs	r0, #0

08009c40 <_siscanf_r>:
 8009c40:	b40c      	push	{r2, r3}
 8009c42:	b530      	push	{r4, r5, lr}
 8009c44:	b09f      	sub	sp, #124	; 0x7c
 8009c46:	ac22      	add	r4, sp, #136	; 0x88
 8009c48:	4605      	mov	r5, r0
 8009c4a:	f854 2b04 	ldr.w	r2, [r4], #4
 8009c4e:	9201      	str	r2, [sp, #4]
 8009c50:	f44f 7301 	mov.w	r3, #516	; 0x204
 8009c54:	4608      	mov	r0, r1
 8009c56:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009c5a:	9104      	str	r1, [sp, #16]
 8009c5c:	9108      	str	r1, [sp, #32]
 8009c5e:	f7ff fe2d 	bl	80098bc <strlen>
 8009c62:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <_siscanf_r+0x50>)
 8009c64:	930d      	str	r3, [sp, #52]	; 0x34
 8009c66:	2300      	movs	r3, #0
 8009c68:	9311      	str	r3, [sp, #68]	; 0x44
 8009c6a:	9316      	str	r3, [sp, #88]	; 0x58
 8009c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c70:	9005      	str	r0, [sp, #20]
 8009c72:	9009      	str	r0, [sp, #36]	; 0x24
 8009c74:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009c78:	9a01      	ldr	r2, [sp, #4]
 8009c7a:	9403      	str	r4, [sp, #12]
 8009c7c:	4623      	mov	r3, r4
 8009c7e:	a904      	add	r1, sp, #16
 8009c80:	4628      	mov	r0, r5
 8009c82:	f000 f909 	bl	8009e98 <__ssvfiscanf_r>
 8009c86:	b01f      	add	sp, #124	; 0x7c
 8009c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c8c:	b002      	add	sp, #8
 8009c8e:	4770      	bx	lr
 8009c90:	9cb7      	ldr	r4, [sp, #732]	; 0x2dc
 8009c92:	0800      	lsrs	r0, r0, #32

08009c94 <__sread>:
 8009c94:	b510      	push	{r4, lr}
 8009c96:	460c      	mov	r4, r1
 8009c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c9c:	f000 fbc2 	bl	800a424 <_read_r>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	bfab      	itete	ge
 8009ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8009ca8:	181b      	addge	r3, r3, r0
 8009caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cae:	bfac      	ite	ge
 8009cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cb2:	81a3      	strhlt	r3, [r4, #12]
 8009cb4:	bd10      	pop	{r4, pc}

08009cb6 <__seofread>:
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	4770      	bx	lr

08009cba <__swrite>:
 8009cba:	    e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cbe:	    461f      	mov	r7, r3
 8009cc0:	    898b      	ldrh	r3, [r1, #12]
 8009cc2:	    05db      	lsls	r3, r3, #23
 8009cc4:	    4605      	mov	r5, r0
 8009cc6:	    460c      	mov	r4, r1
 8009cc8:	    4616      	mov	r6, r2
 8009cca:	/-- d505      	bpl.n	8009cd8 <__swrite+0x1e>
 8009ccc:	|   f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd0:	|   2302      	movs	r3, #2
 8009cd2:	|   2200      	movs	r2, #0
 8009cd4:	|   f000 f868 	bl	8009da8 <_lseek_r>
 8009cd8:	\-> 89a3      	ldrh	r3, [r4, #12]
 8009cda:	    f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cde:	    f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ce2:	    81a3      	strh	r3, [r4, #12]
 8009ce4:	    4632      	mov	r2, r6
 8009ce6:	    463b      	mov	r3, r7
 8009ce8:	    4628      	mov	r0, r5
 8009cea:	    e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cee:	    f000 b839 	b.w	8009d64 <_write_r>

08009cf2 <__sseek>:
 8009cf2:	b510      	push	{r4, lr}
 8009cf4:	460c      	mov	r4, r1
 8009cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfa:	f000 f855 	bl	8009da8 <_lseek_r>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	bf15      	itete	ne
 8009d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d0e:	81a3      	strheq	r3, [r4, #12]
 8009d10:	bf18      	it	ne
 8009d12:	81a3      	strhne	r3, [r4, #12]
 8009d14:	bd10      	pop	{r4, pc}

08009d16 <__sclose>:
 8009d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d1a:	f000 b835 	b.w	8009d88 <_close_r>

08009d1e <strchr>:
 8009d1e:	       b2c9      	uxtb	r1, r1
 8009d20:	   /-> 4603      	mov	r3, r0
 8009d22:	   |   f810 2b01 	ldrb.w	r2, [r0], #1
 8009d26:	/--|-- b11a      	cbz	r2, 8009d30 <strchr+0x12>
 8009d28:	|  |   428a      	cmp	r2, r1
 8009d2a:	|  \-- d1f9      	bne.n	8009d20 <strchr+0x2>
 8009d2c:	|  /-> 4618      	mov	r0, r3
 8009d2e:	|  |   4770      	bx	lr
 8009d30:	\--|-> 2900      	cmp	r1, #0
 8009d32:	   |   bf18      	it	ne
 8009d34:	   |   2300      	movne	r3, #0
 8009d36:	   \-- e7f9      	b.n	8009d2c <strchr+0xe>

08009d38 <strstr>:
 8009d38:	                780a      	ldrb	r2, [r1, #0]
 8009d3a:	                b570      	push	{r4, r5, r6, lr}
 8009d3c:	      /-------- b96a      	cbnz	r2, 8009d5a <strstr+0x22>
 8009d3e:	/-----|-------> bd70      	pop	{r4, r5, r6, pc}
 8009d40:	|  /--|-------> 429a      	cmp	r2, r3
 8009d42:	|  |  |  /----- d109      	bne.n	8009d58 <strstr+0x20>
 8009d44:	|  |  |  |      460c      	mov	r4, r1
 8009d46:	|  |  |  |      4605      	mov	r5, r0
 8009d48:	|  |  |  |  /-> f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009d4c:	|  |  |  |  |   2b00      	cmp	r3, #0
 8009d4e:	+--|--|--|--|-- d0f6      	beq.n	8009d3e <strstr+0x6>
 8009d50:	|  |  |  |  |   f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009d54:	|  |  |  |  |   429e      	cmp	r6, r3
 8009d56:	|  |  |  |  \-- d0f7      	beq.n	8009d48 <strstr+0x10>
 8009d58:	|  |  |  \----> 3001      	adds	r0, #1
 8009d5a:	|  |  \-------> 7803      	ldrb	r3, [r0, #0]
 8009d5c:	|  |            2b00      	cmp	r3, #0
 8009d5e:	|  \----------- d1ef      	bne.n	8009d40 <strstr+0x8>
 8009d60:	|               4618      	mov	r0, r3
 8009d62:	\-------------- e7ec      	b.n	8009d3e <strstr+0x6>

08009d64 <_write_r>:
 8009d64:	    b538      	push	{r3, r4, r5, lr}
 8009d66:	    4d07      	ldr	r5, [pc, #28]	; (8009d84 <_write_r+0x20>)
 8009d68:	    4604      	mov	r4, r0
 8009d6a:	    4608      	mov	r0, r1
 8009d6c:	    4611      	mov	r1, r2
 8009d6e:	    2200      	movs	r2, #0
 8009d70:	    602a      	str	r2, [r5, #0]
 8009d72:	    461a      	mov	r2, r3
 8009d74:	    f7fc f89b 	bl	8005eae <_write>
 8009d78:	    1c43      	adds	r3, r0, #1
 8009d7a:	/-- d102      	bne.n	8009d82 <_write_r+0x1e>
 8009d7c:	|   682b      	ldr	r3, [r5, #0]
 8009d7e:	+-- b103      	cbz	r3, 8009d82 <_write_r+0x1e>
 8009d80:	|   6023      	str	r3, [r4, #0]
 8009d82:	\-> bd38      	pop	{r3, r4, r5, pc}
 8009d84:	    5320      	strh	r0, [r4, r4]
 8009d86:	    2000      	movs	r0, #0

08009d88 <_close_r>:
 8009d88:	    b538      	push	{r3, r4, r5, lr}
 8009d8a:	    4d06      	ldr	r5, [pc, #24]	; (8009da4 <_close_r+0x1c>)
 8009d8c:	    2300      	movs	r3, #0
 8009d8e:	    4604      	mov	r4, r0
 8009d90:	    4608      	mov	r0, r1
 8009d92:	    602b      	str	r3, [r5, #0]
 8009d94:	    f001 f854 	bl	800ae40 <_close>
 8009d98:	    1c43      	adds	r3, r0, #1
 8009d9a:	/-- d102      	bne.n	8009da2 <_close_r+0x1a>
 8009d9c:	|   682b      	ldr	r3, [r5, #0]
 8009d9e:	+-- b103      	cbz	r3, 8009da2 <_close_r+0x1a>
 8009da0:	|   6023      	str	r3, [r4, #0]
 8009da2:	\-> bd38      	pop	{r3, r4, r5, pc}
 8009da4:	    5320      	strh	r0, [r4, r4]
 8009da6:	    2000      	movs	r0, #0

08009da8 <_lseek_r>:
 8009da8:	    b538      	push	{r3, r4, r5, lr}
 8009daa:	    4d07      	ldr	r5, [pc, #28]	; (8009dc8 <_lseek_r+0x20>)
 8009dac:	    4604      	mov	r4, r0
 8009dae:	    4608      	mov	r0, r1
 8009db0:	    4611      	mov	r1, r2
 8009db2:	    2200      	movs	r2, #0
 8009db4:	    602a      	str	r2, [r5, #0]
 8009db6:	    461a      	mov	r2, r3
 8009db8:	    f001 f84a 	bl	800ae50 <_lseek>
 8009dbc:	    1c43      	adds	r3, r0, #1
 8009dbe:	/-- d102      	bne.n	8009dc6 <_lseek_r+0x1e>
 8009dc0:	|   682b      	ldr	r3, [r5, #0]
 8009dc2:	+-- b103      	cbz	r3, 8009dc6 <_lseek_r+0x1e>
 8009dc4:	|   6023      	str	r3, [r4, #0]
 8009dc6:	\-> bd38      	pop	{r3, r4, r5, pc}
 8009dc8:	    5320      	strh	r0, [r4, r4]
 8009dca:	    2000      	movs	r0, #0

08009dcc <__malloc_lock>:
 8009dcc:	4801      	ldr	r0, [pc, #4]	; (8009dd4 <__malloc_lock+0x8>)
 8009dce:	f001 b802 	b.w	800add6 <__retarget_lock_acquire_recursive>
 8009dd2:	bf00      	nop
 8009dd4:	5329      	strh	r1, [r5, r4]
 8009dd6:	2000      	movs	r0, #0

08009dd8 <__malloc_unlock>:
 8009dd8:	4801      	ldr	r0, [pc, #4]	; (8009de0 <__malloc_unlock+0x8>)
 8009dda:	f001 b802 	b.w	800ade2 <__retarget_lock_release_recursive>
 8009dde:	bf00      	nop
 8009de0:	5329      	strh	r1, [r5, r4]
 8009de2:	2000      	movs	r0, #0

08009de4 <_sungetc_r>:
 8009de4:	                   b538      	push	{r3, r4, r5, lr}
 8009de6:	                   1c4b      	adds	r3, r1, #1
 8009de8:	                   4614      	mov	r4, r2
 8009dea:	               /-- d103      	bne.n	8009df4 <_sungetc_r+0x10>
 8009dec:	      /--------|-> f04f 35ff 	mov.w	r5, #4294967295
 8009df0:	/-----|--------|-> 4628      	mov	r0, r5
 8009df2:	|     |        |   bd38      	pop	{r3, r4, r5, pc}
 8009df4:	|     |        \-> 8993      	ldrh	r3, [r2, #12]
 8009df6:	|     |            f023 0320 	bic.w	r3, r3, #32
 8009dfa:	|     |            8193      	strh	r3, [r2, #12]
 8009dfc:	|     |            6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dfe:	|     |            6852      	ldr	r2, [r2, #4]
 8009e00:	|     |            b2cd      	uxtb	r5, r1
 8009e02:	|     |  /-------- b18b      	cbz	r3, 8009e28 <_sungetc_r+0x44>
 8009e04:	|     |  |         6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e06:	|     |  |         4293      	cmp	r3, r2
 8009e08:	|     |  |     /-- dd08      	ble.n	8009e1c <_sungetc_r+0x38>
 8009e0a:	|     |  |  /--|-> 6823      	ldr	r3, [r4, #0]
 8009e0c:	|     |  |  |  |   1e5a      	subs	r2, r3, #1
 8009e0e:	|     |  |  |  |   6022      	str	r2, [r4, #0]
 8009e10:	|     |  |  |  |   f803 5c01 	strb.w	r5, [r3, #-1]
 8009e14:	|     |  |  |  |   6863      	ldr	r3, [r4, #4]
 8009e16:	|     |  |  |  |   3301      	adds	r3, #1
 8009e18:	|  /--|--|--|--|-> 6063      	str	r3, [r4, #4]
 8009e1a:	+--|--|--|--|--|-- e7e9      	b.n	8009df0 <_sungetc_r+0xc>
 8009e1c:	|  |  |  |  |  \-> 4621      	mov	r1, r4
 8009e1e:	|  |  |  |  |      f000 fcd5 	bl	800a7cc <__submore>
 8009e22:	|  |  |  |  |      2800      	cmp	r0, #0
 8009e24:	|  |  |  |  \----- d0f1      	beq.n	8009e0a <_sungetc_r+0x26>
 8009e26:	|  |  \--|-------- e7e1      	b.n	8009dec <_sungetc_r+0x8>
 8009e28:	|  |     \-------> 6921      	ldr	r1, [r4, #16]
 8009e2a:	|  |               6823      	ldr	r3, [r4, #0]
 8009e2c:	|  |           /-- b151      	cbz	r1, 8009e44 <_sungetc_r+0x60>
 8009e2e:	|  |           |   4299      	cmp	r1, r3
 8009e30:	|  |           +-- d208      	bcs.n	8009e44 <_sungetc_r+0x60>
 8009e32:	|  |           |   f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009e36:	|  |           |   42a9      	cmp	r1, r5
 8009e38:	|  |           +-- d104      	bne.n	8009e44 <_sungetc_r+0x60>
 8009e3a:	|  |           |   3b01      	subs	r3, #1
 8009e3c:	|  |           |   3201      	adds	r2, #1
 8009e3e:	|  |           |   6023      	str	r3, [r4, #0]
 8009e40:	|  |           |   6062      	str	r2, [r4, #4]
 8009e42:	\--|-----------|-- e7d5      	b.n	8009df0 <_sungetc_r+0xc>
 8009e44:	   |           \-> e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009e48:	   |               f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e4c:	   |               6363      	str	r3, [r4, #52]	; 0x34
 8009e4e:	   |               2303      	movs	r3, #3
 8009e50:	   |               63a3      	str	r3, [r4, #56]	; 0x38
 8009e52:	   |               4623      	mov	r3, r4
 8009e54:	   |               f803 5f46 	strb.w	r5, [r3, #70]!
 8009e58:	   |               6023      	str	r3, [r4, #0]
 8009e5a:	   |               2301      	movs	r3, #1
 8009e5c:	   \-------------- e7dc      	b.n	8009e18 <_sungetc_r+0x34>

08009e5e <__ssrefill_r>:
 8009e5e:	       b510      	push	{r4, lr}
 8009e60:	       460c      	mov	r4, r1
 8009e62:	       6b49      	ldr	r1, [r1, #52]	; 0x34
 8009e64:	/----- b169      	cbz	r1, 8009e82 <__ssrefill_r+0x24>
 8009e66:	|      f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e6a:	|      4299      	cmp	r1, r3
 8009e6c:	|  /-- d001      	beq.n	8009e72 <__ssrefill_r+0x14>
 8009e6e:	|  |   f7ff fe05 	bl	8009a7c <_free_r>
 8009e72:	|  \-> 6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e74:	|      6063      	str	r3, [r4, #4]
 8009e76:	|      2000      	movs	r0, #0
 8009e78:	|      6360      	str	r0, [r4, #52]	; 0x34
 8009e7a:	+----- b113      	cbz	r3, 8009e82 <__ssrefill_r+0x24>
 8009e7c:	|      6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009e7e:	|      6023      	str	r3, [r4, #0]
 8009e80:	|  /-> bd10      	pop	{r4, pc}
 8009e82:	\--|-> 6923      	ldr	r3, [r4, #16]
 8009e84:	   |   6023      	str	r3, [r4, #0]
 8009e86:	   |   2300      	movs	r3, #0
 8009e88:	   |   6063      	str	r3, [r4, #4]
 8009e8a:	   |   89a3      	ldrh	r3, [r4, #12]
 8009e8c:	   |   f043 0320 	orr.w	r3, r3, #32
 8009e90:	   |   81a3      	strh	r3, [r4, #12]
 8009e92:	   |   f04f 30ff 	mov.w	r0, #4294967295
 8009e96:	   \-- e7f3      	b.n	8009e80 <__ssrefill_r+0x22>

08009e98 <__ssvfiscanf_r>:
 8009e98:	                                           e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
 8009e9c:	                                           460c      	mov	r4, r1
 8009e9e:	                                           f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009ea2:	                                           2100      	movs	r1, #0
 8009ea4:	                                           e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009ea8:	                                           49a6      	ldr	r1, [pc, #664]	; (800a144 <__ssvfiscanf_r+0x2ac>)
 8009eaa:	                                           91a0      	str	r1, [sp, #640]	; 0x280
 8009eac:	                                           f10d 0804 	add.w	r8, sp, #4
 8009eb0:	                                           49a5      	ldr	r1, [pc, #660]	; (800a148 <__ssvfiscanf_r+0x2b0>)
 8009eb2:	                                           4fa6      	ldr	r7, [pc, #664]	; (800a14c <__ssvfiscanf_r+0x2b4>)
 8009eb4:	                                           f8df 9298 	ldr.w	r9, [pc, #664]	; 800a150 <__ssvfiscanf_r+0x2b8>
 8009eb8:	                                           f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009ebc:	                                           4606      	mov	r6, r0
 8009ebe:	                                           91a1      	str	r1, [sp, #644]	; 0x284
 8009ec0:	                                           9300      	str	r3, [sp, #0]
 8009ec2:	                              /----------> 7813      	ldrb	r3, [r2, #0]
 8009ec4:	                              |            2b00      	cmp	r3, #0
 8009ec6:	/-----------------------------|----------- f000 815a 	beq.w	800a17e <__ssvfiscanf_r+0x2e6>
 8009eca:	|                             |            5dd9      	ldrb	r1, [r3, r7]
 8009ecc:	|                             |            f011 0108 	ands.w	r1, r1, #8
 8009ed0:	|                             |            f102 0501 	add.w	r5, r2, #1
 8009ed4:	|                       /-----|----------- d019      	beq.n	8009f0a <__ssvfiscanf_r+0x72>
 8009ed6:	|                       |     |  /-------> 6863      	ldr	r3, [r4, #4]
 8009ed8:	|                       |     |  |         2b00      	cmp	r3, #0
 8009eda:	|                       |     |  |  /----- dd0f      	ble.n	8009efc <__ssvfiscanf_r+0x64>
 8009edc:	|                       |  /--|--|--|----> 6823      	ldr	r3, [r4, #0]
 8009ede:	|                       |  |  |  |  |      781a      	ldrb	r2, [r3, #0]
 8009ee0:	|                       |  |  |  |  |      5cba      	ldrb	r2, [r7, r2]
 8009ee2:	|                       |  |  |  |  |      0712      	lsls	r2, r2, #28
 8009ee4:	|                       |  |  |  |  |  /-- d401      	bmi.n	8009eea <__ssvfiscanf_r+0x52>
 8009ee6:	|  /--------------------|--|--|--|--|--|-> 462a      	mov	r2, r5
 8009ee8:	|  |                    |  |  \--|--|--|-- e7eb      	b.n	8009ec2 <__ssvfiscanf_r+0x2a>
 8009eea:	|  |                    |  |     |  |  \-> 9a45      	ldr	r2, [sp, #276]	; 0x114
 8009eec:	|  |                    |  |     |  |      3201      	adds	r2, #1
 8009eee:	|  |                    |  |     |  |      9245      	str	r2, [sp, #276]	; 0x114
 8009ef0:	|  |                    |  |     |  |      6862      	ldr	r2, [r4, #4]
 8009ef2:	|  |                    |  |     |  |      3301      	adds	r3, #1
 8009ef4:	|  |                    |  |     |  |      3a01      	subs	r2, #1
 8009ef6:	|  |                    |  |     |  |      6062      	str	r2, [r4, #4]
 8009ef8:	|  |                    |  |     |  |      6023      	str	r3, [r4, #0]
 8009efa:	|  |                    |  |     \--|----- e7ec      	b.n	8009ed6 <__ssvfiscanf_r+0x3e>
 8009efc:	|  |                    |  |        \----> 9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009efe:	|  |                    |  |               4621      	mov	r1, r4
 8009f00:	|  |                    |  |               4630      	mov	r0, r6
 8009f02:	|  |                    |  |               4798      	blx	r3
 8009f04:	|  |                    |  |               2800      	cmp	r0, #0
 8009f06:	|  |                    |  \-------------- d0e9      	beq.n	8009edc <__ssvfiscanf_r+0x44>
 8009f08:	|  +--------------------|----------------- e7ed      	b.n	8009ee6 <__ssvfiscanf_r+0x4e>
 8009f0a:	|  |                    \----------------> 2b25      	cmp	r3, #37	; 0x25
 8009f0c:	|  |                                   /-- d012      	beq.n	8009f34 <__ssvfiscanf_r+0x9c>
 8009f0e:	|  |                          /--------|-> 469a      	mov	r10, r3
 8009f10:	|  |                          |        |   6863      	ldr	r3, [r4, #4]
 8009f12:	|  |                          |        |   2b00      	cmp	r3, #0
 8009f14:	|  |           /--------------|--------|-- f340 8091 	ble.w	800a03a <__ssvfiscanf_r+0x1a2>
 8009f18:	|  |        /--|--------------|--------|-> 6822      	ldr	r2, [r4, #0]
 8009f1a:	|  |        |  |              |        |   7813      	ldrb	r3, [r2, #0]
 8009f1c:	|  |        |  |              |        |   4553      	cmp	r3, r10
 8009f1e:	+--|--------|--|--------------|--------|-- f040 812e 	bne.w	800a17e <__ssvfiscanf_r+0x2e6>
 8009f22:	|  |        |  |              |        |   6863      	ldr	r3, [r4, #4]
 8009f24:	|  |        |  |              |        |   3b01      	subs	r3, #1
 8009f26:	|  |        |  |              |        |   6063      	str	r3, [r4, #4]
 8009f28:	|  |        |  |              |        |   9b45      	ldr	r3, [sp, #276]	; 0x114
 8009f2a:	|  |        |  |              |        |   3201      	adds	r2, #1
 8009f2c:	|  |        |  |              |        |   3301      	adds	r3, #1
 8009f2e:	|  |        |  |              |        |   6022      	str	r2, [r4, #0]
 8009f30:	|  |        |  |              |        |   9345      	str	r3, [sp, #276]	; 0x114
 8009f32:	|  +--------|--|--------------|--------|-- e7d8      	b.n	8009ee6 <__ssvfiscanf_r+0x4e>
 8009f34:	|  |        |  |              |        \-> 9141      	str	r1, [sp, #260]	; 0x104
 8009f36:	|  |        |  |              |            9143      	str	r1, [sp, #268]	; 0x10c
 8009f38:	|  |        |  |              |            7853      	ldrb	r3, [r2, #1]
 8009f3a:	|  |        |  |              |            2b2a      	cmp	r3, #42	; 0x2a
 8009f3c:	|  |        |  |              |            bf02      	ittt	eq
 8009f3e:	|  |        |  |              |            2310      	moveq	r3, #16
 8009f40:	|  |        |  |              |            1c95      	addeq	r5, r2, #2
 8009f42:	|  |        |  |              |            9341      	streq	r3, [sp, #260]	; 0x104
 8009f44:	|  |        |  |              |            220a      	movs	r2, #10
 8009f46:	|  |        |  |              |  /-------> 46aa      	mov	r10, r5
 8009f48:	|  |        |  |              |  |         f81a 1b01 	ldrb.w	r1, [r10], #1
 8009f4c:	|  |        |  |              |  |         f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009f50:	|  |        |  |              |  |         2b09      	cmp	r3, #9
 8009f52:	|  |        |  |              |  |  /----- d91d      	bls.n	8009f90 <__ssvfiscanf_r+0xf8>
 8009f54:	|  |        |  |              |  |  |      487e      	ldr	r0, [pc, #504]	; (800a150 <__ssvfiscanf_r+0x2b8>)
 8009f56:	|  |        |  |              |  |  |      2203      	movs	r2, #3
 8009f58:	|  |        |  |              |  |  |      f7ff fcba 	bl	80098d0 <memchr>
 8009f5c:	|  |        |  |              |  |  |  /-- b140      	cbz	r0, 8009f70 <__ssvfiscanf_r+0xd8>
 8009f5e:	|  |        |  |              |  |  |  |   2301      	movs	r3, #1
 8009f60:	|  |        |  |              |  |  |  |   eba0 0009 	sub.w	r0, r0, r9
 8009f64:	|  |        |  |              |  |  |  |   fa03 f000 	lsl.w	r0, r3, r0
 8009f68:	|  |        |  |              |  |  |  |   9b41      	ldr	r3, [sp, #260]	; 0x104
 8009f6a:	|  |        |  |              |  |  |  |   4318      	orrs	r0, r3
 8009f6c:	|  |        |  |              |  |  |  |   9041      	str	r0, [sp, #260]	; 0x104
 8009f6e:	|  |        |  |              |  |  |  |   4655      	mov	r5, r10
 8009f70:	|  |        |  |              |  |  |  \-> f815 3b01 	ldrb.w	r3, [r5], #1
 8009f74:	|  |        |  |              |  |  |      2b78      	cmp	r3, #120	; 0x78
 8009f76:	|  |        |  |           /--|--|--|----- d806      	bhi.n	8009f86 <__ssvfiscanf_r+0xee>
 8009f78:	|  |        |  |           |  |  |  |      2b57      	cmp	r3, #87	; 0x57
 8009f7a:	|  |        |  |           |  |  |  |  /-- d810      	bhi.n	8009f9e <__ssvfiscanf_r+0x106>
 8009f7c:	|  |        |  |           |  |  |  |  |   2b25      	cmp	r3, #37	; 0x25
 8009f7e:	|  |        |  |           |  \--|--|--|-- d0c6      	beq.n	8009f0e <__ssvfiscanf_r+0x76>
 8009f80:	|  |        |  |           |  /--|--|--|-- d856      	bhi.n	800a030 <__ssvfiscanf_r+0x198>
 8009f82:	|  |        |  |           |  |  |  |  |   2b00      	cmp	r3, #0
 8009f84:	|  |        |  |        /--|--|--|--|--|-- d064      	beq.n	800a050 <__ssvfiscanf_r+0x1b8>
 8009f86:	|  |        |  |        |  >--|--|--|--|-> 2303      	movs	r3, #3
 8009f88:	|  |        |  |        |  |  |  |  |  |   9347      	str	r3, [sp, #284]	; 0x11c
 8009f8a:	|  |        |  |        |  |  |  |  |  |   230a      	movs	r3, #10
 8009f8c:	|  |        |  |        |  |  |  |  |  |   9342      	str	r3, [sp, #264]	; 0x108
 8009f8e:	|  |        |  |  /-----|--|--|--|--|--|-- e071      	b.n	800a074 <__ssvfiscanf_r+0x1dc>
 8009f90:	|  |        |  |  |     |  |  |  |  \--|-> 9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009f92:	|  |        |  |  |     |  |  |  |     |   fb02 1103 	mla	r1, r2, r3, r1
 8009f96:	|  |        |  |  |     |  |  |  |     |   3930      	subs	r1, #48	; 0x30
 8009f98:	|  |        |  |  |     |  |  |  |     |   9143      	str	r1, [sp, #268]	; 0x10c
 8009f9a:	|  |        |  |  |     |  |  |  |     |   4655      	mov	r5, r10
 8009f9c:	|  |        |  |  |     |  |  |  \-----|-- e7d3      	b.n	8009f46 <__ssvfiscanf_r+0xae>
 8009f9e:	|  |        |  |  |     |  |  |        \-> f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009fa2:	|  |        |  |  |     |  |  |            2a20      	cmp	r2, #32
 8009fa4:	|  |        |  |  |     |  +--|----------- d8ef      	bhi.n	8009f86 <__ssvfiscanf_r+0xee>
 8009fa6:	|  |        |  |  |     |  |  |            a101      	add	r1, pc, #4	; (adr r1, 8009fac <__ssvfiscanf_r+0x114>)
 8009fa8:	|  |        |  |  |     |  |  |            f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009fac:	|  |        |  |  |     |  |  |            a05f      	add	r0, pc, #380	; (adr r0, 800a12c <__ssvfiscanf_r+0x294>)
 8009fae:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009fb0:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 8009fb2:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009fb4:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 8009fb6:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009fb8:	|  |        |  |  |     |  |  |            a0bd      	add	r0, pc, #756	; (adr r0, 800a2b0 <_scanf_i+0x74>)
 8009fba:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009fbc:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 8009fbe:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009fc0:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 8009fc2:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009fc4:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 8009fc6:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009fc8:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 8009fca:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009fcc:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 8009fce:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009fd0:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 8009fd2:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009fd4:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 8009fd6:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009fd8:	|  |        |  |  |     |  |  |            a0d3      	add	r0, pc, #844	; (adr r0, 800a328 <_scanf_i+0xec>)
 8009fda:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009fdc:	|  |        |  |  |     |  |  |            a0a9      	add	r0, pc, #676	; (adr r0, 800a284 <_scanf_i+0x48>)
 8009fde:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009fe0:	|  |        |  |  |     |  |  |            a037      	add	r0, pc, #220	; (adr r0, 800a0c0 <__ssvfiscanf_r+0x228>)
 8009fe2:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009fe4:	|  |        |  |  |     |  |  |            a037      	add	r0, pc, #220	; (adr r0, 800a0c4 <__ssvfiscanf_r+0x22c>)
 8009fe6:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009fe8:	|  |        |  |  |     |  |  |            a037      	add	r0, pc, #220	; (adr r0, 800a0c8 <__ssvfiscanf_r+0x230>)
 8009fea:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009fec:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 8009fee:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009ff0:	|  |        |  |  |     |  |  |            a0ad      	add	r0, pc, #692	; (adr r0, 800a2a8 <_scanf_i+0x6c>)
 8009ff2:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009ff4:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 8009ff6:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009ff8:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 8009ffa:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 8009ffc:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 8009ffe:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 800a000:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 800a002:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 800a004:	|  |        |  |  |     |  |  |            a0e3      	add	r0, pc, #908	; (adr r0, 800a394 <_scanf_i+0x158>)
 800a006:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 800a008:	|  |        |  |  |     |  |  |            a0b5      	add	r0, pc, #724	; (adr r0, 800a2e0 <_scanf_i+0xa4>)
 800a00a:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 800a00c:	|  |        |  |  |     |  |  |            a057      	add	r0, pc, #348	; (adr r0, 800a16c <__ssvfiscanf_r+0x2d4>)
 800a00e:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 800a010:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 800a012:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 800a014:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 800a016:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 800a018:	|  |        |  |  |     |  |  |            a0df      	add	r0, pc, #892	; (adr r0, 800a398 <_scanf_i+0x15c>)
 800a01a:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 800a01c:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 800a01e:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 800a020:	|  |        |  |  |     |  |  |            a0a9      	add	r0, pc, #676	; (adr r0, 800a2c8 <_scanf_i+0x8c>)
 800a022:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 800a024:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 800a026:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 800a028:	|  |        |  |  |     |  |  |            9f87      	ldr	r7, [sp, #540]	; 0x21c
 800a02a:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 800a02c:	|  |        |  |  |     |  |  |            a05f      	add	r0, pc, #380	; (adr r0, 800a1ac <_scanf_chars+0x24>)
 800a02e:	|  |        |  |  |     |  |  |            0800      	lsrs	r0, r0, #32
 800a030:	|  |        |  |  |     |  |  \----------> 3b45      	subs	r3, #69	; 0x45
 800a032:	|  |        |  |  |     |  |               2b02      	cmp	r3, #2
 800a034:	|  |        |  |  |     |  \-------------- d8a7      	bhi.n	8009f86 <__ssvfiscanf_r+0xee>
 800a036:	|  |        |  |  |     |                  2305      	movs	r3, #5
 800a038:	|  |        |  |  |  /--|----------------- e01b      	b.n	800a072 <__ssvfiscanf_r+0x1da>
 800a03a:	|  |        |  \--|--|--|----------------> 9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a03c:	|  |        |     |  |  |                  4621      	mov	r1, r4
 800a03e:	|  |        |     |  |  |                  4630      	mov	r0, r6
 800a040:	|  |        |     |  |  |                  4798      	blx	r3
 800a042:	|  |        |     |  |  |                  2800      	cmp	r0, #0
 800a044:	|  |        \-----|--|--|----------------- f43f af68 	beq.w	8009f18 <__ssvfiscanf_r+0x80>
 800a048:	|  |        /-----|--|--|----------------> 9844      	ldr	r0, [sp, #272]	; 0x110
 800a04a:	|  |        |     |  |  |                  2800      	cmp	r0, #0
 800a04c:	|  |     /--|-----|--|--|----------------- f040 808d 	bne.w	800a16a <__ssvfiscanf_r+0x2d2>
 800a050:	|  |     |  |     |  |  \----------------> f04f 30ff 	mov.w	r0, #4294967295
 800a054:	|  |  /--|--|-----|--|-------------------- e08f      	b.n	800a176 <__ssvfiscanf_r+0x2de>
 800a056:	|  |  |  |  |     |  |                     9a41      	ldr	r2, [sp, #260]	; 0x104
 800a058:	|  |  |  |  |     |  |                     f042 0220 	orr.w	r2, r2, #32
 800a05c:	|  |  |  |  |     |  |                     9241      	str	r2, [sp, #260]	; 0x104
 800a05e:	|  |  |  |  |     |  |                     9a41      	ldr	r2, [sp, #260]	; 0x104
 800a060:	|  |  |  |  |     |  |                     f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a064:	|  |  |  |  |     |  |                     9241      	str	r2, [sp, #260]	; 0x104
 800a066:	|  |  |  |  |     |  |                     2210      	movs	r2, #16
 800a068:	|  |  |  |  |     |  |              /----> 2b6f      	cmp	r3, #111	; 0x6f
 800a06a:	|  |  |  |  |     |  |              |      9242      	str	r2, [sp, #264]	; 0x108
 800a06c:	|  |  |  |  |     |  |              |      bf34      	ite	cc
 800a06e:	|  |  |  |  |     |  |              |      2303      	movcc	r3, #3
 800a070:	|  |  |  |  |     |  |              |      2304      	movcs	r3, #4
 800a072:	|  |  |  |  |     |  >--------------|----> 9347      	str	r3, [sp, #284]	; 0x11c
 800a074:	|  |  |  |  |     \--|--------------|----> 6863      	ldr	r3, [r4, #4]
 800a076:	|  |  |  |  |        |              |      2b00      	cmp	r3, #0
 800a078:	|  |  |  |  |        |        /-----|----- dd41      	ble.n	800a0fe <__ssvfiscanf_r+0x266>
 800a07a:	|  |  |  |  |        |     /--|-----|----> 9b41      	ldr	r3, [sp, #260]	; 0x104
 800a07c:	|  |  |  |  |        |     |  |     |      0659      	lsls	r1, r3, #25
 800a07e:	|  |  |  |  |        |     |  |     |  /-- d404      	bmi.n	800a08a <__ssvfiscanf_r+0x1f2>
 800a080:	|  |  |  |  |     /--|-----|--|-----|--|-> 6823      	ldr	r3, [r4, #0]
 800a082:	|  |  |  |  |     |  |     |  |     |  |   781a      	ldrb	r2, [r3, #0]
 800a084:	|  |  |  |  |     |  |     |  |     |  |   5cba      	ldrb	r2, [r7, r2]
 800a086:	|  |  |  |  |     |  |     |  |     |  |   0712      	lsls	r2, r2, #28
 800a088:	|  |  |  |  |     |  |     |  |  /--|--|-- d440      	bmi.n	800a10c <__ssvfiscanf_r+0x274>
 800a08a:	|  |  |  |  |     |  |     |  |  |  |  \-> 9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a08c:	|  |  |  |  |     |  |     |  |  |  |      2b02      	cmp	r3, #2
 800a08e:	|  |  |  |  |     |  |  /--|--|--|--|----- dc4f      	bgt.n	800a130 <__ssvfiscanf_r+0x298>
 800a090:	|  |  |  |  |     |  |  |  |  |  |  |      466b      	mov	r3, sp
 800a092:	|  |  |  |  |     |  |  |  |  |  |  |      4622      	mov	r2, r4
 800a094:	|  |  |  |  |     |  |  |  |  |  |  |      a941      	add	r1, sp, #260	; 0x104
 800a096:	|  |  |  |  |     |  |  |  |  |  |  |      4630      	mov	r0, r6
 800a098:	|  |  |  |  |     |  |  |  |  |  |  |      f000 f876 	bl	800a188 <_scanf_chars>
 800a09c:	|  |  |  |  |  /--|--|--|--|--|--|--|----> 2801      	cmp	r0, #1
 800a09e:	+--|--|--|--|--|--|--|--|--|--|--|--|----- d06e      	beq.n	800a17e <__ssvfiscanf_r+0x2e6>
 800a0a0:	|  |  |  |  |  |  |  |  |  |  |  |  |      2802      	cmp	r0, #2
 800a0a2:	|  +--|--|--|--|--|--|--|--|--|--|--|----- f47f af20 	bne.w	8009ee6 <__ssvfiscanf_r+0x4e>
 800a0a6:	|  |  |  |  +--|--|--|--|--|--|--|--|----- e7cf      	b.n	800a048 <__ssvfiscanf_r+0x1b0>
 800a0a8:	|  |  |  |  |  |  |  |  |  |  |  |  |      220a      	movs	r2, #10
 800a0aa:	|  |  |  |  |  |  |  |  |  |  |  |  \----- e7dd      	b.n	800a068 <__ssvfiscanf_r+0x1d0>
 800a0ac:	|  |  |  |  |  |  |  |  |  |  |  |         2300      	movs	r3, #0
 800a0ae:	|  |  |  |  |  |  |  |  |  |  |  |         9342      	str	r3, [sp, #264]	; 0x108
 800a0b0:	|  |  |  |  |  |  |  |  |  |  |  |         2303      	movs	r3, #3
 800a0b2:	|  |  |  |  |  |  |  +--|--|--|--|-------- e7de      	b.n	800a072 <__ssvfiscanf_r+0x1da>
 800a0b4:	|  |  |  |  |  |  |  |  |  |  |  |         2308      	movs	r3, #8
 800a0b6:	|  |  |  |  |  |  |  |  |  |  |  |         9342      	str	r3, [sp, #264]	; 0x108
 800a0b8:	|  |  |  |  |  |  |  |  |  |  |  |         2304      	movs	r3, #4
 800a0ba:	|  |  |  |  |  |  |  +--|--|--|--|-------- e7da      	b.n	800a072 <__ssvfiscanf_r+0x1da>
 800a0bc:	|  |  |  |  |  |  |  |  |  |  |  |         4629      	mov	r1, r5
 800a0be:	|  |  |  |  |  |  |  |  |  |  |  |         4640      	mov	r0, r8
 800a0c0:	|  |  |  |  |  |  |  |  |  |  |  |         f000 fa2c 	bl	800a51c <__sccl>
 800a0c4:	|  |  |  |  |  |  |  |  |  |  |  |         9b41      	ldr	r3, [sp, #260]	; 0x104
 800a0c6:	|  |  |  |  |  |  |  |  |  |  |  |         f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ca:	|  |  |  |  |  |  |  |  |  |  |  |         9341      	str	r3, [sp, #260]	; 0x104
 800a0cc:	|  |  |  |  |  |  |  |  |  |  |  |         4605      	mov	r5, r0
 800a0ce:	|  |  |  |  |  |  |  |  |  |  |  |         2301      	movs	r3, #1
 800a0d0:	|  |  |  |  |  |  |  +--|--|--|--|-------- e7cf      	b.n	800a072 <__ssvfiscanf_r+0x1da>
 800a0d2:	|  |  |  |  |  |  |  |  |  |  |  |         9b41      	ldr	r3, [sp, #260]	; 0x104
 800a0d4:	|  |  |  |  |  |  |  |  |  |  |  |         f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0d8:	|  |  |  |  |  |  |  |  |  |  |  |         9341      	str	r3, [sp, #260]	; 0x104
 800a0da:	|  |  |  |  |  |  |  |  |  |  |  |         2300      	movs	r3, #0
 800a0dc:	|  |  |  |  |  |  |  +--|--|--|--|-------- e7c9      	b.n	800a072 <__ssvfiscanf_r+0x1da>
 800a0de:	|  |  |  |  |  |  |  |  |  |  |  |         2302      	movs	r3, #2
 800a0e0:	|  |  |  |  |  |  |  \--|--|--|--|-------- e7c7      	b.n	800a072 <__ssvfiscanf_r+0x1da>
 800a0e2:	|  |  |  |  |  |  |     |  |  |  |         9841      	ldr	r0, [sp, #260]	; 0x104
 800a0e4:	|  |  |  |  |  |  |     |  |  |  |         06c3      	lsls	r3, r0, #27
 800a0e6:	|  +--|--|--|--|--|-----|--|--|--|-------- f53f aefe 	bmi.w	8009ee6 <__ssvfiscanf_r+0x4e>
 800a0ea:	|  |  |  |  |  |  |     |  |  |  |         9b00      	ldr	r3, [sp, #0]
 800a0ec:	|  |  |  |  |  |  |     |  |  |  |         9a45      	ldr	r2, [sp, #276]	; 0x114
 800a0ee:	|  |  |  |  |  |  |     |  |  |  |         1d19      	adds	r1, r3, #4
 800a0f0:	|  |  |  |  |  |  |     |  |  |  |         9100      	str	r1, [sp, #0]
 800a0f2:	|  |  |  |  |  |  |     |  |  |  |         681b      	ldr	r3, [r3, #0]
 800a0f4:	|  |  |  |  |  |  |     |  |  |  |         07c0      	lsls	r0, r0, #31
 800a0f6:	|  |  |  |  |  |  |     |  |  |  |         bf4c      	ite	mi
 800a0f8:	|  |  |  |  |  |  |     |  |  |  |         801a      	strhmi	r2, [r3, #0]
 800a0fa:	|  |  |  |  |  |  |     |  |  |  |         601a      	strpl	r2, [r3, #0]
 800a0fc:	|  +--|--|--|--|--|-----|--|--|--|-------- e6f3      	b.n	8009ee6 <__ssvfiscanf_r+0x4e>
 800a0fe:	|  |  |  |  |  |  |     |  |  \--|-------> 9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a100:	|  |  |  |  |  |  |     |  |     |         4621      	mov	r1, r4
 800a102:	|  |  |  |  |  |  |     |  |     |         4630      	mov	r0, r6
 800a104:	|  |  |  |  |  |  |     |  |     |         4798      	blx	r3
 800a106:	|  |  |  |  |  |  |     |  |     |         2800      	cmp	r0, #0
 800a108:	|  |  |  |  |  |  |     |  \-----|-------- d0b7      	beq.n	800a07a <__ssvfiscanf_r+0x1e2>
 800a10a:	|  |  |  |  +--|--|-----|--------|-------- e79d      	b.n	800a048 <__ssvfiscanf_r+0x1b0>
 800a10c:	|  |  |  |  |  |  |     |        \-------> 9a45      	ldr	r2, [sp, #276]	; 0x114
 800a10e:	|  |  |  |  |  |  |     |                  3201      	adds	r2, #1
 800a110:	|  |  |  |  |  |  |     |                  9245      	str	r2, [sp, #276]	; 0x114
 800a112:	|  |  |  |  |  |  |     |                  6862      	ldr	r2, [r4, #4]
 800a114:	|  |  |  |  |  |  |     |                  3a01      	subs	r2, #1
 800a116:	|  |  |  |  |  |  |     |                  2a00      	cmp	r2, #0
 800a118:	|  |  |  |  |  |  |     |                  6062      	str	r2, [r4, #4]
 800a11a:	|  |  |  |  |  |  |     |              /-- dd02      	ble.n	800a122 <__ssvfiscanf_r+0x28a>
 800a11c:	|  |  |  |  |  |  |     |              |   3301      	adds	r3, #1
 800a11e:	|  |  |  |  |  |  |     |              |   6023      	str	r3, [r4, #0]
 800a120:	|  |  |  |  |  |  +-----|--------------|-- e7ae      	b.n	800a080 <__ssvfiscanf_r+0x1e8>
 800a122:	|  |  |  |  |  |  |     |              \-> 9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a124:	|  |  |  |  |  |  |     |                  4621      	mov	r1, r4
 800a126:	|  |  |  |  |  |  |     |                  4630      	mov	r0, r6
 800a128:	|  |  |  |  |  |  |     |                  4798      	blx	r3
 800a12a:	|  |  |  |  |  |  |     |                  2800      	cmp	r0, #0
 800a12c:	|  |  |  |  |  |  \-----|----------------- d0a8      	beq.n	800a080 <__ssvfiscanf_r+0x1e8>
 800a12e:	|  |  |  |  \--|--------|----------------- e78b      	b.n	800a048 <__ssvfiscanf_r+0x1b0>
 800a130:	|  |  |  |     |        \----------------> 2b04      	cmp	r3, #4
 800a132:	|  |  |  |     |                       /-- dc0f      	bgt.n	800a154 <__ssvfiscanf_r+0x2bc>
 800a134:	|  |  |  |     |                       |   466b      	mov	r3, sp
 800a136:	|  |  |  |     |                       |   4622      	mov	r2, r4
 800a138:	|  |  |  |     |                       |   a941      	add	r1, sp, #260	; 0x104
 800a13a:	|  |  |  |     |                       |   4630      	mov	r0, r6
 800a13c:	|  |  |  |     |                       |   f000 f87e 	bl	800a23c <_scanf_i>
 800a140:	|  |  |  |     +-----------------------|-- e7ac      	b.n	800a09c <__ssvfiscanf_r+0x204>
 800a142:	|  |  |  |     |                       |   bf00      	nop
 800a144:	|  |  |  |     |                       |   9de5      	ldr	r5, [sp, #916]	; 0x394
 800a146:	|  |  |  |     |                       |   0800      	lsrs	r0, r0, #32
 800a148:	|  |  |  |     |                       |   9e5f      	ldr	r6, [sp, #380]	; 0x17c
 800a14a:	|  |  |  |     |                       |   0800      	lsrs	r0, r0, #32
 800a14c:	|  |  |  |     |                       |   b240      	sxtb	r0, r0
 800a14e:	|  |  |  |     |                       |   0800      	lsrs	r0, r0, #32
 800a150:	|  |  |  |     |                       |   b220      	sxth	r0, r4
 800a152:	|  |  |  |     |                       |   0800      	lsrs	r0, r0, #32
 800a154:	|  |  |  |     |                       \-> 4b0b      	ldr	r3, [pc, #44]	; (800a184 <__ssvfiscanf_r+0x2ec>)
 800a156:	|  |  |  |     |                           2b00      	cmp	r3, #0
 800a158:	|  \--|--|-----|-------------------------- f43f aec5 	beq.w	8009ee6 <__ssvfiscanf_r+0x4e>
 800a15c:	|     |  |     |                           466b      	mov	r3, sp
 800a15e:	|     |  |     |                           4622      	mov	r2, r4
 800a160:	|     |  |     |                           a941      	add	r1, sp, #260	; 0x104
 800a162:	|     |  |     |                           4630      	mov	r0, r6
 800a164:	|     |  |     |                           f3af 8000 	nop.w
 800a168:	|     |  |     \-------------------------- e798      	b.n	800a09c <__ssvfiscanf_r+0x204>
 800a16a:	|     |  \-------------------------------> 89a3      	ldrh	r3, [r4, #12]
 800a16c:	|     |                                    f013 0f40 	tst.w	r3, #64	; 0x40
 800a170:	|     |                                    bf18      	it	ne
 800a172:	|     |                                    f04f 30ff 	movne.w	r0, #4294967295
 800a176:	|     >----------------------------------> f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a17a:	|     |                                    e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
 800a17e:	\-----|----------------------------------> 9844      	ldr	r0, [sp, #272]	; 0x110
 800a180:	      \----------------------------------- e7f9      	b.n	800a176 <__ssvfiscanf_r+0x2de>
 800a182:	                                           bf00      	nop
 800a184:	                                           0000      	movs	r0, r0
	...

0800a188 <_scanf_chars>:
 800a188:	                e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a18c:	                4615      	mov	r5, r2
 800a18e:	                688a      	ldr	r2, [r1, #8]
 800a190:	                4680      	mov	r8, r0
 800a192:	                460c      	mov	r4, r1
 800a194:	            /-- b932      	cbnz	r2, 800a1a4 <_scanf_chars+0x1c>
 800a196:	            |   698a      	ldr	r2, [r1, #24]
 800a198:	            |   2a00      	cmp	r2, #0
 800a19a:	            |   bf0c      	ite	eq
 800a19c:	            |   2201      	moveq	r2, #1
 800a19e:	            |   f04f 32ff 	movne.w	r2, #4294967295
 800a1a2:	            |   608a      	str	r2, [r1, #8]
 800a1a4:	            \-> 6822      	ldr	r2, [r4, #0]
 800a1a6:	                f8df 9090 	ldr.w	r9, [pc, #144]	; 800a238 <_scanf_chars+0xb0>
 800a1aa:	                06d1      	lsls	r1, r2, #27
 800a1ac:	                bf5f      	itttt	pl
 800a1ae:	                681a      	ldrpl	r2, [r3, #0]
 800a1b0:	                1d11      	addpl	r1, r2, #4
 800a1b2:	                6019      	strpl	r1, [r3, #0]
 800a1b4:	                6816      	ldrpl	r6, [r2, #0]
 800a1b6:	                2700      	movs	r7, #0
 800a1b8:	   /----------> 69a0      	ldr	r0, [r4, #24]
 800a1ba:	   |     /----- b188      	cbz	r0, 800a1e0 <_scanf_chars+0x58>
 800a1bc:	   |     |      2801      	cmp	r0, #1
 800a1be:	   |     |  /-- d107      	bne.n	800a1d0 <_scanf_chars+0x48>
 800a1c0:	   |     |  |   682a      	ldr	r2, [r5, #0]
 800a1c2:	   |     |  |   7811      	ldrb	r1, [r2, #0]
 800a1c4:	   |     |  |   6962      	ldr	r2, [r4, #20]
 800a1c6:	   |     |  |   5c52      	ldrb	r2, [r2, r1]
 800a1c8:	   |     +--|-- b952      	cbnz	r2, 800a1e0 <_scanf_chars+0x58>
 800a1ca:	   |     |  |   2f00      	cmp	r7, #0
 800a1cc:	/--|-----|--|-- d031      	beq.n	800a232 <_scanf_chars+0xaa>
 800a1ce:	|  |  /--|--|-- e022      	b.n	800a216 <_scanf_chars+0x8e>
 800a1d0:	|  |  |  |  \-> 2802      	cmp	r0, #2
 800a1d2:	|  |  +--|----- d120      	bne.n	800a216 <_scanf_chars+0x8e>
 800a1d4:	|  |  |  |      682b      	ldr	r3, [r5, #0]
 800a1d6:	|  |  |  |      781b      	ldrb	r3, [r3, #0]
 800a1d8:	|  |  |  |      f813 3009 	ldrb.w	r3, [r3, r9]
 800a1dc:	|  |  |  |      071b      	lsls	r3, r3, #28
 800a1de:	|  |  +--|----- d41a      	bmi.n	800a216 <_scanf_chars+0x8e>
 800a1e0:	|  |  |  \----> 6823      	ldr	r3, [r4, #0]
 800a1e2:	|  |  |         06da      	lsls	r2, r3, #27
 800a1e4:	|  |  |         bf5e      	ittt	pl
 800a1e6:	|  |  |         682b      	ldrpl	r3, [r5, #0]
 800a1e8:	|  |  |         781b      	ldrbpl	r3, [r3, #0]
 800a1ea:	|  |  |         f806 3b01 	strbpl.w	r3, [r6], #1
 800a1ee:	|  |  |         682a      	ldr	r2, [r5, #0]
 800a1f0:	|  |  |         686b      	ldr	r3, [r5, #4]
 800a1f2:	|  |  |         3201      	adds	r2, #1
 800a1f4:	|  |  |         602a      	str	r2, [r5, #0]
 800a1f6:	|  |  |         68a2      	ldr	r2, [r4, #8]
 800a1f8:	|  |  |         3b01      	subs	r3, #1
 800a1fa:	|  |  |         3a01      	subs	r2, #1
 800a1fc:	|  |  |         606b      	str	r3, [r5, #4]
 800a1fe:	|  |  |         3701      	adds	r7, #1
 800a200:	|  |  |         60a2      	str	r2, [r4, #8]
 800a202:	|  |  +-------- b142      	cbz	r2, 800a216 <_scanf_chars+0x8e>
 800a204:	|  |  |         2b00      	cmp	r3, #0
 800a206:	|  +--|-------- dcd7      	bgt.n	800a1b8 <_scanf_chars+0x30>
 800a208:	|  |  |         f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a20c:	|  |  |         4629      	mov	r1, r5
 800a20e:	|  |  |         4640      	mov	r0, r8
 800a210:	|  |  |         4798      	blx	r3
 800a212:	|  |  |         2800      	cmp	r0, #0
 800a214:	|  \--|-------- d0d0      	beq.n	800a1b8 <_scanf_chars+0x30>
 800a216:	|     \-------> 6823      	ldr	r3, [r4, #0]
 800a218:	|               f013 0310 	ands.w	r3, r3, #16
 800a21c:	|           /-- d105      	bne.n	800a22a <_scanf_chars+0xa2>
 800a21e:	|           |   68e2      	ldr	r2, [r4, #12]
 800a220:	|           |   3201      	adds	r2, #1
 800a222:	|           |   60e2      	str	r2, [r4, #12]
 800a224:	|           |   69a2      	ldr	r2, [r4, #24]
 800a226:	|           +-- b102      	cbz	r2, 800a22a <_scanf_chars+0xa2>
 800a228:	|           |   7033      	strb	r3, [r6, #0]
 800a22a:	|           \-> 6923      	ldr	r3, [r4, #16]
 800a22c:	|               443b      	add	r3, r7
 800a22e:	|               6123      	str	r3, [r4, #16]
 800a230:	|               2000      	movs	r0, #0
 800a232:	\-------------> e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a236:	                bf00      	nop
 800a238:	                b240      	sxtb	r0, r0
 800a23a:	                0800      	lsrs	r0, r0, #32

0800a23c <_scanf_i>:
 800a23c:	                                  e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 800a240:	                                  4698      	mov	r8, r3
 800a242:	                                  4b74      	ldr	r3, [pc, #464]	; (800a414 <_scanf_i+0x1d8>)
 800a244:	                                  460c      	mov	r4, r1
 800a246:	                                  4682      	mov	r10, r0
 800a248:	                                  4616      	mov	r6, r2
 800a24a:	                                  e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a24e:	                                  b087      	sub	sp, #28
 800a250:	                                  ab03      	add	r3, sp, #12
 800a252:	                                  e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a256:	                                  4b70      	ldr	r3, [pc, #448]	; (800a418 <_scanf_i+0x1dc>)
 800a258:	                                  69a1      	ldr	r1, [r4, #24]
 800a25a:	                                  4a70      	ldr	r2, [pc, #448]	; (800a41c <_scanf_i+0x1e0>)
 800a25c:	                                  2903      	cmp	r1, #3
 800a25e:	                                  bf18      	it	ne
 800a260:	                                  461a      	movne	r2, r3
 800a262:	                                  68a3      	ldr	r3, [r4, #8]
 800a264:	                                  9201      	str	r2, [sp, #4]
 800a266:	                                  1e5a      	subs	r2, r3, #1
 800a268:	                                  f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a26c:	                                  bf88      	it	hi
 800a26e:	                                  f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a272:	                                  4627      	mov	r7, r4
 800a274:	                                  bf82      	ittt	hi
 800a276:	                                  eb03 0905 	addhi.w	r9, r3, r5
 800a27a:	                                  f240 135d 	movwhi	r3, #349	; 0x15d
 800a27e:	                                  60a3      	strhi	r3, [r4, #8]
 800a280:	                                  f857 3b1c 	ldr.w	r3, [r7], #28
 800a284:	                                  f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a288:	                                  bf98      	it	ls
 800a28a:	                                  f04f 0900 	movls.w	r9, #0
 800a28e:	                                  6023      	str	r3, [r4, #0]
 800a290:	                                  463d      	mov	r5, r7
 800a292:	                                  f04f 0b00 	mov.w	r11, #0
 800a296:	                           /----> 6831      	ldr	r1, [r6, #0]
 800a298:	                           |      ab03      	add	r3, sp, #12
 800a29a:	                           |      7809      	ldrb	r1, [r1, #0]
 800a29c:	                           |      f853 002b 	ldr.w	r0, [r3, r11, lsl #2]
 800a2a0:	                           |      2202      	movs	r2, #2
 800a2a2:	                           |      f7ff fb15 	bl	80098d0 <memchr>
 800a2a6:	      /--------------------|----- b328      	cbz	r0, 800a2f4 <_scanf_i+0xb8>
 800a2a8:	      |                    |      f1bb 0f01 	cmp.w	r11, #1
 800a2ac:	      |     /--------------|----- d159      	bne.n	800a362 <_scanf_i+0x126>
 800a2ae:	      |     |              |      6862      	ldr	r2, [r4, #4]
 800a2b0:	      |     |              |  /-- b92a      	cbnz	r2, 800a2be <_scanf_i+0x82>
 800a2b2:	      |     |              |  |   6822      	ldr	r2, [r4, #0]
 800a2b4:	      |     |              |  |   2308      	movs	r3, #8
 800a2b6:	      |     |              |  |   f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2ba:	      |     |              |  |   6063      	str	r3, [r4, #4]
 800a2bc:	      |     |              |  |   6022      	str	r2, [r4, #0]
 800a2be:	      |     |              |  \-> 6822      	ldr	r2, [r4, #0]
 800a2c0:	      |     |              |      f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a2c4:	      |  /--|--------------|----> 6022      	str	r2, [r4, #0]
 800a2c6:	      |  |  |  /-----------|----> 68a2      	ldr	r2, [r4, #8]
 800a2c8:	      |  |  |  |           |      1e51      	subs	r1, r2, #1
 800a2ca:	      |  |  |  |           |      60a1      	str	r1, [r4, #8]
 800a2cc:	      +--|--|--|-----------|----- b192      	cbz	r2, 800a2f4 <_scanf_i+0xb8>
 800a2ce:	      |  |  |  |           |      6832      	ldr	r2, [r6, #0]
 800a2d0:	      |  |  |  |           |      1c51      	adds	r1, r2, #1
 800a2d2:	      |  |  |  |           |      6031      	str	r1, [r6, #0]
 800a2d4:	      |  |  |  |           |      7812      	ldrb	r2, [r2, #0]
 800a2d6:	      |  |  |  |           |      f805 2b01 	strb.w	r2, [r5], #1
 800a2da:	      |  |  |  |           |      6872      	ldr	r2, [r6, #4]
 800a2dc:	      |  |  |  |           |      3a01      	subs	r2, #1
 800a2de:	      |  |  |  |           |      2a00      	cmp	r2, #0
 800a2e0:	      |  |  |  |           |      6072      	str	r2, [r6, #4]
 800a2e2:	      +--|--|--|-----------|----- dc07      	bgt.n	800a2f4 <_scanf_i+0xb8>
 800a2e4:	      |  |  |  |           |      f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a2e8:	      |  |  |  |           |      4631      	mov	r1, r6
 800a2ea:	      |  |  |  |           |      4650      	mov	r0, r10
 800a2ec:	      |  |  |  |           |      4790      	blx	r2
 800a2ee:	      |  |  |  |           |      2800      	cmp	r0, #0
 800a2f0:	/-----|--|--|--|-----------|----- f040 8085 	bne.w	800a3fe <_scanf_i+0x1c2>
 800a2f4:	|     >--|--|--|-----------|----> f10b 0b01 	add.w	r11, r11, #1
 800a2f8:	|     |  |  |  |           |      f1bb 0f03 	cmp.w	r11, #3
 800a2fc:	|     |  |  |  |           \----- d1cb      	bne.n	800a296 <_scanf_i+0x5a>
 800a2fe:	|     |  |  |  |                  6863      	ldr	r3, [r4, #4]
 800a300:	|     |  |  |  |              /-- b90b      	cbnz	r3, 800a306 <_scanf_i+0xca>
 800a302:	|     |  |  |  |              |   230a      	movs	r3, #10
 800a304:	|     |  |  |  |              |   6063      	str	r3, [r4, #4]
 800a306:	|     |  |  |  |              \-> 6863      	ldr	r3, [r4, #4]
 800a308:	|     |  |  |  |                  4945      	ldr	r1, [pc, #276]	; (800a420 <_scanf_i+0x1e4>)
 800a30a:	|     |  |  |  |                  6960      	ldr	r0, [r4, #20]
 800a30c:	|     |  |  |  |                  1ac9      	subs	r1, r1, r3
 800a30e:	|     |  |  |  |                  f000 f905 	bl	800a51c <__sccl>
 800a312:	|     |  |  |  |                  f04f 0b00 	mov.w	r11, #0
 800a316:	|     |  |  |  |        /-------> 68a3      	ldr	r3, [r4, #8]
 800a318:	|     |  |  |  |        |         6822      	ldr	r2, [r4, #0]
 800a31a:	|     |  |  |  |        |         2b00      	cmp	r3, #0
 800a31c:	|  /--|--|--|--|--------|-------- d03d      	beq.n	800a39a <_scanf_i+0x15e>
 800a31e:	|  |  |  |  |  |        |         6831      	ldr	r1, [r6, #0]
 800a320:	|  |  |  |  |  |        |         6960      	ldr	r0, [r4, #20]
 800a322:	|  |  |  |  |  |        |         f891 c000 	ldrb.w	r12, [r1]
 800a326:	|  |  |  |  |  |        |         f810 000c 	ldrb.w	r0, [r0, r12]
 800a32a:	|  |  |  |  |  |        |         2800      	cmp	r0, #0
 800a32c:	|  +--|--|--|--|--------|-------- d035      	beq.n	800a39a <_scanf_i+0x15e>
 800a32e:	|  |  |  |  |  |        |         f1bc 0f30 	cmp.w	r12, #48	; 0x30
 800a332:	|  |  |  |  |  |  /-----|-------- d124      	bne.n	800a37e <_scanf_i+0x142>
 800a334:	|  |  |  |  |  |  |     |         0510      	lsls	r0, r2, #20
 800a336:	|  |  |  |  |  |  +-----|-------- d522      	bpl.n	800a37e <_scanf_i+0x142>
 800a338:	|  |  |  |  |  |  |     |         f10b 0b01 	add.w	r11, r11, #1
 800a33c:	|  |  |  |  |  |  |     |         f1b9 0f00 	cmp.w	r9, #0
 800a340:	|  |  |  |  |  |  |  /--|-------- d003      	beq.n	800a34a <_scanf_i+0x10e>
 800a342:	|  |  |  |  |  |  |  |  |         3301      	adds	r3, #1
 800a344:	|  |  |  |  |  |  |  |  |         f109 39ff 	add.w	r9, r9, #4294967295
 800a348:	|  |  |  |  |  |  |  |  |         60a3      	str	r3, [r4, #8]
 800a34a:	|  |  |  |  |  |  |  >--|-------> 6873      	ldr	r3, [r6, #4]
 800a34c:	|  |  |  |  |  |  |  |  |         3b01      	subs	r3, #1
 800a34e:	|  |  |  |  |  |  |  |  |         2b00      	cmp	r3, #0
 800a350:	|  |  |  |  |  |  |  |  |         6073      	str	r3, [r6, #4]
 800a352:	|  |  |  |  |  |  |  |  |     /-- dd1b      	ble.n	800a38c <_scanf_i+0x150>
 800a354:	|  |  |  |  |  |  |  |  |     |   6833      	ldr	r3, [r6, #0]
 800a356:	|  |  |  |  |  |  |  |  |     |   3301      	adds	r3, #1
 800a358:	|  |  |  |  |  |  |  |  |     |   6033      	str	r3, [r6, #0]
 800a35a:	|  |  |  |  |  |  |  |  |  /--|-> 68a3      	ldr	r3, [r4, #8]
 800a35c:	|  |  |  |  |  |  |  |  |  |  |   3b01      	subs	r3, #1
 800a35e:	|  |  |  |  |  |  |  |  |  |  |   60a3      	str	r3, [r4, #8]
 800a360:	|  |  |  |  |  |  |  |  \--|--|-- e7d9      	b.n	800a316 <_scanf_i+0xda>
 800a362:	|  |  |  |  \--|--|--|-----|--|-> f1bb 0f02 	cmp.w	r11, #2
 800a366:	|  |  |  |     \--|--|-----|--|-- d1ae      	bne.n	800a2c6 <_scanf_i+0x8a>
 800a368:	|  |  |  |        |  |     |  |   6822      	ldr	r2, [r4, #0]
 800a36a:	|  |  |  |        |  |     |  |   f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a36e:	|  |  |  |        |  |     |  |   f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a372:	|  |  \--|--------|--|-----|--|-- d1bf      	bne.n	800a2f4 <_scanf_i+0xb8>
 800a374:	|  |     |        |  |     |  |   2310      	movs	r3, #16
 800a376:	|  |     |        |  |     |  |   6063      	str	r3, [r4, #4]
 800a378:	|  |     |        |  |     |  |   f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a37c:	|  |     \--------|--|-----|--|-- e7a2      	b.n	800a2c4 <_scanf_i+0x88>
 800a37e:	|  |              \--|-----|--|-> f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a382:	|  |                 |     |  |   6022      	str	r2, [r4, #0]
 800a384:	|  |                 |     |  |   780b      	ldrb	r3, [r1, #0]
 800a386:	|  |                 |     |  |   f805 3b01 	strb.w	r3, [r5], #1
 800a38a:	|  |                 \-----|--|-- e7de      	b.n	800a34a <_scanf_i+0x10e>
 800a38c:	|  |                       |  \-> f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a390:	|  |                       |      4631      	mov	r1, r6
 800a392:	|  |                       |      4650      	mov	r0, r10
 800a394:	|  |                       |      4798      	blx	r3
 800a396:	|  |                       |      2800      	cmp	r0, #0
 800a398:	|  |                       \----- d0df      	beq.n	800a35a <_scanf_i+0x11e>
 800a39a:	|  >----------------------------> 6823      	ldr	r3, [r4, #0]
 800a39c:	|  |                              05d9      	lsls	r1, r3, #23
 800a39e:	|  |                       /----- d50d      	bpl.n	800a3bc <_scanf_i+0x180>
 800a3a0:	|  |                       |      42bd      	cmp	r5, r7
 800a3a2:	|  |                       |  /-- d909      	bls.n	800a3b8 <_scanf_i+0x17c>
 800a3a4:	|  |                       |  |   f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a3a8:	|  |                       |  |   f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3ac:	|  |                       |  |   4632      	mov	r2, r6
 800a3ae:	|  |                       |  |   4650      	mov	r0, r10
 800a3b0:	|  |                       |  |   4798      	blx	r3
 800a3b2:	|  |                       |  |   f105 39ff 	add.w	r9, r5, #4294967295
 800a3b6:	|  |                       |  |   464d      	mov	r5, r9
 800a3b8:	|  |                       |  \-> 42bd      	cmp	r5, r7
 800a3ba:	|  |                 /-----|----- d028      	beq.n	800a40e <_scanf_i+0x1d2>
 800a3bc:	|  |                 |     \----> 6822      	ldr	r2, [r4, #0]
 800a3be:	|  |                 |            f012 0210 	ands.w	r2, r2, #16
 800a3c2:	|  |                 |        /-- d113      	bne.n	800a3ec <_scanf_i+0x1b0>
 800a3c4:	|  |                 |        |   702a      	strb	r2, [r5, #0]
 800a3c6:	|  |                 |        |   6863      	ldr	r3, [r4, #4]
 800a3c8:	|  |                 |        |   9e01      	ldr	r6, [sp, #4]
 800a3ca:	|  |                 |        |   4639      	mov	r1, r7
 800a3cc:	|  |                 |        |   4650      	mov	r0, r10
 800a3ce:	|  |                 |        |   47b0      	blx	r6
 800a3d0:	|  |                 |        |   f8d8 3000 	ldr.w	r3, [r8]
 800a3d4:	|  |                 |        |   6821      	ldr	r1, [r4, #0]
 800a3d6:	|  |                 |        |   1d1a      	adds	r2, r3, #4
 800a3d8:	|  |                 |        |   f8c8 2000 	str.w	r2, [r8]
 800a3dc:	|  |                 |        |   f011 0f20 	tst.w	r1, #32
 800a3e0:	|  |                 |        |   681b      	ldr	r3, [r3, #0]
 800a3e2:	|  |                 |     /--|-- d00f      	beq.n	800a404 <_scanf_i+0x1c8>
 800a3e4:	|  |                 |     |  |   6018      	str	r0, [r3, #0]
 800a3e6:	|  |                 |  /--|--|-> 68e3      	ldr	r3, [r4, #12]
 800a3e8:	|  |                 |  |  |  |   3301      	adds	r3, #1
 800a3ea:	|  |                 |  |  |  |   60e3      	str	r3, [r4, #12]
 800a3ec:	|  |                 |  |  |  \-> 1bed      	subs	r5, r5, r7
 800a3ee:	|  |                 |  |  |      44ab      	add	r11, r5
 800a3f0:	|  |                 |  |  |      6925      	ldr	r5, [r4, #16]
 800a3f2:	|  |                 |  |  |      445d      	add	r5, r11
 800a3f4:	|  |                 |  |  |      6125      	str	r5, [r4, #16]
 800a3f6:	|  |                 |  |  |      2000      	movs	r0, #0
 800a3f8:	|  |                 |  |  |  /-> b007      	add	sp, #28
 800a3fa:	|  |                 |  |  |  |   e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800a3fe:	\--|-----------------|--|--|--|-> f04f 0b00 	mov.w	r11, #0
 800a402:	   \-----------------|--|--|--|-- e7ca      	b.n	800a39a <_scanf_i+0x15e>
 800a404:	                     |  |  \--|-> 07ca      	lsls	r2, r1, #31
 800a406:	                     |  |     |   bf4c      	ite	mi
 800a408:	                     |  |     |   8018      	strhmi	r0, [r3, #0]
 800a40a:	                     |  |     |   6018      	strpl	r0, [r3, #0]
 800a40c:	                     |  \-----|-- e7eb      	b.n	800a3e6 <_scanf_i+0x1aa>
 800a40e:	                     \--------|-> 2001      	movs	r0, #1
 800a410:	                              \-- e7f2      	b.n	800a3f8 <_scanf_i+0x1bc>
 800a412:	                                  bf00      	nop
 800a414:	                                  b1ec      	cbz	r4, 800a452 <cleanup_glue+0xa>
 800a416:	                                  0800      	lsrs	r0, r0, #32
 800a418:	                                  a7a1      	add	r7, pc, #644	; (adr r7, 800a6a0 <strtol_l+0xc>)
 800a41a:	                                  0800      	lsrs	r0, r0, #32
 800a41c:	                                  a691      	add	r6, pc, #580	; (adr r6, 800a664 <_strtol_l.constprop.0+0xd8>)
 800a41e:	                                  0800      	lsrs	r0, r0, #32
 800a420:	                                  b23d      	sxth	r5, r7
 800a422:	                                  0800      	lsrs	r0, r0, #32

0800a424 <_read_r>:
 800a424:	    b538      	push	{r3, r4, r5, lr}
 800a426:	    4d07      	ldr	r5, [pc, #28]	; (800a444 <_read_r+0x20>)
 800a428:	    4604      	mov	r4, r0
 800a42a:	    4608      	mov	r0, r1
 800a42c:	    4611      	mov	r1, r2
 800a42e:	    2200      	movs	r2, #0
 800a430:	    602a      	str	r2, [r5, #0]
 800a432:	    461a      	mov	r2, r3
 800a434:	    f000 fd14 	bl	800ae60 <_read>
 800a438:	    1c43      	adds	r3, r0, #1
 800a43a:	/-- d102      	bne.n	800a442 <_read_r+0x1e>
 800a43c:	|   682b      	ldr	r3, [r5, #0]
 800a43e:	+-- b103      	cbz	r3, 800a442 <_read_r+0x1e>
 800a440:	|   6023      	str	r3, [r4, #0]
 800a442:	\-> bd38      	pop	{r3, r4, r5, pc}
 800a444:	    5320      	strh	r0, [r4, r4]
 800a446:	    2000      	movs	r0, #0

0800a448 <cleanup_glue>:
 800a448:	/----> b538      	push	{r3, r4, r5, lr}
 800a44a:	|      460c      	mov	r4, r1
 800a44c:	|      6809      	ldr	r1, [r1, #0]
 800a44e:	|      4605      	mov	r5, r0
 800a450:	|  /-- b109      	cbz	r1, 800a456 <cleanup_glue+0xe>
 800a452:	\--|-- f7ff fff9 	bl	800a448 <cleanup_glue>
 800a456:	   \-> 4621      	mov	r1, r4
 800a458:	       4628      	mov	r0, r5
 800a45a:	       e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a45e:	       f7ff bb0d 	b.w	8009a7c <_free_r>
	...

0800a464 <_reclaim_reent>:
 800a464:	                      4b2c      	ldr	r3, [pc, #176]	; (800a518 <_reclaim_reent+0xb4>)
 800a466:	                      681b      	ldr	r3, [r3, #0]
 800a468:	                      4283      	cmp	r3, r0
 800a46a:	                      b570      	push	{r4, r5, r6, lr}
 800a46c:	                      4604      	mov	r4, r0
 800a46e:	/-------------------- d051      	beq.n	800a514 <_reclaim_reent+0xb0>
 800a470:	|                     6a43      	ldr	r3, [r0, #36]	; 0x24
 800a472:	|                 /-- b143      	cbz	r3, 800a486 <_reclaim_reent+0x22>
 800a474:	|                 |   68db      	ldr	r3, [r3, #12]
 800a476:	|                 |   2b00      	cmp	r3, #0
 800a478:	|  /--------------|-- d14a      	bne.n	800a510 <_reclaim_reent+0xac>
 800a47a:	|  |  /-----------|-> 6a63      	ldr	r3, [r4, #36]	; 0x24
 800a47c:	|  |  |           |   6819      	ldr	r1, [r3, #0]
 800a47e:	|  |  |           +-- b111      	cbz	r1, 800a486 <_reclaim_reent+0x22>
 800a480:	|  |  |           |   4620      	mov	r0, r4
 800a482:	|  |  |           |   f7ff fafb 	bl	8009a7c <_free_r>
 800a486:	|  |  |           \-> 6961      	ldr	r1, [r4, #20]
 800a488:	|  |  |           /-- b111      	cbz	r1, 800a490 <_reclaim_reent+0x2c>
 800a48a:	|  |  |           |   4620      	mov	r0, r4
 800a48c:	|  |  |           |   f7ff faf6 	bl	8009a7c <_free_r>
 800a490:	|  |  |           \-> 6a61      	ldr	r1, [r4, #36]	; 0x24
 800a492:	|  |  |           /-- b111      	cbz	r1, 800a49a <_reclaim_reent+0x36>
 800a494:	|  |  |           |   4620      	mov	r0, r4
 800a496:	|  |  |           |   f7ff faf1 	bl	8009a7c <_free_r>
 800a49a:	|  |  |           \-> 6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a49c:	|  |  |           /-- b111      	cbz	r1, 800a4a4 <_reclaim_reent+0x40>
 800a49e:	|  |  |           |   4620      	mov	r0, r4
 800a4a0:	|  |  |           |   f7ff faec 	bl	8009a7c <_free_r>
 800a4a4:	|  |  |           \-> 6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a4a6:	|  |  |           /-- b111      	cbz	r1, 800a4ae <_reclaim_reent+0x4a>
 800a4a8:	|  |  |           |   4620      	mov	r0, r4
 800a4aa:	|  |  |           |   f7ff fae7 	bl	8009a7c <_free_r>
 800a4ae:	|  |  |           \-> 6c21      	ldr	r1, [r4, #64]	; 0x40
 800a4b0:	|  |  |           /-- b111      	cbz	r1, 800a4b8 <_reclaim_reent+0x54>
 800a4b2:	|  |  |           |   4620      	mov	r0, r4
 800a4b4:	|  |  |           |   f7ff fae2 	bl	8009a7c <_free_r>
 800a4b8:	|  |  |           \-> 6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a4ba:	|  |  |           /-- b111      	cbz	r1, 800a4c2 <_reclaim_reent+0x5e>
 800a4bc:	|  |  |           |   4620      	mov	r0, r4
 800a4be:	|  |  |           |   f7ff fadd 	bl	8009a7c <_free_r>
 800a4c2:	|  |  |           \-> 6da1      	ldr	r1, [r4, #88]	; 0x58
 800a4c4:	|  |  |           /-- b111      	cbz	r1, 800a4cc <_reclaim_reent+0x68>
 800a4c6:	|  |  |           |   4620      	mov	r0, r4
 800a4c8:	|  |  |           |   f7ff fad8 	bl	8009a7c <_free_r>
 800a4cc:	|  |  |           \-> 6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4ce:	|  |  |           /-- b111      	cbz	r1, 800a4d6 <_reclaim_reent+0x72>
 800a4d0:	|  |  |           |   4620      	mov	r0, r4
 800a4d2:	|  |  |           |   f7ff fad3 	bl	8009a7c <_free_r>
 800a4d6:	|  |  |           \-> 69a3      	ldr	r3, [r4, #24]
 800a4d8:	+--|--|-------------- b1e3      	cbz	r3, 800a514 <_reclaim_reent+0xb0>
 800a4da:	|  |  |               6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a4dc:	|  |  |               4620      	mov	r0, r4
 800a4de:	|  |  |               4798      	blx	r3
 800a4e0:	|  |  |               6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a4e2:	+--|--|-------------- b1b9      	cbz	r1, 800a514 <_reclaim_reent+0xb0>
 800a4e4:	|  |  |               4620      	mov	r0, r4
 800a4e6:	|  |  |               e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4ea:	|  |  |               f7ff bfad 	b.w	800a448 <cleanup_glue>
 800a4ee:	|  |  |           /-> 5949      	ldr	r1, [r1, r5]
 800a4f0:	|  |  |     /--/--|-X b941      	cbnz	r1, 800a504 <_reclaim_reent+0xa0>
 800a4f2:	|  |  |     |  |  |   3504      	adds	r5, #4
 800a4f4:	|  |  |  /--|--|--|-> 6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4f6:	|  |  |  |  |  |  |   2d80      	cmp	r5, #128	; 0x80
 800a4f8:	|  |  |  |  |  |  |   68d9      	ldr	r1, [r3, #12]
 800a4fa:	|  |  |  |  |  |  \-- d1f8      	bne.n	800a4ee <_reclaim_reent+0x8a>
 800a4fc:	|  |  |  |  |  |      4620      	mov	r0, r4
 800a4fe:	|  |  |  |  |  |      f7ff fabd 	bl	8009a7c <_free_r>
 800a502:	|  |  \--|--|--|----- e7ba      	b.n	800a47a <_reclaim_reent+0x16>
 800a504:	|  |     |  |  \----> 680e      	ldr	r6, [r1, #0]
 800a506:	|  |     |  |         4620      	mov	r0, r4
 800a508:	|  |     |  |         f7ff fab8 	bl	8009a7c <_free_r>
 800a50c:	|  |     |  |         4631      	mov	r1, r6
 800a50e:	|  |     |  \-------- e7ef      	b.n	800a4f0 <_reclaim_reent+0x8c>
 800a510:	|  \-----|----------> 2500      	movs	r5, #0
 800a512:	|        \----------- e7ef      	b.n	800a4f4 <_reclaim_reent+0x90>
 800a514:	\-------------------> bd70      	pop	{r4, r5, r6, pc}
 800a516:	                      bf00      	nop
 800a518:	                      07e8      	lsls	r0, r5, #31
 800a51a:	                      2000      	movs	r0, #0

0800a51c <__sccl>:
 800a51c:	                b570      	push	{r4, r5, r6, lr}
 800a51e:	                780b      	ldrb	r3, [r1, #0]
 800a520:	                4604      	mov	r4, r0
 800a522:	                2b5e      	cmp	r3, #94	; 0x5e
 800a524:	                bf0b      	itete	eq
 800a526:	                784b      	ldrbeq	r3, [r1, #1]
 800a528:	                1c48      	addne	r0, r1, #1
 800a52a:	                1c88      	addeq	r0, r1, #2
 800a52c:	                2200      	movne	r2, #0
 800a52e:	                bf08      	it	eq
 800a530:	                2201      	moveq	r2, #1
 800a532:	                1e61      	subs	r1, r4, #1
 800a534:	                f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a538:	            /-> f801 2f01 	strb.w	r2, [r1, #1]!
 800a53c:	            |   42a9      	cmp	r1, r5
 800a53e:	            \-- d1fb      	bne.n	800a538 <__sccl+0x1c>
 800a540:	            /-- b90b      	cbnz	r3, 800a546 <__sccl+0x2a>
 800a542:	            |   3801      	subs	r0, #1
 800a544:	   /--------|-> bd70      	pop	{r4, r5, r6, pc}
 800a546:	   |        \-> f082 0201 	eor.w	r2, r2, #1
 800a54a:	   |  /-------> 54e2      	strb	r2, [r4, r3]
 800a54c:	   |  |         4605      	mov	r5, r0
 800a54e:	/--|--|-------> 4628      	mov	r0, r5
 800a550:	|  |  |         f810 1b01 	ldrb.w	r1, [r0], #1
 800a554:	|  |  |         292d      	cmp	r1, #45	; 0x2d
 800a556:	|  |  |     /-- d006      	beq.n	800a566 <__sccl+0x4a>
 800a558:	|  |  |     |   295d      	cmp	r1, #93	; 0x5d
 800a55a:	|  +--|-----|-- d0f3      	beq.n	800a544 <__sccl+0x28>
 800a55c:	|  |  |  /--|-- b909      	cbnz	r1, 800a562 <__sccl+0x46>
 800a55e:	|  |  |  |  |   4628      	mov	r0, r5
 800a560:	|  \--|--|--|-- e7f0      	b.n	800a544 <__sccl+0x28>
 800a562:	|     |  >--|-> 460b      	mov	r3, r1
 800a564:	|     \--|--|-- e7f1      	b.n	800a54a <__sccl+0x2e>
 800a566:	|        |  \-> 786e      	ldrb	r6, [r5, #1]
 800a568:	|        |      2e5d      	cmp	r6, #93	; 0x5d
 800a56a:	|        +----- d0fa      	beq.n	800a562 <__sccl+0x46>
 800a56c:	|        |      42b3      	cmp	r3, r6
 800a56e:	|        \----- dcf8      	bgt.n	800a562 <__sccl+0x46>
 800a570:	|               3502      	adds	r5, #2
 800a572:	|               4619      	mov	r1, r3
 800a574:	|           /-> 3101      	adds	r1, #1
 800a576:	|           |   428e      	cmp	r6, r1
 800a578:	|           |   5462      	strb	r2, [r4, r1]
 800a57a:	|           \-- dcfb      	bgt.n	800a574 <__sccl+0x58>
 800a57c:	|               1af1      	subs	r1, r6, r3
 800a57e:	|               3901      	subs	r1, #1
 800a580:	|               1c58      	adds	r0, r3, #1
 800a582:	|               42b3      	cmp	r3, r6
 800a584:	|               bfa8      	it	ge
 800a586:	|               2100      	movge	r1, #0
 800a588:	|               1843      	adds	r3, r0, r1
 800a58a:	\-------------- e7e0      	b.n	800a54e <__sccl+0x32>

0800a58c <_strtol_l.constprop.0>:
 800a58c:	                                           2b01      	cmp	r3, #1
 800a58e:	                                           e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
 800a592:	                                       /-- d001      	beq.n	800a598 <_strtol_l.constprop.0+0xc>
 800a594:	                                       |   2b24      	cmp	r3, #36	; 0x24
 800a596:	                                    /--|-- d906      	bls.n	800a5a6 <_strtol_l.constprop.0+0x1a>
 800a598:	                                    |  \-> f000 f9f2 	bl	800a980 <__errno>
 800a59c:	                                    |      2316      	movs	r3, #22
 800a59e:	                                    |      6003      	str	r3, [r0, #0]
 800a5a0:	                                    |      2000      	movs	r0, #0
 800a5a2:	/-----------------------------------|----> e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
 800a5a6:	|                                   \----> f8df c0e4 	ldr.w	r12, [pc, #228]	; 800a68c <_strtol_l.constprop.0+0x100>
 800a5aa:	|                                          460d      	mov	r5, r1
 800a5ac:	|                                      /-> 462e      	mov	r6, r5
 800a5ae:	|                                      |   f815 4b01 	ldrb.w	r4, [r5], #1
 800a5b2:	|                                      |   f814 700c 	ldrb.w	r7, [r4, r12]
 800a5b6:	|                                      |   f017 0708 	ands.w	r7, r7, #8
 800a5ba:	|                                      \-- d1f7      	bne.n	800a5ac <_strtol_l.constprop.0+0x20>
 800a5bc:	|                                          2c2d      	cmp	r4, #45	; 0x2d
 800a5be:	|                 /----------------------- d132      	bne.n	800a626 <_strtol_l.constprop.0+0x9a>
 800a5c0:	|                 |                        782c      	ldrb	r4, [r5, #0]
 800a5c2:	|                 |                        2701      	movs	r7, #1
 800a5c4:	|                 |                        1cb5      	adds	r5, r6, #2
 800a5c6:	|              /--|----------------------> 2b00      	cmp	r3, #0
 800a5c8:	|     /--------|--|----------------------- d05b      	beq.n	800a682 <_strtol_l.constprop.0+0xf6>
 800a5ca:	|     |        |  |                        2b10      	cmp	r3, #16
 800a5cc:	|  /--|--------|--|----------------------- d109      	bne.n	800a5e2 <_strtol_l.constprop.0+0x56>
 800a5ce:	|  |  |        |  |                        2c30      	cmp	r4, #48	; 0x30
 800a5d0:	|  +--|--------|--|----------------------- d107      	bne.n	800a5e2 <_strtol_l.constprop.0+0x56>
 800a5d2:	|  |  |  /-----|--|----------------------> 782c      	ldrb	r4, [r5, #0]
 800a5d4:	|  |  |  |     |  |                        f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a5d8:	|  |  |  |     |  |                        2c58      	cmp	r4, #88	; 0x58
 800a5da:	|  |  |  |  /--|--|----------------------- d14d      	bne.n	800a678 <_strtol_l.constprop.0+0xec>
 800a5dc:	|  |  |  |  |  |  |                        786c      	ldrb	r4, [r5, #1]
 800a5de:	|  |  |  |  |  |  |                        2310      	movs	r3, #16
 800a5e0:	|  |  |  |  |  |  |                        3502      	adds	r5, #2
 800a5e2:	|  >--|--|--|--|--|----------------------> f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a5e6:	|  |  |  |  |  |  |                        f108 38ff 	add.w	r8, r8, #4294967295
 800a5ea:	|  |  |  |  |  |  |                        f04f 0c00 	mov.w	r12, #0
 800a5ee:	|  |  |  |  |  |  |                        fbb8 f9f3 	udiv	r9, r8, r3
 800a5f2:	|  |  |  |  |  |  |                        4666      	mov	r6, r12
 800a5f4:	|  |  |  |  |  |  |                        fb03 8a19 	mls	r10, r3, r9, r8
 800a5f8:	|  |  |  |  |  |  |                 /----> f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a5fc:	|  |  |  |  |  |  |                 |      f1be 0f09 	cmp.w	lr, #9
 800a600:	|  |  |  |  |  |  |              /--|----- d816      	bhi.n	800a630 <_strtol_l.constprop.0+0xa4>
 800a602:	|  |  |  |  |  |  |              |  |      4674      	mov	r4, lr
 800a604:	|  |  |  |  |  |  |     /--------|--|----> 42a3      	cmp	r3, r4
 800a606:	|  |  |  |  |  |  |  /--|--------|--|----- dd24      	ble.n	800a652 <_strtol_l.constprop.0+0xc6>
 800a608:	|  |  |  |  |  |  |  |  |        |  |      f1bc 0f00 	cmp.w	r12, #0
 800a60c:	|  |  |  |  |  |  |  |  |  /-----|--|----- db1e      	blt.n	800a64c <_strtol_l.constprop.0+0xc0>
 800a60e:	|  |  |  |  |  |  |  |  |  |     |  |      45b1      	cmp	r9, r6
 800a610:	|  |  |  |  |  |  |  |  |  +-----|--|----- d31c      	bcc.n	800a64c <_strtol_l.constprop.0+0xc0>
 800a612:	|  |  |  |  |  |  |  |  |  |     |  |  /-- d101      	bne.n	800a618 <_strtol_l.constprop.0+0x8c>
 800a614:	|  |  |  |  |  |  |  |  |  |     |  |  |   45a2      	cmp	r10, r4
 800a616:	|  |  |  |  |  |  |  |  |  +-----|--|--|-- db19      	blt.n	800a64c <_strtol_l.constprop.0+0xc0>
 800a618:	|  |  |  |  |  |  |  |  |  |     |  |  \-> fb06 4603 	mla	r6, r6, r3, r4
 800a61c:	|  |  |  |  |  |  |  |  |  |     |  |      f04f 0c01 	mov.w	r12, #1
 800a620:	|  |  |  |  |  |  |  |  |  |  /--|--|----> f815 4b01 	ldrb.w	r4, [r5], #1
 800a624:	|  |  |  |  |  |  |  |  |  |  |  |  \----- e7e8      	b.n	800a5f8 <_strtol_l.constprop.0+0x6c>
 800a626:	|  |  |  |  |  |  \--|--|--|--|--|-------> 2c2b      	cmp	r4, #43	; 0x2b
 800a628:	|  |  |  |  |  |     |  |  |  |  |         bf04      	itt	eq
 800a62a:	|  |  |  |  |  |     |  |  |  |  |         782c      	ldrbeq	r4, [r5, #0]
 800a62c:	|  |  |  |  |  |     |  |  |  |  |         1cb5      	addeq	r5, r6, #2
 800a62e:	|  |  |  |  |  \-----|--|--|--|--|-------- e7ca      	b.n	800a5c6 <_strtol_l.constprop.0+0x3a>
 800a630:	|  |  |  |  |        |  |  |  |  \-------> f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a634:	|  |  |  |  |        |  |  |  |            f1be 0f19 	cmp.w	lr, #25
 800a638:	|  |  |  |  |        |  |  |  |        /-- d801      	bhi.n	800a63e <_strtol_l.constprop.0+0xb2>
 800a63a:	|  |  |  |  |        |  |  |  |        |   3c37      	subs	r4, #55	; 0x37
 800a63c:	|  |  |  |  |        |  +--|--|--------|-- e7e2      	b.n	800a604 <_strtol_l.constprop.0+0x78>
 800a63e:	|  |  |  |  |        |  |  |  |        \-> f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a642:	|  |  |  |  |        |  |  |  |            f1be 0f19 	cmp.w	lr, #25
 800a646:	|  |  |  |  |        +--|--|--|----------- d804      	bhi.n	800a652 <_strtol_l.constprop.0+0xc6>
 800a648:	|  |  |  |  |        |  |  |  |            3c57      	subs	r4, #87	; 0x57
 800a64a:	|  |  |  |  |        |  \--|--|----------- e7db      	b.n	800a604 <_strtol_l.constprop.0+0x78>
 800a64c:	|  |  |  |  |        |     \--|----------> f04f 3cff 	mov.w	r12, #4294967295
 800a650:	|  |  |  |  |        |        \----------- e7e6      	b.n	800a620 <_strtol_l.constprop.0+0x94>
 800a652:	|  |  |  |  |        \-------------------> f1bc 0f00 	cmp.w	r12, #0
 800a656:	|  |  |  |  |                       /----- da05      	bge.n	800a664 <_strtol_l.constprop.0+0xd8>
 800a658:	|  |  |  |  |                       |      2322      	movs	r3, #34	; 0x22
 800a65a:	|  |  |  |  |                       |      6003      	str	r3, [r0, #0]
 800a65c:	|  |  |  |  |                       |      4646      	mov	r6, r8
 800a65e:	|  |  |  |  |                    /--|----- b942      	cbnz	r2, 800a672 <_strtol_l.constprop.0+0xe6>
 800a660:	|  |  |  |  |                 /--|--|----> 4630      	mov	r0, r6
 800a662:	\--|--|--|--|-----------------|--|--|----- e79e      	b.n	800a5a2 <_strtol_l.constprop.0+0x16>
 800a664:	   |  |  |  |                 |  |  \--/-X b107      	cbz	r7, 800a668 <_strtol_l.constprop.0+0xdc>
 800a666:	   |  |  |  |                 |  |     |   4276      	negs	r6, r6
 800a668:	   |  |  |  |                 |  |     \-> 2a00      	cmp	r2, #0
 800a66a:	   |  |  |  |                 +--|-------- d0f9      	beq.n	800a660 <_strtol_l.constprop.0+0xd4>
 800a66c:	   |  |  |  |                 |  |         f1bc 0f00 	cmp.w	r12, #0
 800a670:	   |  |  |  |                 |  |     /-- d000      	beq.n	800a674 <_strtol_l.constprop.0+0xe8>
 800a672:	   |  |  |  |                 |  \-----|-> 1e69      	subs	r1, r5, #1
 800a674:	   |  |  |  |                 |        \-> 6011      	str	r1, [r2, #0]
 800a676:	   |  |  |  |                 \----------- e7f3      	b.n	800a660 <_strtol_l.constprop.0+0xd4>
 800a678:	   |  |  |  \----------------------------> 2430      	movs	r4, #48	; 0x30
 800a67a:	   |  |  |                                 2b00      	cmp	r3, #0
 800a67c:	   +--|--|-------------------------------- d1b1      	bne.n	800a5e2 <_strtol_l.constprop.0+0x56>
 800a67e:	   |  |  |                                 2308      	movs	r3, #8
 800a680:	   +--|--|-------------------------------- e7af      	b.n	800a5e2 <_strtol_l.constprop.0+0x56>
 800a682:	   |  \--|-------------------------------> 2c30      	cmp	r4, #48	; 0x30
 800a684:	   |     \-------------------------------- d0a5      	beq.n	800a5d2 <_strtol_l.constprop.0+0x46>
 800a686:	   |                                       230a      	movs	r3, #10
 800a688:	   \-------------------------------------- e7ab      	b.n	800a5e2 <_strtol_l.constprop.0+0x56>
 800a68a:	                                           bf00      	nop
 800a68c:	                                           b240      	sxtb	r0, r0
 800a68e:	                                           0800      	lsrs	r0, r0, #32

0800a690 <_strtol_r>:
 800a690:	f7ff bf7c 	b.w	800a58c <_strtol_l.constprop.0>

0800a694 <strtol_l>:
 800a694:	4613      	mov	r3, r2
 800a696:	460a      	mov	r2, r1
 800a698:	4601      	mov	r1, r0
 800a69a:	4802      	ldr	r0, [pc, #8]	; (800a6a4 <strtol_l+0x10>)
 800a69c:	6800      	ldr	r0, [r0, #0]
 800a69e:	f7ff bf75 	b.w	800a58c <_strtol_l.constprop.0>
 800a6a2:	bf00      	nop
 800a6a4:	07e8      	lsls	r0, r5, #31
 800a6a6:	2000      	movs	r0, #0

0800a6a8 <strtol>:
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	460a      	mov	r2, r1
 800a6ac:	4601      	mov	r1, r0
 800a6ae:	4802      	ldr	r0, [pc, #8]	; (800a6b8 <strtol+0x10>)
 800a6b0:	6800      	ldr	r0, [r0, #0]
 800a6b2:	f7ff bf6b 	b.w	800a58c <_strtol_l.constprop.0>
 800a6b6:	bf00      	nop
 800a6b8:	07e8      	lsls	r0, r5, #31
 800a6ba:	2000      	movs	r0, #0

0800a6bc <_strtoul_l.constprop.0>:
 800a6bc:	                                        e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6c0:	                                        4f36      	ldr	r7, [pc, #216]	; (800a79c <_strtoul_l.constprop.0+0xe0>)
 800a6c2:	                                        4686      	mov	lr, r0
 800a6c4:	                                        460d      	mov	r5, r1
 800a6c6:	                                    /-> 4628      	mov	r0, r5
 800a6c8:	                                    |   f815 4b01 	ldrb.w	r4, [r5], #1
 800a6cc:	                                    |   5de6      	ldrb	r6, [r4, r7]
 800a6ce:	                                    |   f016 0608 	ands.w	r6, r6, #8
 800a6d2:	                                    \-- d1f8      	bne.n	800a6c6 <_strtoul_l.constprop.0+0xa>
 800a6d4:	                                        2c2d      	cmp	r4, #45	; 0x2d
 800a6d6:	               /----------------------- d12f      	bne.n	800a738 <_strtoul_l.constprop.0+0x7c>
 800a6d8:	               |                        782c      	ldrb	r4, [r5, #0]
 800a6da:	               |                        2601      	movs	r6, #1
 800a6dc:	               |                        1c85      	adds	r5, r0, #2
 800a6de:	            /--|----------------------> 2b00      	cmp	r3, #0
 800a6e0:	   /--------|--|----------------------- d057      	beq.n	800a792 <_strtoul_l.constprop.0+0xd6>
 800a6e2:	   |        |  |                        2b10      	cmp	r3, #16
 800a6e4:	/--|--------|--|----------------------- d109      	bne.n	800a6fa <_strtoul_l.constprop.0+0x3e>
 800a6e6:	|  |        |  |                        2c30      	cmp	r4, #48	; 0x30
 800a6e8:	+--|--------|--|----------------------- d107      	bne.n	800a6fa <_strtoul_l.constprop.0+0x3e>
 800a6ea:	|  |  /-----|--|----------------------> 7828      	ldrb	r0, [r5, #0]
 800a6ec:	|  |  |     |  |                        f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a6f0:	|  |  |     |  |                        2858      	cmp	r0, #88	; 0x58
 800a6f2:	|  |  |  /--|--|----------------------- d149      	bne.n	800a788 <_strtoul_l.constprop.0+0xcc>
 800a6f4:	|  |  |  |  |  |                        786c      	ldrb	r4, [r5, #1]
 800a6f6:	|  |  |  |  |  |                        2310      	movs	r3, #16
 800a6f8:	|  |  |  |  |  |                        3502      	adds	r5, #2
 800a6fa:	>--|--|--|--|--|----------------------> f04f 38ff 	mov.w	r8, #4294967295
 800a6fe:	|  |  |  |  |  |                        2700      	movs	r7, #0
 800a700:	|  |  |  |  |  |                        fbb8 f8f3 	udiv	r8, r8, r3
 800a704:	|  |  |  |  |  |                        fb03 f908 	mul.w	r9, r3, r8
 800a708:	|  |  |  |  |  |                        ea6f 0909 	mvn.w	r9, r9
 800a70c:	|  |  |  |  |  |                        4638      	mov	r0, r7
 800a70e:	|  |  |  |  |  |                 /----> f1a4 0c30 	sub.w	r12, r4, #48	; 0x30
 800a712:	|  |  |  |  |  |                 |      f1bc 0f09 	cmp.w	r12, #9
 800a716:	|  |  |  |  |  |              /--|----- d814      	bhi.n	800a742 <_strtoul_l.constprop.0+0x86>
 800a718:	|  |  |  |  |  |              |  |      4664      	mov	r4, r12
 800a71a:	|  |  |  |  |  |     /--------|--|----> 42a3      	cmp	r3, r4
 800a71c:	|  |  |  |  |  |  /--|--------|--|----- dd22      	ble.n	800a764 <_strtoul_l.constprop.0+0xa8>
 800a71e:	|  |  |  |  |  |  |  |        |  |      2f00      	cmp	r7, #0
 800a720:	|  |  |  |  |  |  |  |  /-----|--|----- db1d      	blt.n	800a75e <_strtoul_l.constprop.0+0xa2>
 800a722:	|  |  |  |  |  |  |  |  |     |  |      4580      	cmp	r8, r0
 800a724:	|  |  |  |  |  |  |  |  +-----|--|----- d31b      	bcc.n	800a75e <_strtoul_l.constprop.0+0xa2>
 800a726:	|  |  |  |  |  |  |  |  |     |  |  /-- d101      	bne.n	800a72c <_strtoul_l.constprop.0+0x70>
 800a728:	|  |  |  |  |  |  |  |  |     |  |  |   45a1      	cmp	r9, r4
 800a72a:	|  |  |  |  |  |  |  |  +-----|--|--|-- db18      	blt.n	800a75e <_strtoul_l.constprop.0+0xa2>
 800a72c:	|  |  |  |  |  |  |  |  |     |  |  \-> fb00 4003 	mla	r0, r0, r3, r4
 800a730:	|  |  |  |  |  |  |  |  |     |  |      2701      	movs	r7, #1
 800a732:	|  |  |  |  |  |  |  |  |  /--|--|----> f815 4b01 	ldrb.w	r4, [r5], #1
 800a736:	|  |  |  |  |  |  |  |  |  |  |  \----- e7ea      	b.n	800a70e <_strtoul_l.constprop.0+0x52>
 800a738:	|  |  |  |  |  \--|--|--|--|--|-------> 2c2b      	cmp	r4, #43	; 0x2b
 800a73a:	|  |  |  |  |     |  |  |  |  |         bf04      	itt	eq
 800a73c:	|  |  |  |  |     |  |  |  |  |         782c      	ldrbeq	r4, [r5, #0]
 800a73e:	|  |  |  |  |     |  |  |  |  |         1c85      	addeq	r5, r0, #2
 800a740:	|  |  |  |  \-----|--|--|--|--|-------- e7cd      	b.n	800a6de <_strtoul_l.constprop.0+0x22>
 800a742:	|  |  |  |        |  |  |  |  \-------> f1a4 0c41 	sub.w	r12, r4, #65	; 0x41
 800a746:	|  |  |  |        |  |  |  |            f1bc 0f19 	cmp.w	r12, #25
 800a74a:	|  |  |  |        |  |  |  |        /-- d801      	bhi.n	800a750 <_strtoul_l.constprop.0+0x94>
 800a74c:	|  |  |  |        |  |  |  |        |   3c37      	subs	r4, #55	; 0x37
 800a74e:	|  |  |  |        |  +--|--|--------|-- e7e4      	b.n	800a71a <_strtoul_l.constprop.0+0x5e>
 800a750:	|  |  |  |        |  |  |  |        \-> f1a4 0c61 	sub.w	r12, r4, #97	; 0x61
 800a754:	|  |  |  |        |  |  |  |            f1bc 0f19 	cmp.w	r12, #25
 800a758:	|  |  |  |        +--|--|--|----------- d804      	bhi.n	800a764 <_strtoul_l.constprop.0+0xa8>
 800a75a:	|  |  |  |        |  |  |  |            3c57      	subs	r4, #87	; 0x57
 800a75c:	|  |  |  |        |  \--|--|----------- e7dd      	b.n	800a71a <_strtoul_l.constprop.0+0x5e>
 800a75e:	|  |  |  |        |     \--|----------> f04f 37ff 	mov.w	r7, #4294967295
 800a762:	|  |  |  |        |        \----------- e7e6      	b.n	800a732 <_strtoul_l.constprop.0+0x76>
 800a764:	|  |  |  |        \-------------------> 2f00      	cmp	r7, #0
 800a766:	|  |  |  |                    /-------- da07      	bge.n	800a778 <_strtoul_l.constprop.0+0xbc>
 800a768:	|  |  |  |                    |         2322      	movs	r3, #34	; 0x22
 800a76a:	|  |  |  |                    |         f8ce 3000 	str.w	r3, [lr]
 800a76e:	|  |  |  |                    |         f04f 30ff 	mov.w	r0, #4294967295
 800a772:	|  |  |  |                    |  /----- b932      	cbnz	r2, 800a782 <_strtoul_l.constprop.0+0xc6>
 800a774:	|  |  |  |                 /--|--|----> e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a778:	|  |  |  |                 |  \--|--/-X b106      	cbz	r6, 800a77c <_strtoul_l.constprop.0+0xc0>
 800a77a:	|  |  |  |                 |     |  |   4240      	negs	r0, r0
 800a77c:	|  |  |  |                 |     |  \-> 2a00      	cmp	r2, #0
 800a77e:	|  |  |  |                 +-----|----- d0f9      	beq.n	800a774 <_strtoul_l.constprop.0+0xb8>
 800a780:	|  |  |  |                 |     |  /-- b107      	cbz	r7, 800a784 <_strtoul_l.constprop.0+0xc8>
 800a782:	|  |  |  |                 |     \--|-> 1e69      	subs	r1, r5, #1
 800a784:	|  |  |  |                 |        \-> 6011      	str	r1, [r2, #0]
 800a786:	|  |  |  |                 \----------- e7f5      	b.n	800a774 <_strtoul_l.constprop.0+0xb8>
 800a788:	|  |  |  \----------------------------> 2430      	movs	r4, #48	; 0x30
 800a78a:	|  |  |                                 2b00      	cmp	r3, #0
 800a78c:	+--|--|-------------------------------- d1b5      	bne.n	800a6fa <_strtoul_l.constprop.0+0x3e>
 800a78e:	|  |  |                                 2308      	movs	r3, #8
 800a790:	+--|--|-------------------------------- e7b3      	b.n	800a6fa <_strtoul_l.constprop.0+0x3e>
 800a792:	|  \--|-------------------------------> 2c30      	cmp	r4, #48	; 0x30
 800a794:	|     \-------------------------------- d0a9      	beq.n	800a6ea <_strtoul_l.constprop.0+0x2e>
 800a796:	|                                       230a      	movs	r3, #10
 800a798:	\-------------------------------------- e7af      	b.n	800a6fa <_strtoul_l.constprop.0+0x3e>
 800a79a:	                                        bf00      	nop
 800a79c:	                                        b240      	sxtb	r0, r0
 800a79e:	                                        0800      	lsrs	r0, r0, #32

0800a7a0 <_strtoul_r>:
 800a7a0:	f7ff bf8c 	b.w	800a6bc <_strtoul_l.constprop.0>

0800a7a4 <strtoul_l>:
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	460a      	mov	r2, r1
 800a7a8:	4601      	mov	r1, r0
 800a7aa:	4802      	ldr	r0, [pc, #8]	; (800a7b4 <strtoul_l+0x10>)
 800a7ac:	6800      	ldr	r0, [r0, #0]
 800a7ae:	f7ff bf85 	b.w	800a6bc <_strtoul_l.constprop.0>
 800a7b2:	bf00      	nop
 800a7b4:	07e8      	lsls	r0, r5, #31
 800a7b6:	2000      	movs	r0, #0

0800a7b8 <strtoul>:
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	460a      	mov	r2, r1
 800a7bc:	4601      	mov	r1, r0
 800a7be:	4802      	ldr	r0, [pc, #8]	; (800a7c8 <strtoul+0x10>)
 800a7c0:	6800      	ldr	r0, [r0, #0]
 800a7c2:	f7ff bf7b 	b.w	800a6bc <_strtoul_l.constprop.0>
 800a7c6:	bf00      	nop
 800a7c8:	07e8      	lsls	r0, r5, #31
 800a7ca:	2000      	movs	r0, #0

0800a7cc <__submore>:
 800a7cc:	             e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d0:	             460c      	mov	r4, r1
 800a7d2:	             6b49      	ldr	r1, [r1, #52]	; 0x34
 800a7d4:	             f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7d8:	             4299      	cmp	r1, r3
 800a7da:	   /-------- d11d      	bne.n	800a818 <__submore+0x4c>
 800a7dc:	   |         f44f 6180 	mov.w	r1, #1024	; 0x400
 800a7e0:	   |         f7ff f998 	bl	8009b14 <_malloc_r>
 800a7e4:	   |     /-- b918      	cbnz	r0, 800a7ee <__submore+0x22>
 800a7e6:	/--|-----|-> f04f 30ff 	mov.w	r0, #4294967295
 800a7ea:	|  |  /--|-> e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ee:	|  |  |  \-> f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7f2:	|  |  |      63a3      	str	r3, [r4, #56]	; 0x38
 800a7f4:	|  |  |      f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a7f8:	|  |  |      6360      	str	r0, [r4, #52]	; 0x34
 800a7fa:	|  |  |      f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a7fe:	|  |  |      f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a802:	|  |  |      f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a806:	|  |  |      f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a80a:	|  |  |      f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a80e:	|  |  |      f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a812:	|  |  |      6020      	str	r0, [r4, #0]
 800a814:	|  |  |  /-> 2000      	movs	r0, #0
 800a816:	|  |  \--|-- e7e8      	b.n	800a7ea <__submore+0x1e>
 800a818:	|  \-----|-> 6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a81a:	|        |   0077      	lsls	r7, r6, #1
 800a81c:	|        |   463a      	mov	r2, r7
 800a81e:	|        |   f000 fae1 	bl	800ade4 <_realloc_r>
 800a822:	|        |   4605      	mov	r5, r0
 800a824:	|        |   2800      	cmp	r0, #0
 800a826:	\--------|-- d0de      	beq.n	800a7e6 <__submore+0x1a>
 800a828:	         |   eb00 0806 	add.w	r8, r0, r6
 800a82c:	         |   4601      	mov	r1, r0
 800a82e:	         |   4632      	mov	r2, r6
 800a830:	         |   4640      	mov	r0, r8
 800a832:	         |   f7ff f915 	bl	8009a60 <memcpy>
 800a836:	         |   e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a83a:	         |   f8c4 8000 	str.w	r8, [r4]
 800a83e:	         \-- e7e9      	b.n	800a814 <__submore+0x48>

0800a840 <_ungetc_r>:
 800a840:	                         b570      	push	{r4, r5, r6, lr}
 800a842:	                         4614      	mov	r4, r2
 800a844:	                         1c4a      	adds	r2, r1, #1
 800a846:	                         4606      	mov	r6, r0
 800a848:	                         460d      	mov	r5, r1
 800a84a:	                     /-- d103      	bne.n	800a854 <_ungetc_r+0x14>
 800a84c:	   /-----------------|-> f04f 35ff 	mov.w	r5, #4294967295
 800a850:	/--|-----------------|-> 4628      	mov	r0, r5
 800a852:	|  |                 |   bd70      	pop	{r4, r5, r6, pc}
 800a854:	|  |              /--\-X b118      	cbz	r0, 800a85e <_ungetc_r+0x1e>
 800a856:	|  |              |      6983      	ldr	r3, [r0, #24]
 800a858:	|  |              +----- b90b      	cbnz	r3, 800a85e <_ungetc_r+0x1e>
 800a85a:	|  |              |      f000 f9e1 	bl	800ac20 <__sinit>
 800a85e:	|  |              \----> 4b41      	ldr	r3, [pc, #260]	; (800a964 <_ungetc_r+0x124>)
 800a860:	|  |                     429c      	cmp	r4, r3
 800a862:	|  |        /----------- d11d      	bne.n	800a8a0 <_ungetc_r+0x60>
 800a864:	|  |        |            6874      	ldr	r4, [r6, #4]
 800a866:	|  |     /--|----------> 6e63      	ldr	r3, [r4, #100]	; 0x64
 800a868:	|  |     |  |            07db      	lsls	r3, r3, #31
 800a86a:	|  |     |  |        /-- d405      	bmi.n	800a878 <_ungetc_r+0x38>
 800a86c:	|  |     |  |        |   89a3      	ldrh	r3, [r4, #12]
 800a86e:	|  |     |  |        |   0598      	lsls	r0, r3, #22
 800a870:	|  |     |  |        +-- d402      	bmi.n	800a878 <_ungetc_r+0x38>
 800a872:	|  |     |  |        |   6da0      	ldr	r0, [r4, #88]	; 0x58
 800a874:	|  |     |  |        |   f000 faaf 	bl	800add6 <__retarget_lock_acquire_recursive>
 800a878:	|  |     |  |        \-> f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a87c:	|  |     |  |            f023 0320 	bic.w	r3, r3, #32
 800a880:	|  |     |  |            0759      	lsls	r1, r3, #29
 800a882:	|  |     |  |            81a3      	strh	r3, [r4, #12]
 800a884:	|  |     |  |            b29a      	uxth	r2, r3
 800a886:	|  |  /--|--|----------- d42d      	bmi.n	800a8e4 <_ungetc_r+0xa4>
 800a888:	|  |  |  |  |            06d3      	lsls	r3, r2, #27
 800a88a:	|  |  |  |  |     /----- d413      	bmi.n	800a8b4 <_ungetc_r+0x74>
 800a88c:	|  |  |  |  |     |      6e63      	ldr	r3, [r4, #100]	; 0x64
 800a88e:	|  |  |  |  |     |      07dd      	lsls	r5, r3, #31
 800a890:	|  +--|--|--|-----|----- d4dc      	bmi.n	800a84c <_ungetc_r+0xc>
 800a892:	|  |  |  |  |     |      f412 7f00 	tst.w	r2, #512	; 0x200
 800a896:	|  +--|--|--|--/--|----X d1d9      	bne.n	800a84c <_ungetc_r+0xc>
 800a898:	|  |  |  |  |  |  |      6da0      	ldr	r0, [r4, #88]	; 0x58
 800a89a:	|  |  |  |  |  |  |      f000 faa2 	bl	800ade2 <__retarget_lock_release_recursive>
 800a89e:	|  +--|--|--|--|--|----- e7d5      	b.n	800a84c <_ungetc_r+0xc>
 800a8a0:	|  |  |  |  \--|--|----> 4b31      	ldr	r3, [pc, #196]	; (800a968 <_ungetc_r+0x128>)
 800a8a2:	|  |  |  |     |  |      429c      	cmp	r4, r3
 800a8a4:	|  |  |  |     |  |  /-- d101      	bne.n	800a8aa <_ungetc_r+0x6a>
 800a8a6:	|  |  |  |     |  |  |   68b4      	ldr	r4, [r6, #8]
 800a8a8:	|  |  |  +-----|--|--|-- e7dd      	b.n	800a866 <_ungetc_r+0x26>
 800a8aa:	|  |  |  |     |  |  \-> 4b30      	ldr	r3, [pc, #192]	; (800a96c <_ungetc_r+0x12c>)
 800a8ac:	|  |  |  |     |  |      429c      	cmp	r4, r3
 800a8ae:	|  |  |  |     |  |      bf08      	it	eq
 800a8b0:	|  |  |  |     |  |      68f4      	ldreq	r4, [r6, #12]
 800a8b2:	|  |  |  \-----|--|----- e7d8      	b.n	800a866 <_ungetc_r+0x26>
 800a8b4:	|  |  |        |  \----> 0710      	lsls	r0, r2, #28
 800a8b6:	|  |  |        |  /----- d511      	bpl.n	800a8dc <_ungetc_r+0x9c>
 800a8b8:	|  |  |        |  |      4621      	mov	r1, r4
 800a8ba:	|  |  |        |  |      4630      	mov	r0, r6
 800a8bc:	|  |  |        |  |      f000 f8ec 	bl	800aa98 <_fflush_r>
 800a8c0:	|  |  |        |  |  /-- b130      	cbz	r0, 800a8d0 <_ungetc_r+0x90>
 800a8c2:	|  |  |     /--|--|--|-> 6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8c4:	|  |  |     |  |  |  |   07d9      	lsls	r1, r3, #31
 800a8c6:	|  \--|-----|--|--|--|-- d4c1      	bmi.n	800a84c <_ungetc_r+0xc>
 800a8c8:	|     |     |  |  |  |   89a3      	ldrh	r3, [r4, #12]
 800a8ca:	|     |     |  |  |  |   f413 7f00 	tst.w	r3, #512	; 0x200
 800a8ce:	|     |     |  \--|--|-- e7e2      	b.n	800a896 <_ungetc_r+0x56>
 800a8d0:	|     |     |     |  \-> 89a3      	ldrh	r3, [r4, #12]
 800a8d2:	|     |     |     |      60a0      	str	r0, [r4, #8]
 800a8d4:	|     |     |     |      f023 0308 	bic.w	r3, r3, #8
 800a8d8:	|     |     |     |      81a3      	strh	r3, [r4, #12]
 800a8da:	|     |     |     |      61a0      	str	r0, [r4, #24]
 800a8dc:	|     |     |     \----> 89a3      	ldrh	r3, [r4, #12]
 800a8de:	|     |     |            f043 0304 	orr.w	r3, r3, #4
 800a8e2:	|     |     |            81a3      	strh	r3, [r4, #12]
 800a8e4:	|     \-----|----------> 6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8e6:	|           |            6862      	ldr	r2, [r4, #4]
 800a8e8:	|           |            b2ed      	uxtb	r5, r5
 800a8ea:	|           |     /----- b1d3      	cbz	r3, 800a922 <_ungetc_r+0xe2>
 800a8ec:	|           |     |      6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a8ee:	|           |     |      4293      	cmp	r3, r2
 800a8f0:	|           |     |  /-- dc05      	bgt.n	800a8fe <_ungetc_r+0xbe>
 800a8f2:	|           |     |  |   4621      	mov	r1, r4
 800a8f4:	|           |     |  |   4630      	mov	r0, r6
 800a8f6:	|           |     |  |   f7ff ff69 	bl	800a7cc <__submore>
 800a8fa:	|           |     |  |   2800      	cmp	r0, #0
 800a8fc:	|           \-----|--|-- d1e1      	bne.n	800a8c2 <_ungetc_r+0x82>
 800a8fe:	|                 |  \-> 6823      	ldr	r3, [r4, #0]
 800a900:	|                 |      1e5a      	subs	r2, r3, #1
 800a902:	|                 |      6022      	str	r2, [r4, #0]
 800a904:	|                 |      f803 5c01 	strb.w	r5, [r3, #-1]
 800a908:	|                 |      6863      	ldr	r3, [r4, #4]
 800a90a:	|                 |      3301      	adds	r3, #1
 800a90c:	|                 |      6063      	str	r3, [r4, #4]
 800a90e:	|                 |      6e63      	ldr	r3, [r4, #100]	; 0x64
 800a910:	|                 |      07da      	lsls	r2, r3, #31
 800a912:	+-----------------|----- d49d      	bmi.n	800a850 <_ungetc_r+0x10>
 800a914:	|              /--|----> 89a3      	ldrh	r3, [r4, #12]
 800a916:	|              |  |      059b      	lsls	r3, r3, #22
 800a918:	+--------------|--|----- d49a      	bmi.n	800a850 <_ungetc_r+0x10>
 800a91a:	|              |  |      6da0      	ldr	r0, [r4, #88]	; 0x58
 800a91c:	|              |  |      f000 fa61 	bl	800ade2 <__retarget_lock_release_recursive>
 800a920:	+--------------|--|----- e796      	b.n	800a850 <_ungetc_r+0x10>
 800a922:	|              |  \----> 6e61      	ldr	r1, [r4, #100]	; 0x64
 800a924:	|              |         6920      	ldr	r0, [r4, #16]
 800a926:	|              |         6823      	ldr	r3, [r4, #0]
 800a928:	|              |         f001 0101 	and.w	r1, r1, #1
 800a92c:	|              |     /-- b160      	cbz	r0, 800a948 <_ungetc_r+0x108>
 800a92e:	|              |     |   4298      	cmp	r0, r3
 800a930:	|              |     +-- d20a      	bcs.n	800a948 <_ungetc_r+0x108>
 800a932:	|              |     |   f813 0c01 	ldrb.w	r0, [r3, #-1]
 800a936:	|              |     |   42a8      	cmp	r0, r5
 800a938:	|              |     +-- d106      	bne.n	800a948 <_ungetc_r+0x108>
 800a93a:	|              |     |   3b01      	subs	r3, #1
 800a93c:	|              |     |   3201      	adds	r2, #1
 800a93e:	|              |     |   6023      	str	r3, [r4, #0]
 800a940:	|              |     |   6062      	str	r2, [r4, #4]
 800a942:	|              |  /--|-> 2900      	cmp	r1, #0
 800a944:	\--------------|--|--|-- d184      	bne.n	800a850 <_ungetc_r+0x10>
 800a946:	               \--|--|-- e7e5      	b.n	800a914 <_ungetc_r+0xd4>
 800a948:	                  |  \-> e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a94c:	                  |      f104 0344 	add.w	r3, r4, #68	; 0x44
 800a950:	                  |      6363      	str	r3, [r4, #52]	; 0x34
 800a952:	                  |      2303      	movs	r3, #3
 800a954:	                  |      63a3      	str	r3, [r4, #56]	; 0x38
 800a956:	                  |      4623      	mov	r3, r4
 800a958:	                  |      f803 5f46 	strb.w	r5, [r3, #70]!
 800a95c:	                  |      6023      	str	r3, [r4, #0]
 800a95e:	                  |      2301      	movs	r3, #1
 800a960:	                  |      6063      	str	r3, [r4, #4]
 800a962:	                  \----- e7ee      	b.n	800a942 <_ungetc_r+0x102>
 800a964:	                         b360      	cbz	r0, 800a9c0 <__sflush_r+0x34>
 800a966:	                         0800      	lsrs	r0, r0, #32
 800a968:	                         b380      	cbz	r0, 800a9cc <__sflush_r+0x40>
 800a96a:	                         0800      	lsrs	r0, r0, #32
 800a96c:	                         b340      	cbz	r0, 800a9c0 <__sflush_r+0x34>
 800a96e:	                         0800      	lsrs	r0, r0, #32

0800a970 <ungetc>:
 800a970:	4b02      	ldr	r3, [pc, #8]	; (800a97c <ungetc+0xc>)
 800a972:	460a      	mov	r2, r1
 800a974:	4601      	mov	r1, r0
 800a976:	6818      	ldr	r0, [r3, #0]
 800a978:	f7ff bf62 	b.w	800a840 <_ungetc_r>
 800a97c:	07e8      	lsls	r0, r5, #31
 800a97e:	2000      	movs	r0, #0

0800a980 <__errno>:
 800a980:	4b01      	ldr	r3, [pc, #4]	; (800a988 <__errno+0x8>)
 800a982:	6818      	ldr	r0, [r3, #0]
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	07e8      	lsls	r0, r5, #31
 800a98a:	2000      	movs	r0, #0

0800a98c <__sflush_r>:
 800a98c:	                         898a      	ldrh	r2, [r1, #12]
 800a98e:	                         e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a992:	                         4605      	mov	r5, r0
 800a994:	                         0710      	lsls	r0, r2, #28
 800a996:	                         460c      	mov	r4, r1
 800a998:	      /----------------- d458      	bmi.n	800aa4c <__sflush_r+0xc0>
 800a99a:	      |                  684b      	ldr	r3, [r1, #4]
 800a99c:	      |                  2b00      	cmp	r3, #0
 800a99e:	      |              /-- dc05      	bgt.n	800a9ac <__sflush_r+0x20>
 800a9a0:	      |              |   6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9a2:	      |              |   2b00      	cmp	r3, #0
 800a9a4:	      |              +-- dc02      	bgt.n	800a9ac <__sflush_r+0x20>
 800a9a6:	   /--|--------------|-> 2000      	movs	r0, #0
 800a9a8:	/--|--|--------------|-> e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ac:	|  |  |              \-> 6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9ae:	|  |  |                  2e00      	cmp	r6, #0
 800a9b0:	|  +--|----------------- d0f9      	beq.n	800a9a6 <__sflush_r+0x1a>
 800a9b2:	|  |  |                  2300      	movs	r3, #0
 800a9b4:	|  |  |                  f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9b8:	|  |  |                  682f      	ldr	r7, [r5, #0]
 800a9ba:	|  |  |                  602b      	str	r3, [r5, #0]
 800a9bc:	|  |  |     /----------- d032      	beq.n	800aa24 <__sflush_r+0x98>
 800a9be:	|  |  |     |            6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9c0:	|  |  |  /--|----------> 89a3      	ldrh	r3, [r4, #12]
 800a9c2:	|  |  |  |  |            075a      	lsls	r2, r3, #29
 800a9c4:	|  |  |  |  |        /-- d505      	bpl.n	800a9d2 <__sflush_r+0x46>
 800a9c6:	|  |  |  |  |        |   6863      	ldr	r3, [r4, #4]
 800a9c8:	|  |  |  |  |        |   1ac0      	subs	r0, r0, r3
 800a9ca:	|  |  |  |  |        |   6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9cc:	|  |  |  |  |        +-- b10b      	cbz	r3, 800a9d2 <__sflush_r+0x46>
 800a9ce:	|  |  |  |  |        |   6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9d0:	|  |  |  |  |        |   1ac0      	subs	r0, r0, r3
 800a9d2:	|  |  |  |  |        \-> 2300      	movs	r3, #0
 800a9d4:	|  |  |  |  |            4602      	mov	r2, r0
 800a9d6:	|  |  |  |  |            6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9d8:	|  |  |  |  |            6a21      	ldr	r1, [r4, #32]
 800a9da:	|  |  |  |  |            4628      	mov	r0, r5
 800a9dc:	|  |  |  |  |            47b0      	blx	r6
 800a9de:	|  |  |  |  |            1c43      	adds	r3, r0, #1
 800a9e0:	|  |  |  |  |            89a3      	ldrh	r3, [r4, #12]
 800a9e2:	|  |  |  |  |        /-- d106      	bne.n	800a9f2 <__sflush_r+0x66>
 800a9e4:	|  |  |  |  |        |   6829      	ldr	r1, [r5, #0]
 800a9e6:	|  |  |  |  |        |   291d      	cmp	r1, #29
 800a9e8:	|  |  |  |  |  /-----|-- d82c      	bhi.n	800aa44 <__sflush_r+0xb8>
 800a9ea:	|  |  |  |  |  |     |   4a2a      	ldr	r2, [pc, #168]	; (800aa94 <__sflush_r+0x108>)
 800a9ec:	|  |  |  |  |  |     |   40ca      	lsrs	r2, r1
 800a9ee:	|  |  |  |  |  |     |   07d6      	lsls	r6, r2, #31
 800a9f0:	|  |  |  |  |  +-----|-- d528      	bpl.n	800aa44 <__sflush_r+0xb8>
 800a9f2:	|  |  |  |  |  |     \-> 2200      	movs	r2, #0
 800a9f4:	|  |  |  |  |  |         6062      	str	r2, [r4, #4]
 800a9f6:	|  |  |  |  |  |         04d9      	lsls	r1, r3, #19
 800a9f8:	|  |  |  |  |  |         6922      	ldr	r2, [r4, #16]
 800a9fa:	|  |  |  |  |  |         6022      	str	r2, [r4, #0]
 800a9fc:	|  |  |  |  |  |  /----- d504      	bpl.n	800aa08 <__sflush_r+0x7c>
 800a9fe:	|  |  |  |  |  |  |      1c42      	adds	r2, r0, #1
 800aa00:	|  |  |  |  |  |  |  /-- d101      	bne.n	800aa06 <__sflush_r+0x7a>
 800aa02:	|  |  |  |  |  |  |  |   682b      	ldr	r3, [r5, #0]
 800aa04:	|  |  |  |  |  |  +--|-- b903      	cbnz	r3, 800aa08 <__sflush_r+0x7c>
 800aa06:	|  |  |  |  |  |  |  \-> 6560      	str	r0, [r4, #84]	; 0x54
 800aa08:	|  |  |  |  |  |  \----> 6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa0a:	|  |  |  |  |  |         602f      	str	r7, [r5, #0]
 800aa0c:	|  |  |  |  |  |         2900      	cmp	r1, #0
 800aa0e:	|  +--|--|--|--|-------- d0ca      	beq.n	800a9a6 <__sflush_r+0x1a>
 800aa10:	|  |  |  |  |  |         f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa14:	|  |  |  |  |  |         4299      	cmp	r1, r3
 800aa16:	|  |  |  |  |  |     /-- d002      	beq.n	800aa1e <__sflush_r+0x92>
 800aa18:	|  |  |  |  |  |     |   4628      	mov	r0, r5
 800aa1a:	|  |  |  |  |  |     |   f7ff f82f 	bl	8009a7c <_free_r>
 800aa1e:	|  |  |  |  |  |     \-> 2000      	movs	r0, #0
 800aa20:	|  |  |  |  |  |         6360      	str	r0, [r4, #52]	; 0x34
 800aa22:	+--|--|--|--|--|-------- e7c1      	b.n	800a9a8 <__sflush_r+0x1c>
 800aa24:	|  |  |  |  \--|-------> 6a21      	ldr	r1, [r4, #32]
 800aa26:	|  |  |  |     |         2301      	movs	r3, #1
 800aa28:	|  |  |  |     |         4628      	mov	r0, r5
 800aa2a:	|  |  |  |     |         47b0      	blx	r6
 800aa2c:	|  |  |  |     |         1c41      	adds	r1, r0, #1
 800aa2e:	|  |  |  +-----|-------- d1c7      	bne.n	800a9c0 <__sflush_r+0x34>
 800aa30:	|  |  |  |     |         682b      	ldr	r3, [r5, #0]
 800aa32:	|  |  |  |     |         2b00      	cmp	r3, #0
 800aa34:	|  |  |  \-----|-------- d0c4      	beq.n	800a9c0 <__sflush_r+0x34>
 800aa36:	|  |  |        |         2b1d      	cmp	r3, #29
 800aa38:	|  |  |        |     /-- d001      	beq.n	800aa3e <__sflush_r+0xb2>
 800aa3a:	|  |  |        |     |   2b16      	cmp	r3, #22
 800aa3c:	|  |  |        |  /--|-- d101      	bne.n	800aa42 <__sflush_r+0xb6>
 800aa3e:	|  |  |        |  |  \-> 602f      	str	r7, [r5, #0]
 800aa40:	|  +--|--------|--|----- e7b1      	b.n	800a9a6 <__sflush_r+0x1a>
 800aa42:	|  |  |        |  \----> 89a3      	ldrh	r3, [r4, #12]
 800aa44:	|  |  |        \-------> f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa48:	|  |  |                  81a3      	strh	r3, [r4, #12]
 800aa4a:	+--|--|----------------- e7ad      	b.n	800a9a8 <__sflush_r+0x1c>
 800aa4c:	|  |  \----------------> 690f      	ldr	r7, [r1, #16]
 800aa4e:	|  |                     2f00      	cmp	r7, #0
 800aa50:	|  +-------------------- d0a9      	beq.n	800a9a6 <__sflush_r+0x1a>
 800aa52:	|  |                     0793      	lsls	r3, r2, #30
 800aa54:	|  |                     680e      	ldr	r6, [r1, #0]
 800aa56:	|  |                     bf08      	it	eq
 800aa58:	|  |                     694b      	ldreq	r3, [r1, #20]
 800aa5a:	|  |                     600f      	str	r7, [r1, #0]
 800aa5c:	|  |                     bf18      	it	ne
 800aa5e:	|  |                     2300      	movne	r3, #0
 800aa60:	|  |                     eba6 0807 	sub.w	r8, r6, r7
 800aa64:	|  |                     608b      	str	r3, [r1, #8]
 800aa66:	|  |              /----> f1b8 0f00 	cmp.w	r8, #0
 800aa6a:	|  \--------------|----- dd9c      	ble.n	800a9a6 <__sflush_r+0x1a>
 800aa6c:	|                 |      6a21      	ldr	r1, [r4, #32]
 800aa6e:	|                 |      6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa70:	|                 |      4643      	mov	r3, r8
 800aa72:	|                 |      463a      	mov	r2, r7
 800aa74:	|                 |      4628      	mov	r0, r5
 800aa76:	|                 |      47b0      	blx	r6
 800aa78:	|                 |      2800      	cmp	r0, #0
 800aa7a:	|                 |  /-- dc06      	bgt.n	800aa8a <__sflush_r+0xfe>
 800aa7c:	|                 |  |   89a3      	ldrh	r3, [r4, #12]
 800aa7e:	|                 |  |   f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa82:	|                 |  |   81a3      	strh	r3, [r4, #12]
 800aa84:	|                 |  |   f04f 30ff 	mov.w	r0, #4294967295
 800aa88:	\-----------------|--|-- e78e      	b.n	800a9a8 <__sflush_r+0x1c>
 800aa8a:	                  |  \-> 4407      	add	r7, r0
 800aa8c:	                  |      eba8 0800 	sub.w	r8, r8, r0
 800aa90:	                  \----- e7e9      	b.n	800aa66 <__sflush_r+0xda>
 800aa92:	                         bf00      	nop
 800aa94:	                         0001      	movs	r1, r0
 800aa96:	                         2040      	movs	r0, #64	; 0x40

0800aa98 <_fflush_r>:
 800aa98:	                b538      	push	{r3, r4, r5, lr}
 800aa9a:	                690b      	ldr	r3, [r1, #16]
 800aa9c:	                4605      	mov	r5, r0
 800aa9e:	                460c      	mov	r4, r1
 800aaa0:	            /-- b913      	cbnz	r3, 800aaa8 <_fflush_r+0x10>
 800aaa2:	      /-----|-> 2500      	movs	r5, #0
 800aaa4:	/-----|-----|-> 4628      	mov	r0, r5
 800aaa6:	|     |     |   bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	|     |  /--\-X b118      	cbz	r0, 800aab2 <_fflush_r+0x1a>
 800aaaa:	|     |  |      6983      	ldr	r3, [r0, #24]
 800aaac:	|     |  +----- b90b      	cbnz	r3, 800aab2 <_fflush_r+0x1a>
 800aaae:	|     |  |      f000 f8b7 	bl	800ac20 <__sinit>
 800aab2:	|     |  \----> 4b14      	ldr	r3, [pc, #80]	; (800ab04 <_fflush_r+0x6c>)
 800aab4:	|     |         429c      	cmp	r4, r3
 800aab6:	|     |  /----- d11b      	bne.n	800aaf0 <_fflush_r+0x58>
 800aab8:	|     |  |      686c      	ldr	r4, [r5, #4]
 800aaba:	|  /--|--|----> f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aabe:	|  |  |  |      2b00      	cmp	r3, #0
 800aac0:	|  |  \--|----- d0ef      	beq.n	800aaa2 <_fflush_r+0xa>
 800aac2:	|  |     |      6e62      	ldr	r2, [r4, #100]	; 0x64
 800aac4:	|  |     |      07d0      	lsls	r0, r2, #31
 800aac6:	|  |     |  /-- d404      	bmi.n	800aad2 <_fflush_r+0x3a>
 800aac8:	|  |     |  |   0599      	lsls	r1, r3, #22
 800aaca:	|  |     |  +-- d402      	bmi.n	800aad2 <_fflush_r+0x3a>
 800aacc:	|  |     |  |   6da0      	ldr	r0, [r4, #88]	; 0x58
 800aace:	|  |     |  |   f000 f982 	bl	800add6 <__retarget_lock_acquire_recursive>
 800aad2:	|  |     |  \-> 4628      	mov	r0, r5
 800aad4:	|  |     |      4621      	mov	r1, r4
 800aad6:	|  |     |      f7ff ff59 	bl	800a98c <__sflush_r>
 800aada:	|  |     |      6e63      	ldr	r3, [r4, #100]	; 0x64
 800aadc:	|  |     |      07da      	lsls	r2, r3, #31
 800aade:	|  |     |      4605      	mov	r5, r0
 800aae0:	+--|-----|----- d4e0      	bmi.n	800aaa4 <_fflush_r+0xc>
 800aae2:	|  |     |      89a3      	ldrh	r3, [r4, #12]
 800aae4:	|  |     |      059b      	lsls	r3, r3, #22
 800aae6:	+--|-----|----- d4dd      	bmi.n	800aaa4 <_fflush_r+0xc>
 800aae8:	|  |     |      6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaea:	|  |     |      f000 f97a 	bl	800ade2 <__retarget_lock_release_recursive>
 800aaee:	\--|-----|----- e7d9      	b.n	800aaa4 <_fflush_r+0xc>
 800aaf0:	   |     \----> 4b05      	ldr	r3, [pc, #20]	; (800ab08 <_fflush_r+0x70>)
 800aaf2:	   |            429c      	cmp	r4, r3
 800aaf4:	   |        /-- d101      	bne.n	800aafa <_fflush_r+0x62>
 800aaf6:	   |        |   68ac      	ldr	r4, [r5, #8]
 800aaf8:	   +--------|-- e7df      	b.n	800aaba <_fflush_r+0x22>
 800aafa:	   |        \-> 4b04      	ldr	r3, [pc, #16]	; (800ab0c <_fflush_r+0x74>)
 800aafc:	   |            429c      	cmp	r4, r3
 800aafe:	   |            bf08      	it	eq
 800ab00:	   |            68ec      	ldreq	r4, [r5, #12]
 800ab02:	   \----------- e7da      	b.n	800aaba <_fflush_r+0x22>
 800ab04:	                b360      	cbz	r0, 800ab60 <std+0x2c>
 800ab06:	                0800      	lsrs	r0, r0, #32
 800ab08:	                b380      	cbz	r0, 800ab6c <std+0x38>
 800ab0a:	                0800      	lsrs	r0, r0, #32
 800ab0c:	                b340      	cbz	r0, 800ab60 <std+0x2c>
 800ab0e:	                0800      	lsrs	r0, r0, #32

0800ab10 <fflush>:
 800ab10:	    4601      	mov	r1, r0
 800ab12:	/-- b920      	cbnz	r0, 800ab1e <fflush+0xe>
 800ab14:	|   4b04      	ldr	r3, [pc, #16]	; (800ab28 <fflush+0x18>)
 800ab16:	|   4905      	ldr	r1, [pc, #20]	; (800ab2c <fflush+0x1c>)
 800ab18:	|   6818      	ldr	r0, [r3, #0]
 800ab1a:	|   f000 b938 	b.w	800ad8e <_fwalk_reent>
 800ab1e:	\-> 4b04      	ldr	r3, [pc, #16]	; (800ab30 <fflush+0x20>)
 800ab20:	    6818      	ldr	r0, [r3, #0]
 800ab22:	    f7ff bfb9 	b.w	800aa98 <_fflush_r>
 800ab26:	    bf00      	nop
 800ab28:	    b21c      	sxth	r4, r3
 800ab2a:	    0800      	lsrs	r0, r0, #32
 800ab2c:	    aa99      	add	r2, sp, #612	; 0x264
 800ab2e:	    0800      	lsrs	r0, r0, #32
 800ab30:	    07e8      	lsls	r0, r5, #31
 800ab32:	    2000      	movs	r0, #0

0800ab34 <std>:
 800ab34:	2300      	movs	r3, #0
 800ab36:	b510      	push	{r4, lr}
 800ab38:	4604      	mov	r4, r0
 800ab3a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab42:	6083      	str	r3, [r0, #8]
 800ab44:	8181      	strh	r1, [r0, #12]
 800ab46:	6643      	str	r3, [r0, #100]	; 0x64
 800ab48:	81c2      	strh	r2, [r0, #14]
 800ab4a:	6183      	str	r3, [r0, #24]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	2208      	movs	r2, #8
 800ab50:	305c      	adds	r0, #92	; 0x5c
 800ab52:	f7fe ff45 	bl	80099e0 <memset>
 800ab56:	4b05      	ldr	r3, [pc, #20]	; (800ab6c <std+0x38>)
 800ab58:	6263      	str	r3, [r4, #36]	; 0x24
 800ab5a:	4b05      	ldr	r3, [pc, #20]	; (800ab70 <std+0x3c>)
 800ab5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab5e:	4b05      	ldr	r3, [pc, #20]	; (800ab74 <std+0x40>)
 800ab60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab62:	4b05      	ldr	r3, [pc, #20]	; (800ab78 <std+0x44>)
 800ab64:	6224      	str	r4, [r4, #32]
 800ab66:	6323      	str	r3, [r4, #48]	; 0x30
 800ab68:	bd10      	pop	{r4, pc}
 800ab6a:	bf00      	nop
 800ab6c:	9c95      	ldr	r4, [sp, #596]	; 0x254
 800ab6e:	0800      	lsrs	r0, r0, #32
 800ab70:	9cbb      	ldr	r4, [sp, #748]	; 0x2ec
 800ab72:	0800      	lsrs	r0, r0, #32
 800ab74:	9cf3      	ldr	r4, [sp, #972]	; 0x3cc
 800ab76:	0800      	lsrs	r0, r0, #32
 800ab78:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800ab7a:	0800      	lsrs	r0, r0, #32

0800ab7c <_cleanup_r>:
 800ab7c:	4901      	ldr	r1, [pc, #4]	; (800ab84 <_cleanup_r+0x8>)
 800ab7e:	f000 b906 	b.w	800ad8e <_fwalk_reent>
 800ab82:	bf00      	nop
 800ab84:	aa99      	add	r2, sp, #612	; 0x264
 800ab86:	0800      	lsrs	r0, r0, #32

0800ab88 <__fp_lock>:
 800ab88:	    b508      	push	{r3, lr}
 800ab8a:	    6e43      	ldr	r3, [r0, #100]	; 0x64
 800ab8c:	    07da      	lsls	r2, r3, #31
 800ab8e:	/-- d405      	bmi.n	800ab9c <__fp_lock+0x14>
 800ab90:	|   8983      	ldrh	r3, [r0, #12]
 800ab92:	|   059b      	lsls	r3, r3, #22
 800ab94:	+-- d402      	bmi.n	800ab9c <__fp_lock+0x14>
 800ab96:	|   6d80      	ldr	r0, [r0, #88]	; 0x58
 800ab98:	|   f000 f91d 	bl	800add6 <__retarget_lock_acquire_recursive>
 800ab9c:	\-> 2000      	movs	r0, #0
 800ab9e:	    bd08      	pop	{r3, pc}

0800aba0 <__fp_unlock>:
 800aba0:	    b508      	push	{r3, lr}
 800aba2:	    6e43      	ldr	r3, [r0, #100]	; 0x64
 800aba4:	    07da      	lsls	r2, r3, #31
 800aba6:	/-- d405      	bmi.n	800abb4 <__fp_unlock+0x14>
 800aba8:	|   8983      	ldrh	r3, [r0, #12]
 800abaa:	|   059b      	lsls	r3, r3, #22
 800abac:	+-- d402      	bmi.n	800abb4 <__fp_unlock+0x14>
 800abae:	|   6d80      	ldr	r0, [r0, #88]	; 0x58
 800abb0:	|   f000 f917 	bl	800ade2 <__retarget_lock_release_recursive>
 800abb4:	\-> 2000      	movs	r0, #0
 800abb6:	    bd08      	pop	{r3, pc}

0800abb8 <__sfmoreglue>:
 800abb8:	    b570      	push	{r4, r5, r6, lr}
 800abba:	    2268      	movs	r2, #104	; 0x68
 800abbc:	    1e4d      	subs	r5, r1, #1
 800abbe:	    4355      	muls	r5, r2
 800abc0:	    460e      	mov	r6, r1
 800abc2:	    f105 0174 	add.w	r1, r5, #116	; 0x74
 800abc6:	    f7fe ffa5 	bl	8009b14 <_malloc_r>
 800abca:	    4604      	mov	r4, r0
 800abcc:	/-- b140      	cbz	r0, 800abe0 <__sfmoreglue+0x28>
 800abce:	|   2100      	movs	r1, #0
 800abd0:	|   e9c0 1600 	strd	r1, r6, [r0]
 800abd4:	|   300c      	adds	r0, #12
 800abd6:	|   60a0      	str	r0, [r4, #8]
 800abd8:	|   f105 0268 	add.w	r2, r5, #104	; 0x68
 800abdc:	|   f7fe ff00 	bl	80099e0 <memset>
 800abe0:	\-> 4620      	mov	r0, r4
 800abe2:	    bd70      	pop	{r4, r5, r6, pc}

0800abe4 <_cleanup>:
 800abe4:	4b01      	ldr	r3, [pc, #4]	; (800abec <_cleanup+0x8>)
 800abe6:	6818      	ldr	r0, [r3, #0]
 800abe8:	f7ff bfc8 	b.w	800ab7c <_cleanup_r>
 800abec:	b21c      	sxth	r4, r3
 800abee:	0800      	lsrs	r0, r0, #32

0800abf0 <__sfp_lock_acquire>:
 800abf0:	4801      	ldr	r0, [pc, #4]	; (800abf8 <__sfp_lock_acquire+0x8>)
 800abf2:	f000 b8f0 	b.w	800add6 <__retarget_lock_acquire_recursive>
 800abf6:	bf00      	nop
 800abf8:	532a      	strh	r2, [r5, r4]
 800abfa:	2000      	movs	r0, #0

0800abfc <__sfp_lock_release>:
 800abfc:	4801      	ldr	r0, [pc, #4]	; (800ac04 <__sfp_lock_release+0x8>)
 800abfe:	f000 b8f0 	b.w	800ade2 <__retarget_lock_release_recursive>
 800ac02:	bf00      	nop
 800ac04:	532a      	strh	r2, [r5, r4]
 800ac06:	2000      	movs	r0, #0

0800ac08 <__sinit_lock_acquire>:
 800ac08:	4801      	ldr	r0, [pc, #4]	; (800ac10 <__sinit_lock_acquire+0x8>)
 800ac0a:	f000 b8e4 	b.w	800add6 <__retarget_lock_acquire_recursive>
 800ac0e:	bf00      	nop
 800ac10:	532b      	strh	r3, [r5, r4]
 800ac12:	2000      	movs	r0, #0

0800ac14 <__sinit_lock_release>:
 800ac14:	4801      	ldr	r0, [pc, #4]	; (800ac1c <__sinit_lock_release+0x8>)
 800ac16:	f000 b8e4 	b.w	800ade2 <__retarget_lock_release_recursive>
 800ac1a:	bf00      	nop
 800ac1c:	532b      	strh	r3, [r5, r4]
 800ac1e:	2000      	movs	r0, #0

0800ac20 <__sinit>:
 800ac20:	       b510      	push	{r4, lr}
 800ac22:	       4604      	mov	r4, r0
 800ac24:	       f7ff fff0 	bl	800ac08 <__sinit_lock_acquire>
 800ac28:	       69a3      	ldr	r3, [r4, #24]
 800ac2a:	   /-- b11b      	cbz	r3, 800ac34 <__sinit+0x14>
 800ac2c:	/--|-> e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac30:	|  |   f7ff bff0 	b.w	800ac14 <__sinit_lock_release>
 800ac34:	|  \-> e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac38:	|      6523      	str	r3, [r4, #80]	; 0x50
 800ac3a:	|      4b13      	ldr	r3, [pc, #76]	; (800ac88 <__sinit+0x68>)
 800ac3c:	|      4a13      	ldr	r2, [pc, #76]	; (800ac8c <__sinit+0x6c>)
 800ac3e:	|      681b      	ldr	r3, [r3, #0]
 800ac40:	|      62a2      	str	r2, [r4, #40]	; 0x28
 800ac42:	|      42a3      	cmp	r3, r4
 800ac44:	|      bf04      	itt	eq
 800ac46:	|      2301      	moveq	r3, #1
 800ac48:	|      61a3      	streq	r3, [r4, #24]
 800ac4a:	|      4620      	mov	r0, r4
 800ac4c:	|      f000 f820 	bl	800ac90 <__sfp>
 800ac50:	|      6060      	str	r0, [r4, #4]
 800ac52:	|      4620      	mov	r0, r4
 800ac54:	|      f000 f81c 	bl	800ac90 <__sfp>
 800ac58:	|      60a0      	str	r0, [r4, #8]
 800ac5a:	|      4620      	mov	r0, r4
 800ac5c:	|      f000 f818 	bl	800ac90 <__sfp>
 800ac60:	|      2200      	movs	r2, #0
 800ac62:	|      60e0      	str	r0, [r4, #12]
 800ac64:	|      2104      	movs	r1, #4
 800ac66:	|      6860      	ldr	r0, [r4, #4]
 800ac68:	|      f7ff ff64 	bl	800ab34 <std>
 800ac6c:	|      68a0      	ldr	r0, [r4, #8]
 800ac6e:	|      2201      	movs	r2, #1
 800ac70:	|      2109      	movs	r1, #9
 800ac72:	|      f7ff ff5f 	bl	800ab34 <std>
 800ac76:	|      68e0      	ldr	r0, [r4, #12]
 800ac78:	|      2202      	movs	r2, #2
 800ac7a:	|      2112      	movs	r1, #18
 800ac7c:	|      f7ff ff5a 	bl	800ab34 <std>
 800ac80:	|      2301      	movs	r3, #1
 800ac82:	|      61a3      	str	r3, [r4, #24]
 800ac84:	\----- e7d2      	b.n	800ac2c <__sinit+0xc>
 800ac86:	       bf00      	nop
 800ac88:	       b21c      	sxth	r4, r3
 800ac8a:	       0800      	lsrs	r0, r0, #32
 800ac8c:	       ab7d      	add	r3, sp, #500	; 0x1f4
 800ac8e:	       0800      	lsrs	r0, r0, #32

0800ac90 <__sfp>:
 800ac90:	                b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac92:	                4607      	mov	r7, r0
 800ac94:	                f7ff ffac 	bl	800abf0 <__sfp_lock_acquire>
 800ac98:	                4b1e      	ldr	r3, [pc, #120]	; (800ad14 <__sfp+0x84>)
 800ac9a:	                681e      	ldr	r6, [r3, #0]
 800ac9c:	                69b3      	ldr	r3, [r6, #24]
 800ac9e:	            /-- b913      	cbnz	r3, 800aca6 <__sfp+0x16>
 800aca0:	            |   4630      	mov	r0, r6
 800aca2:	            |   f7ff ffbd 	bl	800ac20 <__sinit>
 800aca6:	            \-> 3648      	adds	r6, #72	; 0x48
 800aca8:	         /----> e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800acac:	   /-----|----> 3b01      	subs	r3, #1
 800acae:	   |     |  /-- d503      	bpl.n	800acb8 <__sfp+0x28>
 800acb0:	   |     |  |   6833      	ldr	r3, [r6, #0]
 800acb2:	   |  /--|--|-- b30b      	cbz	r3, 800acf8 <__sfp+0x68>
 800acb4:	/--|--|--|--|-> 6836      	ldr	r6, [r6, #0]
 800acb6:	|  |  |  \--|-- e7f7      	b.n	800aca8 <__sfp+0x18>
 800acb8:	|  |  |     \-> f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800acbc:	|  |  |  /----- b9d5      	cbnz	r5, 800acf4 <__sfp+0x64>
 800acbe:	|  |  |  |      4b16      	ldr	r3, [pc, #88]	; (800ad18 <__sfp+0x88>)
 800acc0:	|  |  |  |      60e3      	str	r3, [r4, #12]
 800acc2:	|  |  |  |      f104 0058 	add.w	r0, r4, #88	; 0x58
 800acc6:	|  |  |  |      6665      	str	r5, [r4, #100]	; 0x64
 800acc8:	|  |  |  |      f000 f881 	bl	800adce <__retarget_lock_init_recursive>
 800accc:	|  |  |  |      f7ff ff96 	bl	800abfc <__sfp_lock_release>
 800acd0:	|  |  |  |      e9c4 5501 	strd	r5, r5, [r4, #4]
 800acd4:	|  |  |  |      e9c4 5504 	strd	r5, r5, [r4, #16]
 800acd8:	|  |  |  |      6025      	str	r5, [r4, #0]
 800acda:	|  |  |  |      61a5      	str	r5, [r4, #24]
 800acdc:	|  |  |  |      2208      	movs	r2, #8
 800acde:	|  |  |  |      4629      	mov	r1, r5
 800ace0:	|  |  |  |      f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ace4:	|  |  |  |      f7fe fe7c 	bl	80099e0 <memset>
 800ace8:	|  |  |  |      e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800acec:	|  |  |  |      e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acf0:	|  |  |  |  /-> 4620      	mov	r0, r4
 800acf2:	|  |  |  |  |   bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acf4:	|  |  |  \--|-> 3468      	adds	r4, #104	; 0x68
 800acf6:	|  \--|-----|-- e7d9      	b.n	800acac <__sfp+0x1c>
 800acf8:	|     \-----|-> 2104      	movs	r1, #4
 800acfa:	|           |   4638      	mov	r0, r7
 800acfc:	|           |   f7ff ff5c 	bl	800abb8 <__sfmoreglue>
 800ad00:	|           |   4604      	mov	r4, r0
 800ad02:	|           |   6030      	str	r0, [r6, #0]
 800ad04:	|           |   2800      	cmp	r0, #0
 800ad06:	\-----------|-- d1d5      	bne.n	800acb4 <__sfp+0x24>
 800ad08:	            |   f7ff ff78 	bl	800abfc <__sfp_lock_release>
 800ad0c:	            |   230c      	movs	r3, #12
 800ad0e:	            |   603b      	str	r3, [r7, #0]
 800ad10:	            \-- e7ee      	b.n	800acf0 <__sfp+0x60>
 800ad12:	                bf00      	nop
 800ad14:	                b21c      	sxth	r4, r3
 800ad16:	                0800      	lsrs	r0, r0, #32
 800ad18:	                0001      	movs	r1, r0
 800ad1a:	                ffff  	vabal.u<illegal width 64>	<illegal reg q13.5>, d15, d8

0800ad1c <__fp_lock_all>:
 800ad1c:	b508      	push	{r3, lr}
 800ad1e:	f7ff ff67 	bl	800abf0 <__sfp_lock_acquire>
 800ad22:	4b03      	ldr	r3, [pc, #12]	; (800ad30 <__fp_lock_all+0x14>)
 800ad24:	4903      	ldr	r1, [pc, #12]	; (800ad34 <__fp_lock_all+0x18>)
 800ad26:	6818      	ldr	r0, [r3, #0]
 800ad28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ad2c:	f000 b812 	b.w	800ad54 <_fwalk>
 800ad30:	07e8      	lsls	r0, r5, #31
 800ad32:	2000      	movs	r0, #0
 800ad34:	ab89      	add	r3, sp, #548	; 0x224
 800ad36:	0800      	lsrs	r0, r0, #32

0800ad38 <__fp_unlock_all>:
 800ad38:	b508      	push	{r3, lr}
 800ad3a:	4b04      	ldr	r3, [pc, #16]	; (800ad4c <__fp_unlock_all+0x14>)
 800ad3c:	4904      	ldr	r1, [pc, #16]	; (800ad50 <__fp_unlock_all+0x18>)
 800ad3e:	6818      	ldr	r0, [r3, #0]
 800ad40:	f000 f808 	bl	800ad54 <_fwalk>
 800ad44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ad48:	f7ff bf58 	b.w	800abfc <__sfp_lock_release>
 800ad4c:	07e8      	lsls	r0, r5, #31
 800ad4e:	2000      	movs	r0, #0
 800ad50:	aba1      	add	r3, sp, #644	; 0x284
 800ad52:	0800      	lsrs	r0, r0, #32

0800ad54 <_fwalk>:
 800ad54:	          e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad58:	          460f      	mov	r7, r1
 800ad5a:	          f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad5e:	          2600      	movs	r6, #0
 800ad60:	      /-> e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800ad64:	/-----|-> f1b8 0801 	subs.w	r8, r8, #1
 800ad68:	|  /--|-- d505      	bpl.n	800ad76 <_fwalk+0x22>
 800ad6a:	|  |  |   6824      	ldr	r4, [r4, #0]
 800ad6c:	|  |  |   2c00      	cmp	r4, #0
 800ad6e:	|  |  \-- d1f7      	bne.n	800ad60 <_fwalk+0xc>
 800ad70:	|  |      4630      	mov	r0, r6
 800ad72:	|  |      e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad76:	|  \----> 89ab      	ldrh	r3, [r5, #12]
 800ad78:	|         2b01      	cmp	r3, #1
 800ad7a:	|     /-- d906      	bls.n	800ad8a <_fwalk+0x36>
 800ad7c:	|     |   f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad80:	|     |   3301      	adds	r3, #1
 800ad82:	|     +-- d002      	beq.n	800ad8a <_fwalk+0x36>
 800ad84:	|     |   4628      	mov	r0, r5
 800ad86:	|     |   47b8      	blx	r7
 800ad88:	|     |   4306      	orrs	r6, r0
 800ad8a:	|     \-> 3568      	adds	r5, #104	; 0x68
 800ad8c:	\-------- e7ea      	b.n	800ad64 <_fwalk+0x10>

0800ad8e <_fwalk_reent>:
 800ad8e:	          e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad92:	          4606      	mov	r6, r0
 800ad94:	          4688      	mov	r8, r1
 800ad96:	          f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad9a:	          2700      	movs	r7, #0
 800ad9c:	      /-> e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ada0:	/-----|-> f1b9 0901 	subs.w	r9, r9, #1
 800ada4:	|  /--|-- d505      	bpl.n	800adb2 <_fwalk_reent+0x24>
 800ada6:	|  |  |   6824      	ldr	r4, [r4, #0]
 800ada8:	|  |  |   2c00      	cmp	r4, #0
 800adaa:	|  |  \-- d1f7      	bne.n	800ad9c <_fwalk_reent+0xe>
 800adac:	|  |      4638      	mov	r0, r7
 800adae:	|  |      e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adb2:	|  \----> 89ab      	ldrh	r3, [r5, #12]
 800adb4:	|         2b01      	cmp	r3, #1
 800adb6:	|     /-- d907      	bls.n	800adc8 <_fwalk_reent+0x3a>
 800adb8:	|     |   f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adbc:	|     |   3301      	adds	r3, #1
 800adbe:	|     +-- d003      	beq.n	800adc8 <_fwalk_reent+0x3a>
 800adc0:	|     |   4629      	mov	r1, r5
 800adc2:	|     |   4630      	mov	r0, r6
 800adc4:	|     |   47c0      	blx	r8
 800adc6:	|     |   4307      	orrs	r7, r0
 800adc8:	|     \-> 3568      	adds	r5, #104	; 0x68
 800adca:	\-------- e7e9      	b.n	800ada0 <_fwalk_reent+0x12>

0800adcc <__retarget_lock_init>:
 800adcc:	4770      	bx	lr

0800adce <__retarget_lock_init_recursive>:
 800adce:	4770      	bx	lr

0800add0 <__retarget_lock_close>:
 800add0:	4770      	bx	lr

0800add2 <__retarget_lock_close_recursive>:
 800add2:	4770      	bx	lr

0800add4 <__retarget_lock_acquire>:
 800add4:	4770      	bx	lr

0800add6 <__retarget_lock_acquire_recursive>:
 800add6:	4770      	bx	lr

0800add8 <__retarget_lock_try_acquire>:
 800add8:	2001      	movs	r0, #1
 800adda:	4770      	bx	lr

0800addc <__retarget_lock_try_acquire_recursive>:
 800addc:	2001      	movs	r0, #1
 800adde:	4770      	bx	lr

0800ade0 <__retarget_lock_release>:
 800ade0:	4770      	bx	lr

0800ade2 <__retarget_lock_release_recursive>:
 800ade2:	4770      	bx	lr

0800ade4 <_realloc_r>:
 800ade4:	          b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade6:	          4607      	mov	r7, r0
 800ade8:	          4614      	mov	r4, r2
 800adea:	          460e      	mov	r6, r1
 800adec:	      /-- b921      	cbnz	r1, 800adf8 <_realloc_r+0x14>
 800adee:	      |   e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800adf2:	      |   4611      	mov	r1, r2
 800adf4:	      |   f7fe be8e 	b.w	8009b14 <_malloc_r>
 800adf8:	   /--\-X b922      	cbnz	r2, 800ae04 <_realloc_r+0x20>
 800adfa:	   |      f7fe fe3f 	bl	8009a7c <_free_r>
 800adfe:	   |      4625      	mov	r5, r4
 800ae00:	/--|----> 4628      	mov	r0, r5
 800ae02:	|  |      bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae04:	|  \----> f000 f814 	bl	800ae30 <_malloc_usable_size_r>
 800ae08:	|         42a0      	cmp	r0, r4
 800ae0a:	|     /-- d20f      	bcs.n	800ae2c <_realloc_r+0x48>
 800ae0c:	|     |   4621      	mov	r1, r4
 800ae0e:	|     |   4638      	mov	r0, r7
 800ae10:	|     |   f7fe fe80 	bl	8009b14 <_malloc_r>
 800ae14:	|     |   4605      	mov	r5, r0
 800ae16:	|     |   2800      	cmp	r0, #0
 800ae18:	+-----|-- d0f2      	beq.n	800ae00 <_realloc_r+0x1c>
 800ae1a:	|     |   4631      	mov	r1, r6
 800ae1c:	|     |   4622      	mov	r2, r4
 800ae1e:	|     |   f7fe fe1f 	bl	8009a60 <memcpy>
 800ae22:	|     |   4631      	mov	r1, r6
 800ae24:	|     |   4638      	mov	r0, r7
 800ae26:	|     |   f7fe fe29 	bl	8009a7c <_free_r>
 800ae2a:	+-----|-- e7e9      	b.n	800ae00 <_realloc_r+0x1c>
 800ae2c:	|     \-> 4635      	mov	r5, r6
 800ae2e:	\-------- e7e7      	b.n	800ae00 <_realloc_r+0x1c>

0800ae30 <_malloc_usable_size_r>:
 800ae30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae34:	1f18      	subs	r0, r3, #4
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	bfbc      	itt	lt
 800ae3a:	580b      	ldrlt	r3, [r1, r0]
 800ae3c:	18c0      	addlt	r0, r0, r3
 800ae3e:	4770      	bx	lr

0800ae40 <_close>:
 800ae40:	4b02      	ldr	r3, [pc, #8]	; (800ae4c <_close+0xc>)
 800ae42:	2258      	movs	r2, #88	; 0x58
 800ae44:	601a      	str	r2, [r3, #0]
 800ae46:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4a:	4770      	bx	lr
 800ae4c:	5320      	strh	r0, [r4, r4]
 800ae4e:	2000      	movs	r0, #0

0800ae50 <_lseek>:
 800ae50:	4b02      	ldr	r3, [pc, #8]	; (800ae5c <_lseek+0xc>)
 800ae52:	2258      	movs	r2, #88	; 0x58
 800ae54:	601a      	str	r2, [r3, #0]
 800ae56:	f04f 30ff 	mov.w	r0, #4294967295
 800ae5a:	4770      	bx	lr
 800ae5c:	5320      	strh	r0, [r4, r4]
 800ae5e:	2000      	movs	r0, #0

0800ae60 <_read>:
 800ae60:	4b02      	ldr	r3, [pc, #8]	; (800ae6c <_read+0xc>)
 800ae62:	2258      	movs	r2, #88	; 0x58
 800ae64:	601a      	str	r2, [r3, #0]
 800ae66:	f04f 30ff 	mov.w	r0, #4294967295
 800ae6a:	4770      	bx	lr
 800ae6c:	5320      	strh	r0, [r4, r4]
 800ae6e:	2000      	movs	r0, #0

0800ae70 <_sbrk>:
 800ae70:	4a04      	ldr	r2, [pc, #16]	; (800ae84 <_sbrk+0x14>)
 800ae72:	4905      	ldr	r1, [pc, #20]	; (800ae88 <_sbrk+0x18>)
 800ae74:	6813      	ldr	r3, [r2, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	bf08      	it	eq
 800ae7a:	460b      	moveq	r3, r1
 800ae7c:	4418      	add	r0, r3
 800ae7e:	6010      	str	r0, [r2, #0]
 800ae80:	4618      	mov	r0, r3
 800ae82:	4770      	bx	lr
 800ae84:	5330      	strh	r0, [r6, r4]
 800ae86:	2000      	movs	r0, #0
 800ae88:	5338      	strh	r0, [r7, r4]
 800ae8a:	2000      	movs	r0, #0

0800ae8c <_exit>:
 800ae8c:	/-- e7fe      	b.n	800ae8c <_exit>
 800ae8e:	    bf00      	nop

0800ae90 <__EH_FRAME_BEGIN__>:
 800ae90:	0000      	movs	r0, r0
	...

0800ae94 <_init>:
 800ae94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae96:	bf00      	nop
 800ae98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae9a:	bc08      	pop	{r3}
 800ae9c:	469e      	mov	lr, r3
 800ae9e:	4770      	bx	lr

0800aea0 <_fini>:
 800aea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea2:	bf00      	nop
 800aea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aea6:	bc08      	pop	{r3}
 800aea8:	469e      	mov	lr, r3
 800aeaa:	4770      	bx	lr

Disassembly of section .rodata:

0800aeac <all_implied_fbits>:
 800aeac:	3d3a      	subs	r5, #58	; 0x3a
 800aeae:	3d0a      	subs	r5, #10
 800aeb0:	3d0f      	subs	r5, #15
 800aeb2:	3d24      	subs	r5, #36	; 0x24
 800aeb4:	3d32      	subs	r5, #50	; 0x32
 800aeb6:	3d02      	subs	r5, #2
 800aeb8:	3d05      	subs	r5, #5
 800aeba:	3d13      	subs	r5, #19
 800aebc:	3d0d      	subs	r5, #13
 800aebe:	3d0c      	subs	r5, #12
 800aec0:	3d23      	subs	r5, #35	; 0x23
 800aec2:	3d11      	subs	r5, #17
 800aec4:	3d26      	subs	r5, #38	; 0x26
 800aec6:	3d01      	subs	r5, #1
 800aec8:	3d17      	subs	r5, #23
 800aeca:	3d08      	subs	r5, #8
 800aecc:	3d09      	subs	r5, #9
 800aece:	0000      	movs	r0, r0
 800aed0:	7453      	strb	r3, [r2, #17]
 800aed2:	7261      	strb	r1, [r4, #9]
 800aed4:	0074      	lsls	r4, r6, #1
 800aed6:	0000      	movs	r0, r0
 800aed8:	3038      	adds	r0, #56	; 0x38
 800aeda:	3338      	adds	r3, #56	; 0x38
 800aedc:	0000      	movs	r0, r0
 800aede:	0000      	movs	r0, r0
 800aee0:	6968      	ldr	r0, [r5, #20]
 800aee2:	7572      	strb	r2, [r6, #21]
 800aee4:	646e      	str	r6, [r5, #68]	; 0x44
 800aee6:	2e6f      	cmp	r6, #111	; 0x6f
 800aee8:	7572      	strb	r2, [r6, #21]
	...

0800aeec <day_offset>:
const uint16_t day_offset[12] = {0, 31, 61,92, 122, 153, 184, 214, 245, 275,306, 337};
 800aeec:	0000      	movs	r0, r0
 800aeee:	001f      	movs	r7, r3
 800aef0:	003d      	movs	r5, r7
 800aef2:	005c      	lsls	r4, r3, #1
 800aef4:	007a      	lsls	r2, r7, #1
 800aef6:	0099      	lsls	r1, r3, #2
 800aef8:	00b8      	lsls	r0, r7, #2
 800aefa:	00d6      	lsls	r6, r2, #3
 800aefc:	00f5      	lsls	r5, r6, #3
 800aefe:	0113      	lsls	r3, r2, #4
 800af00:	0132      	lsls	r2, r6, #4
 800af02:	0151      	lsls	r1, r2, #5
 800af04:	4144      	adcs	r4, r0
 800af06:	4154      	adcs	r4, r2
 800af08:	2020      	movs	r0, #32
 800af0a:	2020      	movs	r0, #32
 800af0c:	542e      	strb	r6, [r5, r0]
 800af0e:	5458      	strb	r0, [r3, r1]
 800af10:	0000      	movs	r0, r0
 800af12:	0000      	movs	r0, r0
 800af14:	5441      	strb	r1, [r0, r1]
 800af16:	432b      	orrs	r3, r5
 800af18:	5453      	strb	r3, [r2, r1]
 800af1a:	3d54      	subs	r5, #84	; 0x54
 800af1c:	0022      	movs	r2, r4
 800af1e:	0000      	movs	r0, r0
 800af20:	0d22      	lsrs	r2, r4, #20
 800af22:	0000      	movs	r0, r0
 800af24:	5441      	strb	r1, [r0, r1]
 800af26:	432b      	orrs	r3, r5
 800af28:	5153      	str	r3, [r2, r5]
 800af2a:	0000      	movs	r0, r0
 800af2c:	5441      	strb	r1, [r0, r1]
 800af2e:	432b      	orrs	r3, r5
 800af30:	4342      	muls	r2, r0
 800af32:	0000      	movs	r0, r0
 800af34:	5441      	strb	r1, [r0, r1]
 800af36:	0000      	movs	r0, r0
 800af38:	5441      	strb	r1, [r0, r1]
 800af3a:	432b      	orrs	r3, r5
 800af3c:	4f50      	ldr	r7, [pc, #320]	; (800b080 <day_offset+0x194>)
 800af3e:	4457      	add	r7, r10
 800af40:	313d      	adds	r1, #61	; 0x3d
 800af42:	0000      	movs	r0, r0
 800af44:	6e69      	ldr	r1, [r5, #100]	; 0x64
 800af46:	6574      	str	r4, [r6, #84]	; 0x54
 800af48:	6e72      	ldr	r2, [r6, #100]	; 0x64
 800af4a:	7465      	strb	r5, [r4, #17]
 800af4c:	742e      	strb	r6, [r5, #16]
 800af4e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800af50:	3265      	adds	r2, #101	; 0x65
 800af52:	722e      	strb	r6, [r5, #8]
 800af54:	0075      	lsls	r5, r6, #1
 800af56:	0000      	movs	r0, r0
 800af58:	5441      	strb	r1, [r0, r1]
 800af5a:	432b      	orrs	r3, r5
 800af5c:	4949      	ldr	r1, [pc, #292]	; (800b084 <day_offset+0x198>)
 800af5e:	5243      	strh	r3, [r0, r1]
 800af60:	0000      	movs	r0, r0
 800af62:	0000      	movs	r0, r0
 800af64:	5441      	strb	r1, [r0, r1]
 800af66:	432b      	orrs	r3, r5
 800af68:	4649      	mov	r1, r9
 800af6a:	5253      	strh	r3, [r2, r1]
 800af6c:	0000      	movs	r0, r0
 800af6e:	0000      	movs	r0, r0
 800af70:	5441      	strb	r1, [r0, r1]
 800af72:	432b      	orrs	r3, r5
 800af74:	474d      	bx	r9
 800af76:	3d46      	subs	r5, #70	; 0x46
 800af78:	0031      	movs	r1, r6
 800af7a:	0000      	movs	r0, r0
 800af7c:	5441      	strb	r1, [r0, r1]
 800af7e:	432b      	orrs	r3, r5
 800af80:	474d      	bx	r9
 800af82:	3d53      	subs	r5, #83	; 0x53
 800af84:	0022      	movs	r2, r4
 800af86:	0000      	movs	r0, r0
 800af88:	0022      	movs	r2, r4
 800af8a:	0000      	movs	r0, r0
 800af8c:	5441      	strb	r1, [r0, r1]
 800af8e:	432b      	orrs	r3, r5
 800af90:	5049      	str	r1, [r1, r1]
 800af92:	5453      	strb	r3, [r2, r1]
 800af94:	5241      	strh	r1, [r0, r1]
 800af96:	3d54      	subs	r5, #84	; 0x54
 800af98:	5422      	strb	r2, [r4, r0]
 800af9a:	5043      	str	r3, [r0, r1]
 800af9c:	2c22      	cmp	r4, #34	; 0x22
 800af9e:	0022      	movs	r2, r4
 800afa0:	2c22      	cmp	r4, #34	; 0x22
 800afa2:	0000      	movs	r0, r0
 800afa4:	5441      	strb	r1, [r0, r1]
 800afa6:	432b      	orrs	r3, r5
 800afa8:	5049      	str	r1, [r1, r1]
 800afaa:	4553      	cmp	r3, r10
 800afac:	444e      	add	r6, r9
 800afae:	0000      	movs	r0, r0
 800afb0:	5441      	strb	r1, [r0, r1]
 800afb2:	432b      	orrs	r3, r5
 800afb4:	4e44      	ldr	r6, [pc, #272]	; (800b0c8 <day_offset+0x1dc>)
 800afb6:	4353      	muls	r3, r2
 800afb8:	4746      	bx	r8
 800afba:	223d      	movs	r2, #61	; 0x3d
 800afbc:	2e38      	cmp	r6, #56	; 0x38
 800afbe:	2e38      	cmp	r6, #56	; 0x38
 800afc0:	2e38      	cmp	r6, #56	; 0x38
 800afc2:	2238      	movs	r2, #56	; 0x38
 800afc4:	222c      	movs	r2, #44	; 0x2c
 800afc6:	2e38      	cmp	r6, #56	; 0x38
 800afc8:	2e38      	cmp	r6, #56	; 0x38
 800afca:	2e34      	cmp	r6, #52	; 0x34
 800afcc:	2234      	movs	r2, #52	; 0x34
 800afce:	0000      	movs	r0, r0
 800afd0:	5441      	strb	r1, [r0, r1]
 800afd2:	432b      	orrs	r3, r5
 800afd4:	5049      	str	r1, [r1, r1]
 800afd6:	4c43      	ldr	r4, [pc, #268]	; (800b0e4 <day_offset+0x1f8>)
 800afd8:	534f      	strh	r7, [r1, r5]
 800afda:	0045      	lsls	r5, r0, #1
 800afdc:	5441      	strb	r1, [r0, r1]
 800afde:	432b      	orrs	r3, r5
 800afe0:	5049      	str	r1, [r1, r1]
 800afe2:	4853      	ldr	r0, [pc, #332]	; (800b130 <day_offset+0x244>)
 800afe4:	5455      	strb	r5, [r2, r1]
 800afe6:	0000      	movs	r0, r0
 800afe8:	5441      	strb	r1, [r0, r1]
 800afea:	3045      	adds	r0, #69	; 0x45
 800afec:	0000      	movs	r0, r0
 800afee:	0000      	movs	r0, r0
 800aff0:	5441      	strb	r1, [r0, r1]
 800aff2:	5726      	ldrsb	r6, [r4, r4]
 800aff4:	0000      	movs	r0, r0
 800aff6:	0000      	movs	r0, r0
 800aff8:	5441      	strb	r1, [r0, r1]
 800affa:	432b      	orrs	r3, r5
 800affc:	4950      	ldr	r1, [pc, #320]	; (800b140 <day_offset+0x254>)
 800affe:	3f4e      	subs	r7, #78	; 0x4e
 800b000:	0000      	movs	r0, r0
 800b002:	0000      	movs	r0, r0
 800b004:	5441      	strb	r1, [r0, r1]
 800b006:	432b      	orrs	r3, r5
 800b008:	4552      	cmp	r2, r10
 800b00a:	3f47      	subs	r7, #71	; 0x47
 800b00c:	0000      	movs	r0, r0
 800b00e:	0000      	movs	r0, r0
 800b010:	5441      	strb	r1, [r0, r1]
 800b012:	432b      	orrs	r3, r5
 800b014:	5247      	strh	r7, [r0, r1]
 800b016:	4745      	bx	r8
 800b018:	003f      	movs	r7, r7
 800b01a:	0000      	movs	r0, r0
 800b01c:	5441      	strb	r1, [r0, r1]
 800b01e:	432b      	orrs	r3, r5
 800b020:	4147      	adcs	r7, r0
 800b022:	5454      	strb	r4, [r2, r1]
 800b024:	003f      	movs	r7, r7
 800b026:	0000      	movs	r0, r0
 800b028:	5441      	strb	r1, [r0, r1]
 800b02a:	432b      	orrs	r3, r5
 800b02c:	4147      	adcs	r7, r0
 800b02e:	5454      	strb	r4, [r2, r1]
 800b030:	313d      	adds	r1, #61	; 0x3d
 800b032:	0000      	movs	r0, r0
 800b034:	5441      	strb	r1, [r0, r1]
 800b036:	432b      	orrs	r3, r5
 800b038:	5049      	str	r1, [r1, r1]
 800b03a:	5453      	strb	r3, [r2, r1]
 800b03c:	5441      	strb	r1, [r0, r1]
 800b03e:	5355      	strh	r5, [r2, r5]
 800b040:	0000      	movs	r0, r0
 800b042:	0000      	movs	r0, r0
 800b044:	5441      	strb	r1, [r0, r1]
 800b046:	432b      	orrs	r3, r5
 800b048:	4d4e      	ldr	r5, [pc, #312]	; (800b184 <day_offset+0x298>)
 800b04a:	3d50      	subs	r5, #80	; 0x50
 800b04c:	0000      	movs	r0, r0
 800b04e:	0000      	movs	r0, r0
 800b050:	5441      	strb	r1, [r0, r1]
 800b052:	432b      	orrs	r3, r5
 800b054:	4d4e      	ldr	r5, [pc, #312]	; (800b190 <day_offset+0x2a4>)
 800b056:	3f50      	subs	r7, #80	; 0x50
 800b058:	0000      	movs	r0, r0
 800b05a:	0000      	movs	r0, r0
 800b05c:	4f0a      	ldr	r7, [pc, #40]	; (800b088 <day_offset+0x19c>)
 800b05e:	0d4b      	lsrs	r3, r1, #21
 800b060:	0000      	movs	r0, r0
 800b062:	0000      	movs	r0, r0
 800b064:	450a      	cmp	r2, r1
 800b066:	5252      	strh	r2, [r2, r1]
 800b068:	524f      	strh	r7, [r1, r1]
 800b06a:	000d      	movs	r5, r1
 800b06c:	5453      	strb	r3, [r2, r1]
 800b06e:	5441      	strb	r1, [r0, r1]
 800b070:	3a45      	subs	r2, #69	; 0x45
 800b072:	0000      	movs	r0, r0
 800b074:	5049      	str	r1, [r1, r1]
 800b076:	4920      	ldr	r1, [pc, #128]	; (800b0f8 <day_offset+0x20c>)
 800b078:	494e      	ldr	r1, [pc, #312]	; (800b1b4 <day_offset+0x2c8>)
 800b07a:	4954      	ldr	r1, [pc, #336]	; (800b1cc <day_offset+0x2e0>)
 800b07c:	4c41      	ldr	r4, [pc, #260]	; (800b184 <day_offset+0x298>)
 800b07e:	0000      	movs	r0, r0
 800b080:	5049      	str	r1, [r1, r1]
 800b082:	5320      	strh	r0, [r4, r4]
 800b084:	4154      	adcs	r4, r2
 800b086:	5452      	strb	r2, [r2, r1]
 800b088:	0000      	movs	r0, r0
 800b08a:	0000      	movs	r0, r0
 800b08c:	5049      	str	r1, [r1, r1]
 800b08e:	4720      	bx	r4
 800b090:	5250      	strh	r0, [r2, r1]
 800b092:	4153      	adcs	r3, r2
 800b094:	5443      	strb	r3, [r0, r1]
 800b096:	0000      	movs	r0, r0
 800b098:	5049      	str	r1, [r1, r1]
 800b09a:	5320      	strh	r0, [r4, r4]
 800b09c:	4154      	adcs	r4, r2
 800b09e:	5554      	strb	r4, [r2, r5]
 800b0a0:	0053      	lsls	r3, r2, #1
 800b0a2:	0000      	movs	r0, r0
 800b0a4:	4354      	muls	r4, r2
 800b0a6:	2050      	movs	r0, #80	; 0x50
 800b0a8:	4c43      	ldr	r4, [pc, #268]	; (800b1b8 <day_offset+0x2cc>)
 800b0aa:	534f      	strh	r7, [r1, r5]
 800b0ac:	4445      	add	r5, r8
 800b0ae:	0000      	movs	r0, r0
 800b0b0:	4354      	muls	r4, r2
 800b0b2:	2050      	movs	r0, #80	; 0x50
 800b0b4:	4f43      	ldr	r7, [pc, #268]	; (800b1c4 <day_offset+0x2d8>)
 800b0b6:	4e4e      	ldr	r6, [pc, #312]	; (800b1f0 <day_offset+0x304>)
 800b0b8:	4345      	muls	r5, r0
 800b0ba:	4954      	ldr	r1, [pc, #336]	; (800b20c <all_implied_fbits+0x14>)
 800b0bc:	474e      	bx	r9
 800b0be:	0000      	movs	r0, r0
 800b0c0:	4f43      	ldr	r7, [pc, #268]	; (800b1d0 <day_offset+0x2e4>)
 800b0c2:	4e4e      	ldr	r6, [pc, #312]	; (800b1fc <all_implied_fbits+0x4>)
 800b0c4:	4345      	muls	r5, r0
 800b0c6:	2054      	movs	r0, #84	; 0x54
 800b0c8:	4b4f      	ldr	r3, [pc, #316]	; (800b208 <all_implied_fbits+0x10>)
 800b0ca:	0000      	movs	r0, r0
 800b0cc:	4452      	add	r2, r10
 800b0ce:	0d59      	lsrs	r1, r3, #21
 800b0d0:	000a      	movs	r2, r1
 800b0d2:	0000      	movs	r0, r0
 800b0d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b0d6:	0064      	lsls	r4, r4, #1
 800b0d8:	7473      	strb	r3, [r6, #17]
 800b0da:	7261      	strb	r1, [r4, #9]
 800b0dc:	0074      	lsls	r4, r6, #1
 800b0de:	0000      	movs	r0, r0
 800b0e0:	4f50      	ldr	r7, [pc, #320]	; (800b224 <_global_impure_ptr+0x8>)
 800b0e2:	4557      	cmp	r7, r10
 800b0e4:	2052      	movs	r0, #82	; 0x52
 800b0e6:	4f44      	ldr	r7, [pc, #272]	; (800b1f8 <all_implied_fbits>)
 800b0e8:	4e57      	ldr	r6, [pc, #348]	; (800b248 <_ctype_+0x9>)
 800b0ea:	0a0d      	lsrs	r5, r1, #8
 800b0ec:	0000      	movs	r0, r0
 800b0ee:	0000      	movs	r0, r0
 800b0f0:	432b      	orrs	r3, r5
 800b0f2:	4950      	ldr	r1, [pc, #320]	; (800b234 <_global_impure_ptr+0x18>)
 800b0f4:	3a4e      	subs	r2, #78	; 0x4e
 800b0f6:	0000      	movs	r0, r0
 800b0f8:	432b      	orrs	r3, r5
 800b0fa:	4950      	ldr	r1, [pc, #320]	; (800b23c <_global_impure_ptr+0x20>)
 800b0fc:	3a4e      	subs	r2, #78	; 0x4e
 800b0fe:	5220      	strh	r0, [r4, r0]
 800b100:	4145      	adcs	r5, r0
 800b102:	5944      	ldr	r4, [r0, r5]
 800b104:	0000      	movs	r0, r0
 800b106:	0000      	movs	r0, r0
 800b108:	432b      	orrs	r3, r5
 800b10a:	4552      	cmp	r2, r10
 800b10c:	3a47      	subs	r2, #71	; 0x47
 800b10e:	0000      	movs	r0, r0
 800b110:	432b      	orrs	r3, r5
 800b112:	4552      	cmp	r2, r10
 800b114:	3a47      	subs	r2, #71	; 0x47
 800b116:	3020      	adds	r0, #32
 800b118:	312c      	adds	r1, #44	; 0x2c
 800b11a:	0000      	movs	r0, r0
 800b11c:	432b      	orrs	r3, r5
 800b11e:	5247      	strh	r7, [r0, r1]
 800b120:	4745      	bx	r8
 800b122:	003a      	movs	r2, r7
 800b124:	432b      	orrs	r3, r5
 800b126:	5247      	strh	r7, [r0, r1]
 800b128:	4745      	bx	r8
 800b12a:	203a      	movs	r0, #58	; 0x3a
 800b12c:	2c30      	cmp	r4, #48	; 0x30
 800b12e:	0031      	movs	r1, r6
 800b130:	432b      	orrs	r3, r5
 800b132:	5245      	strh	r5, [r0, r1]
 800b134:	4745      	bx	r8
 800b136:	003a      	movs	r2, r7
 800b138:	432b      	orrs	r3, r5
 800b13a:	5245      	strh	r5, [r0, r1]
 800b13c:	4745      	bx	r8
 800b13e:	203a      	movs	r0, #58	; 0x3a
 800b140:	2c30      	cmp	r4, #48	; 0x30
 800b142:	0031      	movs	r1, r6
 800b144:	432b      	orrs	r3, r5
 800b146:	4147      	adcs	r7, r0
 800b148:	5454      	strb	r4, [r2, r1]
 800b14a:	003a      	movs	r2, r7
 800b14c:	432b      	orrs	r3, r5
 800b14e:	4147      	adcs	r7, r0
 800b150:	5454      	strb	r4, [r2, r1]
 800b152:	203a      	movs	r0, #58	; 0x3a
 800b154:	0031      	movs	r1, r6
 800b156:	0000      	movs	r0, r0
 800b158:	502b      	str	r3, [r5, r0]
 800b15a:	5044      	str	r4, [r0, r1]
 800b15c:	203a      	movs	r0, #58	; 0x3a
 800b15e:	4544      	cmp	r4, r8
 800b160:	4341      	muls	r1, r0
 800b162:	0054      	lsls	r4, r2, #1
 800b164:	432b      	orrs	r3, r5
 800b166:	4d4e      	ldr	r5, [pc, #312]	; (800b2a0 <_ctype_+0x61>)
 800b168:	3a50      	subs	r2, #80	; 0x50
 800b16a:	0000      	movs	r0, r0
 800b16c:	432b      	orrs	r3, r5
 800b16e:	4d4e      	ldr	r5, [pc, #312]	; (800b2a8 <_ctype_+0x69>)
 800b170:	3a50      	subs	r2, #80	; 0x50
 800b172:	3520      	adds	r5, #32
 800b174:	0031      	movs	r1, r6
 800b176:	0000      	movs	r0, r0
 800b178:	432b      	orrs	r3, r5
 800b17a:	4d4e      	ldr	r5, [pc, #312]	; (800b2b4 <_ctype_+0x75>)
 800b17c:	3a50      	subs	r2, #80	; 0x50
 800b17e:	3320      	adds	r3, #32
 800b180:	0038      	movs	r0, r7
 800b182:	0000      	movs	r0, r0
 800b184:	432b      	orrs	r3, r5
 800b186:	4d4e      	ldr	r5, [pc, #312]	; (800b2c0 <_ctype_+0x81>)
 800b188:	3a50      	subs	r2, #80	; 0x50
 800b18a:	3120      	adds	r1, #32
 800b18c:	0033      	movs	r3, r6
 800b18e:	0000      	movs	r0, r0
 800b190:	432b      	orrs	r3, r5
 800b192:	4d4e      	ldr	r5, [pc, #312]	; (800b2cc <_ctype_+0x8d>)
 800b194:	3a50      	subs	r2, #80	; 0x50
 800b196:	3220      	adds	r2, #32
 800b198:	0000      	movs	r0, r0
 800b19a:	0000      	movs	r0, r0
 800b19c:	432b      	orrs	r3, r5
 800b19e:	5153      	str	r3, [r2, r5]
 800b1a0:	003a      	movs	r2, r7
 800b1a2:	0000      	movs	r0, r0
 800b1a4:	0a0d      	lsrs	r5, r1, #8
 800b1a6:	432b      	orrs	r3, r5
 800b1a8:	5153      	str	r3, [r2, r5]
 800b1aa:	203a      	movs	r0, #58	; 0x3a
 800b1ac:	6425      	str	r5, [r4, #64]	; 0x40
 800b1ae:	252c      	movs	r5, #44	; 0x2c
 800b1b0:	0064      	lsls	r4, r4, #1
 800b1b2:	0000      	movs	r0, r0
 800b1b4:	4c43      	ldr	r4, [pc, #268]	; (800b2c4 <_ctype_+0x85>)
 800b1b6:	534f      	strh	r7, [r1, r5]
 800b1b8:	2045      	movs	r0, #69	; 0x45
 800b1ba:	4b4f      	ldr	r3, [pc, #316]	; (800b2f8 <_ctype_+0xb9>)
 800b1bc:	0000      	movs	r0, r0
 800b1be:	0000      	movs	r0, r0
 800b1c0:	4553      	cmp	r3, r10
 800b1c2:	444e      	add	r6, r9
 800b1c4:	4f20      	ldr	r7, [pc, #128]	; (800b248 <_ctype_+0x9>)
 800b1c6:	004b      	lsls	r3, r1, #1
 800b1c8:	432b      	orrs	r3, r5
 800b1ca:	4342      	muls	r2, r0
 800b1cc:	003a      	movs	r2, r7
 800b1ce:	0000      	movs	r0, r0
 800b1d0:	0a0d      	lsrs	r5, r1, #8
 800b1d2:	432b      	orrs	r3, r5
 800b1d4:	4342      	muls	r2, r0
 800b1d6:	203a      	movs	r0, #58	; 0x3a
 800b1d8:	6425      	str	r5, [r4, #64]	; 0x40
 800b1da:	252c      	movs	r5, #44	; 0x2c
 800b1dc:	2c64      	cmp	r4, #100	; 0x64
 800b1de:	6425      	str	r5, [r4, #64]	; 0x40
 800b1e0:	0000      	movs	r0, r0
 800b1e2:	0000      	movs	r0, r0
 800b1e4:	8908      	ldrh	r0, [r1, #8]
 800b1e6:	0001      	movs	r1, r0
 800b1e8:	0000      	movs	r0, r0
 800b1ea:	0000      	movs	r0, r0
 800b1ec:	b224      	sxth	r4, r4
 800b1ee:	0800      	lsrs	r0, r0, #32
 800b1f0:	b227      	sxth	r7, r4
 800b1f2:	0800      	lsrs	r0, r0, #32
 800b1f4:	b22a      	sxth	r2, r5
 800b1f6:	0800      	lsrs	r0, r0, #32

0800b1f8 <all_implied_fbits>:
 800b1f8:	3d3a      	subs	r5, #58	; 0x3a
 800b1fa:	3d0a      	subs	r5, #10
 800b1fc:	3d0f      	subs	r5, #15
 800b1fe:	3d24      	subs	r5, #36	; 0x24
 800b200:	3d32      	subs	r5, #50	; 0x32
 800b202:	3d02      	subs	r5, #2
 800b204:	3d05      	subs	r5, #5
 800b206:	3d13      	subs	r5, #19
 800b208:	3d0d      	subs	r5, #13
 800b20a:	3d0c      	subs	r5, #12
 800b20c:	3d23      	subs	r5, #35	; 0x23
 800b20e:	3d11      	subs	r5, #17
 800b210:	3d26      	subs	r5, #38	; 0x26
 800b212:	3d01      	subs	r5, #1
 800b214:	3d17      	subs	r5, #23
 800b216:	3d08      	subs	r5, #8
 800b218:	3d09      	subs	r5, #9
	...

0800b21c <_global_impure_ptr>:
 800b21c:	07ec      	lsls	r4, r5, #31
 800b21e:	2000      	movs	r0, #0
 800b220:	6c68      	ldr	r0, [r5, #68]	; 0x44
 800b222:	004c      	lsls	r4, r1, #1
 800b224:	2d2b      	cmp	r5, #43	; 0x2b
 800b226:	3000      	adds	r0, #0
 800b228:	0030      	movs	r0, r6
 800b22a:	5878      	ldr	r0, [r7, r1]
 800b22c:	4100      	asrs	r0, r0
 800b22e:	462d      	mov	r5, r5
 800b230:	2d61      	cmp	r5, #97	; 0x61
 800b232:	3866      	subs	r0, #102	; 0x66
 800b234:	3039      	adds	r0, #57	; 0x39
 800b236:	3231      	adds	r2, #49	; 0x31
 800b238:	3433      	adds	r4, #51	; 0x33
 800b23a:	3635      	adds	r6, #53	; 0x35
 800b23c:	5d37      	ldrb	r7, [r6, r4]
	...

0800b23f <_ctype_>:
 800b23f:	2000      	movs	r0, #0
 800b241:	2020      	movs	r0, #32
 800b243:	2020      	movs	r0, #32
 800b245:	2020      	movs	r0, #32
 800b247:	2020      	movs	r0, #32
 800b249:	2828      	cmp	r0, #40	; 0x28
 800b24b:	2828      	cmp	r0, #40	; 0x28
 800b24d:	2028      	movs	r0, #40	; 0x28
 800b24f:	2020      	movs	r0, #32
 800b251:	2020      	movs	r0, #32
 800b253:	2020      	movs	r0, #32
 800b255:	2020      	movs	r0, #32
 800b257:	2020      	movs	r0, #32
 800b259:	2020      	movs	r0, #32
 800b25b:	2020      	movs	r0, #32
 800b25d:	2020      	movs	r0, #32
 800b25f:	8820      	ldrh	r0, [r4, #0]
 800b261:	1010      	asrs	r0, r2, #32
 800b263:	1010      	asrs	r0, r2, #32
 800b265:	1010      	asrs	r0, r2, #32
 800b267:	1010      	asrs	r0, r2, #32
 800b269:	1010      	asrs	r0, r2, #32
 800b26b:	1010      	asrs	r0, r2, #32
 800b26d:	1010      	asrs	r0, r2, #32
 800b26f:	0410      	lsls	r0, r2, #16
 800b271:	0404      	lsls	r4, r0, #16
 800b273:	0404      	lsls	r4, r0, #16
 800b275:	0404      	lsls	r4, r0, #16
 800b277:	0404      	lsls	r4, r0, #16
 800b279:	1004      	asrs	r4, r0, #32
 800b27b:	1010      	asrs	r0, r2, #32
 800b27d:	1010      	asrs	r0, r2, #32
 800b27f:	1010      	asrs	r0, r2, #32
 800b281:	4141      	adcs	r1, r0
 800b283:	4141      	adcs	r1, r0
 800b285:	4141      	adcs	r1, r0
 800b287:	0101      	lsls	r1, r0, #4
 800b289:	0101      	lsls	r1, r0, #4
 800b28b:	0101      	lsls	r1, r0, #4
 800b28d:	0101      	lsls	r1, r0, #4
 800b28f:	0101      	lsls	r1, r0, #4
 800b291:	0101      	lsls	r1, r0, #4
 800b293:	0101      	lsls	r1, r0, #4
 800b295:	0101      	lsls	r1, r0, #4
 800b297:	0101      	lsls	r1, r0, #4
 800b299:	0101      	lsls	r1, r0, #4
 800b29b:	1010      	asrs	r0, r2, #32
 800b29d:	1010      	asrs	r0, r2, #32
 800b29f:	1010      	asrs	r0, r2, #32
 800b2a1:	4242      	negs	r2, r0
 800b2a3:	4242      	negs	r2, r0
 800b2a5:	4242      	negs	r2, r0
 800b2a7:	0202      	lsls	r2, r0, #8
 800b2a9:	0202      	lsls	r2, r0, #8
 800b2ab:	0202      	lsls	r2, r0, #8
 800b2ad:	0202      	lsls	r2, r0, #8
 800b2af:	0202      	lsls	r2, r0, #8
 800b2b1:	0202      	lsls	r2, r0, #8
 800b2b3:	0202      	lsls	r2, r0, #8
 800b2b5:	0202      	lsls	r2, r0, #8
 800b2b7:	0202      	lsls	r2, r0, #8
 800b2b9:	0202      	lsls	r2, r0, #8
 800b2bb:	1010      	asrs	r0, r2, #32
 800b2bd:	1010      	asrs	r0, r2, #32
 800b2bf:	0020      	movs	r0, r4
	...

0800b340 <__sf_fake_stderr>:
	...

0800b360 <__sf_fake_stdin>:
	...

0800b380 <__sf_fake_stdout>:
	...

Disassembly of section .ARM:

0800b3a0 <__exidx_start>:
 800b3a0:	4e30      	ldr	r6, [pc, #192]	; (800b464 <_sidata+0xb4>)
 800b3a2:	7fff      	ldrb	r7, [r7, #31]
 800b3a4:	0001      	movs	r1, r0
	...

Disassembly of section .init_array:

0800b3a8 <__frame_dummy_init_array_entry>:
 800b3a8:	01b5      	lsls	r5, r6, #6
 800b3aa:	0800      	lsrs	r0, r0, #32

Disassembly of section .fini_array:

0800b3ac <__do_global_dtors_aux_fini_array_entry>:
 800b3ac:	0191      	lsls	r1, r2, #6
 800b3ae:	0800      	lsrs	r0, r0, #32

Disassembly of section .data:

20000000 <__dso_handle>:
	...

20000008 <gs1_ow_nums>:
RTC_struct_brief current_rtc;

uint16_t WAKEUP_PERIOD_SEC;
void TemperatureSensorsMeasure();
void (*handler)();
uint64_t gs1_ow_nums[12] = {
20000008:	    e7ed      	b.n	1fffffe6 <_sidata+0x17ff4c36>
2000000a:	    ff84 6402 	vraddhn.i16	d6, q2, q1
2000000e:	    28ff      	cmp	r0, #255	; 0xff
20000010:	    92f3      	str	r2, [sp, #972]	; 0x3cc
20000012:	    f976 6402 	ldr??.w	r6, [r6, <undefined>]
20000016:	    28ff      	cmp	r0, #255	; 0xff
20000018:	    6e07      	ldr	r7, [r0, #96]	; 0x60
2000001a:	    e39e      	b.n	2000075a <gs3_ow_nums+0x692>
2000001c:	    6402      	str	r2, [r0, #64]	; 0x40
2000001e:	    28ff      	cmp	r0, #255	; 0xff
20000020:	    c31e      	stmia	r3!, {r1, r2, r3, r4}
20000022:	    1951      	adds	r1, r2, r5
20000024:	    6402      	str	r2, [r0, #64]	; 0x40
20000026:	    28ff      	cmp	r0, #255	; 0xff
20000028:	    7d31      	ldrb	r1, [r6, #20]
2000002a:	    ffd5 6402 	vraddhn.i32	d22, <illegal reg q2.5>, q1
2000002e:	    28ff      	cmp	r0, #255	; 0xff
20000030:	    2005      	movs	r0, #5
20000032:	    f945 6402 	vst3.8	{d22-d24}, [r5], r2
20000036:	    28ff      	cmp	r0, #255	; 0xff
20000038:	    c32b      	stmia	r3!, {r0, r1, r3, r5}
2000003a:	    c59a      	stmia	r5!, {r1, r3, r4, r7}
2000003c:	    6402      	str	r2, [r0, #64]	; 0x40
2000003e:	    28ff      	cmp	r0, #255	; 0xff
20000040:	    e5d6      	b.n	1ffffbf0 <_sidata+0x17ff4840>
20000042:	    e38c      	b.n	2000075e <gs3_ow_nums+0x696>
20000044:	    6402      	str	r2, [r0, #64]	; 0x40
20000046:	    28ff      	cmp	r0, #255	; 0xff
20000048:	    5a8d      	ldrh	r5, [r1, r2]
2000004a:	    1e14      	subs	r4, r2, #0
2000004c:	    6402      	str	r2, [r0, #64]	; 0x40
2000004e:	    28ff      	cmp	r0, #255	; 0xff
20000050:	/-- b10a      	cbz	r2, 20000056 <gs1_ow_nums+0x4e>
20000052:	|   c587      	stmia	r5!, {r0, r1, r2, r7}
20000054:	|   6402      	str	r2, [r0, #64]	; 0x40
20000056:	\-> 28ff      	cmp	r0, #255	; 0xff
20000058:	    0ab3      	lsrs	r3, r6, #10
2000005a:	    ec66 6402 	cfstrd	mvd6, [r6], #-8
2000005e:	    28ff      	cmp	r0, #255	; 0xff
20000060:	    17f3      	asrs	r3, r6, #31
20000062:	    eddb 6402 	cfldrd	mvd6, [r11, #8]
20000066:	    28ff      	cmp	r0, #255	; 0xff

20000068 <gs2_ow_nums>:
    0x28ff64021e145a8d,
    0x28ff6402c587b10a,
    0x28ff6402ec660ab3,
    0x28ff6402eddb17f3
};
uint64_t gs2_ow_nums[12] = {
20000068:	d75d      	bvc.n	20000126 <gs3_ow_nums+0x5e>
2000006a:	e381      	b.n	20000770 <gs3_ow_nums+0x6a8>
2000006c:	6402      	str	r2, [r0, #64]	; 0x40
2000006e:	28ff      	cmp	r0, #255	; 0xff
20000070:	6f6a      	ldr	r2, [r5, #116]	; 0x74
20000072:	e709      	b.n	1ffffe88 <_sidata+0x17ff4ad8>
20000074:	6402      	str	r2, [r0, #64]	; 0x40
20000076:	28ff      	cmp	r0, #255	; 0xff
20000078:	f76d 1e1d 			; <UNDEFINED> instruction: 0xf76d1e1d
2000007c:	6402      	str	r2, [r0, #64]	; 0x40
2000007e:	28ff      	cmp	r0, #255	; 0xff
20000080:	9755      	str	r7, [sp, #340]	; 0x154
20000082:	196f      	adds	r7, r5, r5
20000084:	6402      	str	r2, [r0, #64]	; 0x40
20000086:	28ff      	cmp	r0, #255	; 0xff
20000088:	5b94      	ldrh	r4, [r2, r6]
2000008a:	e3d3      	b.n	20000834 <impure_data+0x48>
2000008c:	6402      	str	r2, [r0, #64]	; 0x40
2000008e:	28ff      	cmp	r0, #255	; 0xff
20000090:	5b21      	ldrh	r1, [r4, r4]
20000092:	ed54 6402 	cfldrd	mvd6, [r4, #-8]
20000096:	28ff      	cmp	r0, #255	; 0xff
20000098:	0b9a      	lsrs	r2, r3, #14
2000009a:	c589      	stmia	r5!, {r0, r3, r7}
2000009c:	6402      	str	r2, [r0, #64]	; 0x40
2000009e:	28ff      	cmp	r0, #255	; 0xff
200000a0:	8919      	ldrh	r1, [r3, #8]
200000a2:	192c      	adds	r4, r5, r4
200000a4:	6402      	str	r2, [r0, #64]	; 0x40
200000a6:	28ff      	cmp	r0, #255	; 0xff
200000a8:	a1f8      	add	r1, pc, #992	; (adr r1, 2000048c <gs3_ow_nums+0x3c4>)
200000aa:	192c      	adds	r4, r5, r4
200000ac:	6402      	str	r2, [r0, #64]	; 0x40
200000ae:	28ff      	cmp	r0, #255	; 0xff
200000b0:	28af      	cmp	r0, #175	; 0xaf
200000b2:	e709      	b.n	1ffffec8 <_sidata+0x17ff4b18>
200000b4:	6402      	str	r2, [r0, #64]	; 0x40
200000b6:	28ff      	cmp	r0, #255	; 0xff
200000b8:	18ea      	adds	r2, r5, r3
200000ba:	1840      	adds	r0, r0, r1
200000bc:	6402      	str	r2, [r0, #64]	; 0x40
200000be:	28ff      	cmp	r0, #255	; 0xff
200000c0:	3a96      	subs	r2, #150	; 0x96
200000c2:	196d      	adds	r5, r5, r5
200000c4:	6402      	str	r2, [r0, #64]	; 0x40
200000c6:	28ff      	cmp	r0, #255	; 0xff

200000c8 <gs3_ow_nums>:
    0x28ff6402192ca1f8,
    0x28ff6402e70928af,
    0x28ff6402184018ea,
    0x28ff6402196d3a96
};
uint64_t gs3_ow_nums[12] = {
200000c8:	                     /-------> 1c3d      	adds	r5, r7, #0
200000ca:	                     |         ed7b 6402 	cfldrd	mvd6, [r11, #-8]!
200000ce:	                     |         28ff      	cmp	r0, #255	; 0xff
200000d0:	                     |         9e6b      	ldr	r6, [sp, #428]	; 0x1ac
200000d2:	                     |         ed8e 6402 	cfstrs	mvf6, [lr, #8]
200000d6:	                     |         28ff      	cmp	r0, #255	; 0xff
200000d8:	                     |         b81c      			; <UNDEFINED> instruction: 0xb81c
200000da:	                     |         1e15      	subs	r5, r2, #0
200000dc:	                     |         6402      	str	r2, [r0, #64]	; 0x40
200000de:	                     |         28ff      	cmp	r0, #255	; 0xff
200000e0:	                     |         3eb9      	subs	r6, #185	; 0xb9
200000e2:	                     |         e383      	b.n	200007ec <impure_data>
200000e4:	                     |         6402      	str	r2, [r0, #64]	; 0x40
200000e6:	                     |         28ff      	cmp	r0, #255	; 0xff
200000e8:	                     |         a8a7      	add	r0, sp, #668	; 0x29c
200000ea:	                     |         1e3f      	subs	r7, r7, #0
200000ec:	                     |         6402      	str	r2, [r0, #64]	; 0x40
200000ee:	                     |         28ff      	cmp	r0, #255	; 0xff
200000f0:	                     |         0be7      	lsrs	r7, r4, #15
200000f2:	                     |         196f      	adds	r7, r5, r5
200000f4:	                     |         6402      	str	r2, [r0, #64]	; 0x40
200000f6:	                     |         28ff      	cmp	r0, #255	; 0xff
200000f8:	                     |         35cf      	adds	r5, #207	; 0xcf
200000fa:	                     |         e709      	b.n	1fffff10 <_sidata+0x17ff4b60>
200000fc:	                     |         6402      	str	r2, [r0, #64]	; 0x40
200000fe:	                     |         28ff      	cmp	r0, #255	; 0xff
20000100:	                     |         9e35      	ldr	r6, [sp, #212]	; 0xd4
20000102:	                     |         e388      	b.n	20000816 <impure_data+0x2a>
20000104:	                     |         6402      	str	r2, [r0, #64]	; 0x40
20000106:	                     |     /-> 28ff      	cmp	r0, #255	; 0xff
20000108:	                  /--|-----|-> 9e19      	ldr	r6, [sp, #100]	; 0x64
2000010a:	                  |  |     |   ffde 6402 	vraddhn.i32	d22, q7, q1
2000010e:	                  |  |     |   28ff      	cmp	r0, #255	; 0xff
20000110:	                  |  |     |   4260      	negs	r0, r4
20000112:	                  |  |     |   1e1d      	subs	r5, r3, #0
20000114:	                  |  |     |   6402      	str	r2, [r0, #64]	; 0x40
20000116:	                  |  |     |   28ff      	cmp	r0, #255	; 0xff
20000118:	                  |  |     |   ab63      	add	r3, sp, #396	; 0x18c
2000011a:	                  |  |     |   1e15      	subs	r5, r2, #0
2000011c:	                  |  |     |   6402      	str	r2, [r0, #64]	; 0x40
2000011e:	                  |  |     |   28ff      	cmp	r0, #255	; 0xff
20000120:	                  |  |     |   9af4      	ldr	r2, [sp, #976]	; 0x3d0
20000122:	                  |  |     |   f92f 6402 	vld3.8	{d6-d8}, [pc], r2
20000126:	                  |  |     |   28ff      	cmp	r0, #255	; 0xff
20000128:	                  |  |     \-- e7ed      	b.n	20000106 <gs3_ow_nums+0x3e>
2000012a:	                  |  |         ff84 6402 	vraddhn.i16	d6, q2, q1
2000012e:	                  |  |         28ff      	cmp	r0, #255	; 0xff
20000130:	                  |  |         92f3      	str	r2, [sp, #972]	; 0x3cc
20000132:	                  |  |         f976 6402 	ldr??.w	r6, [r6, <undefined>]
20000136:	                  |  |         28ff      	cmp	r0, #255	; 0xff
20000138:	                  |  |         6e07      	ldr	r7, [r0, #96]	; 0x60
2000013a:	                  |  |         e39e      	b.n	2000087a <fifo+0x6>
2000013c:	                  |  |         6402      	str	r2, [r0, #64]	; 0x40
2000013e:	                  |  |         28ff      	cmp	r0, #255	; 0xff
20000140:	                  |  |         c31e      	stmia	r3!, {r1, r2, r3, r4}
20000142:	                  |  |         1951      	adds	r1, r2, r5
20000144:	                  |  |         6402      	str	r2, [r0, #64]	; 0x40
20000146:	                  |  |         28ff      	cmp	r0, #255	; 0xff
20000148:	                  |  |         7d31      	ldrb	r1, [r6, #20]
2000014a:	                  |  |         ffd5 6402 	vraddhn.i32	d22, <illegal reg q2.5>, q1
2000014e:	                  |  |         28ff      	cmp	r0, #255	; 0xff
20000150:	               /--|--|-------> 2005      	movs	r0, #5
20000152:	               |  |  |         f945 6402 	vst3.8	{d22-d24}, [r5], r2
20000156:	               |  |  |         28ff      	cmp	r0, #255	; 0xff
20000158:	               |  |  |         c32b      	stmia	r3!, {r0, r1, r3, r5}
2000015a:	               |  |  |         c59a      	stmia	r5!, {r1, r3, r4, r7}
2000015c:	               |  |  |         6402      	str	r2, [r0, #64]	; 0x40
2000015e:	               |  |  |         28ff      	cmp	r0, #255	; 0xff
20000160:	               |  |  |         e5d6      	b.n	1ffffd10 <_sidata+0x17ff4960>
20000162:	               |  |  |         e38c      	b.n	2000087e <fifo+0xa>
20000164:	               |  |  |         6402      	str	r2, [r0, #64]	; 0x40
20000166:	               |  |  |         28ff      	cmp	r0, #255	; 0xff
20000168:	               |  |  |         5a8d      	ldrh	r5, [r1, r2]
2000016a:	               |  |  |         1e14      	subs	r4, r2, #0
2000016c:	               |  |  |         6402      	str	r2, [r0, #64]	; 0x40
2000016e:	               |  |  |         28ff      	cmp	r0, #255	; 0xff
20000170:	               |  |  |     /-- b10a      	cbz	r2, 20000176 <gs3_ow_nums+0xae>
20000172:	               |  |  |     |   c587      	stmia	r5!, {r0, r1, r2, r7}
20000174:	               |  |  |     |   6402      	str	r2, [r0, #64]	; 0x40
20000176:	               |  |  |     \-> 28ff      	cmp	r0, #255	; 0xff
20000178:	               |  |  |         0ab3      	lsrs	r3, r6, #10
2000017a:	               |  |  |         ec66 6402 	cfstrd	mvd6, [r6], #-8
2000017e:	               |  |  |         28ff      	cmp	r0, #255	; 0xff
20000180:	               |  |  |         17f3      	asrs	r3, r6, #31
20000182:	               |  |  |         eddb 6402 	cfldrd	mvd6, [r11, #8]
20000186:	               |  |  |         28ff      	cmp	r0, #255	; 0xff
20000188:	               |  |  |  /----- d75d      	bvc.n	20000246 <gs3_ow_nums+0x17e>
2000018a:	               |  |  |  |      e381      	b.n	20000890 <fifo+0x1c>
2000018c:	               |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000018e:	               |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000190:	   /-----------|--|--|--|----> 6f6a      	ldr	r2, [r5, #116]	; 0x74
20000192:	   |           |  |  |  |      e709      	b.n	1fffffa8 <_sidata+0x17ff4bf8>
20000194:	   |           |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
20000196:	   |           |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000198:	   |           |  |  |  |      f76d 1e1d 			; <UNDEFINED> instruction: 0xf76d1e1d
2000019c:	   |           |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000019e:	   |           |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200001a0:	   |           |  |  |  |      9755      	str	r7, [sp, #340]	; 0x154
200001a2:	   |           |  |  |  |      196f      	adds	r7, r5, r5
200001a4:	   |           |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200001a6:	   |           |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200001a8:	   |           |  |  |  |      5b94      	ldrh	r4, [r2, r6]
200001aa:	   |           |  |  |  |      e3d3      	b.n	20000954 <sim7000g+0xc>
200001ac:	   |           |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200001ae:	   |           |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200001b0:	   |           |  |  |  |      5b21      	ldrh	r1, [r4, r4]
200001b2:	   |           |  |  |  |      ed54 6402 	cfldrd	mvd6, [r4, #-8]
200001b6:	   |           |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200001b8:	   |           |  |  |  |      0b9a      	lsrs	r2, r3, #14
200001ba:	   |           |  |  |  |      c589      	stmia	r5!, {r0, r3, r7}
200001bc:	   |           |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200001be:	   |           |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200001c0:	   |           |  |  |  |      8919      	ldrh	r1, [r3, #8]
200001c2:	   |           |  |  |  |      192c      	adds	r4, r5, r4
200001c4:	   |           |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200001c6:	   |           |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200001c8:	   |           |  |  |  |      a1f8      	add	r1, pc, #992	; (adr r1, 200005ac <gs3_ow_nums+0x4e4>)
200001ca:	   |           |  |  |  |      192c      	adds	r4, r5, r4
200001cc:	   |           |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200001ce:	   |           |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200001d0:	   |           |  |  |  |      28af      	cmp	r0, #175	; 0xaf
200001d2:	   |           |  |  |  |      e709      	b.n	1fffffe8 <_sidata+0x17ff4c38>
200001d4:	   |           |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200001d6:	   |           |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200001d8:	   |           |  |  |  |      18ea      	adds	r2, r5, r3
200001da:	   |           |  |  |  |      1840      	adds	r0, r0, r1
200001dc:	   |           |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200001de:	   |           |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200001e0:	   |           |  |  |  |      3a96      	subs	r2, #150	; 0x96
200001e2:	   |           |  |  |  |      196d      	adds	r5, r5, r5
200001e4:	   |           |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200001e6:	   |           |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200001e8:	   |        /--|--|--|--|----> 1c3d      	adds	r5, r7, #0
200001ea:	   |        |  |  |  |  |      ed7b 6402 	cfldrd	mvd6, [r11, #-8]!
200001ee:	   |        |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200001f0:	   |        |  |  |  |  |      9e6b      	ldr	r6, [sp, #428]	; 0x1ac
200001f2:	   |        |  |  |  |  |      ed8e 6402 	cfstrs	mvf6, [lr, #8]
200001f6:	   |        |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200001f8:	   |        |  |  |  |  |      b81c      			; <UNDEFINED> instruction: 0xb81c
200001fa:	   |        |  |  |  |  |      1e15      	subs	r5, r2, #0
200001fc:	   |        |  |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200001fe:	   |        |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000200:	   |        |  |  |  |  |      3eb9      	subs	r6, #185	; 0xb9
20000202:	   |        |  |  |  |  |      e383      	b.n	2000090c <sensors_data_rx_fifo+0x10>
20000204:	   |        |  |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
20000206:	   |        |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000208:	   |        |  |  |  |  |      a8a7      	add	r0, sp, #668	; 0x29c
2000020a:	   |        |  |  |  |  |      1e3f      	subs	r7, r7, #0
2000020c:	   |        |  |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000020e:	   |        |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000210:	   |        |  |  |  |  |      0be7      	lsrs	r7, r4, #15
20000212:	   |        |  |  |  |  |      196f      	adds	r7, r5, r5
20000214:	   |        |  |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
20000216:	   |        |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000218:	   |        |  |  |  |  |      35cf      	adds	r5, #207	; 0xcf
2000021a:	   |        |  |  |  |  |      e709      	b.n	20000030 <gs1_ow_nums+0x28>
2000021c:	   |        |  |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000021e:	   |        |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000220:	   |        |  |  |  |  |      9e35      	ldr	r6, [sp, #212]	; 0xd4
20000222:	   |        |  |  |  |  |      e388      	b.n	20000936 <sensors_data_rx_fifo+0x3a>
20000224:	   |        |  |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
20000226:	   |        |  |  |  |  |  /-> 28ff      	cmp	r0, #255	; 0xff
20000228:	   |     /--|--|--|--|--|--|-> 9e19      	ldr	r6, [sp, #100]	; 0x64
2000022a:	   |     |  |  |  |  |  |  |   ffde 6402 	vraddhn.i32	d22, q7, q1
2000022e:	   |     |  |  |  |  |  |  |   28ff      	cmp	r0, #255	; 0xff
20000230:	   |     |  |  |  |  |  |  |   4260      	negs	r0, r4
20000232:	   |     |  |  |  |  |  |  |   1e1d      	subs	r5, r3, #0
20000234:	   |     |  |  |  |  |  |  |   6402      	str	r2, [r0, #64]	; 0x40
20000236:	   |     |  |  |  |  |  |  |   28ff      	cmp	r0, #255	; 0xff
20000238:	   |     |  |  |  |  |  |  |   ab63      	add	r3, sp, #396	; 0x18c
2000023a:	   |     |  |  |  |  |  |  |   1e15      	subs	r5, r2, #0
2000023c:	   |     |  |  |  |  |  |  |   6402      	str	r2, [r0, #64]	; 0x40
2000023e:	   |     |  |  |  |  |  |  |   28ff      	cmp	r0, #255	; 0xff
20000240:	   |     |  |  |  |  |  |  |   9af4      	ldr	r2, [sp, #976]	; 0x3d0
20000242:	   |     |  |  |  |  |  |  |   f92f 6402 	vld3.8	{d6-d8}, [pc], r2
20000246:	   |     |  |  |  |  |  \--|-> 28ff      	cmp	r0, #255	; 0xff
20000248:	   |     |  |  |  |  |     \-- e7ed      	b.n	20000226 <gs3_ow_nums+0x15e>
2000024a:	   |     |  |  |  |  |         ff84 6402 	vraddhn.i16	d6, q2, q1
2000024e:	   |     |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
20000250:	   |     |  |  |  |  |         92f3      	str	r2, [sp, #972]	; 0x3cc
20000252:	   |     |  |  |  |  |         f976 6402 	ldr??.w	r6, [r6, <undefined>]
20000256:	   |     |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
20000258:	   |     |  |  |  |  |         6e07      	ldr	r7, [r0, #96]	; 0x60
2000025a:	   |     |  |  |  |  |         e39e      	b.n	2000099a <sim7000g+0x52>
2000025c:	   |     |  |  |  |  |         6402      	str	r2, [r0, #64]	; 0x40
2000025e:	   |     |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
20000260:	   |     |  |  |  |  |         c31e      	stmia	r3!, {r1, r2, r3, r4}
20000262:	   |     |  |  |  |  |         1951      	adds	r1, r2, r5
20000264:	   |     |  |  |  |  |         6402      	str	r2, [r0, #64]	; 0x40
20000266:	   |     |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
20000268:	   |     |  |  |  |  |         7d31      	ldrb	r1, [r6, #20]
2000026a:	   |     |  |  |  |  |         ffd5 6402 	vraddhn.i32	d22, <illegal reg q2.5>, q1
2000026e:	   |     |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
20000270:	   |  /--|--|--|--|--|-------> 2005      	movs	r0, #5
20000272:	   |  |  |  |  |  |  |         f945 6402 	vst3.8	{d22-d24}, [r5], r2
20000276:	   |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
20000278:	   |  |  |  |  |  |  |         c32b      	stmia	r3!, {r0, r1, r3, r5}
2000027a:	   |  |  |  |  |  |  |         c59a      	stmia	r5!, {r1, r3, r4, r7}
2000027c:	   |  |  |  |  |  |  |         6402      	str	r2, [r0, #64]	; 0x40
2000027e:	   |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
20000280:	   |  |  |  |  |  |  |         e5d6      	b.n	1ffffe30 <_sidata+0x17ff4a80>
20000282:	   |  |  |  |  |  |  |         e38c      	b.n	2000099e <sim7000g+0x56>
20000284:	   |  |  |  |  |  |  |         6402      	str	r2, [r0, #64]	; 0x40
20000286:	   |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
20000288:	   |  |  |  |  |  |  |         5a8d      	ldrh	r5, [r1, r2]
2000028a:	   |  |  |  |  |  |  |         1e14      	subs	r4, r2, #0
2000028c:	   |  |  |  |  |  |  |         6402      	str	r2, [r0, #64]	; 0x40
2000028e:	   |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
20000290:	   |  |  |  |  |  |  |     /-- b10a      	cbz	r2, 20000296 <gs3_ow_nums+0x1ce>
20000292:	   |  |  |  |  |  |  |     |   c587      	stmia	r5!, {r0, r1, r2, r7}
20000294:	   |  |  |  |  |  |  |     |   6402      	str	r2, [r0, #64]	; 0x40
20000296:	   |  |  |  |  |  |  |     \-> 28ff      	cmp	r0, #255	; 0xff
20000298:	   |  |  |  |  |  |  |         0ab3      	lsrs	r3, r6, #10
2000029a:	   |  |  |  |  |  |  |         ec66 6402 	cfstrd	mvd6, [r6], #-8
2000029e:	   |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200002a0:	   |  |  |  |  |  |  |         17f3      	asrs	r3, r6, #31
200002a2:	   |  |  |  |  |  |  |         eddb 6402 	cfldrd	mvd6, [r11, #8]
200002a6:	   |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200002a8:	   |  |  |  |  |  |  |  /----- d75d      	bvc.n	20000366 <gs3_ow_nums+0x29e>
200002aa:	   |  |  |  |  |  |  |  |      e381      	b.n	200009b0 <sim7000g+0x68>
200002ac:	   |  |  |  |  |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200002ae:	   |  |  |  |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200002b0:	/--|--|--|--|--|--|--|--|----> 6f6a      	ldr	r2, [r5, #116]	; 0x74
200002b2:	|  |  |  |  |  |  |  \--|----- e709      	b.n	200000c8 <gs3_ow_nums>
200002b4:	|  |  |  |  |  |  |     |      6402      	str	r2, [r0, #64]	; 0x40
200002b6:	|  |  |  |  |  |  |     |      28ff      	cmp	r0, #255	; 0xff
200002b8:	|  |  |  |  |  |  |     |      f76d 1e1d 			; <UNDEFINED> instruction: 0xf76d1e1d
200002bc:	|  |  |  |  |  |  |     |      6402      	str	r2, [r0, #64]	; 0x40
200002be:	|  |  |  |  |  |  |     |      28ff      	cmp	r0, #255	; 0xff
200002c0:	|  |  |  |  |  |  |     |      9755      	str	r7, [sp, #340]	; 0x154
200002c2:	|  |  |  |  |  |  |     |      196f      	adds	r7, r5, r5
200002c4:	|  |  |  |  |  |  |     |      6402      	str	r2, [r0, #64]	; 0x40
200002c6:	|  |  |  |  |  |  |     |      28ff      	cmp	r0, #255	; 0xff
200002c8:	|  |  |  |  |  |  |     |      5b94      	ldrh	r4, [r2, r6]
200002ca:	|  |  |  |  |  |  |     |      e3d3      	b.n	20000a74 <SX1268+0xac>
200002cc:	|  |  |  |  |  |  |     |      6402      	str	r2, [r0, #64]	; 0x40
200002ce:	|  |  |  |  |  |  |     |      28ff      	cmp	r0, #255	; 0xff
200002d0:	|  |  |  |  |  |  |     |      5b21      	ldrh	r1, [r4, r4]
200002d2:	|  |  |  |  |  |  |     |      ed54 6402 	cfldrd	mvd6, [r4, #-8]
200002d6:	|  |  |  |  |  |  |     |      28ff      	cmp	r0, #255	; 0xff
200002d8:	|  |  |  |  |  |  |     |      0b9a      	lsrs	r2, r3, #14
200002da:	|  |  |  |  |  |  |     |      c589      	stmia	r5!, {r0, r3, r7}
200002dc:	|  |  |  |  |  |  |     |      6402      	str	r2, [r0, #64]	; 0x40
200002de:	|  |  |  |  |  |  |     |      28ff      	cmp	r0, #255	; 0xff
200002e0:	|  |  |  |  |  |  |     |      8919      	ldrh	r1, [r3, #8]
200002e2:	|  |  |  |  |  |  |     |      192c      	adds	r4, r5, r4
200002e4:	|  |  |  |  |  |  |     |      6402      	str	r2, [r0, #64]	; 0x40
200002e6:	|  |  |  |  |  |  |     |      28ff      	cmp	r0, #255	; 0xff
200002e8:	|  |  |  |  |  |  |     |      a1f8      	add	r1, pc, #992	; (adr r1, 200006cc <gs3_ow_nums+0x604>)
200002ea:	|  |  |  |  |  |  |     |      192c      	adds	r4, r5, r4
200002ec:	|  |  |  |  |  |  |     |      6402      	str	r2, [r0, #64]	; 0x40
200002ee:	|  |  |  |  |  |  |     |      28ff      	cmp	r0, #255	; 0xff
200002f0:	|  |  |  |  |  |  |     |      28af      	cmp	r0, #175	; 0xaf
200002f2:	|  |  |  |  |  |  \-----|----- e709      	b.n	20000108 <gs3_ow_nums+0x40>
200002f4:	|  |  |  |  |  |        |      6402      	str	r2, [r0, #64]	; 0x40
200002f6:	|  |  |  |  |  |        |      28ff      	cmp	r0, #255	; 0xff
200002f8:	|  |  |  |  |  |        |      18ea      	adds	r2, r5, r3
200002fa:	|  |  |  |  |  |        |      1840      	adds	r0, r0, r1
200002fc:	|  |  |  |  |  |        |      6402      	str	r2, [r0, #64]	; 0x40
200002fe:	|  |  |  |  |  |        |      28ff      	cmp	r0, #255	; 0xff
20000300:	|  |  |  |  |  |        |      3a96      	subs	r2, #150	; 0x96
20000302:	|  |  |  |  |  |        |      196d      	adds	r5, r5, r5
20000304:	|  |  |  |  |  |        |      6402      	str	r2, [r0, #64]	; 0x40
20000306:	|  |  |  |  |  |        |      28ff      	cmp	r0, #255	; 0xff
20000308:	|  |  |  |  |  |     /--|----> 1c3d      	adds	r5, r7, #0
2000030a:	|  |  |  |  |  |     |  |      ed7b 6402 	cfldrd	mvd6, [r11, #-8]!
2000030e:	|  |  |  |  |  |     |  |      28ff      	cmp	r0, #255	; 0xff
20000310:	|  |  |  |  |  |     |  |      9e6b      	ldr	r6, [sp, #428]	; 0x1ac
20000312:	|  |  |  |  |  |     |  |      ed8e 6402 	cfstrs	mvf6, [lr, #8]
20000316:	|  |  |  |  |  |     |  |      28ff      	cmp	r0, #255	; 0xff
20000318:	|  |  |  |  |  |     |  |      b81c      			; <UNDEFINED> instruction: 0xb81c
2000031a:	|  |  |  |  |  |     |  |      1e15      	subs	r5, r2, #0
2000031c:	|  |  |  |  |  |     |  |      6402      	str	r2, [r0, #64]	; 0x40
2000031e:	|  |  |  |  |  |     |  |      28ff      	cmp	r0, #255	; 0xff
20000320:	|  |  |  |  |  |     |  |      3eb9      	subs	r6, #185	; 0xb9
20000322:	|  |  |  |  |  |     |  |      e383      	b.n	20000a2c <SX1268+0x64>
20000324:	|  |  |  |  |  |     |  |      6402      	str	r2, [r0, #64]	; 0x40
20000326:	|  |  |  |  |  |     |  |      28ff      	cmp	r0, #255	; 0xff
20000328:	|  |  |  |  |  |     |  |      a8a7      	add	r0, sp, #668	; 0x29c
2000032a:	|  |  |  |  |  |     |  |      1e3f      	subs	r7, r7, #0
2000032c:	|  |  |  |  |  |     |  |      6402      	str	r2, [r0, #64]	; 0x40
2000032e:	|  |  |  |  |  |     |  |      28ff      	cmp	r0, #255	; 0xff
20000330:	|  |  |  |  |  |     |  |      0be7      	lsrs	r7, r4, #15
20000332:	|  |  |  |  |  |     |  |      196f      	adds	r7, r5, r5
20000334:	|  |  |  |  |  |     |  |      6402      	str	r2, [r0, #64]	; 0x40
20000336:	|  |  |  |  |  |     |  |      28ff      	cmp	r0, #255	; 0xff
20000338:	|  |  |  |  |  |     |  |      35cf      	adds	r5, #207	; 0xcf
2000033a:	|  |  |  |  |  \-----|--|----- e709      	b.n	20000150 <gs3_ow_nums+0x88>
2000033c:	|  |  |  |  |        |  |      6402      	str	r2, [r0, #64]	; 0x40
2000033e:	|  |  |  |  |        |  |      28ff      	cmp	r0, #255	; 0xff
20000340:	|  |  |  |  |        |  |      9e35      	ldr	r6, [sp, #212]	; 0xd4
20000342:	|  |  |  |  |        |  |      e388      	b.n	20000a56 <SX1268+0x8e>
20000344:	|  |  |  |  |        |  |      6402      	str	r2, [r0, #64]	; 0x40
20000346:	|  |  |  |  |        |  |  /-> 28ff      	cmp	r0, #255	; 0xff
20000348:	|  |  |  |  |     /--|--|--|-> 9e19      	ldr	r6, [sp, #100]	; 0x64
2000034a:	|  |  |  |  |     |  |  |  |   ffde 6402 	vraddhn.i32	d22, q7, q1
2000034e:	|  |  |  |  |     |  |  |  |   28ff      	cmp	r0, #255	; 0xff
20000350:	|  |  |  |  |     |  |  |  |   4260      	negs	r0, r4
20000352:	|  |  |  |  |     |  |  |  |   1e1d      	subs	r5, r3, #0
20000354:	|  |  |  |  |     |  |  |  |   6402      	str	r2, [r0, #64]	; 0x40
20000356:	|  |  |  |  |     |  |  |  |   28ff      	cmp	r0, #255	; 0xff
20000358:	|  |  |  |  |     |  |  |  |   ab63      	add	r3, sp, #396	; 0x18c
2000035a:	|  |  |  |  |     |  |  |  |   1e15      	subs	r5, r2, #0
2000035c:	|  |  |  |  |     |  |  |  |   6402      	str	r2, [r0, #64]	; 0x40
2000035e:	|  |  |  |  |     |  |  |  |   28ff      	cmp	r0, #255	; 0xff
20000360:	|  |  |  |  |     |  |  |  |   9af4      	ldr	r2, [sp, #976]	; 0x3d0
20000362:	|  |  |  |  |     |  |  |  |   f92f 6402 	vld3.8	{d6-d8}, [pc], r2
20000366:	|  |  |  |  |     |  |  \--|-> 28ff      	cmp	r0, #255	; 0xff
20000368:	|  |  |  |  |     |  |     \-- e7ed      	b.n	20000346 <gs3_ow_nums+0x27e>
2000036a:	|  |  |  |  |     |  |         ff84 6402 	vraddhn.i16	d6, q2, q1
2000036e:	|  |  |  |  |     |  |         28ff      	cmp	r0, #255	; 0xff
20000370:	|  |  |  |  |     |  |         92f3      	str	r2, [sp, #972]	; 0x3cc
20000372:	|  |  |  |  |     |  |         f976 6402 	ldr??.w	r6, [r6, <undefined>]
20000376:	|  |  |  |  |     |  |         28ff      	cmp	r0, #255	; 0xff
20000378:	|  |  |  |  |     |  |         6e07      	ldr	r7, [r0, #96]	; 0x60
2000037a:	|  |  |  |  |     |  |         e39e      	b.n	20000aba <adc+0x36>
2000037c:	|  |  |  |  |     |  |         6402      	str	r2, [r0, #64]	; 0x40
2000037e:	|  |  |  |  |     |  |         28ff      	cmp	r0, #255	; 0xff
20000380:	|  |  |  |  |     |  |         c31e      	stmia	r3!, {r1, r2, r3, r4}
20000382:	|  |  |  |  |     |  |         1951      	adds	r1, r2, r5
20000384:	|  |  |  |  |     |  |         6402      	str	r2, [r0, #64]	; 0x40
20000386:	|  |  |  |  |     |  |         28ff      	cmp	r0, #255	; 0xff
20000388:	|  |  |  |  |     |  |         7d31      	ldrb	r1, [r6, #20]
2000038a:	|  |  |  |  |     |  |         ffd5 6402 	vraddhn.i32	d22, <illegal reg q2.5>, q1
2000038e:	|  |  |  |  |     |  |         28ff      	cmp	r0, #255	; 0xff
20000390:	|  |  |  |  |  /--|--|-------> 2005      	movs	r0, #5
20000392:	|  |  |  |  |  |  |  |         f945 6402 	vst3.8	{d22-d24}, [r5], r2
20000396:	|  |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
20000398:	|  |  |  |  |  |  |  |         c32b      	stmia	r3!, {r0, r1, r3, r5}
2000039a:	|  |  |  |  |  |  |  |         c59a      	stmia	r5!, {r1, r3, r4, r7}
2000039c:	|  |  |  |  |  |  |  |         6402      	str	r2, [r0, #64]	; 0x40
2000039e:	|  |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200003a0:	|  |  |  |  |  |  |  |         e5d6      	b.n	1fffff50 <_sidata+0x17ff4ba0>
200003a2:	|  |  |  |  |  |  |  |         e38c      	b.n	20000abe <adc+0x3a>
200003a4:	|  |  |  |  |  |  |  |         6402      	str	r2, [r0, #64]	; 0x40
200003a6:	|  |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200003a8:	|  |  |  |  |  |  |  |         5a8d      	ldrh	r5, [r1, r2]
200003aa:	|  |  |  |  |  |  |  |         1e14      	subs	r4, r2, #0
200003ac:	|  |  |  |  |  |  |  |         6402      	str	r2, [r0, #64]	; 0x40
200003ae:	|  |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200003b0:	|  |  |  |  |  |  |  |     /-- b10a      	cbz	r2, 200003b6 <gs3_ow_nums+0x2ee>
200003b2:	|  |  |  |  |  |  |  |     |   c587      	stmia	r5!, {r0, r1, r2, r7}
200003b4:	|  |  |  |  |  |  |  |     |   6402      	str	r2, [r0, #64]	; 0x40
200003b6:	|  |  |  |  |  |  |  |     \-> 28ff      	cmp	r0, #255	; 0xff
200003b8:	|  |  |  |  |  |  |  |         0ab3      	lsrs	r3, r6, #10
200003ba:	|  |  |  |  |  |  |  |         ec66 6402 	cfstrd	mvd6, [r6], #-8
200003be:	|  |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200003c0:	|  |  |  |  |  |  |  |         17f3      	asrs	r3, r6, #31
200003c2:	|  |  |  |  |  |  |  |         eddb 6402 	cfldrd	mvd6, [r11, #8]
200003c6:	|  |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200003c8:	|  |  |  |  |  |  |  |  /----- d75d      	bvc.n	20000486 <gs3_ow_nums+0x3be>
200003ca:	|  |  |  |  |  |  |  |  |      e381      	b.n	20000ad0 <adc+0x4c>
200003cc:	|  |  |  |  |  |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200003ce:	|  |  |  |  |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200003d0:	|  |  |  |  |  |  |  |  |      6f6a      	ldr	r2, [r5, #116]	; 0x74
200003d2:	|  |  |  |  \--|--|--|--|----- e709      	b.n	200001e8 <gs3_ow_nums+0x120>
200003d4:	|  |  |  |     |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200003d6:	|  |  |  |     |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200003d8:	|  |  |  |     |  |  |  |      f76d 1e1d 			; <UNDEFINED> instruction: 0xf76d1e1d
200003dc:	|  |  |  |     |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200003de:	|  |  |  |     |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200003e0:	|  |  |  |     |  |  |  |      9755      	str	r7, [sp, #340]	; 0x154
200003e2:	|  |  |  |     |  |  |  |      196f      	adds	r7, r5, r5
200003e4:	|  |  |  |     |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200003e6:	|  |  |  |     |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200003e8:	|  |  |  |     |  |  |  |      5b94      	ldrh	r4, [r2, r6]
200003ea:	|  |  |  |     |  |  |  |      e3d3      	b.n	20000b94 <sensors+0x34>
200003ec:	|  |  |  |     |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200003ee:	|  |  |  |     |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200003f0:	|  |  |  |     |  |  |  |      5b21      	ldrh	r1, [r4, r4]
200003f2:	|  |  |  |     |  |  |  |      ed54 6402 	cfldrd	mvd6, [r4, #-8]
200003f6:	|  |  |  |     |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200003f8:	|  |  |  |     |  |  |  |      0b9a      	lsrs	r2, r3, #14
200003fa:	|  |  |  |     |  |  |  |      c589      	stmia	r5!, {r0, r3, r7}
200003fc:	|  |  |  |     |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200003fe:	|  |  |  |     |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000400:	|  |  |  |     |  |  |  |      8919      	ldrh	r1, [r3, #8]
20000402:	|  |  |  |     |  |  |  |      192c      	adds	r4, r5, r4
20000404:	|  |  |  |     |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
20000406:	|  |  |  |     |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000408:	|  |  |  |     |  |  |  |      a1f8      	add	r1, pc, #992	; (adr r1, 200007ec <impure_data>)
2000040a:	|  |  |  |     |  |  |  |      192c      	adds	r4, r5, r4
2000040c:	|  |  |  |     |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000040e:	|  |  |  |     |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000410:	|  |  |  |     |  |  |  |      28af      	cmp	r0, #175	; 0xaf
20000412:	|  |  |  \-----|--|--|--|----- e709      	b.n	20000228 <gs3_ow_nums+0x160>
20000414:	|  |  |        |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
20000416:	|  |  |        |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000418:	|  |  |        |  |  |  |      18ea      	adds	r2, r5, r3
2000041a:	|  |  |        |  |  |  |      1840      	adds	r0, r0, r1
2000041c:	|  |  |        |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000041e:	|  |  |        |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000420:	|  |  |        |  |  |  |      3a96      	subs	r2, #150	; 0x96
20000422:	|  |  |        |  |  |  |      196d      	adds	r5, r5, r5
20000424:	|  |  |        |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
20000426:	|  |  |        |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000428:	|  |  |     /--|--|--|--|----> 1c3d      	adds	r5, r7, #0
2000042a:	|  |  |     |  |  |  |  |      ed7b 6402 	cfldrd	mvd6, [r11, #-8]!
2000042e:	|  |  |     |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000430:	|  |  |     |  |  |  |  |      9e6b      	ldr	r6, [sp, #428]	; 0x1ac
20000432:	|  |  |     |  |  |  |  |      ed8e 6402 	cfstrs	mvf6, [lr, #8]
20000436:	|  |  |     |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000438:	|  |  |     |  |  |  |  |      b81c      			; <UNDEFINED> instruction: 0xb81c
2000043a:	|  |  |     |  |  |  |  |      1e15      	subs	r5, r2, #0
2000043c:	|  |  |     |  |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000043e:	|  |  |     |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000440:	|  |  |     |  |  |  |  |      3eb9      	subs	r6, #185	; 0xb9
20000442:	|  |  |     |  |  |  |  |      e383      	b.n	20000b4c <adc+0xc8>
20000444:	|  |  |     |  |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
20000446:	|  |  |     |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000448:	|  |  |     |  |  |  |  |      a8a7      	add	r0, sp, #668	; 0x29c
2000044a:	|  |  |     |  |  |  |  |      1e3f      	subs	r7, r7, #0
2000044c:	|  |  |     |  |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000044e:	|  |  |     |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000450:	|  |  |     |  |  |  |  |      0be7      	lsrs	r7, r4, #15
20000452:	|  |  |     |  |  |  |  |      196f      	adds	r7, r5, r5
20000454:	|  |  |     |  |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
20000456:	|  |  |     |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000458:	|  |  |     |  |  |  |  |      35cf      	adds	r5, #207	; 0xcf
2000045a:	|  |  \-----|--|--|--|--|----- e709      	b.n	20000270 <gs3_ow_nums+0x1a8>
2000045c:	|  |        |  |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000045e:	|  |        |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000460:	|  |        |  |  |  |  |      9e35      	ldr	r6, [sp, #212]	; 0xd4
20000462:	|  |        |  |  |  |  |      e388      	b.n	20000b76 <sensors+0x16>
20000464:	|  |        |  |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
20000466:	|  |        |  |  |  |  |  /-> 28ff      	cmp	r0, #255	; 0xff
20000468:	|  |     /--|--|--|--|--|--|-> 9e19      	ldr	r6, [sp, #100]	; 0x64
2000046a:	|  |     |  |  |  |  |  |  |   ffde 6402 	vraddhn.i32	d22, q7, q1
2000046e:	|  |     |  |  |  |  |  |  |   28ff      	cmp	r0, #255	; 0xff
20000470:	|  |     |  |  |  |  |  |  |   4260      	negs	r0, r4
20000472:	|  |     |  |  |  |  |  |  |   1e1d      	subs	r5, r3, #0
20000474:	|  |     |  |  |  |  |  |  |   6402      	str	r2, [r0, #64]	; 0x40
20000476:	|  |     |  |  |  |  |  |  |   28ff      	cmp	r0, #255	; 0xff
20000478:	|  |     |  |  |  |  |  |  |   ab63      	add	r3, sp, #396	; 0x18c
2000047a:	|  |     |  |  |  |  |  |  |   1e15      	subs	r5, r2, #0
2000047c:	|  |     |  |  |  |  |  |  |   6402      	str	r2, [r0, #64]	; 0x40
2000047e:	|  |     |  |  |  |  |  |  |   28ff      	cmp	r0, #255	; 0xff
20000480:	|  |     |  |  |  |  |  |  |   9af4      	ldr	r2, [sp, #976]	; 0x3d0
20000482:	|  |     |  |  |  |  |  |  |   f92f 6402 	vld3.8	{d6-d8}, [pc], r2
20000486:	|  |     |  |  |  |  |  \--|-> 28ff      	cmp	r0, #255	; 0xff
20000488:	|  |     |  |  |  |  |     \-- e7ed      	b.n	20000466 <gs3_ow_nums+0x39e>
2000048a:	|  |     |  |  |  |  |         ff84 6402 	vraddhn.i16	d6, q2, q1
2000048e:	|  |     |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
20000490:	|  |     |  |  |  |  |         92f3      	str	r2, [sp, #972]	; 0x3cc
20000492:	|  |     |  |  |  |  |         f976 6402 	ldr??.w	r6, [r6, <undefined>]
20000496:	|  |     |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
20000498:	|  |     |  |  |  |  |         6e07      	ldr	r7, [r0, #96]	; 0x60
2000049a:	|  |     |  |  |  |  |         e39e      	b.n	20000bda <sensors+0x7a>
2000049c:	|  |     |  |  |  |  |         6402      	str	r2, [r0, #64]	; 0x40
2000049e:	|  |     |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200004a0:	|  |     |  |  |  |  |         c31e      	stmia	r3!, {r1, r2, r3, r4}
200004a2:	|  |     |  |  |  |  |         1951      	adds	r1, r2, r5
200004a4:	|  |     |  |  |  |  |         6402      	str	r2, [r0, #64]	; 0x40
200004a6:	|  |     |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200004a8:	|  |     |  |  |  |  |         7d31      	ldrb	r1, [r6, #20]
200004aa:	|  |     |  |  |  |  |         ffd5 6402 	vraddhn.i32	d22, <illegal reg q2.5>, q1
200004ae:	|  |     |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200004b0:	|  |  /--|--|--|--|--|-------> 2005      	movs	r0, #5
200004b2:	|  |  |  |  |  |  |  |         f945 6402 	vst3.8	{d22-d24}, [r5], r2
200004b6:	|  |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200004b8:	|  |  |  |  |  |  |  |         c32b      	stmia	r3!, {r0, r1, r3, r5}
200004ba:	|  |  |  |  |  |  |  |         c59a      	stmia	r5!, {r1, r3, r4, r7}
200004bc:	|  |  |  |  |  |  |  |         6402      	str	r2, [r0, #64]	; 0x40
200004be:	|  |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200004c0:	|  |  |  |  |  |  |  |         e5d6      	b.n	20000070 <gs2_ow_nums+0x8>
200004c2:	|  |  |  |  |  |  |  |         e38c      	b.n	20000bde <sensors+0x7e>
200004c4:	|  |  |  |  |  |  |  |         6402      	str	r2, [r0, #64]	; 0x40
200004c6:	|  |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200004c8:	|  |  |  |  |  |  |  |         5a8d      	ldrh	r5, [r1, r2]
200004ca:	|  |  |  |  |  |  |  |         1e14      	subs	r4, r2, #0
200004cc:	|  |  |  |  |  |  |  |         6402      	str	r2, [r0, #64]	; 0x40
200004ce:	|  |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200004d0:	|  |  |  |  |  |  |  |     /-- b10a      	cbz	r2, 200004d6 <gs3_ow_nums+0x40e>
200004d2:	|  |  |  |  |  |  |  |     |   c587      	stmia	r5!, {r0, r1, r2, r7}
200004d4:	|  |  |  |  |  |  |  |     |   6402      	str	r2, [r0, #64]	; 0x40
200004d6:	|  |  |  |  |  |  |  |     \-> 28ff      	cmp	r0, #255	; 0xff
200004d8:	|  |  |  |  |  |  |  |         0ab3      	lsrs	r3, r6, #10
200004da:	|  |  |  |  |  |  |  |         ec66 6402 	cfstrd	mvd6, [r6], #-8
200004de:	|  |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200004e0:	|  |  |  |  |  |  |  |         17f3      	asrs	r3, r6, #31
200004e2:	|  |  |  |  |  |  |  |         eddb 6402 	cfldrd	mvd6, [r11, #8]
200004e6:	|  |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200004e8:	|  |  |  |  |  |  |  |  /----- d75d      	bvc.n	200005a6 <gs3_ow_nums+0x4de>
200004ea:	|  |  |  |  |  |  |  |  |      e381      	b.n	20000bf0 <sensors+0x90>
200004ec:	|  |  |  |  |  |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200004ee:	|  |  |  |  |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200004f0:	|  |  |  |  |  |  |  |  |      6f6a      	ldr	r2, [r5, #116]	; 0x74
200004f2:	|  |  |  |  |  |  |  \--|----- e709      	b.n	20000308 <gs3_ow_nums+0x240>
200004f4:	|  |  |  |  |  |  |     |      6402      	str	r2, [r0, #64]	; 0x40
200004f6:	|  |  |  |  |  |  |     |      28ff      	cmp	r0, #255	; 0xff
200004f8:	|  |  |  |  |  |  |     |      f76d 1e1d 			; <UNDEFINED> instruction: 0xf76d1e1d
200004fc:	|  |  |  |  |  |  |     |      6402      	str	r2, [r0, #64]	; 0x40
200004fe:	|  |  |  |  |  |  |     |      28ff      	cmp	r0, #255	; 0xff
20000500:	|  |  |  |  |  |  |     |      9755      	str	r7, [sp, #340]	; 0x154
20000502:	|  |  |  |  |  |  |     |      196f      	adds	r7, r5, r5
20000504:	|  |  |  |  |  |  |     |      6402      	str	r2, [r0, #64]	; 0x40
20000506:	|  |  |  |  |  |  |     |      28ff      	cmp	r0, #255	; 0xff
20000508:	|  |  |  |  |  |  |     |      5b94      	ldrh	r4, [r2, r6]
2000050a:	|  |  |  |  |  |  |     |      e3d3      	b.n	20000cb4 <ow+0x4>
2000050c:	|  |  |  |  |  |  |     |      6402      	str	r2, [r0, #64]	; 0x40
2000050e:	|  |  |  |  |  |  |     |      28ff      	cmp	r0, #255	; 0xff
20000510:	|  |  |  |  |  |  |     |      5b21      	ldrh	r1, [r4, r4]
20000512:	|  |  |  |  |  |  |     |      ed54 6402 	cfldrd	mvd6, [r4, #-8]
20000516:	|  |  |  |  |  |  |     |      28ff      	cmp	r0, #255	; 0xff
20000518:	|  |  |  |  |  |  |     |      0b9a      	lsrs	r2, r3, #14
2000051a:	|  |  |  |  |  |  |     |      c589      	stmia	r5!, {r0, r3, r7}
2000051c:	|  |  |  |  |  |  |     |      6402      	str	r2, [r0, #64]	; 0x40
2000051e:	|  |  |  |  |  |  |     |      28ff      	cmp	r0, #255	; 0xff
20000520:	|  |  |  |  |  |  |     |      8919      	ldrh	r1, [r3, #8]
20000522:	|  |  |  |  |  |  |     |      192c      	adds	r4, r5, r4
20000524:	|  |  |  |  |  |  |     |      6402      	str	r2, [r0, #64]	; 0x40
20000526:	|  |  |  |  |  |  |     |      28ff      	cmp	r0, #255	; 0xff
20000528:	|  |  |  |  |  |  |     |      a1f8      	add	r1, pc, #992	; (adr r1, 2000090c <sensors_data_rx_fifo+0x10>)
2000052a:	|  |  |  |  |  |  |     |      192c      	adds	r4, r5, r4
2000052c:	|  |  |  |  |  |  |     |      6402      	str	r2, [r0, #64]	; 0x40
2000052e:	|  |  |  |  |  |  |     |      28ff      	cmp	r0, #255	; 0xff
20000530:	|  |  |  |  |  |  |     |      28af      	cmp	r0, #175	; 0xaf
20000532:	|  |  |  |  |  |  \-----|----- e709      	b.n	20000348 <gs3_ow_nums+0x280>
20000534:	|  |  |  |  |  |        |      6402      	str	r2, [r0, #64]	; 0x40
20000536:	|  |  |  |  |  |        |      28ff      	cmp	r0, #255	; 0xff
20000538:	|  |  |  |  |  |        |      18ea      	adds	r2, r5, r3
2000053a:	|  |  |  |  |  |        |      1840      	adds	r0, r0, r1
2000053c:	|  |  |  |  |  |        |      6402      	str	r2, [r0, #64]	; 0x40
2000053e:	|  |  |  |  |  |        |      28ff      	cmp	r0, #255	; 0xff
20000540:	|  |  |  |  |  |        |      3a96      	subs	r2, #150	; 0x96
20000542:	|  |  |  |  |  |        |      196d      	adds	r5, r5, r5
20000544:	|  |  |  |  |  |        |      6402      	str	r2, [r0, #64]	; 0x40
20000546:	|  |  |  |  |  |        |      28ff      	cmp	r0, #255	; 0xff
20000548:	|  |  |  |  |  |     /--|----> 1c3d      	adds	r5, r7, #0
2000054a:	|  |  |  |  |  |     |  |      ed7b 6402 	cfldrd	mvd6, [r11, #-8]!
2000054e:	|  |  |  |  |  |     |  |      28ff      	cmp	r0, #255	; 0xff
20000550:	|  |  |  |  |  |     |  |      9e6b      	ldr	r6, [sp, #428]	; 0x1ac
20000552:	|  |  |  |  |  |     |  |      ed8e 6402 	cfstrs	mvf6, [lr, #8]
20000556:	|  |  |  |  |  |     |  |      28ff      	cmp	r0, #255	; 0xff
20000558:	|  |  |  |  |  |     |  |      b81c      			; <UNDEFINED> instruction: 0xb81c
2000055a:	|  |  |  |  |  |     |  |      1e15      	subs	r5, r2, #0
2000055c:	|  |  |  |  |  |     |  |      6402      	str	r2, [r0, #64]	; 0x40
2000055e:	|  |  |  |  |  |     |  |      28ff      	cmp	r0, #255	; 0xff
20000560:	|  |  |  |  |  |     |  |      3eb9      	subs	r6, #185	; 0xb9
20000562:	|  |  |  |  |  |     |  |      e383      	b.n	20000c6c <sensors+0x10c>
20000564:	|  |  |  |  |  |     |  |      6402      	str	r2, [r0, #64]	; 0x40
20000566:	|  |  |  |  |  |     |  |      28ff      	cmp	r0, #255	; 0xff
20000568:	|  |  |  |  |  |     |  |      a8a7      	add	r0, sp, #668	; 0x29c
2000056a:	|  |  |  |  |  |     |  |      1e3f      	subs	r7, r7, #0
2000056c:	|  |  |  |  |  |     |  |      6402      	str	r2, [r0, #64]	; 0x40
2000056e:	|  |  |  |  |  |     |  |      28ff      	cmp	r0, #255	; 0xff
20000570:	|  |  |  |  |  |     |  |      0be7      	lsrs	r7, r4, #15
20000572:	|  |  |  |  |  |     |  |      196f      	adds	r7, r5, r5
20000574:	|  |  |  |  |  |     |  |      6402      	str	r2, [r0, #64]	; 0x40
20000576:	|  |  |  |  |  |     |  |      28ff      	cmp	r0, #255	; 0xff
20000578:	|  |  |  |  |  |     |  |      35cf      	adds	r5, #207	; 0xcf
2000057a:	|  |  |  |  |  \-----|--|----- e709      	b.n	20000390 <gs3_ow_nums+0x2c8>
2000057c:	|  |  |  |  |        |  |      6402      	str	r2, [r0, #64]	; 0x40
2000057e:	|  |  |  |  |        |  |      28ff      	cmp	r0, #255	; 0xff
20000580:	|  |  |  |  |        |  |      9e35      	ldr	r6, [sp, #212]	; 0xd4
20000582:	|  |  |  |  |        |  |      e388      	b.n	20000c96 <sensors+0x136>
20000584:	|  |  |  |  |        |  |      6402      	str	r2, [r0, #64]	; 0x40
20000586:	|  |  |  |  |        |  |  /-> 28ff      	cmp	r0, #255	; 0xff
20000588:	|  |  |  |  |     /--|--|--|-> 9e19      	ldr	r6, [sp, #100]	; 0x64
2000058a:	|  |  |  |  |     |  |  |  |   ffde 6402 	vraddhn.i32	d22, q7, q1
2000058e:	|  |  |  |  |     |  |  |  |   28ff      	cmp	r0, #255	; 0xff
20000590:	|  |  |  |  |     |  |  |  |   4260      	negs	r0, r4
20000592:	|  |  |  |  |     |  |  |  |   1e1d      	subs	r5, r3, #0
20000594:	|  |  |  |  |     |  |  |  |   6402      	str	r2, [r0, #64]	; 0x40
20000596:	|  |  |  |  |     |  |  |  |   28ff      	cmp	r0, #255	; 0xff
20000598:	|  |  |  |  |     |  |  |  |   ab63      	add	r3, sp, #396	; 0x18c
2000059a:	|  |  |  |  |     |  |  |  |   1e15      	subs	r5, r2, #0
2000059c:	|  |  |  |  |     |  |  |  |   6402      	str	r2, [r0, #64]	; 0x40
2000059e:	|  |  |  |  |     |  |  |  |   28ff      	cmp	r0, #255	; 0xff
200005a0:	|  |  |  |  |     |  |  |  |   9af4      	ldr	r2, [sp, #976]	; 0x3d0
200005a2:	|  |  |  |  |     |  |  |  |   f92f 6402 	vld3.8	{d6-d8}, [pc], r2
200005a6:	|  |  |  |  |     |  |  \--|-> 28ff      	cmp	r0, #255	; 0xff
200005a8:	|  |  |  |  |     |  |     \-- e7ed      	b.n	20000586 <gs3_ow_nums+0x4be>
200005aa:	|  |  |  |  |     |  |         ff84 6402 	vraddhn.i16	d6, q2, q1
200005ae:	|  |  |  |  |     |  |         28ff      	cmp	r0, #255	; 0xff
200005b0:	|  |  |  |  |     |  |         92f3      	str	r2, [sp, #972]	; 0x3cc
200005b2:	|  |  |  |  |     |  |         f976 6402 	ldr??.w	r6, [r6, <undefined>]
200005b6:	|  |  |  |  |     |  |         28ff      	cmp	r0, #255	; 0xff
200005b8:	|  |  |  |  |     |  |         6e07      	ldr	r7, [r0, #96]	; 0x60
200005ba:	|  |  |  |  |     |  |         e39e      	b.n	20000cfa <ow+0x4a>
200005bc:	|  |  |  |  |     |  |         6402      	str	r2, [r0, #64]	; 0x40
200005be:	|  |  |  |  |     |  |         28ff      	cmp	r0, #255	; 0xff
200005c0:	|  |  |  |  |     |  |         c31e      	stmia	r3!, {r1, r2, r3, r4}
200005c2:	|  |  |  |  |     |  |         1951      	adds	r1, r2, r5
200005c4:	|  |  |  |  |     |  |         6402      	str	r2, [r0, #64]	; 0x40
200005c6:	|  |  |  |  |     |  |         28ff      	cmp	r0, #255	; 0xff
200005c8:	|  |  |  |  |     |  |         7d31      	ldrb	r1, [r6, #20]
200005ca:	|  |  |  |  |     |  |         ffd5 6402 	vraddhn.i32	d22, <illegal reg q2.5>, q1
200005ce:	|  |  |  |  |     |  |         28ff      	cmp	r0, #255	; 0xff
200005d0:	|  |  |  |  |  /--|--|-------> 2005      	movs	r0, #5
200005d2:	|  |  |  |  |  |  |  |         f945 6402 	vst3.8	{d22-d24}, [r5], r2
200005d6:	|  |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200005d8:	|  |  |  |  |  |  |  |         c32b      	stmia	r3!, {r0, r1, r3, r5}
200005da:	|  |  |  |  |  |  |  |         c59a      	stmia	r5!, {r1, r3, r4, r7}
200005dc:	|  |  |  |  |  |  |  |         6402      	str	r2, [r0, #64]	; 0x40
200005de:	|  |  |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200005e0:	|  \--|--|--|--|--|--|-------- e5d6      	b.n	20000190 <gs3_ow_nums+0xc8>
200005e2:	|     |  |  |  |  |  |         e38c      	b.n	20000cfe <ow+0x4e>
200005e4:	|     |  |  |  |  |  |         6402      	str	r2, [r0, #64]	; 0x40
200005e6:	|     |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200005e8:	|     |  |  |  |  |  |         5a8d      	ldrh	r5, [r1, r2]
200005ea:	|     |  |  |  |  |  |         1e14      	subs	r4, r2, #0
200005ec:	|     |  |  |  |  |  |         6402      	str	r2, [r0, #64]	; 0x40
200005ee:	|     |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
200005f0:	|     |  |  |  |  |  |     /-- b10a      	cbz	r2, 200005f6 <gs3_ow_nums+0x52e>
200005f2:	|     |  |  |  |  |  |     |   c587      	stmia	r5!, {r0, r1, r2, r7}
200005f4:	|     |  |  |  |  |  |     |   6402      	str	r2, [r0, #64]	; 0x40
200005f6:	|     |  |  |  |  |  |     \-> 28ff      	cmp	r0, #255	; 0xff
200005f8:	|     |  |  |  |  |  |         0ab3      	lsrs	r3, r6, #10
200005fa:	|     |  |  |  |  |  |         ec66 6402 	cfstrd	mvd6, [r6], #-8
200005fe:	|     |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
20000600:	|     |  |  |  |  |  |         17f3      	asrs	r3, r6, #31
20000602:	|     |  |  |  |  |  |         eddb 6402 	cfldrd	mvd6, [r11, #8]
20000606:	|     |  |  |  |  |  |         28ff      	cmp	r0, #255	; 0xff
20000608:	|     |  |  |  |  |  |  /----- d75d      	bvc.n	200006c6 <gs3_ow_nums+0x5fe>
2000060a:	|     |  |  |  |  |  |  |      e381      	b.n	20000d10 <ow+0x60>
2000060c:	|     |  |  |  |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000060e:	|     |  |  |  |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000610:	|     |  |  |  |  |  |  |      6f6a      	ldr	r2, [r5, #116]	; 0x74
20000612:	|     |  |  \--|--|--|--|----- e709      	b.n	20000428 <gs3_ow_nums+0x360>
20000614:	|     |  |     |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
20000616:	|     |  |     |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000618:	|     |  |     |  |  |  |      f76d 1e1d 			; <UNDEFINED> instruction: 0xf76d1e1d
2000061c:	|     |  |     |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000061e:	|     |  |     |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000620:	|     |  |     |  |  |  |      9755      	str	r7, [sp, #340]	; 0x154
20000622:	|     |  |     |  |  |  |      196f      	adds	r7, r5, r5
20000624:	|     |  |     |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
20000626:	|     |  |     |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000628:	|     |  |     |  |  |  |      5b94      	ldrh	r4, [r2, r6]
2000062a:	|     |  |     |  |  |  |      e3d3      	b.n	20000dd4 <data_buffer+0x60>
2000062c:	|     |  |     |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000062e:	|     |  |     |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000630:	|     |  |     |  |  |  |      5b21      	ldrh	r1, [r4, r4]
20000632:	|     |  |     |  |  |  |      ed54 6402 	cfldrd	mvd6, [r4, #-8]
20000636:	|     |  |     |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000638:	|     |  |     |  |  |  |      0b9a      	lsrs	r2, r3, #14
2000063a:	|     |  |     |  |  |  |      c589      	stmia	r5!, {r0, r3, r7}
2000063c:	|     |  |     |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000063e:	|     |  |     |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000640:	|     |  |     |  |  |  |      8919      	ldrh	r1, [r3, #8]
20000642:	|     |  |     |  |  |  |      192c      	adds	r4, r5, r4
20000644:	|     |  |     |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
20000646:	|     |  |     |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000648:	|     |  |     |  |  |  |      a1f8      	add	r1, pc, #992	; (adr r1, 20000a2c <SX1268+0x64>)
2000064a:	|     |  |     |  |  |  |      192c      	adds	r4, r5, r4
2000064c:	|     |  |     |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000064e:	|     |  |     |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000650:	|     |  |     |  |  |  |      28af      	cmp	r0, #175	; 0xaf
20000652:	|     |  \-----|--|--|--|----- e709      	b.n	20000468 <gs3_ow_nums+0x3a0>
20000654:	|     |        |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
20000656:	|     |        |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000658:	|     |        |  |  |  |      18ea      	adds	r2, r5, r3
2000065a:	|     |        |  |  |  |      1840      	adds	r0, r0, r1
2000065c:	|     |        |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000065e:	|     |        |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000660:	|     |        |  |  |  |      3a96      	subs	r2, #150	; 0x96
20000662:	|     |        |  |  |  |      196d      	adds	r5, r5, r5
20000664:	|     |        |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
20000666:	|     |        |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000668:	|     |        |  |  |  |      1c3d      	adds	r5, r7, #0
2000066a:	|     |        |  |  |  |      ed7b 6402 	cfldrd	mvd6, [r11, #-8]!
2000066e:	|     |        |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000670:	|     |        |  |  |  |      9e6b      	ldr	r6, [sp, #428]	; 0x1ac
20000672:	|     |        |  |  |  |      ed8e 6402 	cfstrs	mvf6, [lr, #8]
20000676:	|     |        |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000678:	|     |        |  |  |  |      b81c      			; <UNDEFINED> instruction: 0xb81c
2000067a:	|     |        |  |  |  |      1e15      	subs	r5, r2, #0
2000067c:	|     |        |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000067e:	|     |        |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000680:	|     |        |  |  |  |      3eb9      	subs	r6, #185	; 0xb9
20000682:	|     |        |  |  |  |      e383      	b.n	20000d8c <data_buffer+0x18>
20000684:	|     |        |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
20000686:	|     |        |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000688:	|     |        |  |  |  |      a8a7      	add	r0, sp, #668	; 0x29c
2000068a:	|     |        |  |  |  |      1e3f      	subs	r7, r7, #0
2000068c:	|     |        |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000068e:	|     |        |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000690:	|     |        |  |  |  |      0be7      	lsrs	r7, r4, #15
20000692:	|     |        |  |  |  |      196f      	adds	r7, r5, r5
20000694:	|     |        |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
20000696:	|     |        |  |  |  |      28ff      	cmp	r0, #255	; 0xff
20000698:	|     |        |  |  |  |      35cf      	adds	r5, #207	; 0xcf
2000069a:	|     \--------|--|--|--|----- e709      	b.n	200004b0 <gs3_ow_nums+0x3e8>
2000069c:	|              |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
2000069e:	|              |  |  |  |      28ff      	cmp	r0, #255	; 0xff
200006a0:	|              |  |  |  |      9e35      	ldr	r6, [sp, #212]	; 0xd4
200006a2:	|              |  |  |  |      e388      	b.n	20000db6 <data_buffer+0x42>
200006a4:	|              |  |  |  |      6402      	str	r2, [r0, #64]	; 0x40
200006a6:	|              |  |  |  |  /-> 28ff      	cmp	r0, #255	; 0xff
200006a8:	|              |  |  |  |  |   9e19      	ldr	r6, [sp, #100]	; 0x64
200006aa:	|              |  |  |  |  |   ffde 6402 	vraddhn.i32	d22, q7, q1
200006ae:	|              |  |  |  |  |   28ff      	cmp	r0, #255	; 0xff
200006b0:	|              |  |  |  |  |   4260      	negs	r0, r4
200006b2:	|              |  |  |  |  |   1e1d      	subs	r5, r3, #0
200006b4:	|              |  |  |  |  |   6402      	str	r2, [r0, #64]	; 0x40
200006b6:	|              |  |  |  |  |   28ff      	cmp	r0, #255	; 0xff
200006b8:	|              |  |  |  |  |   ab63      	add	r3, sp, #396	; 0x18c
200006ba:	|              |  |  |  |  |   1e15      	subs	r5, r2, #0
200006bc:	|              |  |  |  |  |   6402      	str	r2, [r0, #64]	; 0x40
200006be:	|              |  |  |  |  |   28ff      	cmp	r0, #255	; 0xff
200006c0:	|              |  |  |  |  |   9af4      	ldr	r2, [sp, #976]	; 0x3d0
200006c2:	|              |  |  |  |  |   f92f 6402 	vld3.8	{d6-d8}, [pc], r2
200006c6:	|              |  |  |  \--|-> 28ff      	cmp	r0, #255	; 0xff
200006c8:	|              |  |  |     \-- e7ed      	b.n	200006a6 <gs3_ow_nums+0x5de>
200006ca:	|              |  |  |         ff84 6402 	vraddhn.i16	d6, q2, q1
200006ce:	|              |  |  |         28ff      	cmp	r0, #255	; 0xff
200006d0:	|              |  |  |         92f3      	str	r2, [sp, #972]	; 0x3cc
200006d2:	|              |  |  |         f976 6402 	ldr??.w	r6, [r6, <undefined>]
200006d6:	|              |  |  |         28ff      	cmp	r0, #255	; 0xff
200006d8:	|              |  |  |         6e07      	ldr	r7, [r0, #96]	; 0x60
200006da:	|              |  |  |         e39e      	b.n	20000e1a <data_buffer+0xa6>
200006dc:	|              |  |  |         6402      	str	r2, [r0, #64]	; 0x40
200006de:	|              |  |  |         28ff      	cmp	r0, #255	; 0xff
200006e0:	|              |  |  |         c31e      	stmia	r3!, {r1, r2, r3, r4}
200006e2:	|              |  |  |         1951      	adds	r1, r2, r5
200006e4:	|              |  |  |         6402      	str	r2, [r0, #64]	; 0x40
200006e6:	|              |  |  |         28ff      	cmp	r0, #255	; 0xff
200006e8:	|              |  |  |         7d31      	ldrb	r1, [r6, #20]
200006ea:	|              |  |  |         ffd5 6402 	vraddhn.i32	d22, <illegal reg q2.5>, q1
200006ee:	|              |  |  |         28ff      	cmp	r0, #255	; 0xff
200006f0:	|              |  |  |         2005      	movs	r0, #5
200006f2:	|              |  |  |         f945 6402 	vst3.8	{d22-d24}, [r5], r2
200006f6:	|              |  |  |         28ff      	cmp	r0, #255	; 0xff
200006f8:	|              |  |  |         c32b      	stmia	r3!, {r0, r1, r3, r5}
200006fa:	|              |  |  |         c59a      	stmia	r5!, {r1, r3, r4, r7}
200006fc:	|              |  |  |         6402      	str	r2, [r0, #64]	; 0x40
200006fe:	|              |  |  |         28ff      	cmp	r0, #255	; 0xff
20000700:	\--------------|--|--|-------- e5d6      	b.n	200002b0 <gs3_ow_nums+0x1e8>
20000702:	               |  |  |         e38c      	b.n	20000e1e <data_buffer+0xaa>
20000704:	               |  |  |         6402      	str	r2, [r0, #64]	; 0x40
20000706:	               |  |  |         28ff      	cmp	r0, #255	; 0xff
20000708:	               |  |  |         5a8d      	ldrh	r5, [r1, r2]
2000070a:	               |  |  |         1e14      	subs	r4, r2, #0
2000070c:	               |  |  |         6402      	str	r2, [r0, #64]	; 0x40
2000070e:	               |  |  |         28ff      	cmp	r0, #255	; 0xff
20000710:	               |  |  |     /-- b10a      	cbz	r2, 20000716 <gs3_ow_nums+0x64e>
20000712:	               |  |  |     |   c587      	stmia	r5!, {r0, r1, r2, r7}
20000714:	               |  |  |     |   6402      	str	r2, [r0, #64]	; 0x40
20000716:	               |  |  |     \-> 28ff      	cmp	r0, #255	; 0xff
20000718:	               |  |  |         0ab3      	lsrs	r3, r6, #10
2000071a:	               |  |  |         ec66 6402 	cfstrd	mvd6, [r6], #-8
2000071e:	               |  |  |         28ff      	cmp	r0, #255	; 0xff
20000720:	               |  |  |         17f3      	asrs	r3, r6, #31
20000722:	               |  |  |         eddb 6402 	cfldrd	mvd6, [r11, #8]
20000726:	               |  |  |         28ff      	cmp	r0, #255	; 0xff
20000728:	               |  |  |     /-- d75d      	bvc.n	200007e6 <gs3_ow_nums+0x71e>
2000072a:	               |  |  |     |   e381      	b.n	20000e30 <data_buffer+0xbc>
2000072c:	               |  |  |     |   6402      	str	r2, [r0, #64]	; 0x40
2000072e:	               |  |  |     |   28ff      	cmp	r0, #255	; 0xff
20000730:	               |  |  |     |   6f6a      	ldr	r2, [r5, #116]	; 0x74
20000732:	               |  |  \-----|-- e709      	b.n	20000548 <gs3_ow_nums+0x480>
20000734:	               |  |        |   6402      	str	r2, [r0, #64]	; 0x40
20000736:	               |  |        |   28ff      	cmp	r0, #255	; 0xff
20000738:	               |  |        |   f76d 1e1d 			; <UNDEFINED> instruction: 0xf76d1e1d
2000073c:	               |  |        |   6402      	str	r2, [r0, #64]	; 0x40
2000073e:	               |  |        |   28ff      	cmp	r0, #255	; 0xff
20000740:	               |  |        |   9755      	str	r7, [sp, #340]	; 0x154
20000742:	               |  |        |   196f      	adds	r7, r5, r5
20000744:	               |  |        |   6402      	str	r2, [r0, #64]	; 0x40
20000746:	               |  |        |   28ff      	cmp	r0, #255	; 0xff
20000748:	               |  |        |   5b94      	ldrh	r4, [r2, r6]
2000074a:	               |  |        |   e3d3      	b.n	20000ef4 <data_buffer+0x180>
2000074c:	               |  |        |   6402      	str	r2, [r0, #64]	; 0x40
2000074e:	               |  |        |   28ff      	cmp	r0, #255	; 0xff
20000750:	               |  |        |   5b21      	ldrh	r1, [r4, r4]
20000752:	               |  |        |   ed54 6402 	cfldrd	mvd6, [r4, #-8]
20000756:	               |  |        |   28ff      	cmp	r0, #255	; 0xff
20000758:	               |  |        |   0b9a      	lsrs	r2, r3, #14
2000075a:	               |  |        |   c589      	stmia	r5!, {r0, r3, r7}
2000075c:	               |  |        |   6402      	str	r2, [r0, #64]	; 0x40
2000075e:	               |  |        |   28ff      	cmp	r0, #255	; 0xff
20000760:	               |  |        |   8919      	ldrh	r1, [r3, #8]
20000762:	               |  |        |   192c      	adds	r4, r5, r4
20000764:	               |  |        |   6402      	str	r2, [r0, #64]	; 0x40
20000766:	               |  |        |   28ff      	cmp	r0, #255	; 0xff
20000768:	               |  |        |   a1f8      	add	r1, pc, #992	; (adr r1, 20000b4c <adc+0xc8>)
2000076a:	               |  |        |   192c      	adds	r4, r5, r4
2000076c:	               |  |        |   6402      	str	r2, [r0, #64]	; 0x40
2000076e:	               |  |        |   28ff      	cmp	r0, #255	; 0xff
20000770:	               |  |        |   28af      	cmp	r0, #175	; 0xaf
20000772:	               |  \--------|-- e709      	b.n	20000588 <gs3_ow_nums+0x4c0>
20000774:	               |           |   6402      	str	r2, [r0, #64]	; 0x40
20000776:	               |           |   28ff      	cmp	r0, #255	; 0xff
20000778:	               |           |   18ea      	adds	r2, r5, r3
2000077a:	               |           |   1840      	adds	r0, r0, r1
2000077c:	               |           |   6402      	str	r2, [r0, #64]	; 0x40
2000077e:	               |           |   28ff      	cmp	r0, #255	; 0xff
20000780:	               |           |   3a96      	subs	r2, #150	; 0x96
20000782:	               |           |   196d      	adds	r5, r5, r5
20000784:	               |           |   6402      	str	r2, [r0, #64]	; 0x40
20000786:	               |           |   28ff      	cmp	r0, #255	; 0xff
20000788:	               |           |   1c3d      	adds	r5, r7, #0
2000078a:	               |           |   ed7b 6402 	cfldrd	mvd6, [r11, #-8]!
2000078e:	               |           |   28ff      	cmp	r0, #255	; 0xff
20000790:	               |           |   9e6b      	ldr	r6, [sp, #428]	; 0x1ac
20000792:	               |           |   ed8e 6402 	cfstrs	mvf6, [lr, #8]
20000796:	               |           |   28ff      	cmp	r0, #255	; 0xff
20000798:	               |           |   b81c      			; <UNDEFINED> instruction: 0xb81c
2000079a:	               |           |   1e15      	subs	r5, r2, #0
2000079c:	               |           |   6402      	str	r2, [r0, #64]	; 0x40
2000079e:	               |           |   28ff      	cmp	r0, #255	; 0xff
200007a0:	               |           |   3eb9      	subs	r6, #185	; 0xb9
200007a2:	               |           |   e383      	b.n	20000eac <data_buffer+0x138>
200007a4:	               |           |   6402      	str	r2, [r0, #64]	; 0x40
200007a6:	               |           |   28ff      	cmp	r0, #255	; 0xff
200007a8:	               |           |   a8a7      	add	r0, sp, #668	; 0x29c
200007aa:	               |           |   1e3f      	subs	r7, r7, #0
200007ac:	               |           |   6402      	str	r2, [r0, #64]	; 0x40
200007ae:	               |           |   28ff      	cmp	r0, #255	; 0xff
200007b0:	               |           |   0be7      	lsrs	r7, r4, #15
200007b2:	               |           |   196f      	adds	r7, r5, r5
200007b4:	               |           |   6402      	str	r2, [r0, #64]	; 0x40
200007b6:	               |           |   28ff      	cmp	r0, #255	; 0xff
200007b8:	               |           |   35cf      	adds	r5, #207	; 0xcf
200007ba:	               \-----------|-- e709      	b.n	200005d0 <gs3_ow_nums+0x508>
200007bc:	                           |   6402      	str	r2, [r0, #64]	; 0x40
200007be:	                           |   28ff      	cmp	r0, #255	; 0xff
200007c0:	                           |   9e35      	ldr	r6, [sp, #212]	; 0xd4
200007c2:	                           |   e388      	b.n	20000ed6 <data_buffer+0x162>
200007c4:	                           |   6402      	str	r2, [r0, #64]	; 0x40
200007c6:	                           |   28ff      	cmp	r0, #255	; 0xff
200007c8:	                           |   9e19      	ldr	r6, [sp, #100]	; 0x64
200007ca:	                           |   ffde 6402 	vraddhn.i32	d22, q7, q1
200007ce:	                           |   28ff      	cmp	r0, #255	; 0xff
200007d0:	                           |   4260      	negs	r0, r4
200007d2:	                           |   1e1d      	subs	r5, r3, #0
200007d4:	                           |   6402      	str	r2, [r0, #64]	; 0x40
200007d6:	                           |   28ff      	cmp	r0, #255	; 0xff
200007d8:	                           |   ab63      	add	r3, sp, #396	; 0x18c
200007da:	                           |   1e15      	subs	r5, r2, #0
200007dc:	                           |   6402      	str	r2, [r0, #64]	; 0x40
200007de:	                           |   28ff      	cmp	r0, #255	; 0xff
200007e0:	                           |   9af4      	ldr	r2, [sp, #976]	; 0x3d0
200007e2:	                           |   f92f 6402 	vld3.8	{d6-d8}, [pc], r2
200007e6:	                           \-> 28ff      	cmp	r0, #255	; 0xff

200007e8 <_impure_ptr>:
200007e8:	07ec      	lsls	r4, r5, #31
200007ea:	2000      	movs	r0, #0

200007ec <impure_data>:
200007ec:	0000      	movs	r0, r0
200007ee:	0000      	movs	r0, r0
200007f0:	b360      	cbz	r0, 2000084c <_edata>
200007f2:	0800      	lsrs	r0, r0, #32
200007f4:	b380      	cbz	r0, 20000858 <object.0+0x4>
200007f6:	0800      	lsrs	r0, r0, #32
200007f8:	b340      	cbz	r0, 2000084c <_edata>
200007fa:	0800      	lsrs	r0, r0, #32
	...

Disassembly of section .bss:

20000850 <__bss_start__>:
20000850:	0000      	movs	r0, r0
	...

20000854 <object.0>:
	...

2000086c <uart_receive_data>:
	...

2000086d <SYSTEM_init_status>:
	...

2000086e <SYSTEM_I2C_error_flag>:
	...

20000870 <SYSTEM_I2C_error_counter>:
//#include "main.h"

// --------- System condition -----------//
ErrorStatus SYSTEM_init_status;
ErrorStatus SYSTEM_I2C_error_flag;
uint32_t SYSTEM_I2C_error_counter;
20000870:	0000      	movs	r0, r0
	...

20000874 <fifo>:
	...

200008b8 <long_cmd_fifo>:
	...

200008fc <sensors_data_rx_fifo>:
	...

2000093e <FIFO_flag>:
	...

20000940 <battary_voltage>:
FIFO(64) long_cmd_fifo;
FIFO(64) sensors_data_rx_fifo;
uint8_t FIFO_flag;

// --------- ADC -----------//
volatile float battary_voltage;
20000940:	0000      	movs	r0, r0
	...

20000944 <TIM2_finished>:
	...

20000945 <TIM7_finished>:
//===========================//

// --------- TIMERS -----------//
uint8_t TIM2_finished; // Global flag that indicates status of timer. 0 - still counting; 1 - finished
uint8_t TIM7_finished; // Global flag that indicates status of timer. 0 - still counting; 1 - finished
20000945:	0000      	movs	r0, r0
	...

20000948 <sim7000g>:
	...

200009c8 <SX1268>:
	...

20000a84 <adc>:
	...

20000b60 <sensors>:
	...

20000cb0 <ow>:
	...

20000d74 <data_buffer>:
	...

20001074 <buffer_ptr>:
uint16_t buffer_ptr;
20001074:	0000      	movs	r0, r0
	...

20001078 <gs2_buffer>:
	...

20001178 <gs2_buf_ptr>:
uint8_t gs2_buf_ptr;
20001178:	0000      	movs	r0, r0
	...

2000117c <gs3_buffer>:
	...

2000127c <gs3_buf_ptr>:
uint8_t gs3_buf_ptr;
2000127c:	0000      	movs	r0, r0
	...

20001280 <current_rtc>:
	...

20001288 <WAKEUP_PERIOD_SEC>:
uint16_t WAKEUP_PERIOD_SEC;
20001288:	0000      	movs	r0, r0
	...

2000128c <handler>:
	...

200027b8 <current_time>:
	...

20003c08 <temp.0>:
	...

20003c14 <global_freq>:
int global_freq; //глабальная переменная для значения частоты, передаваемой в функцию инициализации. Данное значение надо как-то передать функции
20003c14:	0000      	movs	r0, r0
	...

20003c18 <sd_last_result>:


// Exported variables
extern SDCard_TypeDef SDCard;        // SD card parameters

volatile SDResult sd_last_result;
20003c18:	0000      	movs	r0, r0
	...

20003c1c <SDCard>:
	...

20003c74 <count>:
volatile static uint32_t count = 0;
20003c74:	0000      	movs	r0, r0
	...

20003c78 <delay_count>:
volatile static uint32_t delay_count = 0;
20003c78:	0000      	movs	r0, r0
	...

20003c7c <flag.1>:
	...

20003c84 <counter.0>:
	...

20003ca4 <trigger.0>:
20003ca4:	0000      	movs	r0, r0
	...

20003ca8 <BPB_BytsPerSec>:
	...

20003caa <BPB_SecPerClus>:
	...

20003cac <BPB_RsvdSecCnt>:
	...

20003cae <BPB_NumFATs>:
	...

20003cb0 <BPB_FATSz32>:
#define BPB_RootClus_offset			44
uint16_t BPB_BytsPerSec;	//11
uint8_t BPB_SecPerClus;		//13
uint16_t BPB_RsvdSecCnt;	//14
uint8_t BPB_NumFATs;		//16
uint32_t BPB_FATSz32;		//36
20003cb0:	0000      	movs	r0, r0
	...

20003cb4 <BPB_RootClus>:
uint32_t BPB_RootClus;		//44
20003cb4:	0000      	movs	r0, r0
	...

20003cb8 <root_dir_addr>:

uint32_t root_dir_addr;
20003cb8:	0000      	movs	r0, r0
	...

20003cbc <data_file_addr>:
uint32_t data_file_addr;
20003cbc:	0000      	movs	r0, r0
	...

20003cc0 <file_addr>:
uint32_t file_addr;
20003cc0:	0000      	movs	r0, r0
	...

20003cc4 <fat_table_addr>:
uint32_t fat_table_addr;
20003cc4:	0000      	movs	r0, r0
	...

20003cc8 <sd_read_buf>:
	...

20005314 <DUMMY_PTR>:
uint8_t *DUMMY_PTR = 0;
20005314:	0000      	movs	r0, r0
	...

20005318 <__malloc_free_list>:
20005318:	0000      	movs	r0, r0
	...

2000531c <__malloc_sbrk_start>:
2000531c:	0000      	movs	r0, r0
	...

20005320 <errno>:
20005320:	0000      	movs	r0, r0
	...

20005324 <__lock___arc4random_mutex>:
	...

20005325 <__lock___at_quick_exit_mutex>:
	...

20005326 <__lock___atexit_recursive_mutex>:
	...

20005327 <__lock___dd_hash_mutex>:
	...

20005328 <__lock___env_recursive_mutex>:
	...

20005329 <__lock___malloc_recursive_mutex>:
	...

2000532a <__lock___sfp_recursive_mutex>:
	...

2000532b <__lock___sinit_recursive_mutex>:
	...

2000532c <__lock___tz_mutex>:
2000532c:	0000      	movs	r0, r0
	...

20005330 <heap_end.0>:
20005330:	0000      	movs	r0, r0
	...

Disassembly of section ._user_heap_stack:

20005334 <end-0x4>:
20005334:	0000      	movs	r0, r0
	...

20005338 <end>:
	...
